import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
		provideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, context: vscode.CompletionContext) {
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			if (position.character !== 0 && !linePrefix.endsWith('')) {
				return undefined;
			}

			const results:vscode.CompletionItem[] = [];
			
			const appearanceCompletion = new vscode.CompletionItem('appearance', vscode.CompletionItemKind.Class);
			appearanceCompletion.insertText = new vscode.SnippetString("appearance.");
			appearanceCompletion.documentation = new vscode.MarkdownString("");
			appearanceCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(appearanceCompletion);
			
			const btCompletion = new vscode.CompletionItem('bt', vscode.CompletionItemKind.Class);
			btCompletion.insertText = new vscode.SnippetString("bt.");
			btCompletion.documentation = new vscode.MarkdownString("");
			btCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(btCompletion);
			
			const classCompletion = new vscode.CompletionItem('class', vscode.CompletionItemKind.Class);
			classCompletion.insertText = new vscode.SnippetString("class.");
			classCompletion.documentation = new vscode.MarkdownString("");
			classCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(classCompletion);
			
			const clientCompletion = new vscode.CompletionItem('client', vscode.CompletionItemKind.Class);
			clientCompletion.insertText = new vscode.SnippetString("client.");
			clientCompletion.documentation = new vscode.MarkdownString("");
			clientCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(clientCompletion);
			
			const clientlistCompletion = new vscode.CompletionItem('client_list', vscode.CompletionItemKind.Class);
			clientlistCompletion.insertText = new vscode.SnippetString("client_list.");
			clientlistCompletion.documentation = new vscode.MarkdownString("");
			clientlistCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(clientlistCompletion);
			
			const clientversionCompletion = new vscode.CompletionItem('client_version', vscode.CompletionItemKind.Class);
			clientversionCompletion.insertText = new vscode.SnippetString("client_version.");
			clientversionCompletion.documentation = new vscode.MarkdownString("");
			clientversionCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(clientversionCompletion);
			
			const corpseCompletion = new vscode.CompletionItem('corpse', vscode.CompletionItemKind.Class);
			corpseCompletion.insertText = new vscode.SnippetString("corpse.");
			corpseCompletion.documentation = new vscode.MarkdownString("");
			corpseCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(corpseCompletion);
			
			const corpselistCompletion = new vscode.CompletionItem('corpse_list', vscode.CompletionItemKind.Class);
			corpselistCompletion.insertText = new vscode.SnippetString("corpse_list.");
			corpselistCompletion.documentation = new vscode.MarkdownString("");
			corpselistCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(corpselistCompletion);
			
			const doorCompletion = new vscode.CompletionItem('door', vscode.CompletionItemKind.Class);
			doorCompletion.insertText = new vscode.SnippetString("door.");
			doorCompletion.documentation = new vscode.MarkdownString("");
			doorCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(doorCompletion);
			
			const doorlistCompletion = new vscode.CompletionItem('door_list', vscode.CompletionItemKind.Class);
			doorlistCompletion.insertText = new vscode.SnippetString("door_list.");
			doorlistCompletion.documentation = new vscode.MarkdownString("");
			doorlistCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(doorlistCompletion);
			
			const entityCompletion = new vscode.CompletionItem('entity', vscode.CompletionItemKind.Class);
			entityCompletion.insertText = new vscode.SnippetString("entity.");
			entityCompletion.documentation = new vscode.MarkdownString("");
			entityCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(entityCompletion);
			
			const entitylistCompletion = new vscode.CompletionItem('entity_list', vscode.CompletionItemKind.Class);
			entitylistCompletion.insertText = new vscode.SnippetString("entity_list.");
			entitylistCompletion.documentation = new vscode.MarkdownString("");
			entitylistCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(entitylistCompletion);
			
			const eqCompletion = new vscode.CompletionItem('eq', vscode.CompletionItemKind.Class);
			eqCompletion.insertText = new vscode.SnippetString("eq.");
			eqCompletion.documentation = new vscode.MarkdownString("");
			eqCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(eqCompletion);
			
			const eventCompletion = new vscode.CompletionItem('event', vscode.CompletionItemKind.Class);
			eventCompletion.insertText = new vscode.SnippetString("event.");
			eventCompletion.documentation = new vscode.MarkdownString("");
			eventCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(eventCompletion);
			
			const factionCompletion = new vscode.CompletionItem('faction', vscode.CompletionItemKind.Class);
			factionCompletion.insertText = new vscode.SnippetString("faction.");
			factionCompletion.documentation = new vscode.MarkdownString("");
			factionCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(factionCompletion);
			
			const filterCompletion = new vscode.CompletionItem('filter', vscode.CompletionItemKind.Class);
			filterCompletion.insertText = new vscode.SnippetString("filter.");
			filterCompletion.documentation = new vscode.MarkdownString("");
			filterCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(filterCompletion);
			
			const groupCompletion = new vscode.CompletionItem('group', vscode.CompletionItemKind.Class);
			groupCompletion.insertText = new vscode.SnippetString("group.");
			groupCompletion.documentation = new vscode.MarkdownString("");
			groupCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(groupCompletion);
			
			const hatelistCompletion = new vscode.CompletionItem('hate_list', vscode.CompletionItemKind.Class);
			hatelistCompletion.insertText = new vscode.SnippetString("hate_list.");
			hatelistCompletion.documentation = new vscode.MarkdownString("");
			hatelistCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(hatelistCompletion);
			
			const inventoryCompletion = new vscode.CompletionItem('inventory', vscode.CompletionItemKind.Class);
			inventoryCompletion.insertText = new vscode.SnippetString("inventory.");
			inventoryCompletion.documentation = new vscode.MarkdownString("");
			inventoryCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(inventoryCompletion);
			
			const inventorywhereCompletion = new vscode.CompletionItem('inventory_where', vscode.CompletionItemKind.Class);
			inventorywhereCompletion.insertText = new vscode.SnippetString("inventory_where.");
			inventorywhereCompletion.documentation = new vscode.MarkdownString("");
			inventorywhereCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(inventorywhereCompletion);
			
			const itemCompletion = new vscode.CompletionItem('item', vscode.CompletionItemKind.Class);
			itemCompletion.insertText = new vscode.SnippetString("item.");
			itemCompletion.documentation = new vscode.MarkdownString("");
			itemCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(itemCompletion);
			
			const iteminstCompletion = new vscode.CompletionItem('iteminst', vscode.CompletionItemKind.Class);
			iteminstCompletion.insertText = new vscode.SnippetString("iteminst.");
			iteminstCompletion.documentation = new vscode.MarkdownString("");
			iteminstCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(iteminstCompletion);
			
			const journalmodeCompletion = new vscode.CompletionItem('journal_mode', vscode.CompletionItemKind.Class);
			journalmodeCompletion.insertText = new vscode.SnippetString("journal_mode.");
			journalmodeCompletion.documentation = new vscode.MarkdownString("");
			journalmodeCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(journalmodeCompletion);
			
			const materialCompletion = new vscode.CompletionItem('material', vscode.CompletionItemKind.Class);
			materialCompletion.insertText = new vscode.SnippetString("material.");
			materialCompletion.documentation = new vscode.MarkdownString("");
			materialCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(materialCompletion);
			
			const mobCompletion = new vscode.CompletionItem('mob', vscode.CompletionItemKind.Class);
			mobCompletion.insertText = new vscode.SnippetString("mob.");
			mobCompletion.documentation = new vscode.MarkdownString("");
			mobCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(mobCompletion);
			
			const moblistCompletion = new vscode.CompletionItem('mob_list', vscode.CompletionItemKind.Class);
			moblistCompletion.insertText = new vscode.SnippetString("mob_list.");
			moblistCompletion.documentation = new vscode.MarkdownString("");
			moblistCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(moblistCompletion);
			
			const mtCompletion = new vscode.CompletionItem('mt', vscode.CompletionItemKind.Class);
			mtCompletion.insertText = new vscode.SnippetString("mt.");
			mtCompletion.documentation = new vscode.MarkdownString("");
			mtCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(mtCompletion);
			
			const npcCompletion = new vscode.CompletionItem('npc', vscode.CompletionItemKind.Class);
			npcCompletion.insertText = new vscode.SnippetString("npc.");
			npcCompletion.documentation = new vscode.MarkdownString("");
			npcCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(npcCompletion);
			
			const npclistCompletion = new vscode.CompletionItem('npc_list', vscode.CompletionItemKind.Class);
			npclistCompletion.insertText = new vscode.SnippetString("npc_list.");
			npclistCompletion.documentation = new vscode.MarkdownString("");
			npclistCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(npclistCompletion);
			
			const objectCompletion = new vscode.CompletionItem('object', vscode.CompletionItemKind.Class);
			objectCompletion.insertText = new vscode.SnippetString("object.");
			objectCompletion.documentation = new vscode.MarkdownString("");
			objectCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(objectCompletion);
			
			const objectlistCompletion = new vscode.CompletionItem('object_list', vscode.CompletionItemKind.Class);
			objectlistCompletion.insertText = new vscode.SnippetString("object_list.");
			objectlistCompletion.documentation = new vscode.MarkdownString("");
			objectlistCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(objectlistCompletion);
			
			const opcodeCompletion = new vscode.CompletionItem('opcode', vscode.CompletionItemKind.Class);
			opcodeCompletion.insertText = new vscode.SnippetString("opcode.");
			opcodeCompletion.documentation = new vscode.MarkdownString("");
			opcodeCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(opcodeCompletion);
			
			const packetCompletion = new vscode.CompletionItem('packet', vscode.CompletionItemKind.Class);
			packetCompletion.insertText = new vscode.SnippetString("packet.");
			packetCompletion.documentation = new vscode.MarkdownString("");
			packetCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(packetCompletion);
			
			const raidCompletion = new vscode.CompletionItem('raid', vscode.CompletionItemKind.Class);
			raidCompletion.insertText = new vscode.SnippetString("raid.");
			raidCompletion.documentation = new vscode.MarkdownString("");
			raidCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(raidCompletion);
			
			const randomCompletion = new vscode.CompletionItem('random', vscode.CompletionItemKind.Class);
			randomCompletion.insertText = new vscode.SnippetString("random.");
			randomCompletion.documentation = new vscode.MarkdownString("");
			randomCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(randomCompletion);
			
			const ruleCompletion = new vscode.CompletionItem('rule', vscode.CompletionItemKind.Class);
			ruleCompletion.insertText = new vscode.SnippetString("rule.");
			ruleCompletion.documentation = new vscode.MarkdownString("");
			ruleCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(ruleCompletion);
			
			const rulebCompletion = new vscode.CompletionItem('rule_b', vscode.CompletionItemKind.Class);
			rulebCompletion.insertText = new vscode.SnippetString("rule_b.");
			rulebCompletion.documentation = new vscode.MarkdownString("");
			rulebCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(rulebCompletion);
			
			const ruleiCompletion = new vscode.CompletionItem('rule_i', vscode.CompletionItemKind.Class);
			ruleiCompletion.insertText = new vscode.SnippetString("rule_i.");
			ruleiCompletion.documentation = new vscode.MarkdownString("");
			ruleiCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(ruleiCompletion);
			
			const rulerCompletion = new vscode.CompletionItem('rule_r', vscode.CompletionItemKind.Class);
			rulerCompletion.insertText = new vscode.SnippetString("rule_r.");
			rulerCompletion.documentation = new vscode.MarkdownString("");
			rulerCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(rulerCompletion);
			
			const skillCompletion = new vscode.CompletionItem('skill', vscode.CompletionItemKind.Class);
			skillCompletion.insertText = new vscode.SnippetString("skill.");
			skillCompletion.documentation = new vscode.MarkdownString("");
			skillCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(skillCompletion);
			
			const slotCompletion = new vscode.CompletionItem('slot', vscode.CompletionItemKind.Class);
			slotCompletion.insertText = new vscode.SnippetString("slot.");
			slotCompletion.documentation = new vscode.MarkdownString("");
			slotCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(slotCompletion);
			
			const spawnCompletion = new vscode.CompletionItem('spawn', vscode.CompletionItemKind.Class);
			spawnCompletion.insertText = new vscode.SnippetString("spawn.");
			spawnCompletion.documentation = new vscode.MarkdownString("");
			spawnCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(spawnCompletion);
			
			const spawnlistCompletion = new vscode.CompletionItem('spawn_list', vscode.CompletionItemKind.Class);
			spawnlistCompletion.insertText = new vscode.SnippetString("spawn_list.");
			spawnlistCompletion.documentation = new vscode.MarkdownString("");
			spawnlistCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(spawnlistCompletion);
			
			const speakmodeCompletion = new vscode.CompletionItem('speak_mode', vscode.CompletionItemKind.Class);
			speakmodeCompletion.insertText = new vscode.SnippetString("speak_mode.");
			speakmodeCompletion.documentation = new vscode.MarkdownString("");
			speakmodeCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(speakmodeCompletion);
			
			const specialabilityCompletion = new vscode.CompletionItem('special_ability', vscode.CompletionItemKind.Class);
			specialabilityCompletion.insertText = new vscode.SnippetString("special_ability.");
			specialabilityCompletion.documentation = new vscode.MarkdownString("");
			specialabilityCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(specialabilityCompletion);
			
			const spellCompletion = new vscode.CompletionItem('spell', vscode.CompletionItemKind.Class);
			spellCompletion.insertText = new vscode.SnippetString("spell.");
			spellCompletion.documentation = new vscode.MarkdownString("");
			spellCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };
			results.push(spellCompletion);
			
			return results;
		}
	}));
	
	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				if (!linePrefix.endsWith('e.other:')) {
					return undefined;
				}

				const say = new vscode.CompletionItem('Say', vscode.CompletionItemKind.Function);
				say.insertText = new vscode.SnippetString("Say(${1|message|})");
				say.documentation = new vscode.MarkdownString("Say a message");
				return [
					say
				];
			}
		}, ':' // triggered whenever a ':' is being typed
	));


	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('appearance.')) {
					return undefined;
				}
				
				
				const appearanceCrouching = new vscode.CompletionItem('Crouching', vscode.CompletionItemKind.Property);
				
				appearanceCrouching.detail = "appearance.Crouching";
				appearanceCrouching.insertText = new vscode.SnippetString('Crouching');
				appearanceCrouching.documentation = new vscode.MarkdownString("Makes an NPC appear crouching");
				results.push(appearanceCrouching);				
				
				const appearanceDead = new vscode.CompletionItem('Dead', vscode.CompletionItemKind.Property);
				
				appearanceDead.detail = "appearance.Dead";
				appearanceDead.insertText = new vscode.SnippetString('Dead');
				appearanceDead.documentation = new vscode.MarkdownString("Makes an NPC appear dead");
				results.push(appearanceDead);				
				
				const appearanceLooting = new vscode.CompletionItem('Looting', vscode.CompletionItemKind.Property);
				
				appearanceLooting.detail = "appearance.Looting";
				appearanceLooting.insertText = new vscode.SnippetString('Looting');
				appearanceLooting.documentation = new vscode.MarkdownString("Makes an NPC appear looting, crouching down");
				results.push(appearanceLooting);				
				
				const appearanceSitting = new vscode.CompletionItem('Sitting', vscode.CompletionItemKind.Property);
				
				appearanceSitting.detail = "appearance.Sitting";
				appearanceSitting.insertText = new vscode.SnippetString('Sitting');
				appearanceSitting.documentation = new vscode.MarkdownString("Makes an NPC appear sitting");
				results.push(appearanceSitting);				
				
				const appearanceStanding = new vscode.CompletionItem('Standing', vscode.CompletionItemKind.Property);
				
				appearanceStanding.detail = "appearance.Standing";
				appearanceStanding.insertText = new vscode.SnippetString('Standing');
				appearanceStanding.documentation = new vscode.MarkdownString("Makes an NPC animate standing idle");
				results.push(appearanceStanding);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('bt.')) {
					return undefined;
				}
				
				
				const btAnimal = new vscode.CompletionItem('Animal', vscode.CompletionItemKind.Property);
				
				btAnimal.detail = "bt.Animal";
				btAnimal.insertText = new vscode.SnippetString('Animal');
				btAnimal.documentation = new vscode.MarkdownString("");
				results.push(btAnimal);				
				
				const btAtenhaRa = new vscode.CompletionItem('Atenha_Ra', vscode.CompletionItemKind.Property);
				
				btAtenhaRa.detail = "bt.Atenha_Ra";
				btAtenhaRa.insertText = new vscode.SnippetString('Atenha_Ra');
				btAtenhaRa.documentation = new vscode.MarkdownString("");
				results.push(btAtenhaRa);				
				
				const btBoxes = new vscode.CompletionItem('Boxes', vscode.CompletionItemKind.Property);
				
				btBoxes.detail = "bt.Boxes";
				btBoxes.insertText = new vscode.SnippetString('Boxes');
				btBoxes.documentation = new vscode.MarkdownString("");
				results.push(btBoxes);				
				
				const btConstruct = new vscode.CompletionItem('Construct', vscode.CompletionItemKind.Property);
				
				btConstruct.detail = "bt.Construct";
				btConstruct.insertText = new vscode.SnippetString('Construct');
				btConstruct.documentation = new vscode.MarkdownString("");
				results.push(btConstruct);				
				
				const btDragon = new vscode.CompletionItem('Dragon', vscode.CompletionItemKind.Property);
				
				btDragon.detail = "bt.Dragon";
				btDragon.insertText = new vscode.SnippetString('Dragon');
				btDragon.documentation = new vscode.MarkdownString("");
				results.push(btDragon);				
				
				const btDragon3 = new vscode.CompletionItem('Dragon3', vscode.CompletionItemKind.Property);
				
				btDragon3.detail = "bt.Dragon3";
				btDragon3.insertText = new vscode.SnippetString('Dragon3');
				btDragon3.documentation = new vscode.MarkdownString("");
				results.push(btDragon3);				
				
				const btDrazNurakk = new vscode.CompletionItem('Draz_Nurakk', vscode.CompletionItemKind.Property);
				
				btDrazNurakk.detail = "bt.Draz_Nurakk";
				btDrazNurakk.insertText = new vscode.SnippetString('Draz_Nurakk');
				btDrazNurakk.documentation = new vscode.MarkdownString("");
				results.push(btDrazNurakk);				
				
				const btExtraplanar = new vscode.CompletionItem('Extraplanar', vscode.CompletionItemKind.Property);
				
				btExtraplanar.detail = "bt.Extraplanar";
				btExtraplanar.insertText = new vscode.SnippetString('Extraplanar');
				btExtraplanar.documentation = new vscode.MarkdownString("");
				results.push(btExtraplanar);				
				
				const btGiant = new vscode.CompletionItem('Giant', vscode.CompletionItemKind.Property);
				
				btGiant.detail = "bt.Giant";
				btGiant.insertText = new vscode.SnippetString('Giant');
				btGiant.documentation = new vscode.MarkdownString("");
				results.push(btGiant);				
				
				const btGreaterAkheva = new vscode.CompletionItem('Greater_Akheva', vscode.CompletionItemKind.Property);
				
				btGreaterAkheva.detail = "bt.Greater_Akheva";
				btGreaterAkheva.insertText = new vscode.SnippetString('Greater_Akheva');
				btGreaterAkheva.documentation = new vscode.MarkdownString("");
				results.push(btGreaterAkheva);				
				
				const btHumanoid = new vscode.CompletionItem('Humanoid', vscode.CompletionItemKind.Property);
				
				btHumanoid.detail = "bt.Humanoid";
				btHumanoid.insertText = new vscode.SnippetString('Humanoid');
				btHumanoid.documentation = new vscode.MarkdownString("");
				results.push(btHumanoid);				
				
				const btInsect = new vscode.CompletionItem('Insect', vscode.CompletionItemKind.Property);
				
				btInsect.detail = "bt.Insect";
				btInsect.insertText = new vscode.SnippetString('Insect');
				btInsect.documentation = new vscode.MarkdownString("");
				results.push(btInsect);				
				
				const btInvisMan = new vscode.CompletionItem('InvisMan', vscode.CompletionItemKind.Property);
				
				btInvisMan.detail = "bt.InvisMan";
				btInvisMan.insertText = new vscode.SnippetString('InvisMan');
				btInvisMan.documentation = new vscode.MarkdownString("");
				results.push(btInvisMan);				
				
				const btKhatiSha = new vscode.CompletionItem('Khati_Sha', vscode.CompletionItemKind.Property);
				
				btKhatiSha.detail = "bt.Khati_Sha";
				btKhatiSha.insertText = new vscode.SnippetString('Khati_Sha');
				btKhatiSha.documentation = new vscode.MarkdownString("");
				results.push(btKhatiSha);				
				
				const btLuggald = new vscode.CompletionItem('Luggald', vscode.CompletionItemKind.Property);
				
				btLuggald.detail = "bt.Luggald";
				btLuggald.insertText = new vscode.SnippetString('Luggald');
				btLuggald.documentation = new vscode.MarkdownString("");
				results.push(btLuggald);				
				
				const btLycanthrope = new vscode.CompletionItem('Lycanthrope', vscode.CompletionItemKind.Property);
				
				btLycanthrope.detail = "bt.Lycanthrope";
				btLycanthrope.insertText = new vscode.SnippetString('Lycanthrope');
				btLycanthrope.documentation = new vscode.MarkdownString("");
				results.push(btLycanthrope);				
				
				const btMagical = new vscode.CompletionItem('Magical', vscode.CompletionItemKind.Property);
				
				btMagical.detail = "bt.Magical";
				btMagical.insertText = new vscode.SnippetString('Magical');
				btMagical.documentation = new vscode.MarkdownString("");
				results.push(btMagical);				
				
				const btMonster = new vscode.CompletionItem('Monster', vscode.CompletionItemKind.Property);
				
				btMonster.detail = "bt.Monster";
				btMonster.insertText = new vscode.SnippetString('Monster');
				btMonster.documentation = new vscode.MarkdownString("");
				results.push(btMonster);				
				
				const btMuramite = new vscode.CompletionItem('Muramite', vscode.CompletionItemKind.Property);
				
				btMuramite.detail = "bt.Muramite";
				btMuramite.insertText = new vscode.SnippetString('Muramite');
				btMuramite.documentation = new vscode.MarkdownString("");
				results.push(btMuramite);				
				
				const btNoTarget = new vscode.CompletionItem('NoTarget', vscode.CompletionItemKind.Property);
				
				btNoTarget.detail = "bt.NoTarget";
				btNoTarget.insertText = new vscode.SnippetString('NoTarget');
				btNoTarget.documentation = new vscode.MarkdownString("");
				results.push(btNoTarget);				
				
				const btNoTarget2 = new vscode.CompletionItem('NoTarget2', vscode.CompletionItemKind.Property);
				
				btNoTarget2.detail = "bt.NoTarget2";
				btNoTarget2.insertText = new vscode.SnippetString('NoTarget2');
				btNoTarget2.documentation = new vscode.MarkdownString("");
				results.push(btNoTarget2);				
				
				const btPlant = new vscode.CompletionItem('Plant', vscode.CompletionItemKind.Property);
				
				btPlant.detail = "bt.Plant";
				btPlant.insertText = new vscode.SnippetString('Plant');
				btPlant.documentation = new vscode.MarkdownString("");
				results.push(btPlant);				
				
				const btRaidGiant = new vscode.CompletionItem('RaidGiant', vscode.CompletionItemKind.Property);
				
				btRaidGiant.detail = "bt.RaidGiant";
				btRaidGiant.insertText = new vscode.SnippetString('RaidGiant');
				btRaidGiant.documentation = new vscode.MarkdownString("");
				results.push(btRaidGiant);				
				
				const btSeru = new vscode.CompletionItem('Seru', vscode.CompletionItemKind.Property);
				
				btSeru.detail = "bt.Seru";
				btSeru.insertText = new vscode.SnippetString('Seru');
				btSeru.documentation = new vscode.MarkdownString("");
				results.push(btSeru);				
				
				const btSpecial = new vscode.CompletionItem('Special', vscode.CompletionItemKind.Property);
				
				btSpecial.detail = "bt.Special";
				btSpecial.insertText = new vscode.SnippetString('Special');
				btSpecial.documentation = new vscode.MarkdownString("");
				results.push(btSpecial);				
				
				const btSummoned = new vscode.CompletionItem('Summoned', vscode.CompletionItemKind.Property);
				
				btSummoned.detail = "bt.Summoned";
				btSummoned.insertText = new vscode.SnippetString('Summoned');
				btSummoned.documentation = new vscode.MarkdownString("");
				results.push(btSummoned);				
				
				const btSummoned2 = new vscode.CompletionItem('Summoned2', vscode.CompletionItemKind.Property);
				
				btSummoned2.detail = "bt.Summoned2";
				btSummoned2.insertText = new vscode.SnippetString('Summoned2');
				btSummoned2.documentation = new vscode.MarkdownString("");
				results.push(btSummoned2);				
				
				const btSummoned3 = new vscode.CompletionItem('Summoned3', vscode.CompletionItemKind.Property);
				
				btSummoned3.detail = "bt.Summoned3";
				btSummoned3.insertText = new vscode.SnippetString('Summoned3');
				btSummoned3.documentation = new vscode.MarkdownString("");
				results.push(btSummoned3);				
				
				const btSummonedUndead = new vscode.CompletionItem('SummonedUndead', vscode.CompletionItemKind.Property);
				
				btSummonedUndead.detail = "bt.SummonedUndead";
				btSummonedUndead.insertText = new vscode.SnippetString('SummonedUndead');
				btSummonedUndead.documentation = new vscode.MarkdownString("");
				results.push(btSummonedUndead);				
				
				const btSwarmPet = new vscode.CompletionItem('SwarmPet', vscode.CompletionItemKind.Property);
				
				btSwarmPet.detail = "bt.SwarmPet";
				btSwarmPet.insertText = new vscode.SnippetString('SwarmPet');
				btSwarmPet.documentation = new vscode.MarkdownString("");
				results.push(btSwarmPet);				
				
				const btUndead = new vscode.CompletionItem('Undead', vscode.CompletionItemKind.Property);
				
				btUndead.detail = "bt.Undead";
				btUndead.insertText = new vscode.SnippetString('Undead');
				btUndead.documentation = new vscode.MarkdownString("");
				results.push(btUndead);				
				
				const btVampire = new vscode.CompletionItem('Vampire', vscode.CompletionItemKind.Property);
				
				btVampire.detail = "bt.Vampire";
				btVampire.insertText = new vscode.SnippetString('Vampire');
				btVampire.documentation = new vscode.MarkdownString("");
				results.push(btVampire);				
				
				const btVeliousDragon = new vscode.CompletionItem('VeliousDragon', vscode.CompletionItemKind.Property);
				
				btVeliousDragon.detail = "bt.VeliousDragon";
				btVeliousDragon.insertText = new vscode.SnippetString('VeliousDragon');
				btVeliousDragon.documentation = new vscode.MarkdownString("");
				results.push(btVeliousDragon);				
				
				const btZek = new vscode.CompletionItem('Zek', vscode.CompletionItemKind.Property);
				
				btZek.detail = "bt.Zek";
				btZek.insertText = new vscode.SnippetString('Zek');
				btZek.documentation = new vscode.MarkdownString("");
				results.push(btZek);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('class.')) {
					return undefined;
				}
				
				
				const classADVENTUREMERCHANT = new vscode.CompletionItem('ADVENTUREMERCHANT', vscode.CompletionItemKind.Property);
				
				classADVENTUREMERCHANT.detail = "class.ADVENTUREMERCHANT";
				classADVENTUREMERCHANT.insertText = new vscode.SnippetString('ADVENTUREMERCHANT');
				classADVENTUREMERCHANT.documentation = new vscode.MarkdownString("");
				results.push(classADVENTUREMERCHANT);				
				
				const classADVENTURERECRUITER = new vscode.CompletionItem('ADVENTURERECRUITER', vscode.CompletionItemKind.Property);
				
				classADVENTURERECRUITER.detail = "class.ADVENTURERECRUITER";
				classADVENTURERECRUITER.insertText = new vscode.SnippetString('ADVENTURERECRUITER');
				classADVENTURERECRUITER.documentation = new vscode.MarkdownString("");
				results.push(classADVENTURERECRUITER);				
				
				const classALTCURRENCYMERCHANT = new vscode.CompletionItem('ALT_CURRENCY_MERCHANT', vscode.CompletionItemKind.Property);
				
				classALTCURRENCYMERCHANT.detail = "class.ALT_CURRENCY_MERCHANT";
				classALTCURRENCYMERCHANT.insertText = new vscode.SnippetString('ALT_CURRENCY_MERCHANT');
				classALTCURRENCYMERCHANT.documentation = new vscode.MarkdownString("");
				results.push(classALTCURRENCYMERCHANT);				
				
				const classBANKER = new vscode.CompletionItem('BANKER', vscode.CompletionItemKind.Property);
				
				classBANKER.detail = "class.BANKER";
				classBANKER.insertText = new vscode.SnippetString('BANKER');
				classBANKER.documentation = new vscode.MarkdownString("");
				results.push(classBANKER);				
				
				const classBARD = new vscode.CompletionItem('BARD', vscode.CompletionItemKind.Property);
				
				classBARD.detail = "class.BARD";
				classBARD.insertText = new vscode.SnippetString('BARD');
				classBARD.documentation = new vscode.MarkdownString("");
				results.push(classBARD);				
				
				const classBARDGM = new vscode.CompletionItem('BARDGM', vscode.CompletionItemKind.Property);
				
				classBARDGM.detail = "class.BARDGM";
				classBARDGM.insertText = new vscode.SnippetString('BARDGM');
				classBARDGM.documentation = new vscode.MarkdownString("");
				results.push(classBARDGM);				
				
				const classBEASTLORD = new vscode.CompletionItem('BEASTLORD', vscode.CompletionItemKind.Property);
				
				classBEASTLORD.detail = "class.BEASTLORD";
				classBEASTLORD.insertText = new vscode.SnippetString('BEASTLORD');
				classBEASTLORD.documentation = new vscode.MarkdownString("");
				results.push(classBEASTLORD);				
				
				const classBEASTLORDGM = new vscode.CompletionItem('BEASTLORDGM', vscode.CompletionItemKind.Property);
				
				classBEASTLORDGM.detail = "class.BEASTLORDGM";
				classBEASTLORDGM.insertText = new vscode.SnippetString('BEASTLORDGM');
				classBEASTLORDGM.documentation = new vscode.MarkdownString("");
				results.push(classBEASTLORDGM);				
				
				const classBERSERKER = new vscode.CompletionItem('BERSERKER', vscode.CompletionItemKind.Property);
				
				classBERSERKER.detail = "class.BERSERKER";
				classBERSERKER.insertText = new vscode.SnippetString('BERSERKER');
				classBERSERKER.documentation = new vscode.MarkdownString("");
				results.push(classBERSERKER);				
				
				const classBERSERKERGM = new vscode.CompletionItem('BERSERKERGM', vscode.CompletionItemKind.Property);
				
				classBERSERKERGM.detail = "class.BERSERKERGM";
				classBERSERKERGM.insertText = new vscode.SnippetString('BERSERKERGM');
				classBERSERKERGM.documentation = new vscode.MarkdownString("");
				results.push(classBERSERKERGM);				
				
				const classCLERIC = new vscode.CompletionItem('CLERIC', vscode.CompletionItemKind.Property);
				
				classCLERIC.detail = "class.CLERIC";
				classCLERIC.insertText = new vscode.SnippetString('CLERIC');
				classCLERIC.documentation = new vscode.MarkdownString("");
				results.push(classCLERIC);				
				
				const classCLERICGM = new vscode.CompletionItem('CLERICGM', vscode.CompletionItemKind.Property);
				
				classCLERICGM.detail = "class.CLERICGM";
				classCLERICGM.insertText = new vscode.SnippetString('CLERICGM');
				classCLERICGM.documentation = new vscode.MarkdownString("");
				results.push(classCLERICGM);				
				
				const classCORPSECLASS = new vscode.CompletionItem('CORPSE_CLASS', vscode.CompletionItemKind.Property);
				
				classCORPSECLASS.detail = "class.CORPSE_CLASS";
				classCORPSECLASS.insertText = new vscode.SnippetString('CORPSE_CLASS');
				classCORPSECLASS.documentation = new vscode.MarkdownString("");
				results.push(classCORPSECLASS);				
				
				const classDARKREIGNMERCHANT = new vscode.CompletionItem('DARK_REIGN_MERCHANT', vscode.CompletionItemKind.Property);
				
				classDARKREIGNMERCHANT.detail = "class.DARK_REIGN_MERCHANT";
				classDARKREIGNMERCHANT.insertText = new vscode.SnippetString('DARK_REIGN_MERCHANT');
				classDARKREIGNMERCHANT.documentation = new vscode.MarkdownString("");
				results.push(classDARKREIGNMERCHANT);				
				
				const classDISCORDMERCHANT = new vscode.CompletionItem('DISCORD_MERCHANT', vscode.CompletionItemKind.Property);
				
				classDISCORDMERCHANT.detail = "class.DISCORD_MERCHANT";
				classDISCORDMERCHANT.insertText = new vscode.SnippetString('DISCORD_MERCHANT');
				classDISCORDMERCHANT.documentation = new vscode.MarkdownString("");
				results.push(classDISCORDMERCHANT);				
				
				const classDRUID = new vscode.CompletionItem('DRUID', vscode.CompletionItemKind.Property);
				
				classDRUID.detail = "class.DRUID";
				classDRUID.insertText = new vscode.SnippetString('DRUID');
				classDRUID.documentation = new vscode.MarkdownString("");
				results.push(classDRUID);				
				
				const classDRUIDGM = new vscode.CompletionItem('DRUIDGM', vscode.CompletionItemKind.Property);
				
				classDRUIDGM.detail = "class.DRUIDGM";
				classDRUIDGM.insertText = new vscode.SnippetString('DRUIDGM');
				classDRUIDGM.documentation = new vscode.MarkdownString("");
				results.push(classDRUIDGM);				
				
				const classENCHANTER = new vscode.CompletionItem('ENCHANTER', vscode.CompletionItemKind.Property);
				
				classENCHANTER.detail = "class.ENCHANTER";
				classENCHANTER.insertText = new vscode.SnippetString('ENCHANTER');
				classENCHANTER.documentation = new vscode.MarkdownString("");
				results.push(classENCHANTER);				
				
				const classENCHANTERGM = new vscode.CompletionItem('ENCHANTERGM', vscode.CompletionItemKind.Property);
				
				classENCHANTERGM.detail = "class.ENCHANTERGM";
				classENCHANTERGM.insertText = new vscode.SnippetString('ENCHANTERGM');
				classENCHANTERGM.documentation = new vscode.MarkdownString("");
				results.push(classENCHANTERGM);				
				
				const classFELLOWSHIPMASTER = new vscode.CompletionItem('FELLOWSHIP_MASTER', vscode.CompletionItemKind.Property);
				
				classFELLOWSHIPMASTER.detail = "class.FELLOWSHIP_MASTER";
				classFELLOWSHIPMASTER.insertText = new vscode.SnippetString('FELLOWSHIP_MASTER');
				classFELLOWSHIPMASTER.documentation = new vscode.MarkdownString("");
				results.push(classFELLOWSHIPMASTER);				
				
				const classGUILDTRIBUTEMASTER = new vscode.CompletionItem('GUILD_TRIBUTE_MASTER', vscode.CompletionItemKind.Property);
				
				classGUILDTRIBUTEMASTER.detail = "class.GUILD_TRIBUTE_MASTER";
				classGUILDTRIBUTEMASTER.insertText = new vscode.SnippetString('GUILD_TRIBUTE_MASTER');
				classGUILDTRIBUTEMASTER.documentation = new vscode.MarkdownString("");
				results.push(classGUILDTRIBUTEMASTER);				
				
				const classLDONTREASURE = new vscode.CompletionItem('LDON_TREASURE', vscode.CompletionItemKind.Property);
				
				classLDONTREASURE.detail = "class.LDON_TREASURE";
				classLDONTREASURE.insertText = new vscode.SnippetString('LDON_TREASURE');
				classLDONTREASURE.documentation = new vscode.MarkdownString("");
				results.push(classLDONTREASURE);				
				
				const classMAGICIAN = new vscode.CompletionItem('MAGICIAN', vscode.CompletionItemKind.Property);
				
				classMAGICIAN.detail = "class.MAGICIAN";
				classMAGICIAN.insertText = new vscode.SnippetString('MAGICIAN');
				classMAGICIAN.documentation = new vscode.MarkdownString("");
				results.push(classMAGICIAN);				
				
				const classMAGICIANGM = new vscode.CompletionItem('MAGICIANGM', vscode.CompletionItemKind.Property);
				
				classMAGICIANGM.detail = "class.MAGICIANGM";
				classMAGICIANGM.insertText = new vscode.SnippetString('MAGICIANGM');
				classMAGICIANGM.documentation = new vscode.MarkdownString("");
				results.push(classMAGICIANGM);				
				
				const classMERCERNARYMASTER = new vscode.CompletionItem('MERCERNARY_MASTER', vscode.CompletionItemKind.Property);
				
				classMERCERNARYMASTER.detail = "class.MERCERNARY_MASTER";
				classMERCERNARYMASTER.insertText = new vscode.SnippetString('MERCERNARY_MASTER');
				classMERCERNARYMASTER.documentation = new vscode.MarkdownString("");
				results.push(classMERCERNARYMASTER);				
				
				const classMERCHANT = new vscode.CompletionItem('MERCHANT', vscode.CompletionItemKind.Property);
				
				classMERCHANT.detail = "class.MERCHANT";
				classMERCHANT.insertText = new vscode.SnippetString('MERCHANT');
				classMERCHANT.documentation = new vscode.MarkdownString("");
				results.push(classMERCHANT);				
				
				const classMONK = new vscode.CompletionItem('MONK', vscode.CompletionItemKind.Property);
				
				classMONK.detail = "class.MONK";
				classMONK.insertText = new vscode.SnippetString('MONK');
				classMONK.documentation = new vscode.MarkdownString("");
				results.push(classMONK);				
				
				const classMONKGM = new vscode.CompletionItem('MONKGM', vscode.CompletionItemKind.Property);
				
				classMONKGM.detail = "class.MONKGM";
				classMONKGM.insertText = new vscode.SnippetString('MONKGM');
				classMONKGM.documentation = new vscode.MarkdownString("");
				results.push(classMONKGM);				
				
				const classNECROMANCER = new vscode.CompletionItem('NECROMANCER', vscode.CompletionItemKind.Property);
				
				classNECROMANCER.detail = "class.NECROMANCER";
				classNECROMANCER.insertText = new vscode.SnippetString('NECROMANCER');
				classNECROMANCER.documentation = new vscode.MarkdownString("");
				results.push(classNECROMANCER);				
				
				const classNECROMANCERGM = new vscode.CompletionItem('NECROMANCERGM', vscode.CompletionItemKind.Property);
				
				classNECROMANCERGM.detail = "class.NECROMANCERGM";
				classNECROMANCERGM.insertText = new vscode.SnippetString('NECROMANCERGM');
				classNECROMANCERGM.documentation = new vscode.MarkdownString("");
				results.push(classNECROMANCERGM);				
				
				const classNORRATHSKEEPERSMERCHANT = new vscode.CompletionItem('NORRATHS_KEEPERS_MERCHANT', vscode.CompletionItemKind.Property);
				
				classNORRATHSKEEPERSMERCHANT.detail = "class.NORRATHS_KEEPERS_MERCHANT";
				classNORRATHSKEEPERSMERCHANT.insertText = new vscode.SnippetString('NORRATHS_KEEPERS_MERCHANT');
				classNORRATHSKEEPERSMERCHANT.documentation = new vscode.MarkdownString("");
				results.push(classNORRATHSKEEPERSMERCHANT);				
				
				const classPALADIN = new vscode.CompletionItem('PALADIN', vscode.CompletionItemKind.Property);
				
				classPALADIN.detail = "class.PALADIN";
				classPALADIN.insertText = new vscode.SnippetString('PALADIN');
				classPALADIN.documentation = new vscode.MarkdownString("");
				results.push(classPALADIN);				
				
				const classPALADINGM = new vscode.CompletionItem('PALADINGM', vscode.CompletionItemKind.Property);
				
				classPALADINGM.detail = "class.PALADINGM";
				classPALADINGM.insertText = new vscode.SnippetString('PALADINGM');
				classPALADINGM.documentation = new vscode.MarkdownString("");
				results.push(classPALADINGM);				
				
				const classRANGER = new vscode.CompletionItem('RANGER', vscode.CompletionItemKind.Property);
				
				classRANGER.detail = "class.RANGER";
				classRANGER.insertText = new vscode.SnippetString('RANGER');
				classRANGER.documentation = new vscode.MarkdownString("");
				results.push(classRANGER);				
				
				const classRANGERGM = new vscode.CompletionItem('RANGERGM', vscode.CompletionItemKind.Property);
				
				classRANGERGM.detail = "class.RANGERGM";
				classRANGERGM.insertText = new vscode.SnippetString('RANGERGM');
				classRANGERGM.documentation = new vscode.MarkdownString("");
				results.push(classRANGERGM);				
				
				const classROGUE = new vscode.CompletionItem('ROGUE', vscode.CompletionItemKind.Property);
				
				classROGUE.detail = "class.ROGUE";
				classROGUE.insertText = new vscode.SnippetString('ROGUE');
				classROGUE.documentation = new vscode.MarkdownString("");
				results.push(classROGUE);				
				
				const classROGUEGM = new vscode.CompletionItem('ROGUEGM', vscode.CompletionItemKind.Property);
				
				classROGUEGM.detail = "class.ROGUEGM";
				classROGUEGM.insertText = new vscode.SnippetString('ROGUEGM');
				classROGUEGM.documentation = new vscode.MarkdownString("");
				results.push(classROGUEGM);				
				
				const classSHADOWKNIGHT = new vscode.CompletionItem('SHADOWKNIGHT', vscode.CompletionItemKind.Property);
				
				classSHADOWKNIGHT.detail = "class.SHADOWKNIGHT";
				classSHADOWKNIGHT.insertText = new vscode.SnippetString('SHADOWKNIGHT');
				classSHADOWKNIGHT.documentation = new vscode.MarkdownString("");
				results.push(classSHADOWKNIGHT);				
				
				const classSHADOWKNIGHTGM = new vscode.CompletionItem('SHADOWKNIGHTGM', vscode.CompletionItemKind.Property);
				
				classSHADOWKNIGHTGM.detail = "class.SHADOWKNIGHTGM";
				classSHADOWKNIGHTGM.insertText = new vscode.SnippetString('SHADOWKNIGHTGM');
				classSHADOWKNIGHTGM.documentation = new vscode.MarkdownString("");
				results.push(classSHADOWKNIGHTGM);				
				
				const classSHAMAN = new vscode.CompletionItem('SHAMAN', vscode.CompletionItemKind.Property);
				
				classSHAMAN.detail = "class.SHAMAN";
				classSHAMAN.insertText = new vscode.SnippetString('SHAMAN');
				classSHAMAN.documentation = new vscode.MarkdownString("");
				results.push(classSHAMAN);				
				
				const classSHAMANGM = new vscode.CompletionItem('SHAMANGM', vscode.CompletionItemKind.Property);
				
				classSHAMANGM.detail = "class.SHAMANGM";
				classSHAMANGM.insertText = new vscode.SnippetString('SHAMANGM');
				classSHAMANGM.documentation = new vscode.MarkdownString("");
				results.push(classSHAMANGM);				
				
				const classTRIBUTEMASTER = new vscode.CompletionItem('TRIBUTE_MASTER', vscode.CompletionItemKind.Property);
				
				classTRIBUTEMASTER.detail = "class.TRIBUTE_MASTER";
				classTRIBUTEMASTER.insertText = new vscode.SnippetString('TRIBUTE_MASTER');
				classTRIBUTEMASTER.documentation = new vscode.MarkdownString("");
				results.push(classTRIBUTEMASTER);				
				
				const classWARRIOR = new vscode.CompletionItem('WARRIOR', vscode.CompletionItemKind.Property);
				
				classWARRIOR.detail = "class.WARRIOR";
				classWARRIOR.insertText = new vscode.SnippetString('WARRIOR');
				classWARRIOR.documentation = new vscode.MarkdownString("");
				results.push(classWARRIOR);				
				
				const classWARRIORGM = new vscode.CompletionItem('WARRIORGM', vscode.CompletionItemKind.Property);
				
				classWARRIORGM.detail = "class.WARRIORGM";
				classWARRIORGM.insertText = new vscode.SnippetString('WARRIORGM');
				classWARRIORGM.documentation = new vscode.MarkdownString("");
				results.push(classWARRIORGM);				
				
				const classWIZARD = new vscode.CompletionItem('WIZARD', vscode.CompletionItemKind.Property);
				
				classWIZARD.detail = "class.WIZARD";
				classWIZARD.insertText = new vscode.SnippetString('WIZARD');
				classWIZARD.documentation = new vscode.MarkdownString("");
				results.push(classWIZARD);				
				
				const classWIZARDGM = new vscode.CompletionItem('WIZARDGM', vscode.CompletionItemKind.Property);
				
				classWIZARDGM.detail = "class.WIZARDGM";
				classWIZARDGM.insertText = new vscode.SnippetString('WIZARDGM');
				classWIZARDGM.documentation = new vscode.MarkdownString("");
				results.push(classWIZARDGM);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('client.')) {
					return undefined;
				}
				
				
				const clientAccountID = new vscode.CompletionItem('AccountID', vscode.CompletionItemKind.Method);
				
				clientAccountID.detail = "client.AccountID()";
				clientAccountID.insertText = new vscode.SnippetString('AccountID()');
				clientAccountID.documentation = new vscode.MarkdownString("");
				results.push(clientAccountID);				
				
				const clientAccountName = new vscode.CompletionItem('AccountName', vscode.CompletionItemKind.Method);
				
				clientAccountName.detail = "client.AccountName()";
				clientAccountName.insertText = new vscode.SnippetString('AccountName()');
				clientAccountName.documentation = new vscode.MarkdownString("");
				results.push(clientAccountName);				
				
				const clientAddAAPoints = new vscode.CompletionItem('AddAAPoints', vscode.CompletionItemKind.Method);
				
				clientAddAAPoints.detail = "client.AddAAPoints()";
				clientAddAAPoints.insertText = new vscode.SnippetString('AddAAPoints()');
				clientAddAAPoints.documentation = new vscode.MarkdownString("");
				results.push(clientAddAAPoints);				
				
				const clientAddAlternateCurrencyValue = new vscode.CompletionItem('AddAlternateCurrencyValue', vscode.CompletionItemKind.Method);
				
				clientAddAlternateCurrencyValue.detail = "client.AddAlternateCurrencyValue()";
				clientAddAlternateCurrencyValue.insertText = new vscode.SnippetString('AddAlternateCurrencyValue()');
				clientAddAlternateCurrencyValue.documentation = new vscode.MarkdownString("");
				results.push(clientAddAlternateCurrencyValue);				
				
				const clientAddCrystals = new vscode.CompletionItem('AddCrystals', vscode.CompletionItemKind.Method);
				
				clientAddCrystals.detail = "client.AddCrystals()";
				clientAddCrystals.insertText = new vscode.SnippetString('AddCrystals()');
				clientAddCrystals.documentation = new vscode.MarkdownString("");
				results.push(clientAddCrystals);				
				
				const clientAddEXP = new vscode.CompletionItem('AddEXP', vscode.CompletionItemKind.Method);
				
				clientAddEXP.detail = "client.AddEXP()";
				clientAddEXP.insertText = new vscode.SnippetString('AddEXP()');
				clientAddEXP.documentation = new vscode.MarkdownString("");
				results.push(clientAddEXP);				
				
				const clientAddLevelBasedExp = new vscode.CompletionItem('AddLevelBasedExp', vscode.CompletionItemKind.Method);
				
				clientAddLevelBasedExp.detail = "client.AddLevelBasedExp()";
				clientAddLevelBasedExp.insertText = new vscode.SnippetString('AddLevelBasedExp()');
				clientAddLevelBasedExp.documentation = new vscode.MarkdownString("");
				results.push(clientAddLevelBasedExp);				
				
				const clientAddMoneyToPP = new vscode.CompletionItem('AddMoneyToPP', vscode.CompletionItemKind.Method);
				
				clientAddMoneyToPP.detail = "client.AddMoneyToPP()";
				clientAddMoneyToPP.insertText = new vscode.SnippetString('AddMoneyToPP()');
				clientAddMoneyToPP.documentation = new vscode.MarkdownString("");
				results.push(clientAddMoneyToPP);				
				
				const clientAddPVPPoints = new vscode.CompletionItem('AddPVPPoints', vscode.CompletionItemKind.Method);
				
				clientAddPVPPoints.detail = "client.AddPVPPoints()";
				clientAddPVPPoints.insertText = new vscode.SnippetString('AddPVPPoints()');
				clientAddPVPPoints.documentation = new vscode.MarkdownString("");
				results.push(clientAddPVPPoints);				
				
				const clientAddSkill = new vscode.CompletionItem('AddSkill', vscode.CompletionItemKind.Method);
				
				clientAddSkill.detail = "client.AddSkill()";
				clientAddSkill.insertText = new vscode.SnippetString('AddSkill()');
				clientAddSkill.documentation = new vscode.MarkdownString("");
				results.push(clientAddSkill);				
				
				const clientAdmin = new vscode.CompletionItem('Admin', vscode.CompletionItemKind.Method);
				
				clientAdmin.detail = "client.Admin()";
				clientAdmin.insertText = new vscode.SnippetString('Admin()');
				clientAdmin.documentation = new vscode.MarkdownString("");
				results.push(clientAdmin);				
				
				const clientAssignTask = new vscode.CompletionItem('AssignTask', vscode.CompletionItemKind.Method);
				
				clientAssignTask.detail = "client.AssignTask()";
				clientAssignTask.insertText = new vscode.SnippetString('AssignTask()');
				clientAssignTask.documentation = new vscode.MarkdownString("");
				results.push(clientAssignTask);				
				
				const clientAssignToInstance = new vscode.CompletionItem('AssignToInstance', vscode.CompletionItemKind.Method);
				
				clientAssignToInstance.detail = "client.AssignToInstance()";
				clientAssignToInstance.insertText = new vscode.SnippetString('AssignToInstance()');
				clientAssignToInstance.documentation = new vscode.MarkdownString("");
				results.push(clientAssignToInstance);				
				
				const clientAutoSplitEnabled = new vscode.CompletionItem('AutoSplitEnabled', vscode.CompletionItemKind.Method);
				
				clientAutoSplitEnabled.detail = "client.AutoSplitEnabled()";
				clientAutoSplitEnabled.insertText = new vscode.SnippetString('AutoSplitEnabled()');
				clientAutoSplitEnabled.documentation = new vscode.MarkdownString("");
				results.push(clientAutoSplitEnabled);				
				
				const clientBreakInvis = new vscode.CompletionItem('BreakInvis', vscode.CompletionItemKind.Method);
				
				clientBreakInvis.detail = "client.BreakInvis()";
				clientBreakInvis.insertText = new vscode.SnippetString('BreakInvis()');
				clientBreakInvis.documentation = new vscode.MarkdownString("");
				results.push(clientBreakInvis);				
				
				const clientCalcATK = new vscode.CompletionItem('CalcATK', vscode.CompletionItemKind.Method);
				
				clientCalcATK.detail = "client.CalcATK()";
				clientCalcATK.insertText = new vscode.SnippetString('CalcATK()');
				clientCalcATK.documentation = new vscode.MarkdownString("");
				results.push(clientCalcATK);				
				
				const clientCalcCurrentWeight = new vscode.CompletionItem('CalcCurrentWeight', vscode.CompletionItemKind.Method);
				
				clientCalcCurrentWeight.detail = "client.CalcCurrentWeight()";
				clientCalcCurrentWeight.insertText = new vscode.SnippetString('CalcCurrentWeight()');
				clientCalcCurrentWeight.documentation = new vscode.MarkdownString("");
				results.push(clientCalcCurrentWeight);				
				
				const clientCalcPriceMod = new vscode.CompletionItem('CalcPriceMod', vscode.CompletionItemKind.Method);
				
				clientCalcPriceMod.detail = "client.CalcPriceMod()";
				clientCalcPriceMod.insertText = new vscode.SnippetString('CalcPriceMod()');
				clientCalcPriceMod.documentation = new vscode.MarkdownString("");
				results.push(clientCalcPriceMod);				
				
				const clientCanHaveSkill = new vscode.CompletionItem('CanHaveSkill', vscode.CompletionItemKind.Method);
				
				clientCanHaveSkill.detail = "client.CanHaveSkill()";
				clientCanHaveSkill.insertText = new vscode.SnippetString('CanHaveSkill()');
				clientCanHaveSkill.documentation = new vscode.MarkdownString("");
				results.push(clientCanHaveSkill);				
				
				const clientChangeLastName = new vscode.CompletionItem('ChangeLastName', vscode.CompletionItemKind.Method);
				
				clientChangeLastName.detail = "client.ChangeLastName()";
				clientChangeLastName.insertText = new vscode.SnippetString('ChangeLastName()');
				clientChangeLastName.documentation = new vscode.MarkdownString("");
				results.push(clientChangeLastName);				
				
				const clientCharacterID = new vscode.CompletionItem('CharacterID', vscode.CompletionItemKind.Method);
				
				clientCharacterID.detail = "client.CharacterID()";
				clientCharacterID.insertText = new vscode.SnippetString('CharacterID()');
				clientCharacterID.documentation = new vscode.MarkdownString("");
				results.push(clientCharacterID);				
				
				const clientCheckIncreaseSkill = new vscode.CompletionItem('CheckIncreaseSkill', vscode.CompletionItemKind.Method);
				
				clientCheckIncreaseSkill.detail = "client.CheckIncreaseSkill()";
				clientCheckIncreaseSkill.insertText = new vscode.SnippetString('CheckIncreaseSkill()');
				clientCheckIncreaseSkill.documentation = new vscode.MarkdownString("");
				results.push(clientCheckIncreaseSkill);				
				
				const clientCheckSpecializeIncrease = new vscode.CompletionItem('CheckSpecializeIncrease', vscode.CompletionItemKind.Method);
				
				clientCheckSpecializeIncrease.detail = "client.CheckSpecializeIncrease()";
				clientCheckSpecializeIncrease.insertText = new vscode.SnippetString('CheckSpecializeIncrease()');
				clientCheckSpecializeIncrease.documentation = new vscode.MarkdownString("");
				results.push(clientCheckSpecializeIncrease);				
				
				const clientClearCompassMark = new vscode.CompletionItem('ClearCompassMark', vscode.CompletionItemKind.Method);
				
				clientClearCompassMark.detail = "client.ClearCompassMark()";
				clientClearCompassMark.insertText = new vscode.SnippetString('ClearCompassMark()');
				clientClearCompassMark.documentation = new vscode.MarkdownString("");
				results.push(clientClearCompassMark);				
				
				const clientClearZoneFlag = new vscode.CompletionItem('ClearZoneFlag', vscode.CompletionItemKind.Method);
				
				clientClearZoneFlag.detail = "client.ClearZoneFlag()";
				clientClearZoneFlag.insertText = new vscode.SnippetString('ClearZoneFlag()');
				clientClearZoneFlag.documentation = new vscode.MarkdownString("");
				results.push(clientClearZoneFlag);				
				
				const clientConnected = new vscode.CompletionItem('Connected', vscode.CompletionItemKind.Method);
				
				clientConnected.detail = "client.Connected()";
				clientConnected.insertText = new vscode.SnippetString('Connected()');
				clientConnected.documentation = new vscode.MarkdownString("");
				results.push(clientConnected);				
				
				const clientDecreaseByID = new vscode.CompletionItem('DecreaseByID', vscode.CompletionItemKind.Method);
				
				clientDecreaseByID.detail = "client.DecreaseByID()";
				clientDecreaseByID.insertText = new vscode.SnippetString('DecreaseByID()');
				clientDecreaseByID.documentation = new vscode.MarkdownString("");
				results.push(clientDecreaseByID);				
				
				const clientDeleteItemInInventory = new vscode.CompletionItem('DeleteItemInInventory', vscode.CompletionItemKind.Method);
				
				clientDeleteItemInInventory.detail = "client.DeleteItemInInventory()";
				clientDeleteItemInInventory.insertText = new vscode.SnippetString('DeleteItemInInventory()');
				clientDeleteItemInInventory.documentation = new vscode.MarkdownString("");
				results.push(clientDeleteItemInInventory);				
				
				const clientDisableAreaEndRegen = new vscode.CompletionItem('DisableAreaEndRegen', vscode.CompletionItemKind.Method);
				
				clientDisableAreaEndRegen.detail = "client.DisableAreaEndRegen()";
				clientDisableAreaEndRegen.insertText = new vscode.SnippetString('DisableAreaEndRegen()');
				clientDisableAreaEndRegen.documentation = new vscode.MarkdownString("");
				results.push(clientDisableAreaEndRegen);				
				
				const clientDisableAreaHPRegen = new vscode.CompletionItem('DisableAreaHPRegen', vscode.CompletionItemKind.Method);
				
				clientDisableAreaHPRegen.detail = "client.DisableAreaHPRegen()";
				clientDisableAreaHPRegen.insertText = new vscode.SnippetString('DisableAreaHPRegen()');
				clientDisableAreaHPRegen.documentation = new vscode.MarkdownString("");
				results.push(clientDisableAreaHPRegen);				
				
				const clientDisableAreaManaRegen = new vscode.CompletionItem('DisableAreaManaRegen', vscode.CompletionItemKind.Method);
				
				clientDisableAreaManaRegen.detail = "client.DisableAreaManaRegen()";
				clientDisableAreaManaRegen.insertText = new vscode.SnippetString('DisableAreaManaRegen()');
				clientDisableAreaManaRegen.documentation = new vscode.MarkdownString("");
				results.push(clientDisableAreaManaRegen);				
				
				const clientDisableAreaRegens = new vscode.CompletionItem('DisableAreaRegens', vscode.CompletionItemKind.Method);
				
				clientDisableAreaRegens.detail = "client.DisableAreaRegens()";
				clientDisableAreaRegens.insertText = new vscode.SnippetString('DisableAreaRegens()');
				clientDisableAreaRegens.documentation = new vscode.MarkdownString("");
				results.push(clientDisableAreaRegens);				
				
				const clientDisconnect = new vscode.CompletionItem('Disconnect', vscode.CompletionItemKind.Method);
				
				clientDisconnect.detail = "client.Disconnect()";
				clientDisconnect.insertText = new vscode.SnippetString('Disconnect()');
				clientDisconnect.documentation = new vscode.MarkdownString("");
				results.push(clientDisconnect);				
				
				const clientDropItem = new vscode.CompletionItem('DropItem', vscode.CompletionItemKind.Method);
				
				clientDropItem.detail = "client.DropItem()";
				clientDropItem.insertText = new vscode.SnippetString('DropItem()');
				clientDropItem.documentation = new vscode.MarkdownString("");
				results.push(clientDropItem);				
				
				const clientDuck = new vscode.CompletionItem('Duck', vscode.CompletionItemKind.Method);
				
				clientDuck.detail = "client.Duck()";
				clientDuck.insertText = new vscode.SnippetString('Duck()');
				clientDuck.documentation = new vscode.MarkdownString("");
				results.push(clientDuck);				
				
				const clientDyeArmorBySlot = new vscode.CompletionItem('DyeArmorBySlot', vscode.CompletionItemKind.Method);
				
				clientDyeArmorBySlot.detail = "client.DyeArmorBySlot()";
				clientDyeArmorBySlot.insertText = new vscode.SnippetString('DyeArmorBySlot()');
				clientDyeArmorBySlot.documentation = new vscode.MarkdownString("");
				results.push(clientDyeArmorBySlot);				
				
				const clientEnableAreaEndRegen = new vscode.CompletionItem('EnableAreaEndRegen', vscode.CompletionItemKind.Method);
				
				clientEnableAreaEndRegen.detail = "client.EnableAreaEndRegen()";
				clientEnableAreaEndRegen.insertText = new vscode.SnippetString('EnableAreaEndRegen()');
				clientEnableAreaEndRegen.documentation = new vscode.MarkdownString("");
				results.push(clientEnableAreaEndRegen);				
				
				const clientEnableAreaHPRegen = new vscode.CompletionItem('EnableAreaHPRegen', vscode.CompletionItemKind.Method);
				
				clientEnableAreaHPRegen.detail = "client.EnableAreaHPRegen()";
				clientEnableAreaHPRegen.insertText = new vscode.SnippetString('EnableAreaHPRegen()');
				clientEnableAreaHPRegen.documentation = new vscode.MarkdownString("");
				results.push(clientEnableAreaHPRegen);				
				
				const clientEnableAreaManaRegen = new vscode.CompletionItem('EnableAreaManaRegen', vscode.CompletionItemKind.Method);
				
				clientEnableAreaManaRegen.detail = "client.EnableAreaManaRegen()";
				clientEnableAreaManaRegen.insertText = new vscode.SnippetString('EnableAreaManaRegen()');
				clientEnableAreaManaRegen.documentation = new vscode.MarkdownString("");
				results.push(clientEnableAreaManaRegen);				
				
				const clientEnableAreaRegens = new vscode.CompletionItem('EnableAreaRegens', vscode.CompletionItemKind.Method);
				
				clientEnableAreaRegens.detail = "client.EnableAreaRegens()";
				clientEnableAreaRegens.insertText = new vscode.SnippetString('EnableAreaRegens()');
				clientEnableAreaRegens.documentation = new vscode.MarkdownString("");
				results.push(clientEnableAreaRegens);				
				
				const clientEscape = new vscode.CompletionItem('Escape', vscode.CompletionItemKind.Method);
				
				clientEscape.detail = "client.Escape()";
				clientEscape.insertText = new vscode.SnippetString('Escape()');
				clientEscape.documentation = new vscode.MarkdownString("");
				results.push(clientEscape);				
				
				const clientFailTask = new vscode.CompletionItem('FailTask', vscode.CompletionItemKind.Method);
				
				clientFailTask.detail = "client.FailTask()";
				clientFailTask.insertText = new vscode.SnippetString('FailTask()');
				clientFailTask.documentation = new vscode.MarkdownString("");
				results.push(clientFailTask);				
				
				const clientFilteredMessage = new vscode.CompletionItem('FilteredMessage', vscode.CompletionItemKind.Method);
				
				clientFilteredMessage.detail = "client.FilteredMessage()";
				clientFilteredMessage.insertText = new vscode.SnippetString('FilteredMessage()');
				clientFilteredMessage.documentation = new vscode.MarkdownString("");
				results.push(clientFilteredMessage);				
				
				const clientFindMemmedSpellBySlot = new vscode.CompletionItem('FindMemmedSpellBySlot', vscode.CompletionItemKind.Method);
				
				clientFindMemmedSpellBySlot.detail = "client.FindMemmedSpellBySlot()";
				clientFindMemmedSpellBySlot.insertText = new vscode.SnippetString('FindMemmedSpellBySlot()');
				clientFindMemmedSpellBySlot.documentation = new vscode.MarkdownString("");
				results.push(clientFindMemmedSpellBySlot);				
				
				const clientFindSpellBookSlotBySpellID = new vscode.CompletionItem('FindSpellBookSlotBySpellID', vscode.CompletionItemKind.Method);
				
				clientFindSpellBookSlotBySpellID.detail = "client.FindSpellBookSlotBySpellID()";
				clientFindSpellBookSlotBySpellID.insertText = new vscode.SnippetString('FindSpellBookSlotBySpellID()');
				clientFindSpellBookSlotBySpellID.documentation = new vscode.MarkdownString("");
				results.push(clientFindSpellBookSlotBySpellID);				
				
				const clientForageItem = new vscode.CompletionItem('ForageItem', vscode.CompletionItemKind.Method);
				
				clientForageItem.detail = "client.ForageItem()";
				clientForageItem.insertText = new vscode.SnippetString('ForageItem()');
				clientForageItem.documentation = new vscode.MarkdownString("");
				results.push(clientForageItem);				
				
				const clientFreeze = new vscode.CompletionItem('Freeze', vscode.CompletionItemKind.Method);
				
				clientFreeze.detail = "client.Freeze()";
				clientFreeze.insertText = new vscode.SnippetString('Freeze()');
				clientFreeze.documentation = new vscode.MarkdownString("");
				results.push(clientFreeze);				
				
				const clientGetAAExp = new vscode.CompletionItem('GetAAExp', vscode.CompletionItemKind.Method);
				
				clientGetAAExp.detail = "client.GetAAExp()";
				clientGetAAExp.insertText = new vscode.SnippetString('GetAAExp()');
				clientGetAAExp.documentation = new vscode.MarkdownString("");
				results.push(clientGetAAExp);				
				
				const clientGetAAPercent = new vscode.CompletionItem('GetAAPercent', vscode.CompletionItemKind.Method);
				
				clientGetAAPercent.detail = "client.GetAAPercent()";
				clientGetAAPercent.insertText = new vscode.SnippetString('GetAAPercent()');
				clientGetAAPercent.documentation = new vscode.MarkdownString("");
				results.push(clientGetAAPercent);				
				
				const clientGetAAPoints = new vscode.CompletionItem('GetAAPoints', vscode.CompletionItemKind.Method);
				
				clientGetAAPoints.detail = "client.GetAAPoints()";
				clientGetAAPoints.insertText = new vscode.SnippetString('GetAAPoints()');
				clientGetAAPoints.documentation = new vscode.MarkdownString("");
				results.push(clientGetAAPoints);				
				
				const clientGetAccountAge = new vscode.CompletionItem('GetAccountAge', vscode.CompletionItemKind.Method);
				
				clientGetAccountAge.detail = "client.GetAccountAge()";
				clientGetAccountAge.insertText = new vscode.SnippetString('GetAccountAge()');
				clientGetAccountAge.documentation = new vscode.MarkdownString("");
				results.push(clientGetAccountAge);				
				
				const clientGetAccountFlag = new vscode.CompletionItem('GetAccountFlag', vscode.CompletionItemKind.Method);
				
				clientGetAccountFlag.detail = "client.GetAccountFlag()";
				clientGetAccountFlag.insertText = new vscode.SnippetString('GetAccountFlag()');
				clientGetAccountFlag.documentation = new vscode.MarkdownString("");
				results.push(clientGetAccountFlag);				
				
				const clientGetAggroCount = new vscode.CompletionItem('GetAggroCount', vscode.CompletionItemKind.Method);
				
				clientGetAggroCount.detail = "client.GetAggroCount()";
				clientGetAggroCount.insertText = new vscode.SnippetString('GetAggroCount()');
				clientGetAggroCount.documentation = new vscode.MarkdownString("");
				results.push(clientGetAggroCount);				
				
				const clientGetAllMoney = new vscode.CompletionItem('GetAllMoney', vscode.CompletionItemKind.Method);
				
				clientGetAllMoney.detail = "client.GetAllMoney()";
				clientGetAllMoney.insertText = new vscode.SnippetString('GetAllMoney()');
				clientGetAllMoney.documentation = new vscode.MarkdownString("");
				results.push(clientGetAllMoney);				
				
				const clientGetAlternateCurrencyValue = new vscode.CompletionItem('GetAlternateCurrencyValue', vscode.CompletionItemKind.Method);
				
				clientGetAlternateCurrencyValue.detail = "client.GetAlternateCurrencyValue()";
				clientGetAlternateCurrencyValue.insertText = new vscode.SnippetString('GetAlternateCurrencyValue()');
				clientGetAlternateCurrencyValue.documentation = new vscode.MarkdownString("");
				results.push(clientGetAlternateCurrencyValue);				
				
				const clientGetAnon = new vscode.CompletionItem('GetAnon', vscode.CompletionItemKind.Method);
				
				clientGetAnon.detail = "client.GetAnon()";
				clientGetAnon.insertText = new vscode.SnippetString('GetAnon()');
				clientGetAnon.documentation = new vscode.MarkdownString("");
				results.push(clientGetAnon);				
				
				const clientGetAugmentIDAt = new vscode.CompletionItem('GetAugmentIDAt', vscode.CompletionItemKind.Method);
				
				clientGetAugmentIDAt.detail = "client.GetAugmentIDAt()";
				clientGetAugmentIDAt.insertText = new vscode.SnippetString('GetAugmentIDAt()');
				clientGetAugmentIDAt.documentation = new vscode.MarkdownString("");
				results.push(clientGetAugmentIDAt);				
				
				const clientGetBaseAGI = new vscode.CompletionItem('GetBaseAGI', vscode.CompletionItemKind.Method);
				
				clientGetBaseAGI.detail = "client.GetBaseAGI()";
				clientGetBaseAGI.insertText = new vscode.SnippetString('GetBaseAGI()');
				clientGetBaseAGI.documentation = new vscode.MarkdownString("");
				results.push(clientGetBaseAGI);				
				
				const clientGetBaseCHA = new vscode.CompletionItem('GetBaseCHA', vscode.CompletionItemKind.Method);
				
				clientGetBaseCHA.detail = "client.GetBaseCHA()";
				clientGetBaseCHA.insertText = new vscode.SnippetString('GetBaseCHA()');
				clientGetBaseCHA.documentation = new vscode.MarkdownString("");
				results.push(clientGetBaseCHA);				
				
				const clientGetBaseDEX = new vscode.CompletionItem('GetBaseDEX', vscode.CompletionItemKind.Method);
				
				clientGetBaseDEX.detail = "client.GetBaseDEX()";
				clientGetBaseDEX.insertText = new vscode.SnippetString('GetBaseDEX()');
				clientGetBaseDEX.documentation = new vscode.MarkdownString("");
				results.push(clientGetBaseDEX);				
				
				const clientGetBaseFace = new vscode.CompletionItem('GetBaseFace', vscode.CompletionItemKind.Method);
				
				clientGetBaseFace.detail = "client.GetBaseFace()";
				clientGetBaseFace.insertText = new vscode.SnippetString('GetBaseFace()');
				clientGetBaseFace.documentation = new vscode.MarkdownString("");
				results.push(clientGetBaseFace);				
				
				const clientGetBaseINT = new vscode.CompletionItem('GetBaseINT', vscode.CompletionItemKind.Method);
				
				clientGetBaseINT.detail = "client.GetBaseINT()";
				clientGetBaseINT.insertText = new vscode.SnippetString('GetBaseINT()');
				clientGetBaseINT.documentation = new vscode.MarkdownString("");
				results.push(clientGetBaseINT);				
				
				const clientGetBaseSTA = new vscode.CompletionItem('GetBaseSTA', vscode.CompletionItemKind.Method);
				
				clientGetBaseSTA.detail = "client.GetBaseSTA()";
				clientGetBaseSTA.insertText = new vscode.SnippetString('GetBaseSTA()');
				clientGetBaseSTA.documentation = new vscode.MarkdownString("");
				results.push(clientGetBaseSTA);				
				
				const clientGetBaseSTR = new vscode.CompletionItem('GetBaseSTR', vscode.CompletionItemKind.Method);
				
				clientGetBaseSTR.detail = "client.GetBaseSTR()";
				clientGetBaseSTR.insertText = new vscode.SnippetString('GetBaseSTR()');
				clientGetBaseSTR.documentation = new vscode.MarkdownString("");
				results.push(clientGetBaseSTR);				
				
				const clientGetBaseWIS = new vscode.CompletionItem('GetBaseWIS', vscode.CompletionItemKind.Method);
				
				clientGetBaseWIS.detail = "client.GetBaseWIS()";
				clientGetBaseWIS.insertText = new vscode.SnippetString('GetBaseWIS()');
				clientGetBaseWIS.documentation = new vscode.MarkdownString("");
				results.push(clientGetBaseWIS);				
				
				const clientGetBindHeading = new vscode.CompletionItem('GetBindHeading', vscode.CompletionItemKind.Method);
				
				clientGetBindHeading.detail = "client.GetBindHeading()";
				clientGetBindHeading.insertText = new vscode.SnippetString('GetBindHeading()');
				clientGetBindHeading.documentation = new vscode.MarkdownString("");
				results.push(clientGetBindHeading);				
				
				const clientGetBindX = new vscode.CompletionItem('GetBindX', vscode.CompletionItemKind.Method);
				
				clientGetBindX.detail = "client.GetBindX()";
				clientGetBindX.insertText = new vscode.SnippetString('GetBindX()');
				clientGetBindX.documentation = new vscode.MarkdownString("");
				results.push(clientGetBindX);				
				
				const clientGetBindY = new vscode.CompletionItem('GetBindY', vscode.CompletionItemKind.Method);
				
				clientGetBindY.detail = "client.GetBindY()";
				clientGetBindY.insertText = new vscode.SnippetString('GetBindY()');
				clientGetBindY.documentation = new vscode.MarkdownString("");
				results.push(clientGetBindY);				
				
				const clientGetBindZ = new vscode.CompletionItem('GetBindZ', vscode.CompletionItemKind.Method);
				
				clientGetBindZ.detail = "client.GetBindZ()";
				clientGetBindZ.insertText = new vscode.SnippetString('GetBindZ()');
				clientGetBindZ.documentation = new vscode.MarkdownString("");
				results.push(clientGetBindZ);				
				
				const clientGetBindZoneID = new vscode.CompletionItem('GetBindZoneID', vscode.CompletionItemKind.Method);
				
				clientGetBindZoneID.detail = "client.GetBindZoneID()";
				clientGetBindZoneID.insertText = new vscode.SnippetString('GetBindZoneID()');
				clientGetBindZoneID.documentation = new vscode.MarkdownString("");
				results.push(clientGetBindZoneID);				
				
				const clientGetCarriedMoney = new vscode.CompletionItem('GetCarriedMoney', vscode.CompletionItemKind.Method);
				
				clientGetCarriedMoney.detail = "client.GetCarriedMoney()";
				clientGetCarriedMoney.insertText = new vscode.SnippetString('GetCarriedMoney()');
				clientGetCarriedMoney.documentation = new vscode.MarkdownString("");
				results.push(clientGetCarriedMoney);				
				
				const clientGetCharacterFactionLevel = new vscode.CompletionItem('GetCharacterFactionLevel', vscode.CompletionItemKind.Method);
				
				clientGetCharacterFactionLevel.detail = "client.GetCharacterFactionLevel()";
				clientGetCharacterFactionLevel.insertText = new vscode.SnippetString('GetCharacterFactionLevel()');
				clientGetCharacterFactionLevel.documentation = new vscode.MarkdownString("");
				results.push(clientGetCharacterFactionLevel);				
				
				const clientGetClientMaxLevel = new vscode.CompletionItem('GetClientMaxLevel', vscode.CompletionItemKind.Method);
				
				clientGetClientMaxLevel.detail = "client.GetClientMaxLevel()";
				clientGetClientMaxLevel.insertText = new vscode.SnippetString('GetClientMaxLevel()');
				clientGetClientMaxLevel.documentation = new vscode.MarkdownString("");
				results.push(clientGetClientMaxLevel);				
				
				const clientGetClientVersion = new vscode.CompletionItem('GetClientVersion', vscode.CompletionItemKind.Method);
				
				clientGetClientVersion.detail = "client.GetClientVersion()";
				clientGetClientVersion.insertText = new vscode.SnippetString('GetClientVersion()');
				clientGetClientVersion.documentation = new vscode.MarkdownString("");
				results.push(clientGetClientVersion);				
				
				const clientGetClientVersionBit = new vscode.CompletionItem('GetClientVersionBit', vscode.CompletionItemKind.Method);
				
				clientGetClientVersionBit.detail = "client.GetClientVersionBit()";
				clientGetClientVersionBit.insertText = new vscode.SnippetString('GetClientVersionBit()');
				clientGetClientVersionBit.documentation = new vscode.MarkdownString("");
				results.push(clientGetClientVersionBit);				
				
				const clientGetCorpseCount = new vscode.CompletionItem('GetCorpseCount', vscode.CompletionItemKind.Method);
				
				clientGetCorpseCount.detail = "client.GetCorpseCount()";
				clientGetCorpseCount.insertText = new vscode.SnippetString('GetCorpseCount()');
				clientGetCorpseCount.documentation = new vscode.MarkdownString("");
				results.push(clientGetCorpseCount);				
				
				const clientGetCorpseID = new vscode.CompletionItem('GetCorpseID', vscode.CompletionItemKind.Method);
				
				clientGetCorpseID.detail = "client.GetCorpseID()";
				clientGetCorpseID.insertText = new vscode.SnippetString('GetCorpseID()');
				clientGetCorpseID.documentation = new vscode.MarkdownString("");
				results.push(clientGetCorpseID);				
				
				const clientGetCorpseItemAt = new vscode.CompletionItem('GetCorpseItemAt', vscode.CompletionItemKind.Method);
				
				clientGetCorpseItemAt.detail = "client.GetCorpseItemAt()";
				clientGetCorpseItemAt.insertText = new vscode.SnippetString('GetCorpseItemAt()');
				clientGetCorpseItemAt.documentation = new vscode.MarkdownString("");
				results.push(clientGetCorpseItemAt);				
				
				const clientGetDisciplineTimer = new vscode.CompletionItem('GetDisciplineTimer', vscode.CompletionItemKind.Method);
				
				clientGetDisciplineTimer.detail = "client.GetDisciplineTimer()";
				clientGetDisciplineTimer.insertText = new vscode.SnippetString('GetDisciplineTimer()');
				clientGetDisciplineTimer.documentation = new vscode.MarkdownString("");
				results.push(clientGetDisciplineTimer);				
				
				const clientGetDiscSlotBySpellID = new vscode.CompletionItem('GetDiscSlotBySpellID', vscode.CompletionItemKind.Method);
				
				clientGetDiscSlotBySpellID.detail = "client.GetDiscSlotBySpellID()";
				clientGetDiscSlotBySpellID.insertText = new vscode.SnippetString('GetDiscSlotBySpellID()');
				clientGetDiscSlotBySpellID.documentation = new vscode.MarkdownString("");
				results.push(clientGetDiscSlotBySpellID);				
				
				const clientGetDuelTarget = new vscode.CompletionItem('GetDuelTarget', vscode.CompletionItemKind.Method);
				
				clientGetDuelTarget.detail = "client.GetDuelTarget()";
				clientGetDuelTarget.insertText = new vscode.SnippetString('GetDuelTarget()');
				clientGetDuelTarget.documentation = new vscode.MarkdownString("");
				results.push(clientGetDuelTarget);				
				
				const clientGetEbonCrystals = new vscode.CompletionItem('GetEbonCrystals', vscode.CompletionItemKind.Method);
				
				clientGetEbonCrystals.detail = "client.GetEbonCrystals()";
				clientGetEbonCrystals.insertText = new vscode.SnippetString('GetEbonCrystals()');
				clientGetEbonCrystals.documentation = new vscode.MarkdownString("");
				results.push(clientGetEbonCrystals);				
				
				const clientGetEndurance = new vscode.CompletionItem('GetEndurance', vscode.CompletionItemKind.Method);
				
				clientGetEndurance.detail = "client.GetEndurance()";
				clientGetEndurance.insertText = new vscode.SnippetString('GetEndurance()');
				clientGetEndurance.documentation = new vscode.MarkdownString("");
				results.push(clientGetEndurance);				
				
				const clientGetEndurancePercent = new vscode.CompletionItem('GetEndurancePercent', vscode.CompletionItemKind.Method);
				
				clientGetEndurancePercent.detail = "client.GetEndurancePercent()";
				clientGetEndurancePercent.insertText = new vscode.SnippetString('GetEndurancePercent()');
				clientGetEndurancePercent.documentation = new vscode.MarkdownString("");
				results.push(clientGetEndurancePercent);				
				
				const clientGetEXP = new vscode.CompletionItem('GetEXP', vscode.CompletionItemKind.Method);
				
				clientGetEXP.detail = "client.GetEXP()";
				clientGetEXP.insertText = new vscode.SnippetString('GetEXP()');
				clientGetEXP.documentation = new vscode.MarkdownString("");
				results.push(clientGetEXP);				
				
				const clientGetFace = new vscode.CompletionItem('GetFace', vscode.CompletionItemKind.Method);
				
				clientGetFace.detail = "client.GetFace()";
				clientGetFace.insertText = new vscode.SnippetString('GetFace()');
				clientGetFace.documentation = new vscode.MarkdownString("");
				results.push(clientGetFace);				
				
				const clientGetFactionLevel = new vscode.CompletionItem('GetFactionLevel', vscode.CompletionItemKind.Method);
				
				clientGetFactionLevel.detail = "client.GetFactionLevel()";
				clientGetFactionLevel.insertText = new vscode.SnippetString('GetFactionLevel()');
				clientGetFactionLevel.documentation = new vscode.MarkdownString("");
				results.push(clientGetFactionLevel);				
				
				const clientGetFeigned = new vscode.CompletionItem('GetFeigned', vscode.CompletionItemKind.Method);
				
				clientGetFeigned.detail = "client.GetFeigned()";
				clientGetFeigned.insertText = new vscode.SnippetString('GetFeigned()');
				clientGetFeigned.documentation = new vscode.MarkdownString("");
				results.push(clientGetFeigned);				
				
				const clientGetGM = new vscode.CompletionItem('GetGM', vscode.CompletionItemKind.Method);
				
				clientGetGM.detail = "client.GetGM()";
				clientGetGM.insertText = new vscode.SnippetString('GetGM()');
				clientGetGM.documentation = new vscode.MarkdownString("");
				results.push(clientGetGM);				
				
				const clientGetGroup = new vscode.CompletionItem('GetGroup', vscode.CompletionItemKind.Method);
				
				clientGetGroup.detail = "client.GetGroup()";
				clientGetGroup.insertText = new vscode.SnippetString('GetGroup()');
				clientGetGroup.documentation = new vscode.MarkdownString("");
				results.push(clientGetGroup);				
				
				const clientGetGroupPoints = new vscode.CompletionItem('GetGroupPoints', vscode.CompletionItemKind.Method);
				
				clientGetGroupPoints.detail = "client.GetGroupPoints()";
				clientGetGroupPoints.insertText = new vscode.SnippetString('GetGroupPoints()');
				clientGetGroupPoints.documentation = new vscode.MarkdownString("");
				results.push(clientGetGroupPoints);				
				
				const clientGetHorseId = new vscode.CompletionItem('GetHorseId', vscode.CompletionItemKind.Method);
				
				clientGetHorseId.detail = "client.GetHorseId()";
				clientGetHorseId.insertText = new vscode.SnippetString('GetHorseId()');
				clientGetHorseId.documentation = new vscode.MarkdownString("");
				results.push(clientGetHorseId);				
				
				const clientGetHunger = new vscode.CompletionItem('GetHunger', vscode.CompletionItemKind.Method);
				
				clientGetHunger.detail = "client.GetHunger()";
				clientGetHunger.insertText = new vscode.SnippetString('GetHunger()');
				clientGetHunger.documentation = new vscode.MarkdownString("");
				results.push(clientGetHunger);				
				
				const clientGetInstrumentMod = new vscode.CompletionItem('GetInstrumentMod', vscode.CompletionItemKind.Method);
				
				clientGetInstrumentMod.detail = "client.GetInstrumentMod()";
				clientGetInstrumentMod.insertText = new vscode.SnippetString('GetInstrumentMod()');
				clientGetInstrumentMod.documentation = new vscode.MarkdownString("");
				results.push(clientGetInstrumentMod);				
				
				const clientGetInventory = new vscode.CompletionItem('GetInventory', vscode.CompletionItemKind.Method);
				
				clientGetInventory.detail = "client.GetInventory()";
				clientGetInventory.insertText = new vscode.SnippetString('GetInventory()');
				clientGetInventory.documentation = new vscode.MarkdownString("");
				results.push(clientGetInventory);				
				
				const clientGetIP = new vscode.CompletionItem('GetIP', vscode.CompletionItemKind.Method);
				
				clientGetIP.detail = "client.GetIP()";
				clientGetIP.insertText = new vscode.SnippetString('GetIP()');
				clientGetIP.documentation = new vscode.MarkdownString("");
				results.push(clientGetIP);				
				
				const clientGetItemIDAt = new vscode.CompletionItem('GetItemIDAt', vscode.CompletionItemKind.Method);
				
				clientGetItemIDAt.detail = "client.GetItemIDAt()";
				clientGetItemIDAt.insertText = new vscode.SnippetString('GetItemIDAt()');
				clientGetItemIDAt.documentation = new vscode.MarkdownString("");
				results.push(clientGetItemIDAt);				
				
				const clientGetLanguageSkill = new vscode.CompletionItem('GetLanguageSkill', vscode.CompletionItemKind.Method);
				
				clientGetLanguageSkill.detail = "client.GetLanguageSkill()";
				clientGetLanguageSkill.insertText = new vscode.SnippetString('GetLanguageSkill()');
				clientGetLanguageSkill.documentation = new vscode.MarkdownString("");
				results.push(clientGetLanguageSkill);				
				
				const clientGetLastName = new vscode.CompletionItem('GetLastName', vscode.CompletionItemKind.Method);
				
				clientGetLastName.detail = "client.GetLastName()";
				clientGetLastName.insertText = new vscode.SnippetString('GetLastName()');
				clientGetLastName.documentation = new vscode.MarkdownString("");
				results.push(clientGetLastName);				
				
				const clientGetLDoNLosses = new vscode.CompletionItem('GetLDoNLosses', vscode.CompletionItemKind.Method);
				
				clientGetLDoNLosses.detail = "client.GetLDoNLosses()";
				clientGetLDoNLosses.insertText = new vscode.SnippetString('GetLDoNLosses()');
				clientGetLDoNLosses.documentation = new vscode.MarkdownString("");
				results.push(clientGetLDoNLosses);				
				
				const clientGetLDoNLossesTheme = new vscode.CompletionItem('GetLDoNLossesTheme', vscode.CompletionItemKind.Method);
				
				clientGetLDoNLossesTheme.detail = "client.GetLDoNLossesTheme()";
				clientGetLDoNLossesTheme.insertText = new vscode.SnippetString('GetLDoNLossesTheme()');
				clientGetLDoNLossesTheme.documentation = new vscode.MarkdownString("");
				results.push(clientGetLDoNLossesTheme);				
				
				const clientGetLDoNPointsTheme = new vscode.CompletionItem('GetLDoNPointsTheme', vscode.CompletionItemKind.Method);
				
				clientGetLDoNPointsTheme.detail = "client.GetLDoNPointsTheme()";
				clientGetLDoNPointsTheme.insertText = new vscode.SnippetString('GetLDoNPointsTheme()');
				clientGetLDoNPointsTheme.documentation = new vscode.MarkdownString("");
				results.push(clientGetLDoNPointsTheme);				
				
				const clientGetLDoNWins = new vscode.CompletionItem('GetLDoNWins', vscode.CompletionItemKind.Method);
				
				clientGetLDoNWins.detail = "client.GetLDoNWins()";
				clientGetLDoNWins.insertText = new vscode.SnippetString('GetLDoNWins()');
				clientGetLDoNWins.documentation = new vscode.MarkdownString("");
				results.push(clientGetLDoNWins);				
				
				const clientGetLDoNWinsTheme = new vscode.CompletionItem('GetLDoNWinsTheme', vscode.CompletionItemKind.Method);
				
				clientGetLDoNWinsTheme.detail = "client.GetLDoNWinsTheme()";
				clientGetLDoNWinsTheme.insertText = new vscode.SnippetString('GetLDoNWinsTheme()');
				clientGetLDoNWinsTheme.documentation = new vscode.MarkdownString("");
				results.push(clientGetLDoNWinsTheme);				
				
				const clientGetMaxEndurance = new vscode.CompletionItem('GetMaxEndurance', vscode.CompletionItemKind.Method);
				
				clientGetMaxEndurance.detail = "client.GetMaxEndurance()";
				clientGetMaxEndurance.insertText = new vscode.SnippetString('GetMaxEndurance()');
				clientGetMaxEndurance.documentation = new vscode.MarkdownString("");
				results.push(clientGetMaxEndurance);				
				
				const clientGetModCharacterFactionLevel = new vscode.CompletionItem('GetModCharacterFactionLevel', vscode.CompletionItemKind.Method);
				
				clientGetModCharacterFactionLevel.detail = "client.GetModCharacterFactionLevel()";
				clientGetModCharacterFactionLevel.insertText = new vscode.SnippetString('GetModCharacterFactionLevel()');
				clientGetModCharacterFactionLevel.documentation = new vscode.MarkdownString("");
				results.push(clientGetModCharacterFactionLevel);				
				
				const clientGetMoney = new vscode.CompletionItem('GetMoney', vscode.CompletionItemKind.Method);
				
				clientGetMoney.detail = "client.GetMoney()";
				clientGetMoney.insertText = new vscode.SnippetString('GetMoney()');
				clientGetMoney.documentation = new vscode.MarkdownString("");
				results.push(clientGetMoney);				
				
				const clientGetNextAvailableSpellBookSlot = new vscode.CompletionItem('GetNextAvailableSpellBookSlot', vscode.CompletionItemKind.Method);
				
				clientGetNextAvailableSpellBookSlot.detail = "client.GetNextAvailableSpellBookSlot()";
				clientGetNextAvailableSpellBookSlot.insertText = new vscode.SnippetString('GetNextAvailableSpellBookSlot()');
				clientGetNextAvailableSpellBookSlot.documentation = new vscode.MarkdownString("");
				results.push(clientGetNextAvailableSpellBookSlot);				
				
				const clientGetPVP = new vscode.CompletionItem('GetPVP', vscode.CompletionItemKind.Method);
				
				clientGetPVP.detail = "client.GetPVP()";
				clientGetPVP.insertText = new vscode.SnippetString('GetPVP()');
				clientGetPVP.documentation = new vscode.MarkdownString("");
				results.push(clientGetPVP);				
				
				const clientGetPVPPoints = new vscode.CompletionItem('GetPVPPoints', vscode.CompletionItemKind.Method);
				
				clientGetPVPPoints.detail = "client.GetPVPPoints()";
				clientGetPVPPoints.insertText = new vscode.SnippetString('GetPVPPoints()');
				clientGetPVPPoints.documentation = new vscode.MarkdownString("");
				results.push(clientGetPVPPoints);				
				
				const clientGetRadiantCrystals = new vscode.CompletionItem('GetRadiantCrystals', vscode.CompletionItemKind.Method);
				
				clientGetRadiantCrystals.detail = "client.GetRadiantCrystals()";
				clientGetRadiantCrystals.insertText = new vscode.SnippetString('GetRadiantCrystals()');
				clientGetRadiantCrystals.documentation = new vscode.MarkdownString("");
				results.push(clientGetRadiantCrystals);				
				
				const clientGetRaid = new vscode.CompletionItem('GetRaid', vscode.CompletionItemKind.Method);
				
				clientGetRaid.detail = "client.GetRaid()";
				clientGetRaid.insertText = new vscode.SnippetString('GetRaid()');
				clientGetRaid.documentation = new vscode.MarkdownString("");
				results.push(clientGetRaid);				
				
				const clientGetRaidPoints = new vscode.CompletionItem('GetRaidPoints', vscode.CompletionItemKind.Method);
				
				clientGetRaidPoints.detail = "client.GetRaidPoints()";
				clientGetRaidPoints.insertText = new vscode.SnippetString('GetRaidPoints()');
				clientGetRaidPoints.documentation = new vscode.MarkdownString("");
				results.push(clientGetRaidPoints);				
				
				const clientGetRawItemAC = new vscode.CompletionItem('GetRawItemAC', vscode.CompletionItemKind.Method);
				
				clientGetRawItemAC.detail = "client.GetRawItemAC()";
				clientGetRawItemAC.insertText = new vscode.SnippetString('GetRawItemAC()');
				clientGetRawItemAC.documentation = new vscode.MarkdownString("");
				results.push(clientGetRawItemAC);				
				
				const clientGetRawSkill = new vscode.CompletionItem('GetRawSkill', vscode.CompletionItemKind.Method);
				
				clientGetRawSkill.detail = "client.GetRawSkill()";
				clientGetRawSkill.insertText = new vscode.SnippetString('GetRawSkill()');
				clientGetRawSkill.documentation = new vscode.MarkdownString("");
				results.push(clientGetRawSkill);				
				
				const clientGetSkillPoints = new vscode.CompletionItem('GetSkillPoints', vscode.CompletionItemKind.Method);
				
				clientGetSkillPoints.detail = "client.GetSkillPoints()";
				clientGetSkillPoints.insertText = new vscode.SnippetString('GetSkillPoints()');
				clientGetSkillPoints.documentation = new vscode.MarkdownString("");
				results.push(clientGetSkillPoints);				
				
				const clientGetSpentAA = new vscode.CompletionItem('GetSpentAA', vscode.CompletionItemKind.Method);
				
				clientGetSpentAA.detail = "client.GetSpentAA()";
				clientGetSpentAA.insertText = new vscode.SnippetString('GetSpentAA()');
				clientGetSpentAA.documentation = new vscode.MarkdownString("");
				results.push(clientGetSpentAA);				
				
				const clientGetStartZone = new vscode.CompletionItem('GetStartZone', vscode.CompletionItemKind.Method);
				
				clientGetStartZone.detail = "client.GetStartZone()";
				clientGetStartZone.insertText = new vscode.SnippetString('GetStartZone()');
				clientGetStartZone.documentation = new vscode.MarkdownString("");
				results.push(clientGetStartZone);				
				
				const clientGetThirst = new vscode.CompletionItem('GetThirst', vscode.CompletionItemKind.Method);
				
				clientGetThirst.detail = "client.GetThirst()";
				clientGetThirst.insertText = new vscode.SnippetString('GetThirst()');
				clientGetThirst.documentation = new vscode.MarkdownString("");
				results.push(clientGetThirst);				
				
				const clientGetTotalSecondsPlayed = new vscode.CompletionItem('GetTotalSecondsPlayed', vscode.CompletionItemKind.Method);
				
				clientGetTotalSecondsPlayed.detail = "client.GetTotalSecondsPlayed()";
				clientGetTotalSecondsPlayed.insertText = new vscode.SnippetString('GetTotalSecondsPlayed()');
				clientGetTotalSecondsPlayed.documentation = new vscode.MarkdownString("");
				results.push(clientGetTotalSecondsPlayed);				
				
				const clientGetWeight = new vscode.CompletionItem('GetWeight', vscode.CompletionItemKind.Method);
				
				clientGetWeight.detail = "client.GetWeight()";
				clientGetWeight.insertText = new vscode.SnippetString('GetWeight()');
				clientGetWeight.documentation = new vscode.MarkdownString("");
				results.push(clientGetWeight);				
				
				const clientGoFish = new vscode.CompletionItem('GoFish', vscode.CompletionItemKind.Method);
				
				clientGoFish.detail = "client.GoFish()";
				clientGoFish.insertText = new vscode.SnippetString('GoFish()');
				clientGoFish.documentation = new vscode.MarkdownString("");
				results.push(clientGoFish);				
				
				const clientGrantAlternateAdvancementAbility = new vscode.CompletionItem('GrantAlternateAdvancementAbility', vscode.CompletionItemKind.Method);
				
				clientGrantAlternateAdvancementAbility.detail = "client.GrantAlternateAdvancementAbility()";
				clientGrantAlternateAdvancementAbility.insertText = new vscode.SnippetString('GrantAlternateAdvancementAbility()');
				clientGrantAlternateAdvancementAbility.documentation = new vscode.MarkdownString("");
				results.push(clientGrantAlternateAdvancementAbility);				
				
				const clientGuildID = new vscode.CompletionItem('GuildID', vscode.CompletionItemKind.Method);
				
				clientGuildID.detail = "client.GuildID()";
				clientGuildID.insertText = new vscode.SnippetString('GuildID()');
				clientGuildID.documentation = new vscode.MarkdownString("");
				results.push(clientGuildID);				
				
				const clientGuildRank = new vscode.CompletionItem('GuildRank', vscode.CompletionItemKind.Method);
				
				clientGuildRank.detail = "client.GuildRank()";
				clientGuildRank.insertText = new vscode.SnippetString('GuildRank()');
				clientGuildRank.documentation = new vscode.MarkdownString("");
				results.push(clientGuildRank);				
				
				const clientHasSkill = new vscode.CompletionItem('HasSkill', vscode.CompletionItemKind.Method);
				
				clientHasSkill.detail = "client.HasSkill()";
				clientHasSkill.insertText = new vscode.SnippetString('HasSkill()');
				clientHasSkill.documentation = new vscode.MarkdownString("");
				results.push(clientHasSkill);				
				
				const clientHasSpellScribed = new vscode.CompletionItem('HasSpellScribed', vscode.CompletionItemKind.Method);
				
				clientHasSpellScribed.detail = "client.HasSpellScribed()";
				clientHasSpellScribed.insertText = new vscode.SnippetString('HasSpellScribed()');
				clientHasSpellScribed.documentation = new vscode.MarkdownString("");
				results.push(clientHasSpellScribed);				
				
				const clientHasZoneFlag = new vscode.CompletionItem('HasZoneFlag', vscode.CompletionItemKind.Method);
				
				clientHasZoneFlag.detail = "client.HasZoneFlag()";
				clientHasZoneFlag.insertText = new vscode.SnippetString('HasZoneFlag()');
				clientHasZoneFlag.documentation = new vscode.MarkdownString("");
				results.push(clientHasZoneFlag);				
				
				const clientHungry = new vscode.CompletionItem('Hungry', vscode.CompletionItemKind.Method);
				
				clientHungry.detail = "client.Hungry()";
				clientHungry.insertText = new vscode.SnippetString('Hungry()');
				clientHungry.documentation = new vscode.MarkdownString("");
				results.push(clientHungry);				
				
				const clientIncreaseLanguageSkill = new vscode.CompletionItem('IncreaseLanguageSkill', vscode.CompletionItemKind.Method);
				
				clientIncreaseLanguageSkill.detail = "client.IncreaseLanguageSkill()";
				clientIncreaseLanguageSkill.insertText = new vscode.SnippetString('IncreaseLanguageSkill()');
				clientIncreaseLanguageSkill.documentation = new vscode.MarkdownString("");
				results.push(clientIncreaseLanguageSkill);				
				
				const clientIncreaseSkill = new vscode.CompletionItem('IncreaseSkill', vscode.CompletionItemKind.Method);
				
				clientIncreaseSkill.detail = "client.IncreaseSkill()";
				clientIncreaseSkill.insertText = new vscode.SnippetString('IncreaseSkill()');
				clientIncreaseSkill.documentation = new vscode.MarkdownString("");
				results.push(clientIncreaseSkill);				
				
				const clientIncrementAA = new vscode.CompletionItem('IncrementAA', vscode.CompletionItemKind.Method);
				
				clientIncrementAA.detail = "client.IncrementAA()";
				clientIncrementAA.insertText = new vscode.SnippetString('IncrementAA()');
				clientIncrementAA.documentation = new vscode.MarkdownString("");
				results.push(clientIncrementAA);				
				
				const clientIncStats = new vscode.CompletionItem('IncStats', vscode.CompletionItemKind.Method);
				
				clientIncStats.detail = "client.IncStats()";
				clientIncStats.insertText = new vscode.SnippetString('IncStats()');
				clientIncStats.documentation = new vscode.MarkdownString("");
				results.push(clientIncStats);				
				
				const clientInZone = new vscode.CompletionItem('InZone', vscode.CompletionItemKind.Method);
				
				clientInZone.detail = "client.InZone()";
				clientInZone.insertText = new vscode.SnippetString('InZone()');
				clientInZone.documentation = new vscode.MarkdownString("");
				results.push(clientInZone);				
				
				const clientIsCrouching = new vscode.CompletionItem('IsCrouching', vscode.CompletionItemKind.Method);
				
				clientIsCrouching.detail = "client.IsCrouching()";
				clientIsCrouching.insertText = new vscode.SnippetString('IsCrouching()');
				clientIsCrouching.documentation = new vscode.MarkdownString("");
				results.push(clientIsCrouching);				
				
				const clientIsDead = new vscode.CompletionItem('IsDead', vscode.CompletionItemKind.Method);
				
				clientIsDead.detail = "client.IsDead()";
				clientIsDead.insertText = new vscode.SnippetString('IsDead()');
				clientIsDead.documentation = new vscode.MarkdownString("");
				results.push(clientIsDead);				
				
				const clientIsDueling = new vscode.CompletionItem('IsDueling', vscode.CompletionItemKind.Method);
				
				clientIsDueling.detail = "client.IsDueling()";
				clientIsDueling.insertText = new vscode.SnippetString('IsDueling()');
				clientIsDueling.documentation = new vscode.MarkdownString("");
				results.push(clientIsDueling);				
				
				const clientIsGrouped = new vscode.CompletionItem('IsGrouped', vscode.CompletionItemKind.Method);
				
				clientIsGrouped.detail = "client.IsGrouped()";
				clientIsGrouped.insertText = new vscode.SnippetString('IsGrouped()');
				clientIsGrouped.documentation = new vscode.MarkdownString("");
				results.push(clientIsGrouped);				
				
				const clientIsLD = new vscode.CompletionItem('IsLD', vscode.CompletionItemKind.Method);
				
				clientIsLD.detail = "client.IsLD()";
				clientIsLD.insertText = new vscode.SnippetString('IsLD()');
				clientIsLD.documentation = new vscode.MarkdownString("");
				results.push(clientIsLD);				
				
				const clientIsMedding = new vscode.CompletionItem('IsMedding', vscode.CompletionItemKind.Method);
				
				clientIsMedding.detail = "client.IsMedding()";
				clientIsMedding.insertText = new vscode.SnippetString('IsMedding()');
				clientIsMedding.documentation = new vscode.MarkdownString("");
				results.push(clientIsMedding);				
				
				const clientIsRaidGrouped = new vscode.CompletionItem('IsRaidGrouped', vscode.CompletionItemKind.Method);
				
				clientIsRaidGrouped.detail = "client.IsRaidGrouped()";
				clientIsRaidGrouped.insertText = new vscode.SnippetString('IsRaidGrouped()');
				clientIsRaidGrouped.documentation = new vscode.MarkdownString("");
				results.push(clientIsRaidGrouped);				
				
				const clientIsSitting = new vscode.CompletionItem('IsSitting', vscode.CompletionItemKind.Method);
				
				clientIsSitting.detail = "client.IsSitting()";
				clientIsSitting.insertText = new vscode.SnippetString('IsSitting()');
				clientIsSitting.documentation = new vscode.MarkdownString("");
				results.push(clientIsSitting);				
				
				const clientIsStanding = new vscode.CompletionItem('IsStanding', vscode.CompletionItemKind.Method);
				
				clientIsStanding.detail = "client.IsStanding()";
				clientIsStanding.insertText = new vscode.SnippetString('IsStanding()');
				clientIsStanding.documentation = new vscode.MarkdownString("");
				results.push(clientIsStanding);				
				
				const clientIsTaskActive = new vscode.CompletionItem('IsTaskActive', vscode.CompletionItemKind.Method);
				
				clientIsTaskActive.detail = "client.IsTaskActive()";
				clientIsTaskActive.insertText = new vscode.SnippetString('IsTaskActive()');
				clientIsTaskActive.documentation = new vscode.MarkdownString("");
				results.push(clientIsTaskActive);				
				
				const clientIsTaskActivityActive = new vscode.CompletionItem('IsTaskActivityActive', vscode.CompletionItemKind.Method);
				
				clientIsTaskActivityActive.detail = "client.IsTaskActivityActive()";
				clientIsTaskActivityActive.insertText = new vscode.SnippetString('IsTaskActivityActive()');
				clientIsTaskActivityActive.documentation = new vscode.MarkdownString("");
				results.push(clientIsTaskActivityActive);				
				
				const clientIsTaskCompleted = new vscode.CompletionItem('IsTaskCompleted', vscode.CompletionItemKind.Method);
				
				clientIsTaskCompleted.detail = "client.IsTaskCompleted()";
				clientIsTaskCompleted.insertText = new vscode.SnippetString('IsTaskCompleted()');
				clientIsTaskCompleted.documentation = new vscode.MarkdownString("");
				results.push(clientIsTaskCompleted);				
				
				const clientKeyRingAdd = new vscode.CompletionItem('KeyRingAdd', vscode.CompletionItemKind.Method);
				
				clientKeyRingAdd.detail = "client.KeyRingAdd()";
				clientKeyRingAdd.insertText = new vscode.SnippetString('KeyRingAdd()');
				clientKeyRingAdd.documentation = new vscode.MarkdownString("");
				results.push(clientKeyRingAdd);				
				
				const clientKeyRingCheck = new vscode.CompletionItem('KeyRingCheck', vscode.CompletionItemKind.Method);
				
				clientKeyRingCheck.detail = "client.KeyRingCheck()";
				clientKeyRingCheck.insertText = new vscode.SnippetString('KeyRingCheck()');
				clientKeyRingCheck.documentation = new vscode.MarkdownString("");
				results.push(clientKeyRingCheck);				
				
				const clientKick = new vscode.CompletionItem('Kick', vscode.CompletionItemKind.Method);
				
				clientKick.detail = "client.Kick()";
				clientKick.insertText = new vscode.SnippetString('Kick()');
				clientKick.documentation = new vscode.MarkdownString("");
				results.push(clientKick);				
				
				const clientLearnRecipe = new vscode.CompletionItem('LearnRecipe', vscode.CompletionItemKind.Method);
				
				clientLearnRecipe.detail = "client.LearnRecipe()";
				clientLearnRecipe.insertText = new vscode.SnippetString('LearnRecipe()');
				clientLearnRecipe.documentation = new vscode.MarkdownString("");
				results.push(clientLearnRecipe);				
				
				const clientLeaveGroup = new vscode.CompletionItem('LeaveGroup', vscode.CompletionItemKind.Method);
				
				clientLeaveGroup.detail = "client.LeaveGroup()";
				clientLeaveGroup.insertText = new vscode.SnippetString('LeaveGroup()');
				clientLeaveGroup.documentation = new vscode.MarkdownString("");
				results.push(clientLeaveGroup);				
				
				const clientMarkSingleCompassLoc = new vscode.CompletionItem('MarkSingleCompassLoc', vscode.CompletionItemKind.Method);
				
				clientMarkSingleCompassLoc.detail = "client.MarkSingleCompassLoc()";
				clientMarkSingleCompassLoc.insertText = new vscode.SnippetString('MarkSingleCompassLoc()');
				clientMarkSingleCompassLoc.documentation = new vscode.MarkdownString("");
				results.push(clientMarkSingleCompassLoc);				
				
				const clientMaxSkill = new vscode.CompletionItem('MaxSkill', vscode.CompletionItemKind.Method);
				
				clientMaxSkill.detail = "client.MaxSkill()";
				clientMaxSkill.insertText = new vscode.SnippetString('MaxSkill()');
				clientMaxSkill.documentation = new vscode.MarkdownString("");
				results.push(clientMaxSkill);				
				
				const clientMemmedCount = new vscode.CompletionItem('MemmedCount', vscode.CompletionItemKind.Method);
				
				clientMemmedCount.detail = "client.MemmedCount()";
				clientMemmedCount.insertText = new vscode.SnippetString('MemmedCount()');
				clientMemmedCount.documentation = new vscode.MarkdownString("");
				results.push(clientMemmedCount);				
				
				const clientMemSpell = new vscode.CompletionItem('MemSpell', vscode.CompletionItemKind.Method);
				
				clientMemSpell.detail = "client.MemSpell()";
				clientMemSpell.insertText = new vscode.SnippetString('MemSpell()');
				clientMemSpell.documentation = new vscode.MarkdownString("");
				results.push(clientMemSpell);				
				
				const clientMovePC = new vscode.CompletionItem('MovePC', vscode.CompletionItemKind.Method);
				
				clientMovePC.detail = "client.MovePC()";
				clientMovePC.insertText = new vscode.SnippetString('MovePC()');
				clientMovePC.documentation = new vscode.MarkdownString("");
				results.push(clientMovePC);				
				
				const clientMovePCInstance = new vscode.CompletionItem('MovePCInstance', vscode.CompletionItemKind.Method);
				
				clientMovePCInstance.detail = "client.MovePCInstance()";
				clientMovePCInstance.insertText = new vscode.SnippetString('MovePCInstance()');
				clientMovePCInstance.documentation = new vscode.MarkdownString("");
				results.push(clientMovePCInstance);				
				
				const clientMoveZone = new vscode.CompletionItem('MoveZone', vscode.CompletionItemKind.Method);
				
				clientMoveZone.detail = "client.MoveZone()";
				clientMoveZone.insertText = new vscode.SnippetString('MoveZone()');
				clientMoveZone.documentation = new vscode.MarkdownString("");
				results.push(clientMoveZone);				
				
				const clientMoveZoneGroup = new vscode.CompletionItem('MoveZoneGroup', vscode.CompletionItemKind.Method);
				
				clientMoveZoneGroup.detail = "client.MoveZoneGroup()";
				clientMoveZoneGroup.insertText = new vscode.SnippetString('MoveZoneGroup()');
				clientMoveZoneGroup.documentation = new vscode.MarkdownString("");
				results.push(clientMoveZoneGroup);				
				
				const clientMoveZoneInstance = new vscode.CompletionItem('MoveZoneInstance', vscode.CompletionItemKind.Method);
				
				clientMoveZoneInstance.detail = "client.MoveZoneInstance()";
				clientMoveZoneInstance.insertText = new vscode.SnippetString('MoveZoneInstance()');
				clientMoveZoneInstance.documentation = new vscode.MarkdownString("");
				results.push(clientMoveZoneInstance);				
				
				const clientMoveZoneInstanceGroup = new vscode.CompletionItem('MoveZoneInstanceGroup', vscode.CompletionItemKind.Method);
				
				clientMoveZoneInstanceGroup.detail = "client.MoveZoneInstanceGroup()";
				clientMoveZoneInstanceGroup.insertText = new vscode.SnippetString('MoveZoneInstanceGroup()');
				clientMoveZoneInstanceGroup.documentation = new vscode.MarkdownString("");
				results.push(clientMoveZoneInstanceGroup);				
				
				const clientMoveZoneInstanceRaid = new vscode.CompletionItem('MoveZoneInstanceRaid', vscode.CompletionItemKind.Method);
				
				clientMoveZoneInstanceRaid.detail = "client.MoveZoneInstanceRaid()";
				clientMoveZoneInstanceRaid.insertText = new vscode.SnippetString('MoveZoneInstanceRaid()');
				clientMoveZoneInstanceRaid.documentation = new vscode.MarkdownString("");
				results.push(clientMoveZoneInstanceRaid);				
				
				const clientMoveZoneRaid = new vscode.CompletionItem('MoveZoneRaid', vscode.CompletionItemKind.Method);
				
				clientMoveZoneRaid.detail = "client.MoveZoneRaid()";
				clientMoveZoneRaid.insertText = new vscode.SnippetString('MoveZoneRaid()');
				clientMoveZoneRaid.documentation = new vscode.MarkdownString("");
				results.push(clientMoveZoneRaid);				
				
				const clientNotifyNewTitlesAvailable = new vscode.CompletionItem('NotifyNewTitlesAvailable', vscode.CompletionItemKind.Method);
				
				clientNotifyNewTitlesAvailable.detail = "client.NotifyNewTitlesAvailable()";
				clientNotifyNewTitlesAvailable.insertText = new vscode.SnippetString('NotifyNewTitlesAvailable()');
				clientNotifyNewTitlesAvailable.documentation = new vscode.MarkdownString("");
				results.push(clientNotifyNewTitlesAvailable);				
				
				const clientNukeItem = new vscode.CompletionItem('NukeItem', vscode.CompletionItemKind.Method);
				
				clientNukeItem.detail = "client.NukeItem()";
				clientNukeItem.insertText = new vscode.SnippetString('NukeItem()');
				clientNukeItem.documentation = new vscode.MarkdownString("");
				results.push(clientNukeItem);				
				
				const clientOpenLFGuildWindow = new vscode.CompletionItem('OpenLFGuildWindow', vscode.CompletionItemKind.Method);
				
				clientOpenLFGuildWindow.detail = "client.OpenLFGuildWindow()";
				clientOpenLFGuildWindow.insertText = new vscode.SnippetString('OpenLFGuildWindow()');
				clientOpenLFGuildWindow.documentation = new vscode.MarkdownString("");
				results.push(clientOpenLFGuildWindow);				
				
				const clientPlayMP3 = new vscode.CompletionItem('PlayMP3', vscode.CompletionItemKind.Method);
				
				clientPlayMP3.detail = "client.PlayMP3()";
				clientPlayMP3.insertText = new vscode.SnippetString('PlayMP3()');
				clientPlayMP3.documentation = new vscode.MarkdownString("");
				results.push(clientPlayMP3);				
				
				const clientPushItemOnCursor = new vscode.CompletionItem('PushItemOnCursor', vscode.CompletionItemKind.Method);
				
				clientPushItemOnCursor.detail = "client.PushItemOnCursor()";
				clientPushItemOnCursor.insertText = new vscode.SnippetString('PushItemOnCursor()');
				clientPushItemOnCursor.documentation = new vscode.MarkdownString("");
				results.push(clientPushItemOnCursor);				
				
				const clientPutItemInInventory = new vscode.CompletionItem('PutItemInInventory', vscode.CompletionItemKind.Method);
				
				clientPutItemInInventory.detail = "client.PutItemInInventory()";
				clientPutItemInInventory.insertText = new vscode.SnippetString('PutItemInInventory()');
				clientPutItemInInventory.documentation = new vscode.MarkdownString("");
				results.push(clientPutItemInInventory);				
				
				const clientQuestReadBook = new vscode.CompletionItem('QuestReadBook', vscode.CompletionItemKind.Method);
				
				clientQuestReadBook.detail = "client.QuestReadBook()";
				clientQuestReadBook.insertText = new vscode.SnippetString('QuestReadBook()');
				clientQuestReadBook.documentation = new vscode.MarkdownString("");
				results.push(clientQuestReadBook);				
				
				const clientQuestReward = new vscode.CompletionItem('QuestReward', vscode.CompletionItemKind.Method);
				
				clientQuestReward.detail = "client.QuestReward()";
				clientQuestReward.insertText = new vscode.SnippetString('QuestReward()');
				clientQuestReward.documentation = new vscode.MarkdownString("");
				results.push(clientQuestReward);				
				
				const clientQueuePacket = new vscode.CompletionItem('QueuePacket', vscode.CompletionItemKind.Method);
				
				clientQueuePacket.detail = "client.QueuePacket()";
				clientQueuePacket.insertText = new vscode.SnippetString('QueuePacket()');
				clientQueuePacket.documentation = new vscode.MarkdownString("");
				results.push(clientQueuePacket);				
				
				const clientRefundAA = new vscode.CompletionItem('RefundAA', vscode.CompletionItemKind.Method);
				
				clientRefundAA.detail = "client.RefundAA()";
				clientRefundAA.insertText = new vscode.SnippetString('RefundAA()');
				clientRefundAA.documentation = new vscode.MarkdownString("");
				results.push(clientRefundAA);				
				
				const clientResetAA = new vscode.CompletionItem('ResetAA', vscode.CompletionItemKind.Method);
				
				clientResetAA.detail = "client.ResetAA()";
				clientResetAA.insertText = new vscode.SnippetString('ResetAA()');
				clientResetAA.documentation = new vscode.MarkdownString("");
				results.push(clientResetAA);				
				
				const clientResetDisciplineTimer = new vscode.CompletionItem('ResetDisciplineTimer', vscode.CompletionItemKind.Method);
				
				clientResetDisciplineTimer.detail = "client.ResetDisciplineTimer()";
				clientResetDisciplineTimer.insertText = new vscode.SnippetString('ResetDisciplineTimer()');
				clientResetDisciplineTimer.documentation = new vscode.MarkdownString("");
				results.push(clientResetDisciplineTimer);				
				
				const clientResetTrade = new vscode.CompletionItem('ResetTrade', vscode.CompletionItemKind.Method);
				
				clientResetTrade.detail = "client.ResetTrade()";
				clientResetTrade.insertText = new vscode.SnippetString('ResetTrade()');
				clientResetTrade.documentation = new vscode.MarkdownString("");
				results.push(clientResetTrade);				
				
				const clientSave = new vscode.CompletionItem('Save', vscode.CompletionItemKind.Method);
				
				clientSave.detail = "client.Save()";
				clientSave.insertText = new vscode.SnippetString('Save()');
				clientSave.documentation = new vscode.MarkdownString("");
				results.push(clientSave);				
				
				const clientSaveBackup = new vscode.CompletionItem('SaveBackup', vscode.CompletionItemKind.Method);
				
				clientSaveBackup.detail = "client.SaveBackup()";
				clientSaveBackup.insertText = new vscode.SnippetString('SaveBackup()');
				clientSaveBackup.documentation = new vscode.MarkdownString("");
				results.push(clientSaveBackup);				
				
				const clientScribeSpell = new vscode.CompletionItem('ScribeSpell', vscode.CompletionItemKind.Method);
				
				clientScribeSpell.detail = "client.ScribeSpell()";
				clientScribeSpell.insertText = new vscode.SnippetString('ScribeSpell()');
				clientScribeSpell.documentation = new vscode.MarkdownString("");
				results.push(clientScribeSpell);				
				
				const clientSendColoredText = new vscode.CompletionItem('SendColoredText', vscode.CompletionItemKind.Method);
				
				clientSendColoredText.detail = "client.SendColoredText()";
				clientSendColoredText.insertText = new vscode.SnippetString('SendColoredText()');
				clientSendColoredText.documentation = new vscode.MarkdownString("");
				results.push(clientSendColoredText);				
				
				const clientSendItemScale = new vscode.CompletionItem('SendItemScale', vscode.CompletionItemKind.Method);
				
				clientSendItemScale.detail = "client.SendItemScale()";
				clientSendItemScale.insertText = new vscode.SnippetString('SendItemScale()');
				clientSendItemScale.documentation = new vscode.MarkdownString("");
				results.push(clientSendItemScale);				
				
				const clientSendMarqueeMessage = new vscode.CompletionItem('SendMarqueeMessage', vscode.CompletionItemKind.Method);
				
				clientSendMarqueeMessage.detail = "client.SendMarqueeMessage()";
				clientSendMarqueeMessage.insertText = new vscode.SnippetString('SendMarqueeMessage()');
				clientSendMarqueeMessage.documentation = new vscode.MarkdownString("");
				results.push(clientSendMarqueeMessage);				
				
				const clientSendOPTranslocateConfirm = new vscode.CompletionItem('SendOPTranslocateConfirm', vscode.CompletionItemKind.Method);
				
				clientSendOPTranslocateConfirm.detail = "client.SendOPTranslocateConfirm()";
				clientSendOPTranslocateConfirm.insertText = new vscode.SnippetString('SendOPTranslocateConfirm()');
				clientSendOPTranslocateConfirm.documentation = new vscode.MarkdownString("");
				results.push(clientSendOPTranslocateConfirm);				
				
				const clientSendSound = new vscode.CompletionItem('SendSound', vscode.CompletionItemKind.Method);
				
				clientSendSound.detail = "client.SendSound()";
				clientSendSound.insertText = new vscode.SnippetString('SendSound()');
				clientSendSound.documentation = new vscode.MarkdownString("");
				results.push(clientSendSound);				
				
				const clientSendToGuildHall = new vscode.CompletionItem('SendToGuildHall', vscode.CompletionItemKind.Method);
				
				clientSendToGuildHall.detail = "client.SendToGuildHall()";
				clientSendToGuildHall.insertText = new vscode.SnippetString('SendToGuildHall()');
				clientSendToGuildHall.documentation = new vscode.MarkdownString("");
				results.push(clientSendToGuildHall);				
				
				const clientSendWebLink = new vscode.CompletionItem('SendWebLink', vscode.CompletionItemKind.Method);
				
				clientSendWebLink.detail = "client.SendWebLink()";
				clientSendWebLink.insertText = new vscode.SnippetString('SendWebLink()');
				clientSendWebLink.documentation = new vscode.MarkdownString("");
				results.push(clientSendWebLink);				
				
				const clientSendZoneFlagInfo = new vscode.CompletionItem('SendZoneFlagInfo', vscode.CompletionItemKind.Method);
				
				clientSendZoneFlagInfo.detail = "client.SendZoneFlagInfo()";
				clientSendZoneFlagInfo.insertText = new vscode.SnippetString('SendZoneFlagInfo()');
				clientSendZoneFlagInfo.documentation = new vscode.MarkdownString("");
				results.push(clientSendZoneFlagInfo);				
				
				const clientSetAAPoints = new vscode.CompletionItem('SetAAPoints', vscode.CompletionItemKind.Method);
				
				clientSetAAPoints.detail = "client.SetAAPoints()";
				clientSetAAPoints.insertText = new vscode.SnippetString('SetAAPoints()');
				clientSetAAPoints.documentation = new vscode.MarkdownString("");
				results.push(clientSetAAPoints);				
				
				const clientSetAATitle = new vscode.CompletionItem('SetAATitle', vscode.CompletionItemKind.Method);
				
				clientSetAATitle.detail = "client.SetAATitle()";
				clientSetAATitle.insertText = new vscode.SnippetString('SetAATitle()');
				clientSetAATitle.documentation = new vscode.MarkdownString("");
				results.push(clientSetAATitle);				
				
				const clientSetAccountFlag = new vscode.CompletionItem('SetAccountFlag', vscode.CompletionItemKind.Method);
				
				clientSetAccountFlag.detail = "client.SetAccountFlag()";
				clientSetAccountFlag.insertText = new vscode.SnippetString('SetAccountFlag()');
				clientSetAccountFlag.documentation = new vscode.MarkdownString("");
				results.push(clientSetAccountFlag);				
				
				const clientSetAlternateCurrencyValue = new vscode.CompletionItem('SetAlternateCurrencyValue', vscode.CompletionItemKind.Method);
				
				clientSetAlternateCurrencyValue.detail = "client.SetAlternateCurrencyValue()";
				clientSetAlternateCurrencyValue.insertText = new vscode.SnippetString('SetAlternateCurrencyValue()');
				clientSetAlternateCurrencyValue.documentation = new vscode.MarkdownString("");
				results.push(clientSetAlternateCurrencyValue);				
				
				const clientSetBaseClass = new vscode.CompletionItem('SetBaseClass', vscode.CompletionItemKind.Method);
				
				clientSetBaseClass.detail = "client.SetBaseClass()";
				clientSetBaseClass.insertText = new vscode.SnippetString('SetBaseClass()');
				clientSetBaseClass.documentation = new vscode.MarkdownString("");
				results.push(clientSetBaseClass);				
				
				const clientSetBaseGender = new vscode.CompletionItem('SetBaseGender', vscode.CompletionItemKind.Method);
				
				clientSetBaseGender.detail = "client.SetBaseGender()";
				clientSetBaseGender.insertText = new vscode.SnippetString('SetBaseGender()');
				clientSetBaseGender.documentation = new vscode.MarkdownString("");
				results.push(clientSetBaseGender);				
				
				const clientSetBaseRace = new vscode.CompletionItem('SetBaseRace', vscode.CompletionItemKind.Method);
				
				clientSetBaseRace.detail = "client.SetBaseRace()";
				clientSetBaseRace.insertText = new vscode.SnippetString('SetBaseRace()');
				clientSetBaseRace.documentation = new vscode.MarkdownString("");
				results.push(clientSetBaseRace);				
				
				const clientSetBindPoint = new vscode.CompletionItem('SetBindPoint', vscode.CompletionItemKind.Method);
				
				clientSetBindPoint.detail = "client.SetBindPoint()";
				clientSetBindPoint.insertText = new vscode.SnippetString('SetBindPoint()');
				clientSetBindPoint.documentation = new vscode.MarkdownString("");
				results.push(clientSetBindPoint);				
				
				const clientSetClientMaxLevel = new vscode.CompletionItem('SetClientMaxLevel', vscode.CompletionItemKind.Method);
				
				clientSetClientMaxLevel.detail = "client.SetClientMaxLevel()";
				clientSetClientMaxLevel.insertText = new vscode.SnippetString('SetClientMaxLevel()');
				clientSetClientMaxLevel.documentation = new vscode.MarkdownString("");
				results.push(clientSetClientMaxLevel);				
				
				const clientSetConsumption = new vscode.CompletionItem('SetConsumption', vscode.CompletionItemKind.Method);
				
				clientSetConsumption.detail = "client.SetConsumption()";
				clientSetConsumption.insertText = new vscode.SnippetString('SetConsumption()');
				clientSetConsumption.documentation = new vscode.MarkdownString("");
				results.push(clientSetConsumption);				
				
				const clientSetDeity = new vscode.CompletionItem('SetDeity', vscode.CompletionItemKind.Method);
				
				clientSetDeity.detail = "client.SetDeity()";
				clientSetDeity.insertText = new vscode.SnippetString('SetDeity()');
				clientSetDeity.documentation = new vscode.MarkdownString("");
				results.push(clientSetDeity);				
				
				const clientSetDueling = new vscode.CompletionItem('SetDueling', vscode.CompletionItemKind.Method);
				
				clientSetDueling.detail = "client.SetDueling()";
				clientSetDueling.insertText = new vscode.SnippetString('SetDueling()');
				clientSetDueling.documentation = new vscode.MarkdownString("");
				results.push(clientSetDueling);				
				
				const clientSetDuelTarget = new vscode.CompletionItem('SetDuelTarget', vscode.CompletionItemKind.Method);
				
				clientSetDuelTarget.detail = "client.SetDuelTarget()";
				clientSetDuelTarget.insertText = new vscode.SnippetString('SetDuelTarget()');
				clientSetDuelTarget.documentation = new vscode.MarkdownString("");
				results.push(clientSetDuelTarget);				
				
				const clientSetEndurance = new vscode.CompletionItem('SetEndurance', vscode.CompletionItemKind.Method);
				
				clientSetEndurance.detail = "client.SetEndurance()";
				clientSetEndurance.insertText = new vscode.SnippetString('SetEndurance()');
				clientSetEndurance.documentation = new vscode.MarkdownString("");
				results.push(clientSetEndurance);				
				
				const clientSetEXP = new vscode.CompletionItem('SetEXP', vscode.CompletionItemKind.Method);
				
				clientSetEXP.detail = "client.SetEXP()";
				clientSetEXP.insertText = new vscode.SnippetString('SetEXP()');
				clientSetEXP.documentation = new vscode.MarkdownString("");
				results.push(clientSetEXP);				
				
				const clientSetFactionLevel = new vscode.CompletionItem('SetFactionLevel', vscode.CompletionItemKind.Method);
				
				clientSetFactionLevel.detail = "client.SetFactionLevel()";
				clientSetFactionLevel.insertText = new vscode.SnippetString('SetFactionLevel()');
				clientSetFactionLevel.documentation = new vscode.MarkdownString("");
				results.push(clientSetFactionLevel);				
				
				const clientSetFactionLevel2 = new vscode.CompletionItem('SetFactionLevel2', vscode.CompletionItemKind.Method);
				
				clientSetFactionLevel2.detail = "client.SetFactionLevel2()";
				clientSetFactionLevel2.insertText = new vscode.SnippetString('SetFactionLevel2()');
				clientSetFactionLevel2.documentation = new vscode.MarkdownString("");
				results.push(clientSetFactionLevel2);				
				
				const clientSetFeigned = new vscode.CompletionItem('SetFeigned', vscode.CompletionItemKind.Method);
				
				clientSetFeigned.detail = "client.SetFeigned()";
				clientSetFeigned.insertText = new vscode.SnippetString('SetFeigned()');
				clientSetFeigned.documentation = new vscode.MarkdownString("");
				results.push(clientSetFeigned);				
				
				const clientSetGM = new vscode.CompletionItem('SetGM', vscode.CompletionItemKind.Method);
				
				clientSetGM.detail = "client.SetGM()";
				clientSetGM.insertText = new vscode.SnippetString('SetGM()');
				clientSetGM.documentation = new vscode.MarkdownString("");
				results.push(clientSetGM);				
				
				const clientSetHorseId = new vscode.CompletionItem('SetHorseId', vscode.CompletionItemKind.Method);
				
				clientSetHorseId.detail = "client.SetHorseId()";
				clientSetHorseId.insertText = new vscode.SnippetString('SetHorseId()');
				clientSetHorseId.documentation = new vscode.MarkdownString("");
				results.push(clientSetHorseId);				
				
				const clientSetHunger = new vscode.CompletionItem('SetHunger', vscode.CompletionItemKind.Method);
				
				clientSetHunger.detail = "client.SetHunger()";
				clientSetHunger.insertText = new vscode.SnippetString('SetHunger()');
				clientSetHunger.documentation = new vscode.MarkdownString("");
				results.push(clientSetHunger);				
				
				const clientSetLanguageSkill = new vscode.CompletionItem('SetLanguageSkill', vscode.CompletionItemKind.Method);
				
				clientSetLanguageSkill.detail = "client.SetLanguageSkill()";
				clientSetLanguageSkill.insertText = new vscode.SnippetString('SetLanguageSkill()');
				clientSetLanguageSkill.documentation = new vscode.MarkdownString("");
				results.push(clientSetLanguageSkill);				
				
				const clientSetMaterial = new vscode.CompletionItem('SetMaterial', vscode.CompletionItemKind.Method);
				
				clientSetMaterial.detail = "client.SetMaterial()";
				clientSetMaterial.insertText = new vscode.SnippetString('SetMaterial()');
				clientSetMaterial.documentation = new vscode.MarkdownString("");
				results.push(clientSetMaterial);				
				
				const clientSetPrimaryWeaponOrnamentation = new vscode.CompletionItem('SetPrimaryWeaponOrnamentation', vscode.CompletionItemKind.Method);
				
				clientSetPrimaryWeaponOrnamentation.detail = "client.SetPrimaryWeaponOrnamentation()";
				clientSetPrimaryWeaponOrnamentation.insertText = new vscode.SnippetString('SetPrimaryWeaponOrnamentation()');
				clientSetPrimaryWeaponOrnamentation.documentation = new vscode.MarkdownString("");
				results.push(clientSetPrimaryWeaponOrnamentation);				
				
				const clientSetPVP = new vscode.CompletionItem('SetPVP', vscode.CompletionItemKind.Method);
				
				clientSetPVP.detail = "client.SetPVP()";
				clientSetPVP.insertText = new vscode.SnippetString('SetPVP()');
				clientSetPVP.documentation = new vscode.MarkdownString("");
				results.push(clientSetPVP);				
				
				const clientSetSecondaryWeaponOrnamentation = new vscode.CompletionItem('SetSecondaryWeaponOrnamentation', vscode.CompletionItemKind.Method);
				
				clientSetSecondaryWeaponOrnamentation.detail = "client.SetSecondaryWeaponOrnamentation()";
				clientSetSecondaryWeaponOrnamentation.insertText = new vscode.SnippetString('SetSecondaryWeaponOrnamentation()');
				clientSetSecondaryWeaponOrnamentation.documentation = new vscode.MarkdownString("");
				results.push(clientSetSecondaryWeaponOrnamentation);				
				
				const clientSetSkill = new vscode.CompletionItem('SetSkill', vscode.CompletionItemKind.Method);
				
				clientSetSkill.detail = "client.SetSkill()";
				clientSetSkill.insertText = new vscode.SnippetString('SetSkill()');
				clientSetSkill.documentation = new vscode.MarkdownString("");
				results.push(clientSetSkill);				
				
				const clientSetSkillPoints = new vscode.CompletionItem('SetSkillPoints', vscode.CompletionItemKind.Method);
				
				clientSetSkillPoints.detail = "client.SetSkillPoints()";
				clientSetSkillPoints.insertText = new vscode.SnippetString('SetSkillPoints()');
				clientSetSkillPoints.documentation = new vscode.MarkdownString("");
				results.push(clientSetSkillPoints);				
				
				const clientSetStartZone = new vscode.CompletionItem('SetStartZone', vscode.CompletionItemKind.Method);
				
				clientSetStartZone.detail = "client.SetStartZone()";
				clientSetStartZone.insertText = new vscode.SnippetString('SetStartZone()');
				clientSetStartZone.documentation = new vscode.MarkdownString("");
				results.push(clientSetStartZone);				
				
				const clientSetStats = new vscode.CompletionItem('SetStats', vscode.CompletionItemKind.Method);
				
				clientSetStats.detail = "client.SetStats()";
				clientSetStats.insertText = new vscode.SnippetString('SetStats()');
				clientSetStats.documentation = new vscode.MarkdownString("");
				results.push(clientSetStats);				
				
				const clientSetThirst = new vscode.CompletionItem('SetThirst', vscode.CompletionItemKind.Method);
				
				clientSetThirst.detail = "client.SetThirst()";
				clientSetThirst.insertText = new vscode.SnippetString('SetThirst()');
				clientSetThirst.documentation = new vscode.MarkdownString("");
				results.push(clientSetThirst);				
				
				const clientSetTint = new vscode.CompletionItem('SetTint', vscode.CompletionItemKind.Method);
				
				clientSetTint.detail = "client.SetTint()";
				clientSetTint.insertText = new vscode.SnippetString('SetTint()');
				clientSetTint.documentation = new vscode.MarkdownString("");
				results.push(clientSetTint);				
				
				const clientSetTitleSuffix = new vscode.CompletionItem('SetTitleSuffix', vscode.CompletionItemKind.Method);
				
				clientSetTitleSuffix.detail = "client.SetTitleSuffix()";
				clientSetTitleSuffix.insertText = new vscode.SnippetString('SetTitleSuffix()');
				clientSetTitleSuffix.documentation = new vscode.MarkdownString("");
				results.push(clientSetTitleSuffix);				
				
				const clientSetZoneFlag = new vscode.CompletionItem('SetZoneFlag', vscode.CompletionItemKind.Method);
				
				clientSetZoneFlag.detail = "client.SetZoneFlag()";
				clientSetZoneFlag.insertText = new vscode.SnippetString('SetZoneFlag()');
				clientSetZoneFlag.documentation = new vscode.MarkdownString("");
				results.push(clientSetZoneFlag);				
				
				const clientSignal = new vscode.CompletionItem('Signal', vscode.CompletionItemKind.Method);
				
				clientSignal.detail = "client.Signal()";
				clientSignal.insertText = new vscode.SnippetString('Signal()');
				clientSignal.documentation = new vscode.MarkdownString("");
				results.push(clientSignal);				
				
				const clientStand = new vscode.CompletionItem('Stand', vscode.CompletionItemKind.Method);
				
				clientStand.detail = "client.Stand()";
				clientStand.insertText = new vscode.SnippetString('Stand()');
				clientStand.documentation = new vscode.MarkdownString("");
				results.push(clientStand);				
				
				const clientSummonItem = new vscode.CompletionItem('SummonItem', vscode.CompletionItemKind.Method);
				
				clientSummonItem.detail = "client.SummonItem()";
				clientSummonItem.insertText = new vscode.SnippetString('SummonItem()');
				clientSummonItem.documentation = new vscode.MarkdownString("");
				results.push(clientSummonItem);				
				
				const clientTakeMoneyFromPP = new vscode.CompletionItem('TakeMoneyFromPP', vscode.CompletionItemKind.Method);
				
				clientTakeMoneyFromPP.detail = "client.TakeMoneyFromPP()";
				clientTakeMoneyFromPP.insertText = new vscode.SnippetString('TakeMoneyFromPP()');
				clientTakeMoneyFromPP.documentation = new vscode.MarkdownString("");
				results.push(clientTakeMoneyFromPP);				
				
				const clientTGB = new vscode.CompletionItem('TGB', vscode.CompletionItemKind.Method);
				
				clientTGB.detail = "client.TGB()";
				clientTGB.insertText = new vscode.SnippetString('TGB()');
				clientTGB.documentation = new vscode.MarkdownString("");
				results.push(clientTGB);				
				
				const clientThirsty = new vscode.CompletionItem('Thirsty', vscode.CompletionItemKind.Method);
				
				clientThirsty.detail = "client.Thirsty()";
				clientThirsty.insertText = new vscode.SnippetString('Thirsty()');
				clientThirsty.documentation = new vscode.MarkdownString("");
				results.push(clientThirsty);				
				
				const clientTrainDisc = new vscode.CompletionItem('TrainDisc', vscode.CompletionItemKind.Method);
				
				clientTrainDisc.detail = "client.TrainDisc()";
				clientTrainDisc.insertText = new vscode.SnippetString('TrainDisc()');
				clientTrainDisc.documentation = new vscode.MarkdownString("");
				results.push(clientTrainDisc);				
				
				const clientTrainDiscBySpellID = new vscode.CompletionItem('TrainDiscBySpellID', vscode.CompletionItemKind.Method);
				
				clientTrainDiscBySpellID.detail = "client.TrainDiscBySpellID()";
				clientTrainDiscBySpellID.insertText = new vscode.SnippetString('TrainDiscBySpellID()');
				clientTrainDiscBySpellID.documentation = new vscode.MarkdownString("");
				results.push(clientTrainDiscBySpellID);				
				
				const clientUndye = new vscode.CompletionItem('Undye', vscode.CompletionItemKind.Method);
				
				clientUndye.detail = "client.Undye()";
				clientUndye.insertText = new vscode.SnippetString('Undye()');
				clientUndye.documentation = new vscode.MarkdownString("");
				results.push(clientUndye);				
				
				const clientUnFreeze = new vscode.CompletionItem('UnFreeze', vscode.CompletionItemKind.Method);
				
				clientUnFreeze.detail = "client.UnFreeze()";
				clientUnFreeze.insertText = new vscode.SnippetString('UnFreeze()');
				clientUnFreeze.documentation = new vscode.MarkdownString("");
				results.push(clientUnFreeze);				
				
				const clientUnmemSpell = new vscode.CompletionItem('UnmemSpell', vscode.CompletionItemKind.Method);
				
				clientUnmemSpell.detail = "client.UnmemSpell()";
				clientUnmemSpell.insertText = new vscode.SnippetString('UnmemSpell()');
				clientUnmemSpell.documentation = new vscode.MarkdownString("");
				results.push(clientUnmemSpell);				
				
				const clientUnmemSpellAll = new vscode.CompletionItem('UnmemSpellAll', vscode.CompletionItemKind.Method);
				
				clientUnmemSpellAll.detail = "client.UnmemSpellAll()";
				clientUnmemSpellAll.insertText = new vscode.SnippetString('UnmemSpellAll()');
				clientUnmemSpellAll.documentation = new vscode.MarkdownString("");
				results.push(clientUnmemSpellAll);				
				
				const clientUnmemSpellBySpellID = new vscode.CompletionItem('UnmemSpellBySpellID', vscode.CompletionItemKind.Method);
				
				clientUnmemSpellBySpellID.detail = "client.UnmemSpellBySpellID()";
				clientUnmemSpellBySpellID.insertText = new vscode.SnippetString('UnmemSpellBySpellID()');
				clientUnmemSpellBySpellID.documentation = new vscode.MarkdownString("");
				results.push(clientUnmemSpellBySpellID);				
				
				const clientUnscribeSpell = new vscode.CompletionItem('UnscribeSpell', vscode.CompletionItemKind.Method);
				
				clientUnscribeSpell.detail = "client.UnscribeSpell()";
				clientUnscribeSpell.insertText = new vscode.SnippetString('UnscribeSpell()');
				clientUnscribeSpell.documentation = new vscode.MarkdownString("");
				results.push(clientUnscribeSpell);				
				
				const clientUnscribeSpellAll = new vscode.CompletionItem('UnscribeSpellAll', vscode.CompletionItemKind.Method);
				
				clientUnscribeSpellAll.detail = "client.UnscribeSpellAll()";
				clientUnscribeSpellAll.insertText = new vscode.SnippetString('UnscribeSpellAll()');
				clientUnscribeSpellAll.documentation = new vscode.MarkdownString("");
				results.push(clientUnscribeSpellAll);				
				
				const clientUntrainDisc = new vscode.CompletionItem('UntrainDisc', vscode.CompletionItemKind.Method);
				
				clientUntrainDisc.detail = "client.UntrainDisc()";
				clientUntrainDisc.insertText = new vscode.SnippetString('UntrainDisc()');
				clientUntrainDisc.documentation = new vscode.MarkdownString("");
				results.push(clientUntrainDisc);				
				
				const clientUntrainDiscAll = new vscode.CompletionItem('UntrainDiscAll', vscode.CompletionItemKind.Method);
				
				clientUntrainDiscAll.detail = "client.UntrainDiscAll()";
				clientUntrainDiscAll.insertText = new vscode.SnippetString('UntrainDiscAll()');
				clientUntrainDiscAll.documentation = new vscode.MarkdownString("");
				results.push(clientUntrainDiscAll);				
				
				const clientUpdateGroupAAs = new vscode.CompletionItem('UpdateGroupAAs', vscode.CompletionItemKind.Method);
				
				clientUpdateGroupAAs.detail = "client.UpdateGroupAAs()";
				clientUpdateGroupAAs.insertText = new vscode.SnippetString('UpdateGroupAAs()');
				clientUpdateGroupAAs.documentation = new vscode.MarkdownString("");
				results.push(clientUpdateGroupAAs);				
				
				const clientUpdateLDoNPoints = new vscode.CompletionItem('UpdateLDoNPoints', vscode.CompletionItemKind.Method);
				
				clientUpdateLDoNPoints.detail = "client.UpdateLDoNPoints()";
				clientUpdateLDoNPoints.insertText = new vscode.SnippetString('UpdateLDoNPoints()');
				clientUpdateLDoNPoints.documentation = new vscode.MarkdownString("");
				results.push(clientUpdateLDoNPoints);				
				
				const clientUpdateTaskActivity = new vscode.CompletionItem('UpdateTaskActivity', vscode.CompletionItemKind.Method);
				
				clientUpdateTaskActivity.detail = "client.UpdateTaskActivity()";
				clientUpdateTaskActivity.insertText = new vscode.SnippetString('UpdateTaskActivity()');
				clientUpdateTaskActivity.documentation = new vscode.MarkdownString("");
				results.push(clientUpdateTaskActivity);				
				
				const clientUseDiscipline = new vscode.CompletionItem('UseDiscipline', vscode.CompletionItemKind.Method);
				
				clientUseDiscipline.detail = "client.UseDiscipline()";
				clientUseDiscipline.insertText = new vscode.SnippetString('UseDiscipline()');
				clientUseDiscipline.documentation = new vscode.MarkdownString("");
				results.push(clientUseDiscipline);				
				
				const clientWorldKick = new vscode.CompletionItem('WorldKick', vscode.CompletionItemKind.Method);
				
				clientWorldKick.detail = "client.WorldKick()";
				clientWorldKick.insertText = new vscode.SnippetString('WorldKick()');
				clientWorldKick.documentation = new vscode.MarkdownString("");
				results.push(clientWorldKick);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('client_list.')) {
					return undefined;
				}
				
				
				const clientlistEntries = new vscode.CompletionItem('Entries', vscode.CompletionItemKind.Method);
				
				clientlistEntries.detail = "client_list.Entries()";
				clientlistEntries.insertText = new vscode.SnippetString('Entries()');
				clientlistEntries.documentation = new vscode.MarkdownString("");
				results.push(clientlistEntries);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('client_version.')) {
					return undefined;
				}
				
				
				const clientversionRoF = new vscode.CompletionItem('RoF', vscode.CompletionItemKind.Property);
				
				clientversionRoF.detail = "client_version.RoF";
				clientversionRoF.insertText = new vscode.SnippetString('RoF');
				clientversionRoF.documentation = new vscode.MarkdownString("");
				results.push(clientversionRoF);				
				
				const clientversionRoF2 = new vscode.CompletionItem('RoF2', vscode.CompletionItemKind.Property);
				
				clientversionRoF2.detail = "client_version.RoF2";
				clientversionRoF2.insertText = new vscode.SnippetString('RoF2');
				clientversionRoF2.documentation = new vscode.MarkdownString("");
				results.push(clientversionRoF2);				
				
				const clientversionSoD = new vscode.CompletionItem('SoD', vscode.CompletionItemKind.Property);
				
				clientversionSoD.detail = "client_version.SoD";
				clientversionSoD.insertText = new vscode.SnippetString('SoD');
				clientversionSoD.documentation = new vscode.MarkdownString("");
				results.push(clientversionSoD);				
				
				const clientversionSoF = new vscode.CompletionItem('SoF', vscode.CompletionItemKind.Property);
				
				clientversionSoF.detail = "client_version.SoF";
				clientversionSoF.insertText = new vscode.SnippetString('SoF');
				clientversionSoF.documentation = new vscode.MarkdownString("");
				results.push(clientversionSoF);				
				
				const clientversionTitanium = new vscode.CompletionItem('Titanium', vscode.CompletionItemKind.Property);
				
				clientversionTitanium.detail = "client_version.Titanium";
				clientversionTitanium.insertText = new vscode.SnippetString('Titanium');
				clientversionTitanium.documentation = new vscode.MarkdownString("");
				results.push(clientversionTitanium);				
				
				const clientversionUF = new vscode.CompletionItem('UF', vscode.CompletionItemKind.Property);
				
				clientversionUF.detail = "client_version.UF";
				clientversionUF.insertText = new vscode.SnippetString('UF');
				clientversionUF.documentation = new vscode.MarkdownString("");
				results.push(clientversionUF);				
				
				const clientversionUnderfoot = new vscode.CompletionItem('Underfoot', vscode.CompletionItemKind.Property);
				
				clientversionUnderfoot.detail = "client_version.Underfoot";
				clientversionUnderfoot.insertText = new vscode.SnippetString('Underfoot');
				clientversionUnderfoot.documentation = new vscode.MarkdownString("");
				results.push(clientversionUnderfoot);				
				
				const clientversionUnknown = new vscode.CompletionItem('Unknown', vscode.CompletionItemKind.Property);
				
				clientversionUnknown.detail = "client_version.Unknown";
				clientversionUnknown.insertText = new vscode.SnippetString('Unknown');
				clientversionUnknown.documentation = new vscode.MarkdownString("");
				results.push(clientversionUnknown);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('corpse.')) {
					return undefined;
				}
				
				
				const corpseAddItem = new vscode.CompletionItem('AddItem', vscode.CompletionItemKind.Method);
				
				corpseAddItem.detail = "corpse.AddItem()";
				corpseAddItem.insertText = new vscode.SnippetString('AddItem()');
				corpseAddItem.documentation = new vscode.MarkdownString("");
				results.push(corpseAddItem);				
				
				const corpseAddLooter = new vscode.CompletionItem('AddLooter', vscode.CompletionItemKind.Method);
				
				corpseAddLooter.detail = "corpse.AddLooter()";
				corpseAddLooter.insertText = new vscode.SnippetString('AddLooter()');
				corpseAddLooter.documentation = new vscode.MarkdownString("");
				results.push(corpseAddLooter);				
				
				const corpseAllowMobLoot = new vscode.CompletionItem('AllowMobLoot', vscode.CompletionItemKind.Method);
				
				corpseAllowMobLoot.detail = "corpse.AllowMobLoot()";
				corpseAllowMobLoot.insertText = new vscode.SnippetString('AllowMobLoot()');
				corpseAllowMobLoot.documentation = new vscode.MarkdownString("");
				results.push(corpseAllowMobLoot);				
				
				const corpseBury = new vscode.CompletionItem('Bury', vscode.CompletionItemKind.Method);
				
				corpseBury.detail = "corpse.Bury()";
				corpseBury.insertText = new vscode.SnippetString('Bury()');
				corpseBury.documentation = new vscode.MarkdownString("");
				results.push(corpseBury);				
				
				const corpseCanMobLoot = new vscode.CompletionItem('CanMobLoot', vscode.CompletionItemKind.Method);
				
				corpseCanMobLoot.detail = "corpse.CanMobLoot()";
				corpseCanMobLoot.insertText = new vscode.SnippetString('CanMobLoot()');
				corpseCanMobLoot.documentation = new vscode.MarkdownString("");
				results.push(corpseCanMobLoot);				
				
				const corpseCountItems = new vscode.CompletionItem('CountItems', vscode.CompletionItemKind.Method);
				
				corpseCountItems.detail = "corpse.CountItems()";
				corpseCountItems.insertText = new vscode.SnippetString('CountItems()');
				corpseCountItems.documentation = new vscode.MarkdownString("");
				results.push(corpseCountItems);				
				
				const corpseDelete = new vscode.CompletionItem('Delete', vscode.CompletionItemKind.Method);
				
				corpseDelete.detail = "corpse.Delete()";
				corpseDelete.insertText = new vscode.SnippetString('Delete()');
				corpseDelete.documentation = new vscode.MarkdownString("");
				results.push(corpseDelete);				
				
				const corpseDepop = new vscode.CompletionItem('Depop', vscode.CompletionItemKind.Method);
				
				corpseDepop.detail = "corpse.Depop()";
				corpseDepop.insertText = new vscode.SnippetString('Depop()');
				corpseDepop.documentation = new vscode.MarkdownString("");
				results.push(corpseDepop);				
				
				const corpseGetCharID = new vscode.CompletionItem('GetCharID', vscode.CompletionItemKind.Method);
				
				corpseGetCharID.detail = "corpse.GetCharID()";
				corpseGetCharID.insertText = new vscode.SnippetString('GetCharID()');
				corpseGetCharID.documentation = new vscode.MarkdownString("");
				results.push(corpseGetCharID);				
				
				const corpseGetCopper = new vscode.CompletionItem('GetCopper', vscode.CompletionItemKind.Method);
				
				corpseGetCopper.detail = "corpse.GetCopper()";
				corpseGetCopper.insertText = new vscode.SnippetString('GetCopper()');
				corpseGetCopper.documentation = new vscode.MarkdownString("");
				results.push(corpseGetCopper);				
				
				const corpseGetDBID = new vscode.CompletionItem('GetDBID', vscode.CompletionItemKind.Method);
				
				corpseGetDBID.detail = "corpse.GetDBID()";
				corpseGetDBID.insertText = new vscode.SnippetString('GetDBID()');
				corpseGetDBID.documentation = new vscode.MarkdownString("");
				results.push(corpseGetDBID);				
				
				const corpseGetDecayTime = new vscode.CompletionItem('GetDecayTime', vscode.CompletionItemKind.Method);
				
				corpseGetDecayTime.detail = "corpse.GetDecayTime()";
				corpseGetDecayTime.insertText = new vscode.SnippetString('GetDecayTime()');
				corpseGetDecayTime.documentation = new vscode.MarkdownString("");
				results.push(corpseGetDecayTime);				
				
				const corpseGetGold = new vscode.CompletionItem('GetGold', vscode.CompletionItemKind.Method);
				
				corpseGetGold.detail = "corpse.GetGold()";
				corpseGetGold.insertText = new vscode.SnippetString('GetGold()');
				corpseGetGold.documentation = new vscode.MarkdownString("");
				results.push(corpseGetGold);				
				
				const corpseGetOwnerName = new vscode.CompletionItem('GetOwnerName', vscode.CompletionItemKind.Method);
				
				corpseGetOwnerName.detail = "corpse.GetOwnerName()";
				corpseGetOwnerName.insertText = new vscode.SnippetString('GetOwnerName()');
				corpseGetOwnerName.documentation = new vscode.MarkdownString("");
				results.push(corpseGetOwnerName);				
				
				const corpseGetPlatinum = new vscode.CompletionItem('GetPlatinum', vscode.CompletionItemKind.Method);
				
				corpseGetPlatinum.detail = "corpse.GetPlatinum()";
				corpseGetPlatinum.insertText = new vscode.SnippetString('GetPlatinum()');
				corpseGetPlatinum.documentation = new vscode.MarkdownString("");
				results.push(corpseGetPlatinum);				
				
				const corpseGetSilver = new vscode.CompletionItem('GetSilver', vscode.CompletionItemKind.Method);
				
				corpseGetSilver.detail = "corpse.GetSilver()";
				corpseGetSilver.insertText = new vscode.SnippetString('GetSilver()');
				corpseGetSilver.documentation = new vscode.MarkdownString("");
				results.push(corpseGetSilver);				
				
				const corpseGetWornItem = new vscode.CompletionItem('GetWornItem', vscode.CompletionItemKind.Method);
				
				corpseGetWornItem.detail = "corpse.GetWornItem()";
				corpseGetWornItem.insertText = new vscode.SnippetString('GetWornItem()');
				corpseGetWornItem.documentation = new vscode.MarkdownString("");
				results.push(corpseGetWornItem);				
				
				const corpseIsEmpty = new vscode.CompletionItem('IsEmpty', vscode.CompletionItemKind.Method);
				
				corpseIsEmpty.detail = "corpse.IsEmpty()";
				corpseIsEmpty.insertText = new vscode.SnippetString('IsEmpty()');
				corpseIsEmpty.documentation = new vscode.MarkdownString("");
				results.push(corpseIsEmpty);				
				
				const corpseIsLocked = new vscode.CompletionItem('IsLocked', vscode.CompletionItemKind.Method);
				
				corpseIsLocked.detail = "corpse.IsLocked()";
				corpseIsLocked.insertText = new vscode.SnippetString('IsLocked()');
				corpseIsLocked.documentation = new vscode.MarkdownString("");
				results.push(corpseIsLocked);				
				
				const corpseIsRezzed = new vscode.CompletionItem('IsRezzed', vscode.CompletionItemKind.Method);
				
				corpseIsRezzed.detail = "corpse.IsRezzed()";
				corpseIsRezzed.insertText = new vscode.SnippetString('IsRezzed()');
				corpseIsRezzed.documentation = new vscode.MarkdownString("");
				results.push(corpseIsRezzed);				
				
				const corpseLock = new vscode.CompletionItem('Lock', vscode.CompletionItemKind.Method);
				
				corpseLock.detail = "corpse.Lock()";
				corpseLock.insertText = new vscode.SnippetString('Lock()');
				corpseLock.documentation = new vscode.MarkdownString("");
				results.push(corpseLock);				
				
				const corpseRemoveCash = new vscode.CompletionItem('RemoveCash', vscode.CompletionItemKind.Method);
				
				corpseRemoveCash.detail = "corpse.RemoveCash()";
				corpseRemoveCash.insertText = new vscode.SnippetString('RemoveCash()');
				corpseRemoveCash.documentation = new vscode.MarkdownString("");
				results.push(corpseRemoveCash);				
				
				const corpseRemoveItem = new vscode.CompletionItem('RemoveItem', vscode.CompletionItemKind.Method);
				
				corpseRemoveItem.detail = "corpse.RemoveItem()";
				corpseRemoveItem.insertText = new vscode.SnippetString('RemoveItem()');
				corpseRemoveItem.documentation = new vscode.MarkdownString("");
				results.push(corpseRemoveItem);				
				
				const corpseResetLooter = new vscode.CompletionItem('ResetLooter', vscode.CompletionItemKind.Method);
				
				corpseResetLooter.detail = "corpse.ResetLooter()";
				corpseResetLooter.insertText = new vscode.SnippetString('ResetLooter()');
				corpseResetLooter.documentation = new vscode.MarkdownString("");
				results.push(corpseResetLooter);				
				
				const corpseSave = new vscode.CompletionItem('Save', vscode.CompletionItemKind.Method);
				
				corpseSave.detail = "corpse.Save()";
				corpseSave.insertText = new vscode.SnippetString('Save()');
				corpseSave.documentation = new vscode.MarkdownString("");
				results.push(corpseSave);				
				
				const corpseSetCash = new vscode.CompletionItem('SetCash', vscode.CompletionItemKind.Method);
				
				corpseSetCash.detail = "corpse.SetCash()";
				corpseSetCash.insertText = new vscode.SnippetString('SetCash()');
				corpseSetCash.documentation = new vscode.MarkdownString("");
				results.push(corpseSetCash);				
				
				const corpseSetDecayTimer = new vscode.CompletionItem('SetDecayTimer', vscode.CompletionItemKind.Method);
				
				corpseSetDecayTimer.detail = "corpse.SetDecayTimer()";
				corpseSetDecayTimer.insertText = new vscode.SnippetString('SetDecayTimer()');
				corpseSetDecayTimer.documentation = new vscode.MarkdownString("");
				results.push(corpseSetDecayTimer);				
				
				const corpseSummon = new vscode.CompletionItem('Summon', vscode.CompletionItemKind.Method);
				
				corpseSummon.detail = "corpse.Summon()";
				corpseSummon.insertText = new vscode.SnippetString('Summon()');
				corpseSummon.documentation = new vscode.MarkdownString("");
				results.push(corpseSummon);				
				
				const corpseUnLock = new vscode.CompletionItem('UnLock', vscode.CompletionItemKind.Method);
				
				corpseUnLock.detail = "corpse.UnLock()";
				corpseUnLock.insertText = new vscode.SnippetString('UnLock()');
				corpseUnLock.documentation = new vscode.MarkdownString("");
				results.push(corpseUnLock);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('corpse_list.')) {
					return undefined;
				}
				
				
				const corpselistEntries = new vscode.CompletionItem('Entries', vscode.CompletionItemKind.Method);
				
				corpselistEntries.detail = "corpse_list.Entries()";
				corpselistEntries.insertText = new vscode.SnippetString('Entries()');
				corpselistEntries.documentation = new vscode.MarkdownString("");
				results.push(corpselistEntries);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('door.')) {
					return undefined;
				}
				
				
				const doorCreateDatabaseEntry = new vscode.CompletionItem('CreateDatabaseEntry', vscode.CompletionItemKind.Method);
				
				doorCreateDatabaseEntry.detail = "door.CreateDatabaseEntry()";
				doorCreateDatabaseEntry.insertText = new vscode.SnippetString('CreateDatabaseEntry()');
				doorCreateDatabaseEntry.documentation = new vscode.MarkdownString("");
				results.push(doorCreateDatabaseEntry);				
				
				const doorForceClose = new vscode.CompletionItem('ForceClose', vscode.CompletionItemKind.Method);
				
				doorForceClose.detail = "door.ForceClose()";
				doorForceClose.insertText = new vscode.SnippetString('ForceClose()');
				doorForceClose.documentation = new vscode.MarkdownString("");
				results.push(doorForceClose);				
				
				const doorForceOpen = new vscode.CompletionItem('ForceOpen', vscode.CompletionItemKind.Method);
				
				doorForceOpen.detail = "door.ForceOpen()";
				doorForceOpen.insertText = new vscode.SnippetString('ForceOpen()');
				doorForceOpen.documentation = new vscode.MarkdownString("");
				results.push(doorForceOpen);				
				
				const doorGetDisableTimer = new vscode.CompletionItem('GetDisableTimer', vscode.CompletionItemKind.Method);
				
				doorGetDisableTimer.detail = "door.GetDisableTimer()";
				doorGetDisableTimer.insertText = new vscode.SnippetString('GetDisableTimer()');
				doorGetDisableTimer.documentation = new vscode.MarkdownString("");
				results.push(doorGetDisableTimer);				
				
				const doorGetDoorDBID = new vscode.CompletionItem('GetDoorDBID', vscode.CompletionItemKind.Method);
				
				doorGetDoorDBID.detail = "door.GetDoorDBID()";
				doorGetDoorDBID.insertText = new vscode.SnippetString('GetDoorDBID()');
				doorGetDoorDBID.documentation = new vscode.MarkdownString("");
				results.push(doorGetDoorDBID);				
				
				const doorGetDoorID = new vscode.CompletionItem('GetDoorID', vscode.CompletionItemKind.Method);
				
				doorGetDoorID.detail = "door.GetDoorID()";
				doorGetDoorID.insertText = new vscode.SnippetString('GetDoorID()');
				doorGetDoorID.documentation = new vscode.MarkdownString("");
				results.push(doorGetDoorID);				
				
				const doorGetDoorName = new vscode.CompletionItem('GetDoorName', vscode.CompletionItemKind.Method);
				
				doorGetDoorName.detail = "door.GetDoorName()";
				doorGetDoorName.insertText = new vscode.SnippetString('GetDoorName()');
				doorGetDoorName.documentation = new vscode.MarkdownString("");
				results.push(doorGetDoorName);				
				
				const doorGetHeading = new vscode.CompletionItem('GetHeading', vscode.CompletionItemKind.Method);
				
				doorGetHeading.detail = "door.GetHeading()";
				doorGetHeading.insertText = new vscode.SnippetString('GetHeading()');
				doorGetHeading.documentation = new vscode.MarkdownString("");
				results.push(doorGetHeading);				
				
				const doorGetIncline = new vscode.CompletionItem('GetIncline', vscode.CompletionItemKind.Method);
				
				doorGetIncline.detail = "door.GetIncline()";
				doorGetIncline.insertText = new vscode.SnippetString('GetIncline()');
				doorGetIncline.documentation = new vscode.MarkdownString("");
				results.push(doorGetIncline);				
				
				const doorGetKeyItem = new vscode.CompletionItem('GetKeyItem', vscode.CompletionItemKind.Method);
				
				doorGetKeyItem.detail = "door.GetKeyItem()";
				doorGetKeyItem.insertText = new vscode.SnippetString('GetKeyItem()');
				doorGetKeyItem.documentation = new vscode.MarkdownString("");
				results.push(doorGetKeyItem);				
				
				const doorGetLockPick = new vscode.CompletionItem('GetLockPick', vscode.CompletionItemKind.Method);
				
				doorGetLockPick.detail = "door.GetLockPick()";
				doorGetLockPick.insertText = new vscode.SnippetString('GetLockPick()');
				doorGetLockPick.documentation = new vscode.MarkdownString("");
				results.push(doorGetLockPick);				
				
				const doorGetNoKeyring = new vscode.CompletionItem('GetNoKeyring', vscode.CompletionItemKind.Method);
				
				doorGetNoKeyring.detail = "door.GetNoKeyring()";
				doorGetNoKeyring.insertText = new vscode.SnippetString('GetNoKeyring()');
				doorGetNoKeyring.documentation = new vscode.MarkdownString("");
				results.push(doorGetNoKeyring);				
				
				const doorGetOpenType = new vscode.CompletionItem('GetOpenType', vscode.CompletionItemKind.Method);
				
				doorGetOpenType.detail = "door.GetOpenType()";
				doorGetOpenType.insertText = new vscode.SnippetString('GetOpenType()');
				doorGetOpenType.documentation = new vscode.MarkdownString("");
				results.push(doorGetOpenType);				
				
				const doorGetSize = new vscode.CompletionItem('GetSize', vscode.CompletionItemKind.Method);
				
				doorGetSize.detail = "door.GetSize()";
				doorGetSize.insertText = new vscode.SnippetString('GetSize()');
				doorGetSize.documentation = new vscode.MarkdownString("");
				results.push(doorGetSize);				
				
				const doorGetX = new vscode.CompletionItem('GetX', vscode.CompletionItemKind.Method);
				
				doorGetX.detail = "door.GetX()";
				doorGetX.insertText = new vscode.SnippetString('GetX()');
				doorGetX.documentation = new vscode.MarkdownString("");
				results.push(doorGetX);				
				
				const doorGetY = new vscode.CompletionItem('GetY', vscode.CompletionItemKind.Method);
				
				doorGetY.detail = "door.GetY()";
				doorGetY.insertText = new vscode.SnippetString('GetY()');
				doorGetY.documentation = new vscode.MarkdownString("");
				results.push(doorGetY);				
				
				const doorGetZ = new vscode.CompletionItem('GetZ', vscode.CompletionItemKind.Method);
				
				doorGetZ.detail = "door.GetZ()";
				doorGetZ.insertText = new vscode.SnippetString('GetZ()');
				doorGetZ.documentation = new vscode.MarkdownString("");
				results.push(doorGetZ);				
				
				const doorSetDisableTimer = new vscode.CompletionItem('SetDisableTimer', vscode.CompletionItemKind.Method);
				
				doorSetDisableTimer.detail = "door.SetDisableTimer()";
				doorSetDisableTimer.insertText = new vscode.SnippetString('SetDisableTimer()');
				doorSetDisableTimer.documentation = new vscode.MarkdownString("");
				results.push(doorSetDisableTimer);				
				
				const doorSetDoorName = new vscode.CompletionItem('SetDoorName', vscode.CompletionItemKind.Method);
				
				doorSetDoorName.detail = "door.SetDoorName()";
				doorSetDoorName.insertText = new vscode.SnippetString('SetDoorName()');
				doorSetDoorName.documentation = new vscode.MarkdownString("");
				results.push(doorSetDoorName);				
				
				const doorSetHeading = new vscode.CompletionItem('SetHeading', vscode.CompletionItemKind.Method);
				
				doorSetHeading.detail = "door.SetHeading()";
				doorSetHeading.insertText = new vscode.SnippetString('SetHeading()');
				doorSetHeading.documentation = new vscode.MarkdownString("");
				results.push(doorSetHeading);				
				
				const doorSetIncline = new vscode.CompletionItem('SetIncline', vscode.CompletionItemKind.Method);
				
				doorSetIncline.detail = "door.SetIncline()";
				doorSetIncline.insertText = new vscode.SnippetString('SetIncline()');
				doorSetIncline.documentation = new vscode.MarkdownString("");
				results.push(doorSetIncline);				
				
				const doorSetKeyItem = new vscode.CompletionItem('SetKeyItem', vscode.CompletionItemKind.Method);
				
				doorSetKeyItem.detail = "door.SetKeyItem()";
				doorSetKeyItem.insertText = new vscode.SnippetString('SetKeyItem()');
				doorSetKeyItem.documentation = new vscode.MarkdownString("");
				results.push(doorSetKeyItem);				
				
				const doorSetLocation = new vscode.CompletionItem('SetLocation', vscode.CompletionItemKind.Method);
				
				doorSetLocation.detail = "door.SetLocation()";
				doorSetLocation.insertText = new vscode.SnippetString('SetLocation()');
				doorSetLocation.documentation = new vscode.MarkdownString("");
				results.push(doorSetLocation);				
				
				const doorSetLockPick = new vscode.CompletionItem('SetLockPick', vscode.CompletionItemKind.Method);
				
				doorSetLockPick.detail = "door.SetLockPick()";
				doorSetLockPick.insertText = new vscode.SnippetString('SetLockPick()');
				doorSetLockPick.documentation = new vscode.MarkdownString("");
				results.push(doorSetLockPick);				
				
				const doorSetNoKeyring = new vscode.CompletionItem('SetNoKeyring', vscode.CompletionItemKind.Method);
				
				doorSetNoKeyring.detail = "door.SetNoKeyring()";
				doorSetNoKeyring.insertText = new vscode.SnippetString('SetNoKeyring()');
				doorSetNoKeyring.documentation = new vscode.MarkdownString("");
				results.push(doorSetNoKeyring);				
				
				const doorSetOpenType = new vscode.CompletionItem('SetOpenType', vscode.CompletionItemKind.Method);
				
				doorSetOpenType.detail = "door.SetOpenType()";
				doorSetOpenType.insertText = new vscode.SnippetString('SetOpenType()');
				doorSetOpenType.documentation = new vscode.MarkdownString("");
				results.push(doorSetOpenType);				
				
				const doorSetSize = new vscode.CompletionItem('SetSize', vscode.CompletionItemKind.Method);
				
				doorSetSize.detail = "door.SetSize()";
				doorSetSize.insertText = new vscode.SnippetString('SetSize()');
				doorSetSize.documentation = new vscode.MarkdownString("");
				results.push(doorSetSize);				
				
				const doorSetX = new vscode.CompletionItem('SetX', vscode.CompletionItemKind.Method);
				
				doorSetX.detail = "door.SetX()";
				doorSetX.insertText = new vscode.SnippetString('SetX()');
				doorSetX.documentation = new vscode.MarkdownString("");
				results.push(doorSetX);				
				
				const doorSetY = new vscode.CompletionItem('SetY', vscode.CompletionItemKind.Method);
				
				doorSetY.detail = "door.SetY()";
				doorSetY.insertText = new vscode.SnippetString('SetY()');
				doorSetY.documentation = new vscode.MarkdownString("");
				results.push(doorSetY);				
				
				const doorSetZ = new vscode.CompletionItem('SetZ', vscode.CompletionItemKind.Method);
				
				doorSetZ.detail = "door.SetZ()";
				doorSetZ.insertText = new vscode.SnippetString('SetZ()');
				doorSetZ.documentation = new vscode.MarkdownString("");
				results.push(doorSetZ);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('door_list.')) {
					return undefined;
				}
				
				
				const doorlistEntries = new vscode.CompletionItem('Entries', vscode.CompletionItemKind.Method);
				
				doorlistEntries.detail = "door_list.Entries()";
				doorlistEntries.insertText = new vscode.SnippetString('Entries()');
				doorlistEntries.documentation = new vscode.MarkdownString("");
				results.push(doorlistEntries);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('entity.')) {
					return undefined;
				}
				
				
				const entityCastToClient = new vscode.CompletionItem('CastToClient', vscode.CompletionItemKind.Method);
				
				entityCastToClient.detail = "entity.CastToClient()";
				entityCastToClient.insertText = new vscode.SnippetString('CastToClient()');
				entityCastToClient.documentation = new vscode.MarkdownString("");
				results.push(entityCastToClient);				
				
				const entityCastToCorpse = new vscode.CompletionItem('CastToCorpse', vscode.CompletionItemKind.Method);
				
				entityCastToCorpse.detail = "entity.CastToCorpse()";
				entityCastToCorpse.insertText = new vscode.SnippetString('CastToCorpse()');
				entityCastToCorpse.documentation = new vscode.MarkdownString("");
				results.push(entityCastToCorpse);				
				
				const entityCastToDoor = new vscode.CompletionItem('CastToDoor', vscode.CompletionItemKind.Method);
				
				entityCastToDoor.detail = "entity.CastToDoor()";
				entityCastToDoor.insertText = new vscode.SnippetString('CastToDoor()');
				entityCastToDoor.documentation = new vscode.MarkdownString("");
				results.push(entityCastToDoor);				
				
				const entityCastToMob = new vscode.CompletionItem('CastToMob', vscode.CompletionItemKind.Method);
				
				entityCastToMob.detail = "entity.CastToMob()";
				entityCastToMob.insertText = new vscode.SnippetString('CastToMob()');
				entityCastToMob.documentation = new vscode.MarkdownString("");
				results.push(entityCastToMob);				
				
				const entityCastToNPC = new vscode.CompletionItem('CastToNPC', vscode.CompletionItemKind.Method);
				
				entityCastToNPC.detail = "entity.CastToNPC()";
				entityCastToNPC.insertText = new vscode.SnippetString('CastToNPC()');
				entityCastToNPC.documentation = new vscode.MarkdownString("");
				results.push(entityCastToNPC);				
				
				const entityCastToObject = new vscode.CompletionItem('CastToObject', vscode.CompletionItemKind.Method);
				
				entityCastToObject.detail = "entity.CastToObject()";
				entityCastToObject.insertText = new vscode.SnippetString('CastToObject()');
				entityCastToObject.documentation = new vscode.MarkdownString("");
				results.push(entityCastToObject);				
				
				const entityGetID = new vscode.CompletionItem('GetID', vscode.CompletionItemKind.Method);
				
				entityGetID.detail = "entity.GetID()";
				entityGetID.insertText = new vscode.SnippetString('GetID()');
				entityGetID.documentation = new vscode.MarkdownString("");
				results.push(entityGetID);				
				
				const entityIsBeacon = new vscode.CompletionItem('IsBeacon', vscode.CompletionItemKind.Method);
				
				entityIsBeacon.detail = "entity.IsBeacon()";
				entityIsBeacon.insertText = new vscode.SnippetString('IsBeacon()');
				entityIsBeacon.documentation = new vscode.MarkdownString("");
				results.push(entityIsBeacon);				
				
				const entityIsBot = new vscode.CompletionItem('IsBot', vscode.CompletionItemKind.Method);
				
				entityIsBot.detail = "entity.IsBot()";
				entityIsBot.insertText = new vscode.SnippetString('IsBot()');
				entityIsBot.documentation = new vscode.MarkdownString("");
				results.push(entityIsBot);				
				
				const entityIsClient = new vscode.CompletionItem('IsClient', vscode.CompletionItemKind.Method);
				
				entityIsClient.detail = "entity.IsClient()";
				entityIsClient.insertText = new vscode.SnippetString('IsClient()');
				entityIsClient.documentation = new vscode.MarkdownString("");
				results.push(entityIsClient);				
				
				const entityIsCorpse = new vscode.CompletionItem('IsCorpse', vscode.CompletionItemKind.Method);
				
				entityIsCorpse.detail = "entity.IsCorpse()";
				entityIsCorpse.insertText = new vscode.SnippetString('IsCorpse()');
				entityIsCorpse.documentation = new vscode.MarkdownString("");
				results.push(entityIsCorpse);				
				
				const entityIsDoor = new vscode.CompletionItem('IsDoor', vscode.CompletionItemKind.Method);
				
				entityIsDoor.detail = "entity.IsDoor()";
				entityIsDoor.insertText = new vscode.SnippetString('IsDoor()');
				entityIsDoor.documentation = new vscode.MarkdownString("");
				results.push(entityIsDoor);				
				
				const entityIsEncounter = new vscode.CompletionItem('IsEncounter', vscode.CompletionItemKind.Method);
				
				entityIsEncounter.detail = "entity.IsEncounter()";
				entityIsEncounter.insertText = new vscode.SnippetString('IsEncounter()');
				entityIsEncounter.documentation = new vscode.MarkdownString("");
				results.push(entityIsEncounter);				
				
				const entityIsMerc = new vscode.CompletionItem('IsMerc', vscode.CompletionItemKind.Method);
				
				entityIsMerc.detail = "entity.IsMerc()";
				entityIsMerc.insertText = new vscode.SnippetString('IsMerc()');
				entityIsMerc.documentation = new vscode.MarkdownString("");
				results.push(entityIsMerc);				
				
				const entityIsMob = new vscode.CompletionItem('IsMob', vscode.CompletionItemKind.Method);
				
				entityIsMob.detail = "entity.IsMob()";
				entityIsMob.insertText = new vscode.SnippetString('IsMob()');
				entityIsMob.documentation = new vscode.MarkdownString("");
				results.push(entityIsMob);				
				
				const entityIsNPC = new vscode.CompletionItem('IsNPC', vscode.CompletionItemKind.Method);
				
				entityIsNPC.detail = "entity.IsNPC()";
				entityIsNPC.insertText = new vscode.SnippetString('IsNPC()');
				entityIsNPC.documentation = new vscode.MarkdownString("");
				results.push(entityIsNPC);				
				
				const entityIsNPCCorpse = new vscode.CompletionItem('IsNPCCorpse', vscode.CompletionItemKind.Method);
				
				entityIsNPCCorpse.detail = "entity.IsNPCCorpse()";
				entityIsNPCCorpse.insertText = new vscode.SnippetString('IsNPCCorpse()');
				entityIsNPCCorpse.documentation = new vscode.MarkdownString("");
				results.push(entityIsNPCCorpse);				
				
				const entityIsObject = new vscode.CompletionItem('IsObject', vscode.CompletionItemKind.Method);
				
				entityIsObject.detail = "entity.IsObject()";
				entityIsObject.insertText = new vscode.SnippetString('IsObject()');
				entityIsObject.documentation = new vscode.MarkdownString("");
				results.push(entityIsObject);				
				
				const entityIsPlayerCorpse = new vscode.CompletionItem('IsPlayerCorpse', vscode.CompletionItemKind.Method);
				
				entityIsPlayerCorpse.detail = "entity.IsPlayerCorpse()";
				entityIsPlayerCorpse.insertText = new vscode.SnippetString('IsPlayerCorpse()');
				entityIsPlayerCorpse.documentation = new vscode.MarkdownString("");
				results.push(entityIsPlayerCorpse);				
				
				const entityIsTrap = new vscode.CompletionItem('IsTrap', vscode.CompletionItemKind.Method);
				
				entityIsTrap.detail = "entity.IsTrap()";
				entityIsTrap.insertText = new vscode.SnippetString('IsTrap()');
				entityIsTrap.documentation = new vscode.MarkdownString("");
				results.push(entityIsTrap);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('entity_list.')) {
					return undefined;
				}
				
				
				const entitylistCanAddHateForMob = new vscode.CompletionItem('CanAddHateForMob', vscode.CompletionItemKind.Method);
				
				entitylistCanAddHateForMob.detail = "entity_list.CanAddHateForMob()";
				entitylistCanAddHateForMob.insertText = new vscode.SnippetString('CanAddHateForMob()');
				entitylistCanAddHateForMob.documentation = new vscode.MarkdownString("");
				results.push(entitylistCanAddHateForMob);				
				
				const entitylistChannelMessage = new vscode.CompletionItem('ChannelMessage', vscode.CompletionItemKind.Method);
				
				entitylistChannelMessage.detail = "entity_list.ChannelMessage()";
				entitylistChannelMessage.insertText = new vscode.SnippetString('ChannelMessage()');
				entitylistChannelMessage.documentation = new vscode.MarkdownString("");
				results.push(entitylistChannelMessage);				
				
				const entitylistClearClientPetitionQueue = new vscode.CompletionItem('ClearClientPetitionQueue', vscode.CompletionItemKind.Method);
				
				entitylistClearClientPetitionQueue.detail = "entity_list.ClearClientPetitionQueue()";
				entitylistClearClientPetitionQueue.insertText = new vscode.SnippetString('ClearClientPetitionQueue()');
				entitylistClearClientPetitionQueue.documentation = new vscode.MarkdownString("");
				results.push(entitylistClearClientPetitionQueue);				
				
				const entitylistClearFeignAggro = new vscode.CompletionItem('ClearFeignAggro', vscode.CompletionItemKind.Method);
				
				entitylistClearFeignAggro.detail = "entity_list.ClearFeignAggro()";
				entitylistClearFeignAggro.insertText = new vscode.SnippetString('ClearFeignAggro()');
				entitylistClearFeignAggro.documentation = new vscode.MarkdownString("");
				results.push(entitylistClearFeignAggro);				
				
				const entitylistDeleteNPCCorpses = new vscode.CompletionItem('DeleteNPCCorpses', vscode.CompletionItemKind.Method);
				
				entitylistDeleteNPCCorpses.detail = "entity_list.DeleteNPCCorpses()";
				entitylistDeleteNPCCorpses.insertText = new vscode.SnippetString('DeleteNPCCorpses()');
				entitylistDeleteNPCCorpses.documentation = new vscode.MarkdownString("");
				results.push(entitylistDeleteNPCCorpses);				
				
				const entitylistDeletePlayerCorpses = new vscode.CompletionItem('DeletePlayerCorpses', vscode.CompletionItemKind.Method);
				
				entitylistDeletePlayerCorpses.detail = "entity_list.DeletePlayerCorpses()";
				entitylistDeletePlayerCorpses.insertText = new vscode.SnippetString('DeletePlayerCorpses()');
				entitylistDeletePlayerCorpses.documentation = new vscode.MarkdownString("");
				results.push(entitylistDeletePlayerCorpses);				
				
				const entitylistDoubleAggro = new vscode.CompletionItem('DoubleAggro', vscode.CompletionItemKind.Method);
				
				entitylistDoubleAggro.detail = "entity_list.DoubleAggro()";
				entitylistDoubleAggro.insertText = new vscode.SnippetString('DoubleAggro()');
				entitylistDoubleAggro.documentation = new vscode.MarkdownString("");
				results.push(entitylistDoubleAggro);				
				
				const entitylistFighting = new vscode.CompletionItem('Fighting', vscode.CompletionItemKind.Method);
				
				entitylistFighting.detail = "entity_list.Fighting()";
				entitylistFighting.insertText = new vscode.SnippetString('Fighting()');
				entitylistFighting.documentation = new vscode.MarkdownString("");
				results.push(entitylistFighting);				
				
				const entitylistFilteredMessageClose = new vscode.CompletionItem('FilteredMessageClose', vscode.CompletionItemKind.Method);
				
				entitylistFilteredMessageClose.detail = "entity_list.FilteredMessageClose()";
				entitylistFilteredMessageClose.insertText = new vscode.SnippetString('FilteredMessageClose()');
				entitylistFilteredMessageClose.documentation = new vscode.MarkdownString("");
				results.push(entitylistFilteredMessageClose);				
				
				const entitylistFindDoor = new vscode.CompletionItem('FindDoor', vscode.CompletionItemKind.Method);
				
				entitylistFindDoor.detail = "entity_list.FindDoor()";
				entitylistFindDoor.insertText = new vscode.SnippetString('FindDoor()');
				entitylistFindDoor.documentation = new vscode.MarkdownString("");
				results.push(entitylistFindDoor);				
				
				const entitylistGetClientByAccID = new vscode.CompletionItem('GetClientByAccID', vscode.CompletionItemKind.Method);
				
				entitylistGetClientByAccID.detail = "entity_list.GetClientByAccID()";
				entitylistGetClientByAccID.insertText = new vscode.SnippetString('GetClientByAccID()');
				entitylistGetClientByAccID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetClientByAccID);				
				
				const entitylistGetClientByCharID = new vscode.CompletionItem('GetClientByCharID', vscode.CompletionItemKind.Method);
				
				entitylistGetClientByCharID.detail = "entity_list.GetClientByCharID()";
				entitylistGetClientByCharID.insertText = new vscode.SnippetString('GetClientByCharID()');
				entitylistGetClientByCharID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetClientByCharID);				
				
				const entitylistGetClientByID = new vscode.CompletionItem('GetClientByID', vscode.CompletionItemKind.Method);
				
				entitylistGetClientByID.detail = "entity_list.GetClientByID()";
				entitylistGetClientByID.insertText = new vscode.SnippetString('GetClientByID()');
				entitylistGetClientByID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetClientByID);				
				
				const entitylistGetClientByName = new vscode.CompletionItem('GetClientByName', vscode.CompletionItemKind.Method);
				
				entitylistGetClientByName.detail = "entity_list.GetClientByName()";
				entitylistGetClientByName.insertText = new vscode.SnippetString('GetClientByName()');
				entitylistGetClientByName.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetClientByName);				
				
				const entitylistGetClientByWID = new vscode.CompletionItem('GetClientByWID', vscode.CompletionItemKind.Method);
				
				entitylistGetClientByWID.detail = "entity_list.GetClientByWID()";
				entitylistGetClientByWID.insertText = new vscode.SnippetString('GetClientByWID()');
				entitylistGetClientByWID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetClientByWID);				
				
				const entitylistGetClientList = new vscode.CompletionItem('GetClientList', vscode.CompletionItemKind.Method);
				
				entitylistGetClientList.detail = "entity_list.GetClientList()";
				entitylistGetClientList.insertText = new vscode.SnippetString('GetClientList()');
				entitylistGetClientList.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetClientList);				
				
				const entitylistGetCorpseByID = new vscode.CompletionItem('GetCorpseByID', vscode.CompletionItemKind.Method);
				
				entitylistGetCorpseByID.detail = "entity_list.GetCorpseByID()";
				entitylistGetCorpseByID.insertText = new vscode.SnippetString('GetCorpseByID()');
				entitylistGetCorpseByID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetCorpseByID);				
				
				const entitylistGetCorpseByName = new vscode.CompletionItem('GetCorpseByName', vscode.CompletionItemKind.Method);
				
				entitylistGetCorpseByName.detail = "entity_list.GetCorpseByName()";
				entitylistGetCorpseByName.insertText = new vscode.SnippetString('GetCorpseByName()');
				entitylistGetCorpseByName.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetCorpseByName);				
				
				const entitylistGetCorpseByOwner = new vscode.CompletionItem('GetCorpseByOwner', vscode.CompletionItemKind.Method);
				
				entitylistGetCorpseByOwner.detail = "entity_list.GetCorpseByOwner()";
				entitylistGetCorpseByOwner.insertText = new vscode.SnippetString('GetCorpseByOwner()');
				entitylistGetCorpseByOwner.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetCorpseByOwner);				
				
				const entitylistGetCorpseList = new vscode.CompletionItem('GetCorpseList', vscode.CompletionItemKind.Method);
				
				entitylistGetCorpseList.detail = "entity_list.GetCorpseList()";
				entitylistGetCorpseList.insertText = new vscode.SnippetString('GetCorpseList()');
				entitylistGetCorpseList.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetCorpseList);				
				
				const entitylistGetDoorsByDBID = new vscode.CompletionItem('GetDoorsByDBID', vscode.CompletionItemKind.Method);
				
				entitylistGetDoorsByDBID.detail = "entity_list.GetDoorsByDBID()";
				entitylistGetDoorsByDBID.insertText = new vscode.SnippetString('GetDoorsByDBID()');
				entitylistGetDoorsByDBID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetDoorsByDBID);				
				
				const entitylistGetDoorsByDoorID = new vscode.CompletionItem('GetDoorsByDoorID', vscode.CompletionItemKind.Method);
				
				entitylistGetDoorsByDoorID.detail = "entity_list.GetDoorsByDoorID()";
				entitylistGetDoorsByDoorID.insertText = new vscode.SnippetString('GetDoorsByDoorID()');
				entitylistGetDoorsByDoorID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetDoorsByDoorID);				
				
				const entitylistGetDoorsByID = new vscode.CompletionItem('GetDoorsByID', vscode.CompletionItemKind.Method);
				
				entitylistGetDoorsByID.detail = "entity_list.GetDoorsByID()";
				entitylistGetDoorsByID.insertText = new vscode.SnippetString('GetDoorsByID()');
				entitylistGetDoorsByID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetDoorsByID);				
				
				const entitylistGetDoorsList = new vscode.CompletionItem('GetDoorsList', vscode.CompletionItemKind.Method);
				
				entitylistGetDoorsList.detail = "entity_list.GetDoorsList()";
				entitylistGetDoorsList.insertText = new vscode.SnippetString('GetDoorsList()');
				entitylistGetDoorsList.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetDoorsList);				
				
				const entitylistGetGroupByClient = new vscode.CompletionItem('GetGroupByClient', vscode.CompletionItemKind.Method);
				
				entitylistGetGroupByClient.detail = "entity_list.GetGroupByClient()";
				entitylistGetGroupByClient.insertText = new vscode.SnippetString('GetGroupByClient()');
				entitylistGetGroupByClient.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetGroupByClient);				
				
				const entitylistGetGroupByID = new vscode.CompletionItem('GetGroupByID', vscode.CompletionItemKind.Method);
				
				entitylistGetGroupByID.detail = "entity_list.GetGroupByID()";
				entitylistGetGroupByID.insertText = new vscode.SnippetString('GetGroupByID()');
				entitylistGetGroupByID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetGroupByID);				
				
				const entitylistGetGroupByLeaderName = new vscode.CompletionItem('GetGroupByLeaderName', vscode.CompletionItemKind.Method);
				
				entitylistGetGroupByLeaderName.detail = "entity_list.GetGroupByLeaderName()";
				entitylistGetGroupByLeaderName.insertText = new vscode.SnippetString('GetGroupByLeaderName()');
				entitylistGetGroupByLeaderName.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetGroupByLeaderName);				
				
				const entitylistGetGroupByMob = new vscode.CompletionItem('GetGroupByMob', vscode.CompletionItemKind.Method);
				
				entitylistGetGroupByMob.detail = "entity_list.GetGroupByMob()";
				entitylistGetGroupByMob.insertText = new vscode.SnippetString('GetGroupByMob()');
				entitylistGetGroupByMob.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetGroupByMob);				
				
				const entitylistGetMob = new vscode.CompletionItem('GetMob', vscode.CompletionItemKind.Method);
				
				entitylistGetMob.detail = "entity_list.GetMob()";
				entitylistGetMob.insertText = new vscode.SnippetString('GetMob()');
				entitylistGetMob.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetMob);				
				
				const entitylistGetMobByNpcTypeID = new vscode.CompletionItem('GetMobByNpcTypeID', vscode.CompletionItemKind.Method);
				
				entitylistGetMobByNpcTypeID.detail = "entity_list.GetMobByNpcTypeID()";
				entitylistGetMobByNpcTypeID.insertText = new vscode.SnippetString('GetMobByNpcTypeID()');
				entitylistGetMobByNpcTypeID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetMobByNpcTypeID);				
				
				const entitylistGetMobID = new vscode.CompletionItem('GetMobID', vscode.CompletionItemKind.Method);
				
				entitylistGetMobID.detail = "entity_list.GetMobID()";
				entitylistGetMobID.insertText = new vscode.SnippetString('GetMobID()');
				entitylistGetMobID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetMobID);				
				
				const entitylistGetMobList = new vscode.CompletionItem('GetMobList', vscode.CompletionItemKind.Method);
				
				entitylistGetMobList.detail = "entity_list.GetMobList()";
				entitylistGetMobList.insertText = new vscode.SnippetString('GetMobList()');
				entitylistGetMobList.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetMobList);				
				
				const entitylistGetNPCByID = new vscode.CompletionItem('GetNPCByID', vscode.CompletionItemKind.Method);
				
				entitylistGetNPCByID.detail = "entity_list.GetNPCByID()";
				entitylistGetNPCByID.insertText = new vscode.SnippetString('GetNPCByID()');
				entitylistGetNPCByID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetNPCByID);				
				
				const entitylistGetNPCByNPCTypeID = new vscode.CompletionItem('GetNPCByNPCTypeID', vscode.CompletionItemKind.Method);
				
				entitylistGetNPCByNPCTypeID.detail = "entity_list.GetNPCByNPCTypeID()";
				entitylistGetNPCByNPCTypeID.insertText = new vscode.SnippetString('GetNPCByNPCTypeID()');
				entitylistGetNPCByNPCTypeID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetNPCByNPCTypeID);				
				
				const entitylistGetNPCBySpawnID = new vscode.CompletionItem('GetNPCBySpawnID', vscode.CompletionItemKind.Method);
				
				entitylistGetNPCBySpawnID.detail = "entity_list.GetNPCBySpawnID()";
				entitylistGetNPCBySpawnID.insertText = new vscode.SnippetString('GetNPCBySpawnID()');
				entitylistGetNPCBySpawnID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetNPCBySpawnID);				
				
				const entitylistGetNPCList = new vscode.CompletionItem('GetNPCList', vscode.CompletionItemKind.Method);
				
				entitylistGetNPCList.detail = "entity_list.GetNPCList()";
				entitylistGetNPCList.insertText = new vscode.SnippetString('GetNPCList()');
				entitylistGetNPCList.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetNPCList);				
				
				const entitylistGetObjectByDBID = new vscode.CompletionItem('GetObjectByDBID', vscode.CompletionItemKind.Method);
				
				entitylistGetObjectByDBID.detail = "entity_list.GetObjectByDBID()";
				entitylistGetObjectByDBID.insertText = new vscode.SnippetString('GetObjectByDBID()');
				entitylistGetObjectByDBID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetObjectByDBID);				
				
				const entitylistGetObjectByID = new vscode.CompletionItem('GetObjectByID', vscode.CompletionItemKind.Method);
				
				entitylistGetObjectByID.detail = "entity_list.GetObjectByID()";
				entitylistGetObjectByID.insertText = new vscode.SnippetString('GetObjectByID()');
				entitylistGetObjectByID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetObjectByID);				
				
				const entitylistGetObjectList = new vscode.CompletionItem('GetObjectList', vscode.CompletionItemKind.Method);
				
				entitylistGetObjectList.detail = "entity_list.GetObjectList()";
				entitylistGetObjectList.insertText = new vscode.SnippetString('GetObjectList()');
				entitylistGetObjectList.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetObjectList);				
				
				const entitylistGetRaidByClient = new vscode.CompletionItem('GetRaidByClient', vscode.CompletionItemKind.Method);
				
				entitylistGetRaidByClient.detail = "entity_list.GetRaidByClient()";
				entitylistGetRaidByClient.insertText = new vscode.SnippetString('GetRaidByClient()');
				entitylistGetRaidByClient.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetRaidByClient);				
				
				const entitylistGetRaidByID = new vscode.CompletionItem('GetRaidByID', vscode.CompletionItemKind.Method);
				
				entitylistGetRaidByID.detail = "entity_list.GetRaidByID()";
				entitylistGetRaidByID.insertText = new vscode.SnippetString('GetRaidByID()');
				entitylistGetRaidByID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetRaidByID);				
				
				const entitylistGetRandomClient = new vscode.CompletionItem('GetRandomClient', vscode.CompletionItemKind.Method);
				
				entitylistGetRandomClient.detail = "entity_list.GetRandomClient()";
				entitylistGetRandomClient.insertText = new vscode.SnippetString('GetRandomClient()');
				entitylistGetRandomClient.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetRandomClient);				
				
				const entitylistGetShuffledClientList = new vscode.CompletionItem('GetShuffledClientList', vscode.CompletionItemKind.Method);
				
				entitylistGetShuffledClientList.detail = "entity_list.GetShuffledClientList()";
				entitylistGetShuffledClientList.insertText = new vscode.SnippetString('GetShuffledClientList()');
				entitylistGetShuffledClientList.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetShuffledClientList);				
				
				const entitylistGetSpawnByID = new vscode.CompletionItem('GetSpawnByID', vscode.CompletionItemKind.Method);
				
				entitylistGetSpawnByID.detail = "entity_list.GetSpawnByID()";
				entitylistGetSpawnByID.insertText = new vscode.SnippetString('GetSpawnByID()');
				entitylistGetSpawnByID.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetSpawnByID);				
				
				const entitylistGetSpawnList = new vscode.CompletionItem('GetSpawnList', vscode.CompletionItemKind.Method);
				
				entitylistGetSpawnList.detail = "entity_list.GetSpawnList()";
				entitylistGetSpawnList.insertText = new vscode.SnippetString('GetSpawnList()');
				entitylistGetSpawnList.documentation = new vscode.MarkdownString("");
				results.push(entitylistGetSpawnList);				
				
				const entitylistHalveAggro = new vscode.CompletionItem('HalveAggro', vscode.CompletionItemKind.Method);
				
				entitylistHalveAggro.detail = "entity_list.HalveAggro()";
				entitylistHalveAggro.insertText = new vscode.SnippetString('HalveAggro()');
				entitylistHalveAggro.documentation = new vscode.MarkdownString("");
				results.push(entitylistHalveAggro);				
				
				const entitylistIsMobSpawnedByNpcTypeID = new vscode.CompletionItem('IsMobSpawnedByNpcTypeID', vscode.CompletionItemKind.Method);
				
				entitylistIsMobSpawnedByNpcTypeID.detail = "entity_list.IsMobSpawnedByNpcTypeID()";
				entitylistIsMobSpawnedByNpcTypeID.insertText = new vscode.SnippetString('IsMobSpawnedByNpcTypeID()');
				entitylistIsMobSpawnedByNpcTypeID.documentation = new vscode.MarkdownString("");
				results.push(entitylistIsMobSpawnedByNpcTypeID);				
				
				const entitylistMakeNameUnique = new vscode.CompletionItem('MakeNameUnique', vscode.CompletionItemKind.Method);
				
				entitylistMakeNameUnique.detail = "entity_list.MakeNameUnique()";
				entitylistMakeNameUnique.insertText = new vscode.SnippetString('MakeNameUnique()');
				entitylistMakeNameUnique.documentation = new vscode.MarkdownString("");
				results.push(entitylistMakeNameUnique);				
				
				const entitylistMessage = new vscode.CompletionItem('Message', vscode.CompletionItemKind.Method);
				
				entitylistMessage.detail = "entity_list.Message()";
				entitylistMessage.insertText = new vscode.SnippetString('Message()');
				entitylistMessage.documentation = new vscode.MarkdownString("");
				results.push(entitylistMessage);				
				
				const entitylistMessageClose = new vscode.CompletionItem('MessageClose', vscode.CompletionItemKind.Method);
				
				entitylistMessageClose.detail = "entity_list.MessageClose()";
				entitylistMessageClose.insertText = new vscode.SnippetString('MessageClose()');
				entitylistMessageClose.documentation = new vscode.MarkdownString("");
				results.push(entitylistMessageClose);				
				
				const entitylistMessageGroup = new vscode.CompletionItem('MessageGroup', vscode.CompletionItemKind.Method);
				
				entitylistMessageGroup.detail = "entity_list.MessageGroup()";
				entitylistMessageGroup.insertText = new vscode.SnippetString('MessageGroup()');
				entitylistMessageGroup.documentation = new vscode.MarkdownString("");
				results.push(entitylistMessageGroup);				
				
				const entitylistMessageStatus = new vscode.CompletionItem('MessageStatus', vscode.CompletionItemKind.Method);
				
				entitylistMessageStatus.detail = "entity_list.MessageStatus()";
				entitylistMessageStatus.insertText = new vscode.SnippetString('MessageStatus()');
				entitylistMessageStatus.documentation = new vscode.MarkdownString("");
				results.push(entitylistMessageStatus);				
				
				const entitylistOpenDoorsNear = new vscode.CompletionItem('OpenDoorsNear', vscode.CompletionItemKind.Method);
				
				entitylistOpenDoorsNear.detail = "entity_list.OpenDoorsNear()";
				entitylistOpenDoorsNear.insertText = new vscode.SnippetString('OpenDoorsNear()');
				entitylistOpenDoorsNear.documentation = new vscode.MarkdownString("");
				results.push(entitylistOpenDoorsNear);				
				
				const entitylistRemoveFromHateLists = new vscode.CompletionItem('RemoveFromHateLists', vscode.CompletionItemKind.Method);
				
				entitylistRemoveFromHateLists.detail = "entity_list.RemoveFromHateLists()";
				entitylistRemoveFromHateLists.insertText = new vscode.SnippetString('RemoveFromHateLists()');
				entitylistRemoveFromHateLists.documentation = new vscode.MarkdownString("");
				results.push(entitylistRemoveFromHateLists);				
				
				const entitylistRemoveFromTargets = new vscode.CompletionItem('RemoveFromTargets', vscode.CompletionItemKind.Method);
				
				entitylistRemoveFromTargets.detail = "entity_list.RemoveFromTargets()";
				entitylistRemoveFromTargets.insertText = new vscode.SnippetString('RemoveFromTargets()');
				entitylistRemoveFromTargets.documentation = new vscode.MarkdownString("");
				results.push(entitylistRemoveFromTargets);				
				
				const entitylistRemoveNumbers = new vscode.CompletionItem('RemoveNumbers', vscode.CompletionItemKind.Method);
				
				entitylistRemoveNumbers.detail = "entity_list.RemoveNumbers()";
				entitylistRemoveNumbers.insertText = new vscode.SnippetString('RemoveNumbers()');
				entitylistRemoveNumbers.documentation = new vscode.MarkdownString("");
				results.push(entitylistRemoveNumbers);				
				
				const entitylistReplaceWithTarget = new vscode.CompletionItem('ReplaceWithTarget', vscode.CompletionItemKind.Method);
				
				entitylistReplaceWithTarget.detail = "entity_list.ReplaceWithTarget()";
				entitylistReplaceWithTarget.insertText = new vscode.SnippetString('ReplaceWithTarget()');
				entitylistReplaceWithTarget.documentation = new vscode.MarkdownString("");
				results.push(entitylistReplaceWithTarget);				
				
				const entitylistSignalAllClients = new vscode.CompletionItem('SignalAllClients', vscode.CompletionItemKind.Method);
				
				entitylistSignalAllClients.detail = "entity_list.SignalAllClients()";
				entitylistSignalAllClients.insertText = new vscode.SnippetString('SignalAllClients()');
				entitylistSignalAllClients.documentation = new vscode.MarkdownString("");
				results.push(entitylistSignalAllClients);				
				
				const entitylistSignalMobsByNPCID = new vscode.CompletionItem('SignalMobsByNPCID', vscode.CompletionItemKind.Method);
				
				entitylistSignalMobsByNPCID.detail = "entity_list.SignalMobsByNPCID()";
				entitylistSignalMobsByNPCID.insertText = new vscode.SnippetString('SignalMobsByNPCID()');
				entitylistSignalMobsByNPCID.documentation = new vscode.MarkdownString("");
				results.push(entitylistSignalMobsByNPCID);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('eq.')) {
					return undefined;
				}
				
				
				const eqactivespeakactivity = new vscode.CompletionItem('active_speak_activity', vscode.CompletionItemKind.Method);
				
				eqactivespeakactivity.detail = "eq.active_speak_activity()";
				eqactivespeakactivity.insertText = new vscode.SnippetString('active_speak_activity()');
				eqactivespeakactivity.documentation = new vscode.MarkdownString("");
				results.push(eqactivespeakactivity);				
				
				const eqactivespeaktask = new vscode.CompletionItem('active_speak_task', vscode.CompletionItemKind.Method);
				
				eqactivespeaktask.detail = "eq.active_speak_task()";
				eqactivespeaktask.insertText = new vscode.SnippetString('active_speak_task()');
				eqactivespeaktask.documentation = new vscode.MarkdownString("");
				results.push(eqactivespeaktask);				
				
				const eqactivetasksinset = new vscode.CompletionItem('active_tasks_in_set', vscode.CompletionItemKind.Method);
				
				eqactivetasksinset.detail = "eq.active_tasks_in_set()";
				eqactivetasksinset.insertText = new vscode.SnippetString('active_tasks_in_set()');
				eqactivetasksinset.documentation = new vscode.MarkdownString("");
				results.push(eqactivetasksinset);				
				
				const eqaddarea = new vscode.CompletionItem('add_area', vscode.CompletionItemKind.Method);
				
				eqaddarea.detail = "eq.add_area()";
				eqaddarea.insertText = new vscode.SnippetString('add_area()');
				eqaddarea.documentation = new vscode.MarkdownString("");
				results.push(eqaddarea);				
				
				const eqassigngrouptoinstance = new vscode.CompletionItem('assign_group_to_instance', vscode.CompletionItemKind.Method);
				
				eqassigngrouptoinstance.detail = "eq.assign_group_to_instance()";
				eqassigngrouptoinstance.insertText = new vscode.SnippetString('assign_group_to_instance()');
				eqassigngrouptoinstance.documentation = new vscode.MarkdownString("");
				results.push(eqassigngrouptoinstance);				
				
				const eqassignraidtoinstance = new vscode.CompletionItem('assign_raid_to_instance', vscode.CompletionItemKind.Method);
				
				eqassignraidtoinstance.detail = "eq.assign_raid_to_instance()";
				eqassignraidtoinstance.insertText = new vscode.SnippetString('assign_raid_to_instance()');
				eqassignraidtoinstance.documentation = new vscode.MarkdownString("");
				results.push(eqassignraidtoinstance);				
				
				const eqassigntask = new vscode.CompletionItem('assign_task', vscode.CompletionItemKind.Method);
				
				eqassigntask.detail = "eq.assign_task()";
				eqassigntask.insertText = new vscode.SnippetString('assign_task()');
				eqassigntask.documentation = new vscode.MarkdownString("");
				results.push(eqassigntask);				
				
				const eqassigntoinstance = new vscode.CompletionItem('assign_to_instance', vscode.CompletionItemKind.Method);
				
				eqassigntoinstance.detail = "eq.assign_to_instance()";
				eqassigntoinstance.insertText = new vscode.SnippetString('assign_to_instance()');
				eqassigntoinstance.documentation = new vscode.MarkdownString("");
				results.push(eqassigntoinstance);				
				
				const eqassigntoinstancebycharid = new vscode.CompletionItem('assign_to_instance_by_char_id', vscode.CompletionItemKind.Method);
				
				eqassigntoinstancebycharid.detail = "eq.assign_to_instance_by_char_id()";
				eqassigntoinstancebycharid.insertText = new vscode.SnippetString('assign_to_instance_by_char_id()');
				eqassigntoinstancebycharid.documentation = new vscode.MarkdownString("");
				results.push(eqassigntoinstancebycharid);				
				
				const eqattack = new vscode.CompletionItem('attack', vscode.CompletionItemKind.Method);
				
				eqattack.detail = "eq.attack()";
				eqattack.insertText = new vscode.SnippetString('attack()');
				eqattack.documentation = new vscode.MarkdownString("");
				results.push(eqattack);				
				
				const eqattacknpc = new vscode.CompletionItem('attack_npc', vscode.CompletionItemKind.Method);
				
				eqattacknpc.detail = "eq.attack_npc()";
				eqattacknpc.insertText = new vscode.SnippetString('attack_npc()');
				eqattacknpc.documentation = new vscode.MarkdownString("");
				results.push(eqattacknpc);				
				
				const eqattacknpctype = new vscode.CompletionItem('attack_npc_type', vscode.CompletionItemKind.Method);
				
				eqattacknpctype.detail = "eq.attack_npc_type()";
				eqattacknpctype.insertText = new vscode.SnippetString('attack_npc_type()');
				eqattacknpctype.documentation = new vscode.MarkdownString("");
				results.push(eqattacknpctype);				
				
				const eqburyplayercorpse = new vscode.CompletionItem('bury_player_corpse', vscode.CompletionItemKind.Method);
				
				eqburyplayercorpse.detail = "eq.bury_player_corpse()";
				eqburyplayercorpse.insertText = new vscode.SnippetString('bury_player_corpse()');
				eqburyplayercorpse.documentation = new vscode.MarkdownString("");
				results.push(eqburyplayercorpse);				
				
				const eqcheckinstancebycharid = new vscode.CompletionItem('check_instance_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcheckinstancebycharid.detail = "eq.check_instance_by_char_id()";
				eqcheckinstancebycharid.insertText = new vscode.SnippetString('check_instance_by_char_id()');
				eqcheckinstancebycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcheckinstancebycharid);				
				
				const eqchecktitle = new vscode.CompletionItem('check_title', vscode.CompletionItemKind.Method);
				
				eqchecktitle.detail = "eq.check_title()";
				eqchecktitle.insertText = new vscode.SnippetString('check_title()');
				eqchecktitle.documentation = new vscode.MarkdownString("");
				results.push(eqchecktitle);				
				
				const eqclearareas = new vscode.CompletionItem('clear_areas', vscode.CompletionItemKind.Method);
				
				eqclearareas.detail = "eq.clear_areas()";
				eqclearareas.insertText = new vscode.SnippetString('clear_areas()');
				eqclearareas.documentation = new vscode.MarkdownString("");
				results.push(eqclearareas);				
				
				const eqclearnpctypecache = new vscode.CompletionItem('clear_npctype_cache', vscode.CompletionItemKind.Method);
				
				eqclearnpctypecache.detail = "eq.clear_npctype_cache()";
				eqclearnpctypecache.insertText = new vscode.SnippetString('clear_npctype_cache()');
				eqclearnpctypecache.documentation = new vscode.MarkdownString("");
				results.push(eqclearnpctypecache);				
				
				const eqclearopcode = new vscode.CompletionItem('clear_opcode', vscode.CompletionItemKind.Method);
				
				eqclearopcode.detail = "eq.clear_opcode()";
				eqclearopcode.insertText = new vscode.SnippetString('clear_opcode()');
				eqclearopcode.documentation = new vscode.MarkdownString("");
				results.push(eqclearopcode);				
				
				const eqclearproximity = new vscode.CompletionItem('clear_proximity', vscode.CompletionItemKind.Method);
				
				eqclearproximity.detail = "eq.clear_proximity()";
				eqclearproximity.insertText = new vscode.SnippetString('clear_proximity()');
				eqclearproximity.documentation = new vscode.MarkdownString("");
				results.push(eqclearproximity);				
				
				const eqclearspawntimers = new vscode.CompletionItem('clear_spawn_timers', vscode.CompletionItemKind.Method);
				
				eqclearspawntimers.detail = "eq.clear_spawn_timers()";
				eqclearspawntimers.insertText = new vscode.SnippetString('clear_spawn_timers()');
				eqclearspawntimers.documentation = new vscode.MarkdownString("");
				results.push(eqclearspawntimers);				
				
				const eqclock = new vscode.CompletionItem('clock', vscode.CompletionItemKind.Method);
				
				eqclock.detail = "eq.clock()";
				eqclock.insertText = new vscode.SnippetString('clock()');
				eqclock.documentation = new vscode.MarkdownString("");
				results.push(eqclock);				
				
				const eqcollectitems = new vscode.CompletionItem('collect_items', vscode.CompletionItemKind.Method);
				
				eqcollectitems.detail = "eq.collect_items()";
				eqcollectitems.insertText = new vscode.SnippetString('collect_items()');
				eqcollectitems.documentation = new vscode.MarkdownString("");
				results.push(eqcollectitems);				
				
				const eqcompletedtasksinset = new vscode.CompletionItem('completed_tasks_in_set', vscode.CompletionItemKind.Method);
				
				eqcompletedtasksinset.detail = "eq.completed_tasks_in_set()";
				eqcompletedtasksinset.insertText = new vscode.SnippetString('completed_tasks_in_set()');
				eqcompletedtasksinset.documentation = new vscode.MarkdownString("");
				results.push(eqcompletedtasksinset);				
				
				const eqcountitem = new vscode.CompletionItem('count_item', vscode.CompletionItemKind.Method);
				
				eqcountitem.detail = "eq.count_item()";
				eqcountitem.insertText = new vscode.SnippetString('count_item()');
				eqcountitem.documentation = new vscode.MarkdownString("");
				results.push(eqcountitem);				
				
				const eqcreatedoor = new vscode.CompletionItem('create_door', vscode.CompletionItemKind.Method);
				
				eqcreatedoor.detail = "eq.create_door()";
				eqcreatedoor.insertText = new vscode.SnippetString('create_door()');
				eqcreatedoor.documentation = new vscode.MarkdownString("");
				results.push(eqcreatedoor);				
				
				const eqcreategroundobject = new vscode.CompletionItem('create_ground_object', vscode.CompletionItemKind.Method);
				
				eqcreategroundobject.detail = "eq.create_ground_object()";
				eqcreategroundobject.insertText = new vscode.SnippetString('create_ground_object()');
				eqcreategroundobject.documentation = new vscode.MarkdownString("");
				results.push(eqcreategroundobject);				
				
				const eqcreategroundobjectfrommodel = new vscode.CompletionItem('create_ground_object_from_model', vscode.CompletionItemKind.Method);
				
				eqcreategroundobjectfrommodel.detail = "eq.create_ground_object_from_model()";
				eqcreategroundobjectfrommodel.insertText = new vscode.SnippetString('create_ground_object_from_model()');
				eqcreategroundobjectfrommodel.documentation = new vscode.MarkdownString("");
				results.push(eqcreategroundobjectfrommodel);				
				
				const eqcreateguild = new vscode.CompletionItem('create_guild', vscode.CompletionItemKind.Method);
				
				eqcreateguild.detail = "eq.create_guild()";
				eqcreateguild.insertText = new vscode.SnippetString('create_guild()');
				eqcreateguild.documentation = new vscode.MarkdownString("");
				results.push(eqcreateguild);				
				
				const eqcreateinstance = new vscode.CompletionItem('create_instance', vscode.CompletionItemKind.Method);
				
				eqcreateinstance.detail = "eq.create_instance()";
				eqcreateinstance.insertText = new vscode.SnippetString('create_instance()');
				eqcreateinstance.documentation = new vscode.MarkdownString("");
				results.push(eqcreateinstance);				
				
				const eqcrosszoneassigntaskbycharid = new vscode.CompletionItem('cross_zone_assign_task_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneassigntaskbycharid.detail = "eq.cross_zone_assign_task_by_char_id()";
				eqcrosszoneassigntaskbycharid.insertText = new vscode.SnippetString('cross_zone_assign_task_by_char_id()');
				eqcrosszoneassigntaskbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneassigntaskbycharid);				
				
				const eqcrosszoneassigntaskbygroupid = new vscode.CompletionItem('cross_zone_assign_task_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneassigntaskbygroupid.detail = "eq.cross_zone_assign_task_by_group_id()";
				eqcrosszoneassigntaskbygroupid.insertText = new vscode.SnippetString('cross_zone_assign_task_by_group_id()');
				eqcrosszoneassigntaskbygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneassigntaskbygroupid);				
				
				const eqcrosszoneassigntaskbyguildid = new vscode.CompletionItem('cross_zone_assign_task_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneassigntaskbyguildid.detail = "eq.cross_zone_assign_task_by_guild_id()";
				eqcrosszoneassigntaskbyguildid.insertText = new vscode.SnippetString('cross_zone_assign_task_by_guild_id()');
				eqcrosszoneassigntaskbyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneassigntaskbyguildid);				
				
				const eqcrosszoneassigntaskbyraidid = new vscode.CompletionItem('cross_zone_assign_task_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneassigntaskbyraidid.detail = "eq.cross_zone_assign_task_by_raid_id()";
				eqcrosszoneassigntaskbyraidid.insertText = new vscode.SnippetString('cross_zone_assign_task_by_raid_id()');
				eqcrosszoneassigntaskbyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneassigntaskbyraidid);				
				
				const eqcrosszonecastspellbycharid = new vscode.CompletionItem('cross_zone_cast_spell_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonecastspellbycharid.detail = "eq.cross_zone_cast_spell_by_char_id()";
				eqcrosszonecastspellbycharid.insertText = new vscode.SnippetString('cross_zone_cast_spell_by_char_id()');
				eqcrosszonecastspellbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonecastspellbycharid);				
				
				const eqcrosszonecastspellbygroupid = new vscode.CompletionItem('cross_zone_cast_spell_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonecastspellbygroupid.detail = "eq.cross_zone_cast_spell_by_group_id()";
				eqcrosszonecastspellbygroupid.insertText = new vscode.SnippetString('cross_zone_cast_spell_by_group_id()');
				eqcrosszonecastspellbygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonecastspellbygroupid);				
				
				const eqcrosszonecastspellbyguildid = new vscode.CompletionItem('cross_zone_cast_spell_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonecastspellbyguildid.detail = "eq.cross_zone_cast_spell_by_guild_id()";
				eqcrosszonecastspellbyguildid.insertText = new vscode.SnippetString('cross_zone_cast_spell_by_guild_id()');
				eqcrosszonecastspellbyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonecastspellbyguildid);				
				
				const eqcrosszonecastspellbyraidid = new vscode.CompletionItem('cross_zone_cast_spell_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonecastspellbyraidid.detail = "eq.cross_zone_cast_spell_by_raid_id()";
				eqcrosszonecastspellbyraidid.insertText = new vscode.SnippetString('cross_zone_cast_spell_by_raid_id()');
				eqcrosszonecastspellbyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonecastspellbyraidid);				
				
				const eqcrosszonedisabletaskbycharid = new vscode.CompletionItem('cross_zone_disable_task_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonedisabletaskbycharid.detail = "eq.cross_zone_disable_task_by_char_id()";
				eqcrosszonedisabletaskbycharid.insertText = new vscode.SnippetString('cross_zone_disable_task_by_char_id()');
				eqcrosszonedisabletaskbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonedisabletaskbycharid);				
				
				const eqcrosszonedisabletaskbygroupid = new vscode.CompletionItem('cross_zone_disable_task_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonedisabletaskbygroupid.detail = "eq.cross_zone_disable_task_by_group_id()";
				eqcrosszonedisabletaskbygroupid.insertText = new vscode.SnippetString('cross_zone_disable_task_by_group_id()');
				eqcrosszonedisabletaskbygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonedisabletaskbygroupid);				
				
				const eqcrosszonedisabletaskbyguildid = new vscode.CompletionItem('cross_zone_disable_task_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonedisabletaskbyguildid.detail = "eq.cross_zone_disable_task_by_guild_id()";
				eqcrosszonedisabletaskbyguildid.insertText = new vscode.SnippetString('cross_zone_disable_task_by_guild_id()');
				eqcrosszonedisabletaskbyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonedisabletaskbyguildid);				
				
				const eqcrosszonedisabletaskbyraidid = new vscode.CompletionItem('cross_zone_disable_task_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonedisabletaskbyraidid.detail = "eq.cross_zone_disable_task_by_raid_id()";
				eqcrosszonedisabletaskbyraidid.insertText = new vscode.SnippetString('cross_zone_disable_task_by_raid_id()');
				eqcrosszonedisabletaskbyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonedisabletaskbyraidid);				
				
				const eqcrosszoneenabletaskbycharid = new vscode.CompletionItem('cross_zone_enable_task_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneenabletaskbycharid.detail = "eq.cross_zone_enable_task_by_char_id()";
				eqcrosszoneenabletaskbycharid.insertText = new vscode.SnippetString('cross_zone_enable_task_by_char_id()');
				eqcrosszoneenabletaskbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneenabletaskbycharid);				
				
				const eqcrosszoneenabletaskbygroupid = new vscode.CompletionItem('cross_zone_enable_task_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneenabletaskbygroupid.detail = "eq.cross_zone_enable_task_by_group_id()";
				eqcrosszoneenabletaskbygroupid.insertText = new vscode.SnippetString('cross_zone_enable_task_by_group_id()');
				eqcrosszoneenabletaskbygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneenabletaskbygroupid);				
				
				const eqcrosszoneenabletaskbyguildid = new vscode.CompletionItem('cross_zone_enable_task_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneenabletaskbyguildid.detail = "eq.cross_zone_enable_task_by_guild_id()";
				eqcrosszoneenabletaskbyguildid.insertText = new vscode.SnippetString('cross_zone_enable_task_by_guild_id()');
				eqcrosszoneenabletaskbyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneenabletaskbyguildid);				
				
				const eqcrosszoneenabletaskbyraidid = new vscode.CompletionItem('cross_zone_enable_task_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneenabletaskbyraidid.detail = "eq.cross_zone_enable_task_by_raid_id()";
				eqcrosszoneenabletaskbyraidid.insertText = new vscode.SnippetString('cross_zone_enable_task_by_raid_id()');
				eqcrosszoneenabletaskbyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneenabletaskbyraidid);				
				
				const eqcrosszonefailtaskbycharid = new vscode.CompletionItem('cross_zone_fail_task_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonefailtaskbycharid.detail = "eq.cross_zone_fail_task_by_char_id()";
				eqcrosszonefailtaskbycharid.insertText = new vscode.SnippetString('cross_zone_fail_task_by_char_id()');
				eqcrosszonefailtaskbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonefailtaskbycharid);				
				
				const eqcrosszonefailtaskbygroupid = new vscode.CompletionItem('cross_zone_fail_task_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonefailtaskbygroupid.detail = "eq.cross_zone_fail_task_by_group_id()";
				eqcrosszonefailtaskbygroupid.insertText = new vscode.SnippetString('cross_zone_fail_task_by_group_id()');
				eqcrosszonefailtaskbygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonefailtaskbygroupid);				
				
				const eqcrosszonefailtaskbyguildid = new vscode.CompletionItem('cross_zone_fail_task_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonefailtaskbyguildid.detail = "eq.cross_zone_fail_task_by_guild_id()";
				eqcrosszonefailtaskbyguildid.insertText = new vscode.SnippetString('cross_zone_fail_task_by_guild_id()');
				eqcrosszonefailtaskbyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonefailtaskbyguildid);				
				
				const eqcrosszonefailtaskbyraidid = new vscode.CompletionItem('cross_zone_fail_task_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonefailtaskbyraidid.detail = "eq.cross_zone_fail_task_by_raid_id()";
				eqcrosszonefailtaskbyraidid.insertText = new vscode.SnippetString('cross_zone_fail_task_by_raid_id()');
				eqcrosszonefailtaskbyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonefailtaskbyraidid);				
				
				const eqcrosszonemarqueebycharid = new vscode.CompletionItem('cross_zone_marquee_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemarqueebycharid.detail = "eq.cross_zone_marquee_by_char_id()";
				eqcrosszonemarqueebycharid.insertText = new vscode.SnippetString('cross_zone_marquee_by_char_id()');
				eqcrosszonemarqueebycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemarqueebycharid);				
				
				const eqcrosszonemarqueebygroupid = new vscode.CompletionItem('cross_zone_marquee_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemarqueebygroupid.detail = "eq.cross_zone_marquee_by_group_id()";
				eqcrosszonemarqueebygroupid.insertText = new vscode.SnippetString('cross_zone_marquee_by_group_id()');
				eqcrosszonemarqueebygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemarqueebygroupid);				
				
				const eqcrosszonemarqueebyguildid = new vscode.CompletionItem('cross_zone_marquee_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemarqueebyguildid.detail = "eq.cross_zone_marquee_by_guild_id()";
				eqcrosszonemarqueebyguildid.insertText = new vscode.SnippetString('cross_zone_marquee_by_guild_id()');
				eqcrosszonemarqueebyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemarqueebyguildid);				
				
				const eqcrosszonemarqueebyraidid = new vscode.CompletionItem('cross_zone_marquee_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemarqueebyraidid.detail = "eq.cross_zone_marquee_by_raid_id()";
				eqcrosszonemarqueebyraidid.insertText = new vscode.SnippetString('cross_zone_marquee_by_raid_id()');
				eqcrosszonemarqueebyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemarqueebyraidid);				
				
				const eqcrosszonemessageplayerbygroupid = new vscode.CompletionItem('cross_zone_message_player_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemessageplayerbygroupid.detail = "eq.cross_zone_message_player_by_group_id()";
				eqcrosszonemessageplayerbygroupid.insertText = new vscode.SnippetString('cross_zone_message_player_by_group_id()');
				eqcrosszonemessageplayerbygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemessageplayerbygroupid);				
				
				const eqcrosszonemessageplayerbyguildid = new vscode.CompletionItem('cross_zone_message_player_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemessageplayerbyguildid.detail = "eq.cross_zone_message_player_by_guild_id()";
				eqcrosszonemessageplayerbyguildid.insertText = new vscode.SnippetString('cross_zone_message_player_by_guild_id()');
				eqcrosszonemessageplayerbyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemessageplayerbyguildid);				
				
				const eqcrosszonemessageplayerbyname = new vscode.CompletionItem('cross_zone_message_player_by_name', vscode.CompletionItemKind.Method);
				
				eqcrosszonemessageplayerbyname.detail = "eq.cross_zone_message_player_by_name()";
				eqcrosszonemessageplayerbyname.insertText = new vscode.SnippetString('cross_zone_message_player_by_name()');
				eqcrosszonemessageplayerbyname.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemessageplayerbyname);				
				
				const eqcrosszonemessageplayerbyraidid = new vscode.CompletionItem('cross_zone_message_player_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemessageplayerbyraidid.detail = "eq.cross_zone_message_player_by_raid_id()";
				eqcrosszonemessageplayerbyraidid.insertText = new vscode.SnippetString('cross_zone_message_player_by_raid_id()');
				eqcrosszonemessageplayerbyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemessageplayerbyraidid);				
				
				const eqcrosszonemoveinstancebycharid = new vscode.CompletionItem('cross_zone_move_instance_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemoveinstancebycharid.detail = "eq.cross_zone_move_instance_by_char_id()";
				eqcrosszonemoveinstancebycharid.insertText = new vscode.SnippetString('cross_zone_move_instance_by_char_id()');
				eqcrosszonemoveinstancebycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemoveinstancebycharid);				
				
				const eqcrosszonemoveinstancebygroupid = new vscode.CompletionItem('cross_zone_move_instance_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemoveinstancebygroupid.detail = "eq.cross_zone_move_instance_by_group_id()";
				eqcrosszonemoveinstancebygroupid.insertText = new vscode.SnippetString('cross_zone_move_instance_by_group_id()');
				eqcrosszonemoveinstancebygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemoveinstancebygroupid);				
				
				const eqcrosszonemoveinstancebyguildid = new vscode.CompletionItem('cross_zone_move_instance_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemoveinstancebyguildid.detail = "eq.cross_zone_move_instance_by_guild_id()";
				eqcrosszonemoveinstancebyguildid.insertText = new vscode.SnippetString('cross_zone_move_instance_by_guild_id()');
				eqcrosszonemoveinstancebyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemoveinstancebyguildid);				
				
				const eqcrosszonemoveinstancebyraidid = new vscode.CompletionItem('cross_zone_move_instance_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemoveinstancebyraidid.detail = "eq.cross_zone_move_instance_by_raid_id()";
				eqcrosszonemoveinstancebyraidid.insertText = new vscode.SnippetString('cross_zone_move_instance_by_raid_id()');
				eqcrosszonemoveinstancebyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemoveinstancebyraidid);				
				
				const eqcrosszonemoveplayerbycharid = new vscode.CompletionItem('cross_zone_move_player_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemoveplayerbycharid.detail = "eq.cross_zone_move_player_by_char_id()";
				eqcrosszonemoveplayerbycharid.insertText = new vscode.SnippetString('cross_zone_move_player_by_char_id()');
				eqcrosszonemoveplayerbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemoveplayerbycharid);				
				
				const eqcrosszonemoveplayerbygroupid = new vscode.CompletionItem('cross_zone_move_player_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemoveplayerbygroupid.detail = "eq.cross_zone_move_player_by_group_id()";
				eqcrosszonemoveplayerbygroupid.insertText = new vscode.SnippetString('cross_zone_move_player_by_group_id()');
				eqcrosszonemoveplayerbygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemoveplayerbygroupid);				
				
				const eqcrosszonemoveplayerbyguildid = new vscode.CompletionItem('cross_zone_move_player_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemoveplayerbyguildid.detail = "eq.cross_zone_move_player_by_guild_id()";
				eqcrosszonemoveplayerbyguildid.insertText = new vscode.SnippetString('cross_zone_move_player_by_guild_id()');
				eqcrosszonemoveplayerbyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemoveplayerbyguildid);				
				
				const eqcrosszonemoveplayerbyraidid = new vscode.CompletionItem('cross_zone_move_player_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonemoveplayerbyraidid.detail = "eq.cross_zone_move_player_by_raid_id()";
				eqcrosszonemoveplayerbyraidid.insertText = new vscode.SnippetString('cross_zone_move_player_by_raid_id()');
				eqcrosszonemoveplayerbyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonemoveplayerbyraidid);				
				
				const eqcrosszoneremovespellbycharid = new vscode.CompletionItem('cross_zone_remove_spell_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneremovespellbycharid.detail = "eq.cross_zone_remove_spell_by_char_id()";
				eqcrosszoneremovespellbycharid.insertText = new vscode.SnippetString('cross_zone_remove_spell_by_char_id()');
				eqcrosszoneremovespellbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneremovespellbycharid);				
				
				const eqcrosszoneremovespellbygroupid = new vscode.CompletionItem('cross_zone_remove_spell_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneremovespellbygroupid.detail = "eq.cross_zone_remove_spell_by_group_id()";
				eqcrosszoneremovespellbygroupid.insertText = new vscode.SnippetString('cross_zone_remove_spell_by_group_id()');
				eqcrosszoneremovespellbygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneremovespellbygroupid);				
				
				const eqcrosszoneremovespellbyguildid = new vscode.CompletionItem('cross_zone_remove_spell_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneremovespellbyguildid.detail = "eq.cross_zone_remove_spell_by_guild_id()";
				eqcrosszoneremovespellbyguildid.insertText = new vscode.SnippetString('cross_zone_remove_spell_by_guild_id()');
				eqcrosszoneremovespellbyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneremovespellbyguildid);				
				
				const eqcrosszoneremovespellbyraidid = new vscode.CompletionItem('cross_zone_remove_spell_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneremovespellbyraidid.detail = "eq.cross_zone_remove_spell_by_raid_id()";
				eqcrosszoneremovespellbyraidid.insertText = new vscode.SnippetString('cross_zone_remove_spell_by_raid_id()');
				eqcrosszoneremovespellbyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneremovespellbyraidid);				
				
				const eqcrosszoneremovetaskbycharid = new vscode.CompletionItem('cross_zone_remove_task_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneremovetaskbycharid.detail = "eq.cross_zone_remove_task_by_char_id()";
				eqcrosszoneremovetaskbycharid.insertText = new vscode.SnippetString('cross_zone_remove_task_by_char_id()');
				eqcrosszoneremovetaskbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneremovetaskbycharid);				
				
				const eqcrosszoneremovetaskbygroupid = new vscode.CompletionItem('cross_zone_remove_task_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneremovetaskbygroupid.detail = "eq.cross_zone_remove_task_by_group_id()";
				eqcrosszoneremovetaskbygroupid.insertText = new vscode.SnippetString('cross_zone_remove_task_by_group_id()');
				eqcrosszoneremovetaskbygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneremovetaskbygroupid);				
				
				const eqcrosszoneremovetaskbyguildid = new vscode.CompletionItem('cross_zone_remove_task_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneremovetaskbyguildid.detail = "eq.cross_zone_remove_task_by_guild_id()";
				eqcrosszoneremovetaskbyguildid.insertText = new vscode.SnippetString('cross_zone_remove_task_by_guild_id()');
				eqcrosszoneremovetaskbyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneremovetaskbyguildid);				
				
				const eqcrosszoneremovetaskbyraidid = new vscode.CompletionItem('cross_zone_remove_task_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneremovetaskbyraidid.detail = "eq.cross_zone_remove_task_by_raid_id()";
				eqcrosszoneremovetaskbyraidid.insertText = new vscode.SnippetString('cross_zone_remove_task_by_raid_id()');
				eqcrosszoneremovetaskbyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneremovetaskbyraidid);				
				
				const eqcrosszoneresetactivitybycharid = new vscode.CompletionItem('cross_zone_reset_activity_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneresetactivitybycharid.detail = "eq.cross_zone_reset_activity_by_char_id()";
				eqcrosszoneresetactivitybycharid.insertText = new vscode.SnippetString('cross_zone_reset_activity_by_char_id()');
				eqcrosszoneresetactivitybycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneresetactivitybycharid);				
				
				const eqcrosszoneresetactivitybygroupid = new vscode.CompletionItem('cross_zone_reset_activity_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneresetactivitybygroupid.detail = "eq.cross_zone_reset_activity_by_group_id()";
				eqcrosszoneresetactivitybygroupid.insertText = new vscode.SnippetString('cross_zone_reset_activity_by_group_id()');
				eqcrosszoneresetactivitybygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneresetactivitybygroupid);				
				
				const eqcrosszoneresetactivitybyguildid = new vscode.CompletionItem('cross_zone_reset_activity_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneresetactivitybyguildid.detail = "eq.cross_zone_reset_activity_by_guild_id()";
				eqcrosszoneresetactivitybyguildid.insertText = new vscode.SnippetString('cross_zone_reset_activity_by_guild_id()');
				eqcrosszoneresetactivitybyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneresetactivitybyguildid);				
				
				const eqcrosszoneresetactivitybyraidid = new vscode.CompletionItem('cross_zone_reset_activity_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneresetactivitybyraidid.detail = "eq.cross_zone_reset_activity_by_raid_id()";
				eqcrosszoneresetactivitybyraidid.insertText = new vscode.SnippetString('cross_zone_reset_activity_by_raid_id()');
				eqcrosszoneresetactivitybyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneresetactivitybyraidid);				
				
				const eqcrosszonesetentityvariablebyclientname = new vscode.CompletionItem('cross_zone_set_entity_variable_by_client_name', vscode.CompletionItemKind.Method);
				
				eqcrosszonesetentityvariablebyclientname.detail = "eq.cross_zone_set_entity_variable_by_client_name()";
				eqcrosszonesetentityvariablebyclientname.insertText = new vscode.SnippetString('cross_zone_set_entity_variable_by_client_name()');
				eqcrosszonesetentityvariablebyclientname.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonesetentityvariablebyclientname);				
				
				const eqcrosszonesetentityvariablebygroupid = new vscode.CompletionItem('cross_zone_set_entity_variable_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonesetentityvariablebygroupid.detail = "eq.cross_zone_set_entity_variable_by_group_id()";
				eqcrosszonesetentityvariablebygroupid.insertText = new vscode.SnippetString('cross_zone_set_entity_variable_by_group_id()');
				eqcrosszonesetentityvariablebygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonesetentityvariablebygroupid);				
				
				const eqcrosszonesetentityvariablebyguildid = new vscode.CompletionItem('cross_zone_set_entity_variable_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonesetentityvariablebyguildid.detail = "eq.cross_zone_set_entity_variable_by_guild_id()";
				eqcrosszonesetentityvariablebyguildid.insertText = new vscode.SnippetString('cross_zone_set_entity_variable_by_guild_id()');
				eqcrosszonesetentityvariablebyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonesetentityvariablebyguildid);				
				
				const eqcrosszonesetentityvariablebyraidid = new vscode.CompletionItem('cross_zone_set_entity_variable_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonesetentityvariablebyraidid.detail = "eq.cross_zone_set_entity_variable_by_raid_id()";
				eqcrosszonesetentityvariablebyraidid.insertText = new vscode.SnippetString('cross_zone_set_entity_variable_by_raid_id()');
				eqcrosszonesetentityvariablebyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonesetentityvariablebyraidid);				
				
				const eqcrosszonesignalclientbycharid = new vscode.CompletionItem('cross_zone_signal_client_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonesignalclientbycharid.detail = "eq.cross_zone_signal_client_by_char_id()";
				eqcrosszonesignalclientbycharid.insertText = new vscode.SnippetString('cross_zone_signal_client_by_char_id()');
				eqcrosszonesignalclientbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonesignalclientbycharid);				
				
				const eqcrosszonesignalclientbygroupid = new vscode.CompletionItem('cross_zone_signal_client_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonesignalclientbygroupid.detail = "eq.cross_zone_signal_client_by_group_id()";
				eqcrosszonesignalclientbygroupid.insertText = new vscode.SnippetString('cross_zone_signal_client_by_group_id()');
				eqcrosszonesignalclientbygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonesignalclientbygroupid);				
				
				const eqcrosszonesignalclientbyguildid = new vscode.CompletionItem('cross_zone_signal_client_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonesignalclientbyguildid.detail = "eq.cross_zone_signal_client_by_guild_id()";
				eqcrosszonesignalclientbyguildid.insertText = new vscode.SnippetString('cross_zone_signal_client_by_guild_id()');
				eqcrosszonesignalclientbyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonesignalclientbyguildid);				
				
				const eqcrosszonesignalclientbyname = new vscode.CompletionItem('cross_zone_signal_client_by_name', vscode.CompletionItemKind.Method);
				
				eqcrosszonesignalclientbyname.detail = "eq.cross_zone_signal_client_by_name()";
				eqcrosszonesignalclientbyname.insertText = new vscode.SnippetString('cross_zone_signal_client_by_name()');
				eqcrosszonesignalclientbyname.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonesignalclientbyname);				
				
				const eqcrosszonesignalclientbyraidid = new vscode.CompletionItem('cross_zone_signal_client_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonesignalclientbyraidid.detail = "eq.cross_zone_signal_client_by_raid_id()";
				eqcrosszonesignalclientbyraidid.insertText = new vscode.SnippetString('cross_zone_signal_client_by_raid_id()');
				eqcrosszonesignalclientbyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonesignalclientbyraidid);				
				
				const eqcrosszonesignalnpcbynpctypeid = new vscode.CompletionItem('cross_zone_signal_npc_by_npctype_id', vscode.CompletionItemKind.Method);
				
				eqcrosszonesignalnpcbynpctypeid.detail = "eq.cross_zone_signal_npc_by_npctype_id()";
				eqcrosszonesignalnpcbynpctypeid.insertText = new vscode.SnippetString('cross_zone_signal_npc_by_npctype_id()');
				eqcrosszonesignalnpcbynpctypeid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszonesignalnpcbynpctypeid);				
				
				const eqcrosszoneupdateactivitybycharid = new vscode.CompletionItem('cross_zone_update_activity_by_char_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneupdateactivitybycharid.detail = "eq.cross_zone_update_activity_by_char_id()";
				eqcrosszoneupdateactivitybycharid.insertText = new vscode.SnippetString('cross_zone_update_activity_by_char_id()');
				eqcrosszoneupdateactivitybycharid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneupdateactivitybycharid);				
				
				const eqcrosszoneupdateactivitybygroupid = new vscode.CompletionItem('cross_zone_update_activity_by_group_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneupdateactivitybygroupid.detail = "eq.cross_zone_update_activity_by_group_id()";
				eqcrosszoneupdateactivitybygroupid.insertText = new vscode.SnippetString('cross_zone_update_activity_by_group_id()');
				eqcrosszoneupdateactivitybygroupid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneupdateactivitybygroupid);				
				
				const eqcrosszoneupdateactivitybyguildid = new vscode.CompletionItem('cross_zone_update_activity_by_guild_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneupdateactivitybyguildid.detail = "eq.cross_zone_update_activity_by_guild_id()";
				eqcrosszoneupdateactivitybyguildid.insertText = new vscode.SnippetString('cross_zone_update_activity_by_guild_id()');
				eqcrosszoneupdateactivitybyguildid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneupdateactivitybyguildid);				
				
				const eqcrosszoneupdateactivitybyraidid = new vscode.CompletionItem('cross_zone_update_activity_by_raid_id', vscode.CompletionItemKind.Method);
				
				eqcrosszoneupdateactivitybyraidid.detail = "eq.cross_zone_update_activity_by_raid_id()";
				eqcrosszoneupdateactivitybyraidid.insertText = new vscode.SnippetString('cross_zone_update_activity_by_raid_id()');
				eqcrosszoneupdateactivitybyraidid.documentation = new vscode.MarkdownString("");
				results.push(eqcrosszoneupdateactivitybyraidid);				
				
				const eqdebug = new vscode.CompletionItem('debug', vscode.CompletionItemKind.Method);
				
				eqdebug.detail = "eq.debug()";
				eqdebug.insertText = new vscode.SnippetString('debug()');
				eqdebug.documentation = new vscode.MarkdownString("");
				results.push(eqdebug);				
				
				const eqdeleteglobal = new vscode.CompletionItem('delete_global', vscode.CompletionItemKind.Method);
				
				eqdeleteglobal.detail = "eq.delete_global()";
				eqdeleteglobal.insertText = new vscode.SnippetString('delete_global()');
				eqdeleteglobal.documentation = new vscode.MarkdownString("");
				results.push(eqdeleteglobal);				
				
				const eqdepop = new vscode.CompletionItem('depop', vscode.CompletionItemKind.Method);
				
				eqdepop.detail = "eq.depop()";
				eqdepop.insertText = new vscode.SnippetString('depop()');
				eqdepop.documentation = new vscode.MarkdownString("");
				results.push(eqdepop);				
				
				const eqdepopall = new vscode.CompletionItem('depop_all', vscode.CompletionItemKind.Method);
				
				eqdepopall.detail = "eq.depop_all()";
				eqdepopall.insertText = new vscode.SnippetString('depop_all()');
				eqdepopall.documentation = new vscode.MarkdownString("");
				results.push(eqdepopall);				
				
				const eqdepopwithtimer = new vscode.CompletionItem('depop_with_timer', vscode.CompletionItemKind.Method);
				
				eqdepopwithtimer.detail = "eq.depop_with_timer()";
				eqdepopwithtimer.insertText = new vscode.SnippetString('depop_with_timer()');
				eqdepopwithtimer.documentation = new vscode.MarkdownString("");
				results.push(eqdepopwithtimer);				
				
				const eqdepopzone = new vscode.CompletionItem('depop_zone', vscode.CompletionItemKind.Method);
				
				eqdepopzone.detail = "eq.depop_zone()";
				eqdepopzone.insertText = new vscode.SnippetString('depop_zone()');
				eqdepopzone.documentation = new vscode.MarkdownString("");
				results.push(eqdepopzone);				
				
				const eqdestroyinstance = new vscode.CompletionItem('destroy_instance', vscode.CompletionItemKind.Method);
				
				eqdestroyinstance.detail = "eq.destroy_instance()";
				eqdestroyinstance.insertText = new vscode.SnippetString('destroy_instance()');
				eqdestroyinstance.documentation = new vscode.MarkdownString("");
				results.push(eqdestroyinstance);				
				
				const eqdisableproximitysay = new vscode.CompletionItem('disable_proximity_say', vscode.CompletionItemKind.Method);
				
				eqdisableproximitysay.detail = "eq.disable_proximity_say()";
				eqdisableproximitysay.insertText = new vscode.SnippetString('disable_proximity_say()');
				eqdisableproximitysay.documentation = new vscode.MarkdownString("");
				results.push(eqdisableproximitysay);				
				
				const eqdisablerecipe = new vscode.CompletionItem('disable_recipe', vscode.CompletionItemKind.Method);
				
				eqdisablerecipe.detail = "eq.disable_recipe()";
				eqdisablerecipe.insertText = new vscode.SnippetString('disable_recipe()');
				eqdisablerecipe.documentation = new vscode.MarkdownString("");
				results.push(eqdisablerecipe);				
				
				const eqenableproximitysay = new vscode.CompletionItem('enable_proximity_say', vscode.CompletionItemKind.Method);
				
				eqenableproximitysay.detail = "eq.enable_proximity_say()";
				eqenableproximitysay.insertText = new vscode.SnippetString('enable_proximity_say()');
				eqenableproximitysay.documentation = new vscode.MarkdownString("");
				results.push(eqenableproximitysay);				
				
				const eqenablerecipe = new vscode.CompletionItem('enable_recipe', vscode.CompletionItemKind.Method);
				
				eqenablerecipe.detail = "eq.enable_recipe()";
				eqenablerecipe.insertText = new vscode.SnippetString('enable_recipe()');
				eqenablerecipe.documentation = new vscode.MarkdownString("");
				results.push(eqenablerecipe);				
				
				const eqenabletitle = new vscode.CompletionItem('enable_title', vscode.CompletionItemKind.Method);
				
				eqenabletitle.detail = "eq.enable_title()";
				eqenabletitle.insertText = new vscode.SnippetString('enable_title()');
				eqenabletitle.documentation = new vscode.MarkdownString("");
				results.push(eqenabletitle);				
				
				const eqenabledtaskcount = new vscode.CompletionItem('enabled_task_count', vscode.CompletionItemKind.Method);
				
				eqenabledtaskcount.detail = "eq.enabled_task_count()";
				eqenabledtaskcount.insertText = new vscode.SnippetString('enabled_task_count()');
				eqenabledtaskcount.documentation = new vscode.MarkdownString("");
				results.push(eqenabledtaskcount);				
				
				const eqfactionvalue = new vscode.CompletionItem('faction_value', vscode.CompletionItemKind.Method);
				
				eqfactionvalue.detail = "eq.faction_value()";
				eqfactionvalue.insertText = new vscode.SnippetString('faction_value()');
				eqfactionvalue.documentation = new vscode.MarkdownString("");
				results.push(eqfactionvalue);				
				
				const eqfailtask = new vscode.CompletionItem('fail_task', vscode.CompletionItemKind.Method);
				
				eqfailtask.detail = "eq.fail_task()";
				eqfailtask.insertText = new vscode.SnippetString('fail_task()');
				eqfailtask.documentation = new vscode.MarkdownString("");
				results.push(eqfailtask);				
				
				const eqfirsttaskinset = new vscode.CompletionItem('first_task_in_set', vscode.CompletionItemKind.Method);
				
				eqfirsttaskinset.detail = "eq.first_task_in_set()";
				eqfirsttaskinset.insertText = new vscode.SnippetString('first_task_in_set()');
				eqfirsttaskinset.documentation = new vscode.MarkdownString("");
				results.push(eqfirsttaskinset);				
				
				const eqflaginstancebygroupleader = new vscode.CompletionItem('flag_instance_by_group_leader', vscode.CompletionItemKind.Method);
				
				eqflaginstancebygroupleader.detail = "eq.flag_instance_by_group_leader()";
				eqflaginstancebygroupleader.insertText = new vscode.SnippetString('flag_instance_by_group_leader()');
				eqflaginstancebygroupleader.documentation = new vscode.MarkdownString("");
				results.push(eqflaginstancebygroupleader);				
				
				const eqflaginstancebyraidleader = new vscode.CompletionItem('flag_instance_by_raid_leader', vscode.CompletionItemKind.Method);
				
				eqflaginstancebyraidleader.detail = "eq.flag_instance_by_raid_leader()";
				eqflaginstancebyraidleader.insertText = new vscode.SnippetString('flag_instance_by_raid_leader()');
				eqflaginstancebyraidleader.documentation = new vscode.MarkdownString("");
				results.push(eqflaginstancebyraidleader);				
				
				const eqflymode = new vscode.CompletionItem('fly_mode', vscode.CompletionItemKind.Method);
				
				eqflymode.detail = "eq.fly_mode()";
				eqflymode.insertText = new vscode.SnippetString('fly_mode()');
				eqflymode.documentation = new vscode.MarkdownString("");
				results.push(eqflymode);				
				
				const eqfollow = new vscode.CompletionItem('follow', vscode.CompletionItemKind.Method);
				
				eqfollow.detail = "eq.follow()";
				eqfollow.insertText = new vscode.SnippetString('follow()');
				eqfollow.documentation = new vscode.MarkdownString("");
				results.push(eqfollow);				
				
				const eqgetcharidbyname = new vscode.CompletionItem('get_char_id_by_name', vscode.CompletionItemKind.Method);
				
				eqgetcharidbyname.detail = "eq.get_char_id_by_name()";
				eqgetcharidbyname.insertText = new vscode.SnippetString('get_char_id_by_name()');
				eqgetcharidbyname.documentation = new vscode.MarkdownString("");
				results.push(eqgetcharidbyname);				
				
				const eqgetcharactersininstance = new vscode.CompletionItem('get_characters_in_instance', vscode.CompletionItemKind.Method);
				
				eqgetcharactersininstance.detail = "eq.get_characters_in_instance()";
				eqgetcharactersininstance.insertText = new vscode.SnippetString('get_characters_in_instance()');
				eqgetcharactersininstance.documentation = new vscode.MarkdownString("");
				results.push(eqgetcharactersininstance);				
				
				const eqgetclassname = new vscode.CompletionItem('get_class_name', vscode.CompletionItemKind.Method);
				
				eqgetclassname.detail = "eq.get_class_name()";
				eqgetclassname.insertText = new vscode.SnippetString('get_class_name()');
				eqgetclassname.documentation = new vscode.MarkdownString("");
				results.push(eqgetclassname);				
				
				const eqgetcurrencyid = new vscode.CompletionItem('get_currency_id', vscode.CompletionItemKind.Method);
				
				eqgetcurrencyid.detail = "eq.get_currency_id()";
				eqgetcurrencyid.insertText = new vscode.SnippetString('get_currency_id()');
				eqgetcurrencyid.documentation = new vscode.MarkdownString("");
				results.push(eqgetcurrencyid);				
				
				const eqgetcurrencyitemid = new vscode.CompletionItem('get_currency_item_id', vscode.CompletionItemKind.Method);
				
				eqgetcurrencyitemid.detail = "eq.get_currency_item_id()";
				eqgetcurrencyitemid.insertText = new vscode.SnippetString('get_currency_item_id()');
				eqgetcurrencyitemid.documentation = new vscode.MarkdownString("");
				results.push(eqgetcurrencyitemid);				
				
				const eqgetdata = new vscode.CompletionItem('get_data', vscode.CompletionItemKind.Method);
				
				eqgetdata.detail = "eq.get_data()";
				eqgetdata.insertText = new vscode.SnippetString('get_data()');
				eqgetdata.documentation = new vscode.MarkdownString("");
				results.push(eqgetdata);				
				
				const eqgetencounter = new vscode.CompletionItem('get_encounter', vscode.CompletionItemKind.Method);
				
				eqgetencounter.detail = "eq.get_encounter()";
				eqgetencounter.insertText = new vscode.SnippetString('get_encounter()');
				eqgetencounter.documentation = new vscode.MarkdownString("");
				results.push(eqgetencounter);				
				
				const eqgetentitylist = new vscode.CompletionItem('get_entity_list', vscode.CompletionItemKind.Method);
				
				eqgetentitylist.detail = "eq.get_entity_list()";
				eqgetentitylist.insertText = new vscode.SnippetString('get_entity_list()');
				eqgetentitylist.documentation = new vscode.MarkdownString("");
				results.push(eqgetentitylist);				
				
				const eqgetgroupidbycharid = new vscode.CompletionItem('get_group_id_by_char_id', vscode.CompletionItemKind.Method);
				
				eqgetgroupidbycharid.detail = "eq.get_group_id_by_char_id()";
				eqgetgroupidbycharid.insertText = new vscode.SnippetString('get_group_id_by_char_id()');
				eqgetgroupidbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqgetgroupidbycharid);				
				
				const eqgetguildidbycharid = new vscode.CompletionItem('get_guild_id_by_char_id', vscode.CompletionItemKind.Method);
				
				eqgetguildidbycharid.detail = "eq.get_guild_id_by_char_id()";
				eqgetguildidbycharid.insertText = new vscode.SnippetString('get_guild_id_by_char_id()');
				eqgetguildidbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqgetguildidbycharid);				
				
				const eqgetinitiator = new vscode.CompletionItem('get_initiator', vscode.CompletionItemKind.Method);
				
				eqgetinitiator.detail = "eq.get_initiator()";
				eqgetinitiator.insertText = new vscode.SnippetString('get_initiator()');
				eqgetinitiator.documentation = new vscode.MarkdownString("");
				results.push(eqgetinitiator);				
				
				const eqgetinstanceid = new vscode.CompletionItem('get_instance_id', vscode.CompletionItemKind.Method);
				
				eqgetinstanceid.detail = "eq.get_instance_id()";
				eqgetinstanceid.insertText = new vscode.SnippetString('get_instance_id()');
				eqgetinstanceid.documentation = new vscode.MarkdownString("");
				results.push(eqgetinstanceid);				
				
				const eqgetinstanceidbycharid = new vscode.CompletionItem('get_instance_id_by_char_id', vscode.CompletionItemKind.Method);
				
				eqgetinstanceidbycharid.detail = "eq.get_instance_id_by_char_id()";
				eqgetinstanceidbycharid.insertText = new vscode.SnippetString('get_instance_id_by_char_id()');
				eqgetinstanceidbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqgetinstanceidbycharid);				
				
				const eqgetinstancetimer = new vscode.CompletionItem('get_instance_timer', vscode.CompletionItemKind.Method);
				
				eqgetinstancetimer.detail = "eq.get_instance_timer()";
				eqgetinstancetimer.insertText = new vscode.SnippetString('get_instance_timer()');
				eqgetinstancetimer.documentation = new vscode.MarkdownString("");
				results.push(eqgetinstancetimer);				
				
				const eqgetinstancetimerbyid = new vscode.CompletionItem('get_instance_timer_by_id', vscode.CompletionItemKind.Method);
				
				eqgetinstancetimerbyid.detail = "eq.get_instance_timer_by_id()";
				eqgetinstancetimerbyid.insertText = new vscode.SnippetString('get_instance_timer_by_id()');
				eqgetinstancetimerbyid.documentation = new vscode.MarkdownString("");
				results.push(eqgetinstancetimerbyid);				
				
				const eqgetitemname = new vscode.CompletionItem('get_item_name', vscode.CompletionItemKind.Method);
				
				eqgetitemname.detail = "eq.get_item_name()";
				eqgetitemname.insertText = new vscode.SnippetString('get_item_name()');
				eqgetitemname.documentation = new vscode.MarkdownString("");
				results.push(eqgetitemname);				
				
				const eqgetlevel = new vscode.CompletionItem('get_level', vscode.CompletionItemKind.Method);
				
				eqgetlevel.detail = "eq.get_level()";
				eqgetlevel.insertText = new vscode.SnippetString('get_level()');
				eqgetlevel.documentation = new vscode.MarkdownString("");
				results.push(eqgetlevel);				
				
				const eqgetowner = new vscode.CompletionItem('get_owner', vscode.CompletionItemKind.Method);
				
				eqgetowner.detail = "eq.get_owner()";
				eqgetowner.insertText = new vscode.SnippetString('get_owner()');
				eqgetowner.documentation = new vscode.MarkdownString("");
				results.push(eqgetowner);				
				
				const eqgetplayerburiedcorpsecount = new vscode.CompletionItem('get_player_buried_corpse_count', vscode.CompletionItemKind.Method);
				
				eqgetplayerburiedcorpsecount.detail = "eq.get_player_buried_corpse_count()";
				eqgetplayerburiedcorpsecount.insertText = new vscode.SnippetString('get_player_buried_corpse_count()');
				eqgetplayerburiedcorpsecount.documentation = new vscode.MarkdownString("");
				results.push(eqgetplayerburiedcorpsecount);				
				
				const eqgetplayercorpsecount = new vscode.CompletionItem('get_player_corpse_count', vscode.CompletionItemKind.Method);
				
				eqgetplayercorpsecount.detail = "eq.get_player_corpse_count()";
				eqgetplayercorpsecount.insertText = new vscode.SnippetString('get_player_corpse_count()');
				eqgetplayercorpsecount.documentation = new vscode.MarkdownString("");
				results.push(eqgetplayercorpsecount);				
				
				const eqgetplayercorpsecountbyzoneid = new vscode.CompletionItem('get_player_corpse_count_by_zone_id', vscode.CompletionItemKind.Method);
				
				eqgetplayercorpsecountbyzoneid.detail = "eq.get_player_corpse_count_by_zone_id()";
				eqgetplayercorpsecountbyzoneid.insertText = new vscode.SnippetString('get_player_corpse_count_by_zone_id()');
				eqgetplayercorpsecountbyzoneid.documentation = new vscode.MarkdownString("");
				results.push(eqgetplayercorpsecountbyzoneid);				
				
				const eqgetqglobals = new vscode.CompletionItem('get_qglobals', vscode.CompletionItemKind.Method);
				
				eqgetqglobals.detail = "eq.get_qglobals()";
				eqgetqglobals.insertText = new vscode.SnippetString('get_qglobals()');
				eqgetqglobals.documentation = new vscode.MarkdownString("");
				results.push(eqgetqglobals);				
				
				const eqgetquestitem = new vscode.CompletionItem('get_quest_item', vscode.CompletionItemKind.Method);
				
				eqgetquestitem.detail = "eq.get_quest_item()";
				eqgetquestitem.insertText = new vscode.SnippetString('get_quest_item()');
				eqgetquestitem.documentation = new vscode.MarkdownString("");
				results.push(eqgetquestitem);				
				
				const eqgetracename = new vscode.CompletionItem('get_race_name', vscode.CompletionItemKind.Method);
				
				eqgetracename.detail = "eq.get_race_name()";
				eqgetracename.insertText = new vscode.SnippetString('get_race_name()');
				eqgetracename.documentation = new vscode.MarkdownString("");
				results.push(eqgetracename);				
				
				const eqgetraididbycharid = new vscode.CompletionItem('get_raid_id_by_char_id', vscode.CompletionItemKind.Method);
				
				eqgetraididbycharid.detail = "eq.get_raid_id_by_char_id()";
				eqgetraididbycharid.insertText = new vscode.SnippetString('get_raid_id_by_char_id()');
				eqgetraididbycharid.documentation = new vscode.MarkdownString("");
				results.push(eqgetraididbycharid);				
				
				const eqgetskillname = new vscode.CompletionItem('get_skill_name', vscode.CompletionItemKind.Method);
				
				eqgetskillname.detail = "eq.get_skill_name()";
				eqgetskillname.insertText = new vscode.SnippetString('get_skill_name()');
				eqgetskillname.documentation = new vscode.MarkdownString("");
				results.push(eqgetskillname);				
				
				const eqgetspawncondition = new vscode.CompletionItem('get_spawn_condition', vscode.CompletionItemKind.Method);
				
				eqgetspawncondition.detail = "eq.get_spawn_condition()";
				eqgetspawncondition.insertText = new vscode.SnippetString('get_spawn_condition()');
				eqgetspawncondition.documentation = new vscode.MarkdownString("");
				results.push(eqgetspawncondition);				
				
				const eqgetspellname = new vscode.CompletionItem('get_spell_name', vscode.CompletionItemKind.Method);
				
				eqgetspellname.detail = "eq.get_spell_name()";
				eqgetspellname.insertText = new vscode.SnippetString('get_spell_name()');
				eqgetspellname.documentation = new vscode.MarkdownString("");
				results.push(eqgetspellname);				
				
				const eqgettaskactivitydonecount = new vscode.CompletionItem('get_task_activity_done_count', vscode.CompletionItemKind.Method);
				
				eqgettaskactivitydonecount.detail = "eq.get_task_activity_done_count()";
				eqgettaskactivitydonecount.insertText = new vscode.SnippetString('get_task_activity_done_count()');
				eqgettaskactivitydonecount.documentation = new vscode.MarkdownString("");
				results.push(eqgettaskactivitydonecount);				
				
				const eqgettaskname = new vscode.CompletionItem('get_task_name', vscode.CompletionItemKind.Method);
				
				eqgettaskname.detail = "eq.get_task_name()";
				eqgettaskname.insertText = new vscode.SnippetString('get_task_name()');
				eqgettaskname.documentation = new vscode.MarkdownString("");
				results.push(eqgettaskname);				
				
				const eqgetzoneid = new vscode.CompletionItem('get_zone_id', vscode.CompletionItemKind.Method);
				
				eqgetzoneid.detail = "eq.get_zone_id()";
				eqgetzoneid.insertText = new vscode.SnippetString('get_zone_id()');
				eqgetzoneid.documentation = new vscode.MarkdownString("");
				results.push(eqgetzoneid);				
				
				const eqgetzoneinstanceid = new vscode.CompletionItem('get_zone_instance_id', vscode.CompletionItemKind.Method);
				
				eqgetzoneinstanceid.detail = "eq.get_zone_instance_id()";
				eqgetzoneinstanceid.insertText = new vscode.SnippetString('get_zone_instance_id()');
				eqgetzoneinstanceid.documentation = new vscode.MarkdownString("");
				results.push(eqgetzoneinstanceid);				
				
				const eqgetzoneinstanceversion = new vscode.CompletionItem('get_zone_instance_version', vscode.CompletionItemKind.Method);
				
				eqgetzoneinstanceversion.detail = "eq.get_zone_instance_version()";
				eqgetzoneinstanceversion.insertText = new vscode.SnippetString('get_zone_instance_version()');
				eqgetzoneinstanceversion.documentation = new vscode.MarkdownString("");
				results.push(eqgetzoneinstanceversion);				
				
				const eqgetzonetime = new vscode.CompletionItem('get_zone_time', vscode.CompletionItemKind.Method);
				
				eqgetzonetime.detail = "eq.get_zone_time()";
				eqgetzonetime.insertText = new vscode.SnippetString('get_zone_time()');
				eqgetzonetime.documentation = new vscode.MarkdownString("");
				results.push(eqgetzonetime);				
				
				const eqgetzoneweather = new vscode.CompletionItem('get_zone_weather', vscode.CompletionItemKind.Method);
				
				eqgetzoneweather.detail = "eq.get_zone_weather()";
				eqgetzoneweather.insertText = new vscode.SnippetString('get_zone_weather()');
				eqgetzoneweather.documentation = new vscode.MarkdownString("");
				results.push(eqgetzoneweather);				
				
				const eqiscalloftheforsakenenabled = new vscode.CompletionItem('is_call_of_the_forsaken_enabled', vscode.CompletionItemKind.Method);
				
				eqiscalloftheforsakenenabled.detail = "eq.is_call_of_the_forsaken_enabled()";
				eqiscalloftheforsakenenabled.insertText = new vscode.SnippetString('is_call_of_the_forsaken_enabled()');
				eqiscalloftheforsakenenabled.documentation = new vscode.MarkdownString("");
				results.push(eqiscalloftheforsakenenabled);				
				
				const eqisclassicenabled = new vscode.CompletionItem('is_classic_enabled', vscode.CompletionItemKind.Method);
				
				eqisclassicenabled.detail = "eq.is_classic_enabled()";
				eqisclassicenabled.insertText = new vscode.SnippetString('is_classic_enabled()');
				eqisclassicenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisclassicenabled);				
				
				const eqiscurrentexpansioncalloftheforsaken = new vscode.CompletionItem('is_current_expansion_call_of_the_forsaken', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansioncalloftheforsaken.detail = "eq.is_current_expansion_call_of_the_forsaken()";
				eqiscurrentexpansioncalloftheforsaken.insertText = new vscode.SnippetString('is_current_expansion_call_of_the_forsaken()');
				eqiscurrentexpansioncalloftheforsaken.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansioncalloftheforsaken);				
				
				const eqiscurrentexpansionclassic = new vscode.CompletionItem('is_current_expansion_classic', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionclassic.detail = "eq.is_current_expansion_classic()";
				eqiscurrentexpansionclassic.insertText = new vscode.SnippetString('is_current_expansion_classic()');
				eqiscurrentexpansionclassic.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionclassic);				
				
				const eqiscurrentexpansiondepthsofdarkhollow = new vscode.CompletionItem('is_current_expansion_depths_of_darkhollow', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansiondepthsofdarkhollow.detail = "eq.is_current_expansion_depths_of_darkhollow()";
				eqiscurrentexpansiondepthsofdarkhollow.insertText = new vscode.SnippetString('is_current_expansion_depths_of_darkhollow()');
				eqiscurrentexpansiondepthsofdarkhollow.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansiondepthsofdarkhollow);				
				
				const eqiscurrentexpansiondragonsofnorrath = new vscode.CompletionItem('is_current_expansion_dragons_of_norrath', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansiondragonsofnorrath.detail = "eq.is_current_expansion_dragons_of_norrath()";
				eqiscurrentexpansiondragonsofnorrath.insertText = new vscode.SnippetString('is_current_expansion_dragons_of_norrath()');
				eqiscurrentexpansiondragonsofnorrath.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansiondragonsofnorrath);				
				
				const eqiscurrentexpansionempiresofkunark = new vscode.CompletionItem('is_current_expansion_empires_of_kunark', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionempiresofkunark.detail = "eq.is_current_expansion_empires_of_kunark()";
				eqiscurrentexpansionempiresofkunark.insertText = new vscode.SnippetString('is_current_expansion_empires_of_kunark()');
				eqiscurrentexpansionempiresofkunark.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionempiresofkunark);				
				
				const eqiscurrentexpansiongatesofdiscord = new vscode.CompletionItem('is_current_expansion_gates_of_discord', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansiongatesofdiscord.detail = "eq.is_current_expansion_gates_of_discord()";
				eqiscurrentexpansiongatesofdiscord.insertText = new vscode.SnippetString('is_current_expansion_gates_of_discord()');
				eqiscurrentexpansiongatesofdiscord.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansiongatesofdiscord);				
				
				const eqiscurrentexpansionhouseofthule = new vscode.CompletionItem('is_current_expansion_house_of_thule', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionhouseofthule.detail = "eq.is_current_expansion_house_of_thule()";
				eqiscurrentexpansionhouseofthule.insertText = new vscode.SnippetString('is_current_expansion_house_of_thule()');
				eqiscurrentexpansionhouseofthule.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionhouseofthule);				
				
				const eqiscurrentexpansionlostdungeonsofnorrath = new vscode.CompletionItem('is_current_expansion_lost_dungeons_of_norrath', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionlostdungeonsofnorrath.detail = "eq.is_current_expansion_lost_dungeons_of_norrath()";
				eqiscurrentexpansionlostdungeonsofnorrath.insertText = new vscode.SnippetString('is_current_expansion_lost_dungeons_of_norrath()');
				eqiscurrentexpansionlostdungeonsofnorrath.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionlostdungeonsofnorrath);				
				
				const eqiscurrentexpansionomensofwar = new vscode.CompletionItem('is_current_expansion_omens_of_war', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionomensofwar.detail = "eq.is_current_expansion_omens_of_war()";
				eqiscurrentexpansionomensofwar.insertText = new vscode.SnippetString('is_current_expansion_omens_of_war()');
				eqiscurrentexpansionomensofwar.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionomensofwar);				
				
				const eqiscurrentexpansionprophecyofro = new vscode.CompletionItem('is_current_expansion_prophecy_of_ro', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionprophecyofro.detail = "eq.is_current_expansion_prophecy_of_ro()";
				eqiscurrentexpansionprophecyofro.insertText = new vscode.SnippetString('is_current_expansion_prophecy_of_ro()');
				eqiscurrentexpansionprophecyofro.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionprophecyofro);				
				
				const eqiscurrentexpansionrainoffear = new vscode.CompletionItem('is_current_expansion_rain_of_fear', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionrainoffear.detail = "eq.is_current_expansion_rain_of_fear()";
				eqiscurrentexpansionrainoffear.insertText = new vscode.SnippetString('is_current_expansion_rain_of_fear()');
				eqiscurrentexpansionrainoffear.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionrainoffear);				
				
				const eqiscurrentexpansionringofscale = new vscode.CompletionItem('is_current_expansion_ring_of_scale', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionringofscale.detail = "eq.is_current_expansion_ring_of_scale()";
				eqiscurrentexpansionringofscale.insertText = new vscode.SnippetString('is_current_expansion_ring_of_scale()');
				eqiscurrentexpansionringofscale.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionringofscale);				
				
				const eqiscurrentexpansionsecretsoffaydwer = new vscode.CompletionItem('is_current_expansion_secrets_of_faydwer', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionsecretsoffaydwer.detail = "eq.is_current_expansion_secrets_of_faydwer()";
				eqiscurrentexpansionsecretsoffaydwer.insertText = new vscode.SnippetString('is_current_expansion_secrets_of_faydwer()');
				eqiscurrentexpansionsecretsoffaydwer.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionsecretsoffaydwer);				
				
				const eqiscurrentexpansionseedsofdestruction = new vscode.CompletionItem('is_current_expansion_seeds_of_destruction', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionseedsofdestruction.detail = "eq.is_current_expansion_seeds_of_destruction()";
				eqiscurrentexpansionseedsofdestruction.insertText = new vscode.SnippetString('is_current_expansion_seeds_of_destruction()');
				eqiscurrentexpansionseedsofdestruction.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionseedsofdestruction);				
				
				const eqiscurrentexpansionthebrokenmirror = new vscode.CompletionItem('is_current_expansion_the_broken_mirror', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionthebrokenmirror.detail = "eq.is_current_expansion_the_broken_mirror()";
				eqiscurrentexpansionthebrokenmirror.insertText = new vscode.SnippetString('is_current_expansion_the_broken_mirror()');
				eqiscurrentexpansionthebrokenmirror.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionthebrokenmirror);				
				
				const eqiscurrentexpansiontheburiedsea = new vscode.CompletionItem('is_current_expansion_the_buried_sea', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansiontheburiedsea.detail = "eq.is_current_expansion_the_buried_sea()";
				eqiscurrentexpansiontheburiedsea.insertText = new vscode.SnippetString('is_current_expansion_the_buried_sea()');
				eqiscurrentexpansiontheburiedsea.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansiontheburiedsea);				
				
				const eqiscurrentexpansiontheburninglands = new vscode.CompletionItem('is_current_expansion_the_burning_lands', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansiontheburninglands.detail = "eq.is_current_expansion_the_burning_lands()";
				eqiscurrentexpansiontheburninglands.insertText = new vscode.SnippetString('is_current_expansion_the_burning_lands()');
				eqiscurrentexpansiontheburninglands.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansiontheburninglands);				
				
				const eqiscurrentexpansionthedarkendsea = new vscode.CompletionItem('is_current_expansion_the_darkend_sea', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionthedarkendsea.detail = "eq.is_current_expansion_the_darkend_sea()";
				eqiscurrentexpansionthedarkendsea.insertText = new vscode.SnippetString('is_current_expansion_the_darkend_sea()');
				eqiscurrentexpansionthedarkendsea.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionthedarkendsea);				
				
				const eqiscurrentexpansionthelegacyofykesha = new vscode.CompletionItem('is_current_expansion_the_legacy_of_ykesha', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionthelegacyofykesha.detail = "eq.is_current_expansion_the_legacy_of_ykesha()";
				eqiscurrentexpansionthelegacyofykesha.insertText = new vscode.SnippetString('is_current_expansion_the_legacy_of_ykesha()');
				eqiscurrentexpansionthelegacyofykesha.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionthelegacyofykesha);				
				
				const eqiscurrentexpansiontheplanesofpower = new vscode.CompletionItem('is_current_expansion_the_planes_of_power', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansiontheplanesofpower.detail = "eq.is_current_expansion_the_planes_of_power()";
				eqiscurrentexpansiontheplanesofpower.insertText = new vscode.SnippetString('is_current_expansion_the_planes_of_power()');
				eqiscurrentexpansiontheplanesofpower.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansiontheplanesofpower);				
				
				const eqiscurrentexpansiontheruinsofkunark = new vscode.CompletionItem('is_current_expansion_the_ruins_of_kunark', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansiontheruinsofkunark.detail = "eq.is_current_expansion_the_ruins_of_kunark()";
				eqiscurrentexpansiontheruinsofkunark.insertText = new vscode.SnippetString('is_current_expansion_the_ruins_of_kunark()');
				eqiscurrentexpansiontheruinsofkunark.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansiontheruinsofkunark);				
				
				const eqiscurrentexpansionthescarsofvelious = new vscode.CompletionItem('is_current_expansion_the_scars_of_velious', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionthescarsofvelious.detail = "eq.is_current_expansion_the_scars_of_velious()";
				eqiscurrentexpansionthescarsofvelious.insertText = new vscode.SnippetString('is_current_expansion_the_scars_of_velious()');
				eqiscurrentexpansionthescarsofvelious.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionthescarsofvelious);				
				
				const eqiscurrentexpansiontheserpentsspine = new vscode.CompletionItem('is_current_expansion_the_serpents_spine', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansiontheserpentsspine.detail = "eq.is_current_expansion_the_serpents_spine()";
				eqiscurrentexpansiontheserpentsspine.insertText = new vscode.SnippetString('is_current_expansion_the_serpents_spine()');
				eqiscurrentexpansiontheserpentsspine.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansiontheserpentsspine);				
				
				const eqiscurrentexpansiontheshadowsofluclin = new vscode.CompletionItem('is_current_expansion_the_shadows_of_luclin', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansiontheshadowsofluclin.detail = "eq.is_current_expansion_the_shadows_of_luclin()";
				eqiscurrentexpansiontheshadowsofluclin.insertText = new vscode.SnippetString('is_current_expansion_the_shadows_of_luclin()');
				eqiscurrentexpansiontheshadowsofluclin.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansiontheshadowsofluclin);				
				
				const eqiscurrentexpansiontormentofvelious = new vscode.CompletionItem('is_current_expansion_torment_of_velious', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansiontormentofvelious.detail = "eq.is_current_expansion_torment_of_velious()";
				eqiscurrentexpansiontormentofvelious.insertText = new vscode.SnippetString('is_current_expansion_torment_of_velious()');
				eqiscurrentexpansiontormentofvelious.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansiontormentofvelious);				
				
				const eqiscurrentexpansionunderfoot = new vscode.CompletionItem('is_current_expansion_underfoot', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionunderfoot.detail = "eq.is_current_expansion_underfoot()";
				eqiscurrentexpansionunderfoot.insertText = new vscode.SnippetString('is_current_expansion_underfoot()');
				eqiscurrentexpansionunderfoot.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionunderfoot);				
				
				const eqiscurrentexpansionveilofalaris = new vscode.CompletionItem('is_current_expansion_veil_of_alaris', vscode.CompletionItemKind.Method);
				
				eqiscurrentexpansionveilofalaris.detail = "eq.is_current_expansion_veil_of_alaris()";
				eqiscurrentexpansionveilofalaris.insertText = new vscode.SnippetString('is_current_expansion_veil_of_alaris()');
				eqiscurrentexpansionveilofalaris.documentation = new vscode.MarkdownString("");
				results.push(eqiscurrentexpansionveilofalaris);				
				
				const eqisdepthsofdarkhollowenabled = new vscode.CompletionItem('is_depths_of_darkhollow_enabled', vscode.CompletionItemKind.Method);
				
				eqisdepthsofdarkhollowenabled.detail = "eq.is_depths_of_darkhollow_enabled()";
				eqisdepthsofdarkhollowenabled.insertText = new vscode.SnippetString('is_depths_of_darkhollow_enabled()');
				eqisdepthsofdarkhollowenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisdepthsofdarkhollowenabled);				
				
				const eqisdisctome = new vscode.CompletionItem('is_disc_tome', vscode.CompletionItemKind.Method);
				
				eqisdisctome.detail = "eq.is_disc_tome()";
				eqisdisctome.insertText = new vscode.SnippetString('is_disc_tome()');
				eqisdisctome.documentation = new vscode.MarkdownString("");
				results.push(eqisdisctome);				
				
				const eqisdragonsofnorrathenabled = new vscode.CompletionItem('is_dragons_of_norrath_enabled', vscode.CompletionItemKind.Method);
				
				eqisdragonsofnorrathenabled.detail = "eq.is_dragons_of_norrath_enabled()";
				eqisdragonsofnorrathenabled.insertText = new vscode.SnippetString('is_dragons_of_norrath_enabled()');
				eqisdragonsofnorrathenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisdragonsofnorrathenabled);				
				
				const eqisempiresofkunarkenabled = new vscode.CompletionItem('is_empires_of_kunark_enabled', vscode.CompletionItemKind.Method);
				
				eqisempiresofkunarkenabled.detail = "eq.is_empires_of_kunark_enabled()";
				eqisempiresofkunarkenabled.insertText = new vscode.SnippetString('is_empires_of_kunark_enabled()');
				eqisempiresofkunarkenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisempiresofkunarkenabled);				
				
				const eqisgatesofdiscordenabled = new vscode.CompletionItem('is_gates_of_discord_enabled', vscode.CompletionItemKind.Method);
				
				eqisgatesofdiscordenabled.detail = "eq.is_gates_of_discord_enabled()";
				eqisgatesofdiscordenabled.insertText = new vscode.SnippetString('is_gates_of_discord_enabled()');
				eqisgatesofdiscordenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisgatesofdiscordenabled);				
				
				const eqishouseofthuleenabled = new vscode.CompletionItem('is_house_of_thule_enabled', vscode.CompletionItemKind.Method);
				
				eqishouseofthuleenabled.detail = "eq.is_house_of_thule_enabled()";
				eqishouseofthuleenabled.insertText = new vscode.SnippetString('is_house_of_thule_enabled()');
				eqishouseofthuleenabled.documentation = new vscode.MarkdownString("");
				results.push(eqishouseofthuleenabled);				
				
				const eqislostdungeonsofnorrathenabled = new vscode.CompletionItem('is_lost_dungeons_of_norrath_enabled', vscode.CompletionItemKind.Method);
				
				eqislostdungeonsofnorrathenabled.detail = "eq.is_lost_dungeons_of_norrath_enabled()";
				eqislostdungeonsofnorrathenabled.insertText = new vscode.SnippetString('is_lost_dungeons_of_norrath_enabled()');
				eqislostdungeonsofnorrathenabled.documentation = new vscode.MarkdownString("");
				results.push(eqislostdungeonsofnorrathenabled);				
				
				const eqisomensofwarenabled = new vscode.CompletionItem('is_omens_of_war_enabled', vscode.CompletionItemKind.Method);
				
				eqisomensofwarenabled.detail = "eq.is_omens_of_war_enabled()";
				eqisomensofwarenabled.insertText = new vscode.SnippetString('is_omens_of_war_enabled()');
				eqisomensofwarenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisomensofwarenabled);				
				
				const eqispausedtimer = new vscode.CompletionItem('is_paused_timer', vscode.CompletionItemKind.Method);
				
				eqispausedtimer.detail = "eq.is_paused_timer()";
				eqispausedtimer.insertText = new vscode.SnippetString('is_paused_timer()');
				eqispausedtimer.documentation = new vscode.MarkdownString("");
				results.push(eqispausedtimer);				
				
				const eqisprophecyofroenabled = new vscode.CompletionItem('is_prophecy_of_ro_enabled', vscode.CompletionItemKind.Method);
				
				eqisprophecyofroenabled.detail = "eq.is_prophecy_of_ro_enabled()";
				eqisprophecyofroenabled.insertText = new vscode.SnippetString('is_prophecy_of_ro_enabled()');
				eqisprophecyofroenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisprophecyofroenabled);				
				
				const eqisrainoffearenabled = new vscode.CompletionItem('is_rain_of_fear_enabled', vscode.CompletionItemKind.Method);
				
				eqisrainoffearenabled.detail = "eq.is_rain_of_fear_enabled()";
				eqisrainoffearenabled.insertText = new vscode.SnippetString('is_rain_of_fear_enabled()');
				eqisrainoffearenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisrainoffearenabled);				
				
				const eqisringofscaleenabled = new vscode.CompletionItem('is_ring_of_scale_enabled', vscode.CompletionItemKind.Method);
				
				eqisringofscaleenabled.detail = "eq.is_ring_of_scale_enabled()";
				eqisringofscaleenabled.insertText = new vscode.SnippetString('is_ring_of_scale_enabled()');
				eqisringofscaleenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisringofscaleenabled);				
				
				const eqissecretsoffaydwerenabled = new vscode.CompletionItem('is_secrets_of_faydwer_enabled', vscode.CompletionItemKind.Method);
				
				eqissecretsoffaydwerenabled.detail = "eq.is_secrets_of_faydwer_enabled()";
				eqissecretsoffaydwerenabled.insertText = new vscode.SnippetString('is_secrets_of_faydwer_enabled()');
				eqissecretsoffaydwerenabled.documentation = new vscode.MarkdownString("");
				results.push(eqissecretsoffaydwerenabled);				
				
				const eqisseedsofdestructionenabled = new vscode.CompletionItem('is_seeds_of_destruction_enabled', vscode.CompletionItemKind.Method);
				
				eqisseedsofdestructionenabled.detail = "eq.is_seeds_of_destruction_enabled()";
				eqisseedsofdestructionenabled.insertText = new vscode.SnippetString('is_seeds_of_destruction_enabled()');
				eqisseedsofdestructionenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisseedsofdestructionenabled);				
				
				const eqistaskactive = new vscode.CompletionItem('is_task_active', vscode.CompletionItemKind.Method);
				
				eqistaskactive.detail = "eq.is_task_active()";
				eqistaskactive.insertText = new vscode.SnippetString('is_task_active()');
				eqistaskactive.documentation = new vscode.MarkdownString("");
				results.push(eqistaskactive);				
				
				const eqistaskactivityactive = new vscode.CompletionItem('is_task_activity_active', vscode.CompletionItemKind.Method);
				
				eqistaskactivityactive.detail = "eq.is_task_activity_active()";
				eqistaskactivityactive.insertText = new vscode.SnippetString('is_task_activity_active()');
				eqistaskactivityactive.documentation = new vscode.MarkdownString("");
				results.push(eqistaskactivityactive);				
				
				const eqistaskappropriate = new vscode.CompletionItem('is_task_appropriate', vscode.CompletionItemKind.Method);
				
				eqistaskappropriate.detail = "eq.is_task_appropriate()";
				eqistaskappropriate.insertText = new vscode.SnippetString('is_task_appropriate()');
				eqistaskappropriate.documentation = new vscode.MarkdownString("");
				results.push(eqistaskappropriate);				
				
				const eqistaskcompleted = new vscode.CompletionItem('is_task_completed', vscode.CompletionItemKind.Method);
				
				eqistaskcompleted.detail = "eq.is_task_completed()";
				eqistaskcompleted.insertText = new vscode.SnippetString('is_task_completed()');
				eqistaskcompleted.documentation = new vscode.MarkdownString("");
				results.push(eqistaskcompleted);				
				
				const eqistaskenabled = new vscode.CompletionItem('is_task_enabled', vscode.CompletionItemKind.Method);
				
				eqistaskenabled.detail = "eq.is_task_enabled()";
				eqistaskenabled.insertText = new vscode.SnippetString('is_task_enabled()');
				eqistaskenabled.documentation = new vscode.MarkdownString("");
				results.push(eqistaskenabled);				
				
				const eqisthebrokenmirrorenabled = new vscode.CompletionItem('is_the_broken_mirror_enabled', vscode.CompletionItemKind.Method);
				
				eqisthebrokenmirrorenabled.detail = "eq.is_the_broken_mirror_enabled()";
				eqisthebrokenmirrorenabled.insertText = new vscode.SnippetString('is_the_broken_mirror_enabled()');
				eqisthebrokenmirrorenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisthebrokenmirrorenabled);				
				
				const eqistheburiedseaenabled = new vscode.CompletionItem('is_the_buried_sea_enabled', vscode.CompletionItemKind.Method);
				
				eqistheburiedseaenabled.detail = "eq.is_the_buried_sea_enabled()";
				eqistheburiedseaenabled.insertText = new vscode.SnippetString('is_the_buried_sea_enabled()');
				eqistheburiedseaenabled.documentation = new vscode.MarkdownString("");
				results.push(eqistheburiedseaenabled);				
				
				const eqistheburninglandsenabled = new vscode.CompletionItem('is_the_burning_lands_enabled', vscode.CompletionItemKind.Method);
				
				eqistheburninglandsenabled.detail = "eq.is_the_burning_lands_enabled()";
				eqistheburninglandsenabled.insertText = new vscode.SnippetString('is_the_burning_lands_enabled()');
				eqistheburninglandsenabled.documentation = new vscode.MarkdownString("");
				results.push(eqistheburninglandsenabled);				
				
				const eqisthedarkendseaenabled = new vscode.CompletionItem('is_the_darkend_sea_enabled', vscode.CompletionItemKind.Method);
				
				eqisthedarkendseaenabled.detail = "eq.is_the_darkend_sea_enabled()";
				eqisthedarkendseaenabled.insertText = new vscode.SnippetString('is_the_darkend_sea_enabled()');
				eqisthedarkendseaenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisthedarkendseaenabled);				
				
				const eqisthelegacyofykeshaenabled = new vscode.CompletionItem('is_the_legacy_of_ykesha_enabled', vscode.CompletionItemKind.Method);
				
				eqisthelegacyofykeshaenabled.detail = "eq.is_the_legacy_of_ykesha_enabled()";
				eqisthelegacyofykeshaenabled.insertText = new vscode.SnippetString('is_the_legacy_of_ykesha_enabled()');
				eqisthelegacyofykeshaenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisthelegacyofykeshaenabled);				
				
				const eqistheplanesofpowerenabled = new vscode.CompletionItem('is_the_planes_of_power_enabled', vscode.CompletionItemKind.Method);
				
				eqistheplanesofpowerenabled.detail = "eq.is_the_planes_of_power_enabled()";
				eqistheplanesofpowerenabled.insertText = new vscode.SnippetString('is_the_planes_of_power_enabled()');
				eqistheplanesofpowerenabled.documentation = new vscode.MarkdownString("");
				results.push(eqistheplanesofpowerenabled);				
				
				const eqistheruinsofkunarkenabled = new vscode.CompletionItem('is_the_ruins_of_kunark_enabled', vscode.CompletionItemKind.Method);
				
				eqistheruinsofkunarkenabled.detail = "eq.is_the_ruins_of_kunark_enabled()";
				eqistheruinsofkunarkenabled.insertText = new vscode.SnippetString('is_the_ruins_of_kunark_enabled()');
				eqistheruinsofkunarkenabled.documentation = new vscode.MarkdownString("");
				results.push(eqistheruinsofkunarkenabled);				
				
				const eqisthescarsofveliousenabled = new vscode.CompletionItem('is_the_scars_of_velious_enabled', vscode.CompletionItemKind.Method);
				
				eqisthescarsofveliousenabled.detail = "eq.is_the_scars_of_velious_enabled()";
				eqisthescarsofveliousenabled.insertText = new vscode.SnippetString('is_the_scars_of_velious_enabled()');
				eqisthescarsofveliousenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisthescarsofveliousenabled);				
				
				const eqistheserpentsspineenabled = new vscode.CompletionItem('is_the_serpents_spine_enabled', vscode.CompletionItemKind.Method);
				
				eqistheserpentsspineenabled.detail = "eq.is_the_serpents_spine_enabled()";
				eqistheserpentsspineenabled.insertText = new vscode.SnippetString('is_the_serpents_spine_enabled()');
				eqistheserpentsspineenabled.documentation = new vscode.MarkdownString("");
				results.push(eqistheserpentsspineenabled);				
				
				const eqistheshadowsofluclinenabled = new vscode.CompletionItem('is_the_shadows_of_luclin_enabled', vscode.CompletionItemKind.Method);
				
				eqistheshadowsofluclinenabled.detail = "eq.is_the_shadows_of_luclin_enabled()";
				eqistheshadowsofluclinenabled.insertText = new vscode.SnippetString('is_the_shadows_of_luclin_enabled()');
				eqistheshadowsofluclinenabled.documentation = new vscode.MarkdownString("");
				results.push(eqistheshadowsofluclinenabled);				
				
				const eqistormentofveliousenabled = new vscode.CompletionItem('is_torment_of_velious_enabled', vscode.CompletionItemKind.Method);
				
				eqistormentofveliousenabled.detail = "eq.is_torment_of_velious_enabled()";
				eqistormentofveliousenabled.insertText = new vscode.SnippetString('is_torment_of_velious_enabled()');
				eqistormentofveliousenabled.documentation = new vscode.MarkdownString("");
				results.push(eqistormentofveliousenabled);				
				
				const eqisunderfootenabled = new vscode.CompletionItem('is_underfoot_enabled', vscode.CompletionItemKind.Method);
				
				eqisunderfootenabled.detail = "eq.is_underfoot_enabled()";
				eqisunderfootenabled.insertText = new vscode.SnippetString('is_underfoot_enabled()');
				eqisunderfootenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisunderfootenabled);				
				
				const eqisveilofalarisenabled = new vscode.CompletionItem('is_veil_of_alaris_enabled', vscode.CompletionItemKind.Method);
				
				eqisveilofalarisenabled.detail = "eq.is_veil_of_alaris_enabled()";
				eqisveilofalarisenabled.insertText = new vscode.SnippetString('is_veil_of_alaris_enabled()');
				eqisveilofalarisenabled.documentation = new vscode.MarkdownString("");
				results.push(eqisveilofalarisenabled);				
				
				const eqitemlink = new vscode.CompletionItem('item_link', vscode.CompletionItemKind.Method);
				
				eqitemlink.detail = "eq.item_link()";
				eqitemlink.insertText = new vscode.SnippetString('item_link()');
				eqitemlink.documentation = new vscode.MarkdownString("");
				results.push(eqitemlink);				
				
				const eqlasttaskinset = new vscode.CompletionItem('last_task_in_set', vscode.CompletionItemKind.Method);
				
				eqlasttaskinset.detail = "eq.last_task_in_set()";
				eqlasttaskinset.insertText = new vscode.SnippetString('last_task_in_set()');
				eqlasttaskinset.documentation = new vscode.MarkdownString("");
				results.push(eqlasttaskinset);				
				
				const eqloadencounter = new vscode.CompletionItem('load_encounter', vscode.CompletionItemKind.Method);
				
				eqloadencounter.detail = "eq.load_encounter()";
				eqloadencounter.insertText = new vscode.SnippetString('load_encounter()');
				eqloadencounter.documentation = new vscode.MarkdownString("");
				results.push(eqloadencounter);				
				
				const eqloadencounterwithdata = new vscode.CompletionItem('load_encounter_with_data', vscode.CompletionItemKind.Method);
				
				eqloadencounterwithdata.detail = "eq.load_encounter_with_data()";
				eqloadencounterwithdata.insertText = new vscode.SnippetString('load_encounter_with_data()');
				eqloadencounterwithdata.documentation = new vscode.MarkdownString("");
				results.push(eqloadencounterwithdata);				
				
				const eqlog = new vscode.CompletionItem('log', vscode.CompletionItemKind.Method);
				
				eqlog.detail = "eq.log()";
				eqlog.insertText = new vscode.SnippetString('log()');
				eqlog.documentation = new vscode.MarkdownString("");
				results.push(eqlog);				
				
				const eqmapopcodes = new vscode.CompletionItem('map_opcodes', vscode.CompletionItemKind.Method);
				
				eqmapopcodes.detail = "eq.map_opcodes()";
				eqmapopcodes.insertText = new vscode.SnippetString('map_opcodes()');
				eqmapopcodes.documentation = new vscode.MarkdownString("");
				results.push(eqmapopcodes);				
				
				const eqmerchantcountitem = new vscode.CompletionItem('merchant_count_item', vscode.CompletionItemKind.Method);
				
				eqmerchantcountitem.detail = "eq.merchant_count_item()";
				eqmerchantcountitem.insertText = new vscode.SnippetString('merchant_count_item()');
				eqmerchantcountitem.documentation = new vscode.MarkdownString("");
				results.push(eqmerchantcountitem);				
				
				const eqmerchantsetitem = new vscode.CompletionItem('merchant_set_item', vscode.CompletionItemKind.Method);
				
				eqmerchantsetitem.detail = "eq.merchant_set_item()";
				eqmerchantsetitem.insertText = new vscode.SnippetString('merchant_set_item()');
				eqmerchantsetitem.documentation = new vscode.MarkdownString("");
				results.push(eqmerchantsetitem);				
				
				const eqmodifynpcstat = new vscode.CompletionItem('modify_npc_stat', vscode.CompletionItemKind.Method);
				
				eqmodifynpcstat.detail = "eq.modify_npc_stat()";
				eqmodifynpcstat.insertText = new vscode.SnippetString('modify_npc_stat()');
				eqmodifynpcstat.documentation = new vscode.MarkdownString("");
				results.push(eqmodifynpcstat);				
				
				const eqmoveto = new vscode.CompletionItem('move_to', vscode.CompletionItemKind.Method);
				
				eqmoveto.detail = "eq.move_to()";
				eqmoveto.insertText = new vscode.SnippetString('move_to()');
				eqmoveto.documentation = new vscode.MarkdownString("");
				results.push(eqmoveto);				
				
				const eqnexttaskinset = new vscode.CompletionItem('next_task_in_set', vscode.CompletionItemKind.Method);
				
				eqnexttaskinset.detail = "eq.next_task_in_set()";
				eqnexttaskinset.insertText = new vscode.SnippetString('next_task_in_set()');
				eqnexttaskinset.documentation = new vscode.MarkdownString("");
				results.push(eqnexttaskinset);				
				
				const eqpathresume = new vscode.CompletionItem('path_resume', vscode.CompletionItemKind.Method);
				
				eqpathresume.detail = "eq.path_resume()";
				eqpathresume.insertText = new vscode.SnippetString('path_resume()');
				eqpathresume.documentation = new vscode.MarkdownString("");
				results.push(eqpathresume);				
				
				const eqpause = new vscode.CompletionItem('pause', vscode.CompletionItemKind.Method);
				
				eqpause.detail = "eq.pause()";
				eqpause.insertText = new vscode.SnippetString('pause()');
				eqpause.documentation = new vscode.MarkdownString("");
				results.push(eqpause);				
				
				const eqpausetimer = new vscode.CompletionItem('pause_timer', vscode.CompletionItemKind.Method);
				
				eqpausetimer.detail = "eq.pause_timer()";
				eqpausetimer.insertText = new vscode.SnippetString('pause_timer()');
				eqpausetimer.documentation = new vscode.MarkdownString("");
				results.push(eqpausetimer);				
				
				const eqpopup = new vscode.CompletionItem('popup', vscode.CompletionItemKind.Method);
				
				eqpopup.detail = "eq.popup()";
				eqpopup.insertText = new vscode.SnippetString('popup()');
				eqpopup.documentation = new vscode.MarkdownString("");
				results.push(eqpopup);				
				
				const eqprocessmobswhilezoneempty = new vscode.CompletionItem('process_mobs_while_zone_empty', vscode.CompletionItemKind.Method);
				
				eqprocessmobswhilezoneempty.detail = "eq.process_mobs_while_zone_empty()";
				eqprocessmobswhilezoneempty.insertText = new vscode.SnippetString('process_mobs_while_zone_empty()');
				eqprocessmobswhilezoneempty.documentation = new vscode.MarkdownString("");
				results.push(eqprocessmobswhilezoneempty);				
				
				const eqrain = new vscode.CompletionItem('rain', vscode.CompletionItemKind.Method);
				
				eqrain.detail = "eq.rain()";
				eqrain.insertText = new vscode.SnippetString('rain()');
				eqrain.documentation = new vscode.MarkdownString("");
				results.push(eqrain);				
				
				const eqregistergeneral = new vscode.CompletionItem('register_general', vscode.CompletionItemKind.Method);
				
				eqregistergeneral.detail = "eq.register_general()";
				eqregistergeneral.insertText = new vscode.SnippetString('register_general()');
				eqregistergeneral.documentation = new vscode.MarkdownString("");
				results.push(eqregistergeneral);				
				
				const eqregisteritemevent = new vscode.CompletionItem('register_item_event', vscode.CompletionItemKind.Method);
				
				eqregisteritemevent.detail = "eq.register_item_event()";
				eqregisteritemevent.insertText = new vscode.SnippetString('register_item_event()');
				eqregisteritemevent.documentation = new vscode.MarkdownString("");
				results.push(eqregisteritemevent);				
				
				const eqregisternpcevent = new vscode.CompletionItem('register_npc_event', vscode.CompletionItemKind.Method);
				
				eqregisternpcevent.detail = "eq.register_npc_event()";
				eqregisternpcevent.insertText = new vscode.SnippetString('register_npc_event()');
				eqregisternpcevent.documentation = new vscode.MarkdownString("");
				results.push(eqregisternpcevent);				
				
				const eqregisterplayerevent = new vscode.CompletionItem('register_player_event', vscode.CompletionItemKind.Method);
				
				eqregisterplayerevent.detail = "eq.register_player_event()";
				eqregisterplayerevent.insertText = new vscode.SnippetString('register_player_event()');
				eqregisterplayerevent.documentation = new vscode.MarkdownString("");
				results.push(eqregisterplayerevent);				
				
				const eqregisterrandom = new vscode.CompletionItem('register_random', vscode.CompletionItemKind.Method);
				
				eqregisterrandom.detail = "eq.register_random()";
				eqregisterrandom.insertText = new vscode.SnippetString('register_random()');
				eqregisterrandom.documentation = new vscode.MarkdownString("");
				results.push(eqregisterrandom);				
				
				const eqreloadzonestaticdata = new vscode.CompletionItem('reloadzonestaticdata', vscode.CompletionItemKind.Method);
				
				eqreloadzonestaticdata.detail = "eq.reloadzonestaticdata()";
				eqreloadzonestaticdata.insertText = new vscode.SnippetString('reloadzonestaticdata()');
				eqreloadzonestaticdata.documentation = new vscode.MarkdownString("");
				results.push(eqreloadzonestaticdata);				
				
				const eqremoveallfrominstance = new vscode.CompletionItem('remove_all_from_instance', vscode.CompletionItemKind.Method);
				
				eqremoveallfrominstance.detail = "eq.remove_all_from_instance()";
				eqremoveallfrominstance.insertText = new vscode.SnippetString('remove_all_from_instance()');
				eqremoveallfrominstance.documentation = new vscode.MarkdownString("");
				results.push(eqremoveallfrominstance);				
				
				const eqremovearea = new vscode.CompletionItem('remove_area', vscode.CompletionItemKind.Method);
				
				eqremovearea.detail = "eq.remove_area()";
				eqremovearea.insertText = new vscode.SnippetString('remove_area()');
				eqremovearea.documentation = new vscode.MarkdownString("");
				results.push(eqremovearea);				
				
				const eqremovefrominstance = new vscode.CompletionItem('remove_from_instance', vscode.CompletionItemKind.Method);
				
				eqremovefrominstance.detail = "eq.remove_from_instance()";
				eqremovefrominstance.insertText = new vscode.SnippetString('remove_from_instance()');
				eqremovefrominstance.documentation = new vscode.MarkdownString("");
				results.push(eqremovefrominstance);				
				
				const eqremovefrominstancebycharid = new vscode.CompletionItem('remove_from_instance_by_char_id', vscode.CompletionItemKind.Method);
				
				eqremovefrominstancebycharid.detail = "eq.remove_from_instance_by_char_id()";
				eqremovefrominstancebycharid.insertText = new vscode.SnippetString('remove_from_instance_by_char_id()');
				eqremovefrominstancebycharid.documentation = new vscode.MarkdownString("");
				results.push(eqremovefrominstancebycharid);				
				
				const eqremovespawnpoint = new vscode.CompletionItem('remove_spawn_point', vscode.CompletionItemKind.Method);
				
				eqremovespawnpoint.detail = "eq.remove_spawn_point()";
				eqremovespawnpoint.insertText = new vscode.SnippetString('remove_spawn_point()');
				eqremovespawnpoint.documentation = new vscode.MarkdownString("");
				results.push(eqremovespawnpoint);				
				
				const eqremovetitle = new vscode.CompletionItem('remove_title', vscode.CompletionItemKind.Method);
				
				eqremovetitle.detail = "eq.remove_title()";
				eqremovetitle.insertText = new vscode.SnippetString('remove_title()');
				eqremovetitle.documentation = new vscode.MarkdownString("");
				results.push(eqremovetitle);				
				
				const eqrepopzone = new vscode.CompletionItem('repop_zone', vscode.CompletionItemKind.Method);
				
				eqrepopzone.detail = "eq.repop_zone()";
				eqrepopzone.insertText = new vscode.SnippetString('repop_zone()');
				eqrepopzone.documentation = new vscode.MarkdownString("");
				results.push(eqrepopzone);				
				
				const eqresettaskactivity = new vscode.CompletionItem('reset_task_activity', vscode.CompletionItemKind.Method);
				
				eqresettaskactivity.detail = "eq.reset_task_activity()";
				eqresettaskactivity.insertText = new vscode.SnippetString('reset_task_activity()');
				eqresettaskactivity.documentation = new vscode.MarkdownString("");
				results.push(eqresettaskactivity);				
				
				const eqrespawn = new vscode.CompletionItem('respawn', vscode.CompletionItemKind.Method);
				
				eqrespawn.detail = "eq.respawn()";
				eqrespawn.insertText = new vscode.SnippetString('respawn()');
				eqrespawn.documentation = new vscode.MarkdownString("");
				results.push(eqrespawn);				
				
				const eqresumetimer = new vscode.CompletionItem('resume_timer', vscode.CompletionItemKind.Method);
				
				eqresumetimer.detail = "eq.resume_timer()";
				eqresumetimer.insertText = new vscode.SnippetString('resume_timer()');
				eqresumetimer.documentation = new vscode.MarkdownString("");
				results.push(eqresumetimer);				
				
				const eqsafemove = new vscode.CompletionItem('safe_move', vscode.CompletionItemKind.Method);
				
				eqsafemove.detail = "eq.safe_move()";
				eqsafemove.insertText = new vscode.SnippetString('safe_move()');
				eqsafemove.documentation = new vscode.MarkdownString("");
				results.push(eqsafemove);				
				
				const eqsaylink = new vscode.CompletionItem('say_link', vscode.CompletionItemKind.Method);
				
				eqsaylink.detail = "eq.say_link()";
				eqsaylink.insertText = new vscode.SnippetString('say_link()');
				eqsaylink.documentation = new vscode.MarkdownString("");
				results.push(eqsaylink);				
				
				const eqscribespells = new vscode.CompletionItem('scribe_spells', vscode.CompletionItemKind.Method);
				
				eqscribespells.detail = "eq.scribe_spells()";
				eqscribespells.insertText = new vscode.SnippetString('scribe_spells()');
				eqscribespells.documentation = new vscode.MarkdownString("");
				results.push(eqscribespells);				
				
				const eqsendmail = new vscode.CompletionItem('send_mail', vscode.CompletionItemKind.Method);
				
				eqsendmail.detail = "eq.send_mail()";
				eqsendmail.insertText = new vscode.SnippetString('send_mail()');
				eqsendmail.documentation = new vscode.MarkdownString("");
				results.push(eqsendmail);				
				
				const eqsetanim = new vscode.CompletionItem('set_anim', vscode.CompletionItemKind.Method);
				
				eqsetanim.detail = "eq.set_anim()";
				eqsetanim.insertText = new vscode.SnippetString('set_anim()');
				eqsetanim.documentation = new vscode.MarkdownString("");
				results.push(eqsetanim);				
				
				const eqsetdata = new vscode.CompletionItem('set_data', vscode.CompletionItemKind.Method);
				
				eqsetdata.detail = "eq.set_data()";
				eqsetdata.insertText = new vscode.SnippetString('set_data()');
				eqsetdata.documentation = new vscode.MarkdownString("");
				results.push(eqsetdata);				
				
				const eqsetglobal = new vscode.CompletionItem('set_global', vscode.CompletionItemKind.Method);
				
				eqsetglobal.detail = "eq.set_global()";
				eqsetglobal.insertText = new vscode.SnippetString('set_global()');
				eqsetglobal.documentation = new vscode.MarkdownString("");
				results.push(eqsetglobal);				
				
				const eqsetguild = new vscode.CompletionItem('set_guild', vscode.CompletionItemKind.Method);
				
				eqsetguild.detail = "eq.set_guild()";
				eqsetguild.insertText = new vscode.SnippetString('set_guild()');
				eqsetguild.documentation = new vscode.MarkdownString("");
				results.push(eqsetguild);				
				
				const eqsetnexthpevent = new vscode.CompletionItem('set_next_hp_event', vscode.CompletionItemKind.Method);
				
				eqsetnexthpevent.detail = "eq.set_next_hp_event()";
				eqsetnexthpevent.insertText = new vscode.SnippetString('set_next_hp_event()');
				eqsetnexthpevent.documentation = new vscode.MarkdownString("");
				results.push(eqsetnexthpevent);				
				
				const eqsetnextinchpevent = new vscode.CompletionItem('set_next_inc_hp_event', vscode.CompletionItemKind.Method);
				
				eqsetnextinchpevent.detail = "eq.set_next_inc_hp_event()";
				eqsetnextinchpevent.insertText = new vscode.SnippetString('set_next_inc_hp_event()');
				eqsetnextinchpevent.documentation = new vscode.MarkdownString("");
				results.push(eqsetnextinchpevent);				
				
				const eqsetproximity = new vscode.CompletionItem('set_proximity', vscode.CompletionItemKind.Method);
				
				eqsetproximity.detail = "eq.set_proximity()";
				eqsetproximity.insertText = new vscode.SnippetString('set_proximity()');
				eqsetproximity.documentation = new vscode.MarkdownString("");
				results.push(eqsetproximity);				
				
				const eqsetsky = new vscode.CompletionItem('set_sky', vscode.CompletionItemKind.Method);
				
				eqsetsky.detail = "eq.set_sky()";
				eqsetsky.insertText = new vscode.SnippetString('set_sky()');
				eqsetsky.documentation = new vscode.MarkdownString("");
				results.push(eqsetsky);				
				
				const eqsettime = new vscode.CompletionItem('set_time', vscode.CompletionItemKind.Method);
				
				eqsettime.detail = "eq.set_time()";
				eqsettime.insertText = new vscode.SnippetString('set_time()');
				eqsettime.documentation = new vscode.MarkdownString("");
				results.push(eqsettime);				
				
				const eqsettimer = new vscode.CompletionItem('set_timer', vscode.CompletionItemKind.Method);
				
				eqsettimer.detail = "eq.set_timer()";
				eqsettimer.insertText = new vscode.SnippetString('set_timer()');
				eqsettimer.documentation = new vscode.MarkdownString("");
				results.push(eqsettimer);				
				
				const eqsignal = new vscode.CompletionItem('signal', vscode.CompletionItemKind.Method);
				
				eqsignal.detail = "eq.signal()";
				eqsignal.insertText = new vscode.SnippetString('signal()');
				eqsignal.documentation = new vscode.MarkdownString("");
				results.push(eqsignal);				
				
				const eqsnow = new vscode.CompletionItem('snow', vscode.CompletionItemKind.Method);
				
				eqsnow.detail = "eq.snow()";
				eqsnow.insertText = new vscode.SnippetString('snow()');
				eqsnow.documentation = new vscode.MarkdownString("");
				results.push(eqsnow);				
				
				const eqspawn2 = new vscode.CompletionItem('spawn2', vscode.CompletionItemKind.Method);
				
				eqspawn2.detail = "eq.spawn2()";
				eqspawn2.insertText = new vscode.SnippetString('spawn2()');
				eqspawn2.documentation = new vscode.MarkdownString("");
				results.push(eqspawn2);				
				
				const eqspawncondition = new vscode.CompletionItem('spawn_condition', vscode.CompletionItemKind.Method);
				
				eqspawncondition.detail = "eq.spawn_condition()";
				eqspawncondition.insertText = new vscode.SnippetString('spawn_condition()');
				eqspawncondition.documentation = new vscode.MarkdownString("");
				results.push(eqspawncondition);				
				
				const eqstart = new vscode.CompletionItem('start', vscode.CompletionItemKind.Method);
				
				eqstart.detail = "eq.start()";
				eqstart.insertText = new vscode.SnippetString('start()');
				eqstart.documentation = new vscode.MarkdownString("");
				results.push(eqstart);				
				
				const eqstop = new vscode.CompletionItem('stop', vscode.CompletionItemKind.Method);
				
				eqstop.detail = "eq.stop()";
				eqstop.insertText = new vscode.SnippetString('stop()');
				eqstop.documentation = new vscode.MarkdownString("");
				results.push(eqstop);				
				
				const eqstopalltimers = new vscode.CompletionItem('stop_all_timers', vscode.CompletionItemKind.Method);
				
				eqstopalltimers.detail = "eq.stop_all_timers()";
				eqstopalltimers.insertText = new vscode.SnippetString('stop_all_timers()');
				eqstopalltimers.documentation = new vscode.MarkdownString("");
				results.push(eqstopalltimers);				
				
				const eqstopfollow = new vscode.CompletionItem('stop_follow', vscode.CompletionItemKind.Method);
				
				eqstopfollow.detail = "eq.stop_follow()";
				eqstopfollow.insertText = new vscode.SnippetString('stop_follow()');
				eqstopfollow.documentation = new vscode.MarkdownString("");
				results.push(eqstopfollow);				
				
				const eqstoptimer = new vscode.CompletionItem('stop_timer', vscode.CompletionItemKind.Method);
				
				eqstoptimer.detail = "eq.stop_timer()";
				eqstoptimer.insertText = new vscode.SnippetString('stop_timer()');
				eqstoptimer.documentation = new vscode.MarkdownString("");
				results.push(eqstoptimer);				
				
				const eqsummonallplayercorpses = new vscode.CompletionItem('summon_all_player_corpses', vscode.CompletionItemKind.Method);
				
				eqsummonallplayercorpses.detail = "eq.summon_all_player_corpses()";
				eqsummonallplayercorpses.insertText = new vscode.SnippetString('summon_all_player_corpses()');
				eqsummonallplayercorpses.documentation = new vscode.MarkdownString("");
				results.push(eqsummonallplayercorpses);				
				
				const eqsummonburiedplayercorpse = new vscode.CompletionItem('summon_buried_player_corpse', vscode.CompletionItemKind.Method);
				
				eqsummonburiedplayercorpse.detail = "eq.summon_buried_player_corpse()";
				eqsummonburiedplayercorpse.insertText = new vscode.SnippetString('summon_buried_player_corpse()');
				eqsummonburiedplayercorpse.documentation = new vscode.MarkdownString("");
				results.push(eqsummonburiedplayercorpse);				
				
				const eqtargetglobal = new vscode.CompletionItem('target_global', vscode.CompletionItemKind.Method);
				
				eqtargetglobal.detail = "eq.target_global()";
				eqtargetglobal.insertText = new vscode.SnippetString('target_global()');
				eqtargetglobal.documentation = new vscode.MarkdownString("");
				results.push(eqtargetglobal);				
				
				const eqtaskexploredarea = new vscode.CompletionItem('task_explored_area', vscode.CompletionItemKind.Method);
				
				eqtaskexploredarea.detail = "eq.task_explored_area()";
				eqtaskexploredarea.insertText = new vscode.SnippetString('task_explored_area()');
				eqtaskexploredarea.documentation = new vscode.MarkdownString("");
				results.push(eqtaskexploredarea);				
				
				const eqtasksetselector = new vscode.CompletionItem('task_set_selector', vscode.CompletionItemKind.Method);
				
				eqtasksetselector.detail = "eq.task_set_selector()";
				eqtasksetselector.insertText = new vscode.SnippetString('task_set_selector()');
				eqtasksetselector.documentation = new vscode.MarkdownString("");
				results.push(eqtasksetselector);				
				
				const eqtasktimeleft = new vscode.CompletionItem('task_time_left', vscode.CompletionItemKind.Method);
				
				eqtasktimeleft.detail = "eq.task_time_left()";
				eqtasktimeleft.insertText = new vscode.SnippetString('task_time_left()');
				eqtasktimeleft.documentation = new vscode.MarkdownString("");
				results.push(eqtasktimeleft);				
				
				const eqtogglespawnevent = new vscode.CompletionItem('toggle_spawn_event', vscode.CompletionItemKind.Method);
				
				eqtogglespawnevent.detail = "eq.toggle_spawn_event()";
				eqtogglespawnevent.insertText = new vscode.SnippetString('toggle_spawn_event()');
				eqtogglespawnevent.documentation = new vscode.MarkdownString("");
				results.push(eqtogglespawnevent);				
				
				const eqtraindiscs = new vscode.CompletionItem('train_discs', vscode.CompletionItemKind.Method);
				
				eqtraindiscs.detail = "eq.train_discs()";
				eqtraindiscs.insertText = new vscode.SnippetString('train_discs()');
				eqtraindiscs.documentation = new vscode.MarkdownString("");
				results.push(eqtraindiscs);				
				
				const equnloadencounter = new vscode.CompletionItem('unload_encounter', vscode.CompletionItemKind.Method);
				
				equnloadencounter.detail = "eq.unload_encounter()";
				equnloadencounter.insertText = new vscode.SnippetString('unload_encounter()');
				equnloadencounter.documentation = new vscode.MarkdownString("");
				results.push(equnloadencounter);				
				
				const equnloadencounterwithdata = new vscode.CompletionItem('unload_encounter_with_data', vscode.CompletionItemKind.Method);
				
				equnloadencounterwithdata.detail = "eq.unload_encounter_with_data()";
				equnloadencounterwithdata.insertText = new vscode.SnippetString('unload_encounter_with_data()');
				equnloadencounterwithdata.documentation = new vscode.MarkdownString("");
				results.push(equnloadencounterwithdata);				
				
				const equnregisteritemevent = new vscode.CompletionItem('unregister_item_event', vscode.CompletionItemKind.Method);
				
				equnregisteritemevent.detail = "eq.unregister_item_event()";
				equnregisteritemevent.insertText = new vscode.SnippetString('unregister_item_event()');
				equnregisteritemevent.documentation = new vscode.MarkdownString("");
				results.push(equnregisteritemevent);				
				
				const equnregisternpcevent = new vscode.CompletionItem('unregister_npc_event', vscode.CompletionItemKind.Method);
				
				equnregisternpcevent.detail = "eq.unregister_npc_event()";
				equnregisternpcevent.insertText = new vscode.SnippetString('unregister_npc_event()');
				equnregisternpcevent.documentation = new vscode.MarkdownString("");
				results.push(equnregisternpcevent);				
				
				const equnregisterplayerevent = new vscode.CompletionItem('unregister_player_event', vscode.CompletionItemKind.Method);
				
				equnregisterplayerevent.detail = "eq.unregister_player_event()";
				equnregisterplayerevent.insertText = new vscode.SnippetString('unregister_player_event()');
				equnregisterplayerevent.documentation = new vscode.MarkdownString("");
				results.push(equnregisterplayerevent);				
				
				const equpdateinstancetimer = new vscode.CompletionItem('update_instance_timer', vscode.CompletionItemKind.Method);
				
				equpdateinstancetimer.detail = "eq.update_instance_timer()";
				equpdateinstancetimer.insertText = new vscode.SnippetString('update_instance_timer()');
				equpdateinstancetimer.documentation = new vscode.MarkdownString("");
				results.push(equpdateinstancetimer);				
				
				const equpdatespawntimer = new vscode.CompletionItem('update_spawn_timer', vscode.CompletionItemKind.Method);
				
				equpdatespawntimer.detail = "eq.update_spawn_timer()";
				equpdatespawntimer.insertText = new vscode.SnippetString('update_spawn_timer()');
				equpdatespawntimer.documentation = new vscode.MarkdownString("");
				results.push(equpdatespawntimer);				
				
				const equpdatetaskactivity = new vscode.CompletionItem('update_task_activity', vscode.CompletionItemKind.Method);
				
				equpdatetaskactivity.detail = "eq.update_task_activity()";
				equpdatetaskactivity.insertText = new vscode.SnippetString('update_task_activity()');
				equpdatetaskactivity.documentation = new vscode.MarkdownString("");
				results.push(equpdatetaskactivity);				
				
				const eqvoicetell = new vscode.CompletionItem('voice_tell', vscode.CompletionItemKind.Method);
				
				eqvoicetell.detail = "eq.voice_tell()";
				eqvoicetell.insertText = new vscode.SnippetString('voice_tell()');
				eqvoicetell.documentation = new vscode.MarkdownString("");
				results.push(eqvoicetell);				
				
				const eqwearchange = new vscode.CompletionItem('wear_change', vscode.CompletionItemKind.Method);
				
				eqwearchange.detail = "eq.wear_change()";
				eqwearchange.insertText = new vscode.SnippetString('wear_change()');
				eqwearchange.documentation = new vscode.MarkdownString("");
				results.push(eqwearchange);				
				
				const eqworldemote = new vscode.CompletionItem('world_emote', vscode.CompletionItemKind.Method);
				
				eqworldemote.detail = "eq.world_emote()";
				eqworldemote.insertText = new vscode.SnippetString('world_emote()');
				eqworldemote.documentation = new vscode.MarkdownString("");
				results.push(eqworldemote);				
				
				const eqworldwideassigntask = new vscode.CompletionItem('world_wide_assign_task', vscode.CompletionItemKind.Method);
				
				eqworldwideassigntask.detail = "eq.world_wide_assign_task()";
				eqworldwideassigntask.insertText = new vscode.SnippetString('world_wide_assign_task()');
				eqworldwideassigntask.documentation = new vscode.MarkdownString("");
				results.push(eqworldwideassigntask);				
				
				const eqworldwidecastspell = new vscode.CompletionItem('world_wide_cast_spell', vscode.CompletionItemKind.Method);
				
				eqworldwidecastspell.detail = "eq.world_wide_cast_spell()";
				eqworldwidecastspell.insertText = new vscode.SnippetString('world_wide_cast_spell()');
				eqworldwidecastspell.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidecastspell);				
				
				const eqworldwidedisabletask = new vscode.CompletionItem('world_wide_disable_task', vscode.CompletionItemKind.Method);
				
				eqworldwidedisabletask.detail = "eq.world_wide_disable_task()";
				eqworldwidedisabletask.insertText = new vscode.SnippetString('world_wide_disable_task()');
				eqworldwidedisabletask.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidedisabletask);				
				
				const eqworldwideenabletask = new vscode.CompletionItem('world_wide_enable_task', vscode.CompletionItemKind.Method);
				
				eqworldwideenabletask.detail = "eq.world_wide_enable_task()";
				eqworldwideenabletask.insertText = new vscode.SnippetString('world_wide_enable_task()');
				eqworldwideenabletask.documentation = new vscode.MarkdownString("");
				results.push(eqworldwideenabletask);				
				
				const eqworldwidefailtask = new vscode.CompletionItem('world_wide_fail_task', vscode.CompletionItemKind.Method);
				
				eqworldwidefailtask.detail = "eq.world_wide_fail_task()";
				eqworldwidefailtask.insertText = new vscode.SnippetString('world_wide_fail_task()');
				eqworldwidefailtask.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidefailtask);				
				
				const eqworldwidemarquee = new vscode.CompletionItem('world_wide_marquee', vscode.CompletionItemKind.Method);
				
				eqworldwidemarquee.detail = "eq.world_wide_marquee()";
				eqworldwidemarquee.insertText = new vscode.SnippetString('world_wide_marquee()');
				eqworldwidemarquee.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidemarquee);				
				
				const eqworldwidemessage = new vscode.CompletionItem('world_wide_message', vscode.CompletionItemKind.Method);
				
				eqworldwidemessage.detail = "eq.world_wide_message()";
				eqworldwidemessage.insertText = new vscode.SnippetString('world_wide_message()');
				eqworldwidemessage.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidemessage);				
				
				const eqworldwidemove = new vscode.CompletionItem('world_wide_move', vscode.CompletionItemKind.Method);
				
				eqworldwidemove.detail = "eq.world_wide_move()";
				eqworldwidemove.insertText = new vscode.SnippetString('world_wide_move()');
				eqworldwidemove.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidemove);				
				
				const eqworldwidemoveinstance = new vscode.CompletionItem('world_wide_move_instance', vscode.CompletionItemKind.Method);
				
				eqworldwidemoveinstance.detail = "eq.world_wide_move_instance()";
				eqworldwidemoveinstance.insertText = new vscode.SnippetString('world_wide_move_instance()');
				eqworldwidemoveinstance.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidemoveinstance);				
				
				const eqworldwideremovespell = new vscode.CompletionItem('world_wide_remove_spell', vscode.CompletionItemKind.Method);
				
				eqworldwideremovespell.detail = "eq.world_wide_remove_spell()";
				eqworldwideremovespell.insertText = new vscode.SnippetString('world_wide_remove_spell()');
				eqworldwideremovespell.documentation = new vscode.MarkdownString("");
				results.push(eqworldwideremovespell);				
				
				const eqworldwideremovetask = new vscode.CompletionItem('world_wide_remove_task', vscode.CompletionItemKind.Method);
				
				eqworldwideremovetask.detail = "eq.world_wide_remove_task()";
				eqworldwideremovetask.insertText = new vscode.SnippetString('world_wide_remove_task()');
				eqworldwideremovetask.documentation = new vscode.MarkdownString("");
				results.push(eqworldwideremovetask);				
				
				const eqworldwideresetactivity = new vscode.CompletionItem('world_wide_reset_activity', vscode.CompletionItemKind.Method);
				
				eqworldwideresetactivity.detail = "eq.world_wide_reset_activity()";
				eqworldwideresetactivity.insertText = new vscode.SnippetString('world_wide_reset_activity()');
				eqworldwideresetactivity.documentation = new vscode.MarkdownString("");
				results.push(eqworldwideresetactivity);				
				
				const eqworldwidesetentityvariableclient = new vscode.CompletionItem('world_wide_set_entity_variable_client', vscode.CompletionItemKind.Method);
				
				eqworldwidesetentityvariableclient.detail = "eq.world_wide_set_entity_variable_client()";
				eqworldwidesetentityvariableclient.insertText = new vscode.SnippetString('world_wide_set_entity_variable_client()');
				eqworldwidesetentityvariableclient.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidesetentityvariableclient);				
				
				const eqworldwidesetentityvariablenpc = new vscode.CompletionItem('world_wide_set_entity_variable_npc', vscode.CompletionItemKind.Method);
				
				eqworldwidesetentityvariablenpc.detail = "eq.world_wide_set_entity_variable_npc()";
				eqworldwidesetentityvariablenpc.insertText = new vscode.SnippetString('world_wide_set_entity_variable_npc()');
				eqworldwidesetentityvariablenpc.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidesetentityvariablenpc);				
				
				const eqworldwidesignalclient = new vscode.CompletionItem('world_wide_signal_client', vscode.CompletionItemKind.Method);
				
				eqworldwidesignalclient.detail = "eq.world_wide_signal_client()";
				eqworldwidesignalclient.insertText = new vscode.SnippetString('world_wide_signal_client()');
				eqworldwidesignalclient.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidesignalclient);				
				
				const eqworldwidesignalnpc = new vscode.CompletionItem('world_wide_signal_npc', vscode.CompletionItemKind.Method);
				
				eqworldwidesignalnpc.detail = "eq.world_wide_signal_npc()";
				eqworldwidesignalnpc.insertText = new vscode.SnippetString('world_wide_signal_npc()');
				eqworldwidesignalnpc.documentation = new vscode.MarkdownString("");
				results.push(eqworldwidesignalnpc);				
				
				const eqworldwideupdateactivity = new vscode.CompletionItem('world_wide_update_activity', vscode.CompletionItemKind.Method);
				
				eqworldwideupdateactivity.detail = "eq.world_wide_update_activity()";
				eqworldwideupdateactivity.insertText = new vscode.SnippetString('world_wide_update_activity()');
				eqworldwideupdateactivity.documentation = new vscode.MarkdownString("");
				results.push(eqworldwideupdateactivity);				
				
				const eqzone = new vscode.CompletionItem('zone', vscode.CompletionItemKind.Method);
				
				eqzone.detail = "eq.zone()";
				eqzone.insertText = new vscode.SnippetString('zone()');
				eqzone.documentation = new vscode.MarkdownString("");
				results.push(eqzone);				
				
				const eqzoneemote = new vscode.CompletionItem('zone_emote', vscode.CompletionItemKind.Method);
				
				eqzoneemote.detail = "eq.zone_emote()";
				eqzoneemote.insertText = new vscode.SnippetString('zone_emote()');
				eqzoneemote.documentation = new vscode.MarkdownString("");
				results.push(eqzoneemote);				
				
				const eqzonegroup = new vscode.CompletionItem('zone_group', vscode.CompletionItemKind.Method);
				
				eqzonegroup.detail = "eq.zone_group()";
				eqzonegroup.insertText = new vscode.SnippetString('zone_group()');
				eqzonegroup.documentation = new vscode.MarkdownString("");
				results.push(eqzonegroup);				
				
				const eqzoneraid = new vscode.CompletionItem('zone_raid', vscode.CompletionItemKind.Method);
				
				eqzoneraid.detail = "eq.zone_raid()";
				eqzoneraid.insertText = new vscode.SnippetString('zone_raid()');
				eqzoneraid.documentation = new vscode.MarkdownString("");
				results.push(eqzoneraid);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('event.')) {
					return undefined;
				}
				
				
				const eventeventaggrosay = new vscode.CompletionItem('event_aggro_say', vscode.CompletionItemKind.Method);
				
				eventeventaggrosay.detail = "event.event_aggro_say()";
				eventeventaggrosay.insertText = new vscode.SnippetString('event_aggro_say()');
				eventeventaggrosay.documentation = new vscode.MarkdownString("");
				results.push(eventeventaggrosay);				
				
				const eventeventaugmentinsert = new vscode.CompletionItem('event_augment_insert', vscode.CompletionItemKind.Method);
				
				eventeventaugmentinsert.detail = "event.event_augment_insert()";
				eventeventaugmentinsert.insertText = new vscode.SnippetString('event_augment_insert()');
				eventeventaugmentinsert.documentation = new vscode.MarkdownString("");
				results.push(eventeventaugmentinsert);				
				
				const eventeventaugmentitem = new vscode.CompletionItem('event_augment_item', vscode.CompletionItemKind.Method);
				
				eventeventaugmentitem.detail = "event.event_augment_item()";
				eventeventaugmentitem.insertText = new vscode.SnippetString('event_augment_item()');
				eventeventaugmentitem.documentation = new vscode.MarkdownString("");
				results.push(eventeventaugmentitem);				
				
				const eventeventaugmentremove = new vscode.CompletionItem('event_augment_remove', vscode.CompletionItemKind.Method);
				
				eventeventaugmentremove.detail = "event.event_augment_remove()";
				eventeventaugmentremove.insertText = new vscode.SnippetString('event_augment_remove()');
				eventeventaugmentremove.documentation = new vscode.MarkdownString("");
				results.push(eventeventaugmentremove);				
				
				const eventeventcastbegin = new vscode.CompletionItem('event_cast_begin', vscode.CompletionItemKind.Method);
				
				eventeventcastbegin.detail = "event.event_cast_begin()";
				eventeventcastbegin.insertText = new vscode.SnippetString('event_cast_begin()');
				eventeventcastbegin.documentation = new vscode.MarkdownString("");
				results.push(eventeventcastbegin);				
				
				const eventeventcaston = new vscode.CompletionItem('event_cast_on', vscode.CompletionItemKind.Method);
				
				eventeventcaston.detail = "event.event_cast_on()";
				eventeventcaston.insertText = new vscode.SnippetString('event_cast_on()');
				eventeventcaston.documentation = new vscode.MarkdownString("");
				results.push(eventeventcaston);				
				
				const eventeventsay = new vscode.CompletionItem('event_say', vscode.CompletionItemKind.Method);
				
				eventeventsay.detail = "event.event_say()";
				eventeventsay.insertText = new vscode.SnippetString('event_say()');
				eventeventsay.documentation = new vscode.MarkdownString("");
				results.push(eventeventsay);				
				
				const eventeventsignal = new vscode.CompletionItem('event_signal', vscode.CompletionItemKind.Method);
				
				eventeventsignal.detail = "event.event_signal()";
				eventeventsignal.insertText = new vscode.SnippetString('event_signal()');
				eventeventsignal.documentation = new vscode.MarkdownString("");
				results.push(eventeventsignal);				
				
				const eventeventtrade = new vscode.CompletionItem('event_trade', vscode.CompletionItemKind.Method);
				
				eventeventtrade.detail = "event.event_trade()";
				eventeventtrade.insertText = new vscode.SnippetString('event_trade()');
				eventeventtrade.documentation = new vscode.MarkdownString("");
				results.push(eventeventtrade);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('faction.')) {
					return undefined;
				}
				
				
				const factionAlly = new vscode.CompletionItem('Ally', vscode.CompletionItemKind.Method);
				
				factionAlly.detail = "faction.Ally()";
				factionAlly.insertText = new vscode.SnippetString('Ally()');
				factionAlly.documentation = new vscode.MarkdownString("");
				results.push(factionAlly);				
				
				const factionAmiable = new vscode.CompletionItem('Amiable', vscode.CompletionItemKind.Method);
				
				factionAmiable.detail = "faction.Amiable()";
				factionAmiable.insertText = new vscode.SnippetString('Amiable()');
				factionAmiable.documentation = new vscode.MarkdownString("");
				results.push(factionAmiable);				
				
				const factionApprehensive = new vscode.CompletionItem('Apprehensive', vscode.CompletionItemKind.Method);
				
				factionApprehensive.detail = "faction.Apprehensive()";
				factionApprehensive.insertText = new vscode.SnippetString('Apprehensive()');
				factionApprehensive.documentation = new vscode.MarkdownString("");
				results.push(factionApprehensive);				
				
				const factionDubious = new vscode.CompletionItem('Dubious', vscode.CompletionItemKind.Method);
				
				factionDubious.detail = "faction.Dubious()";
				factionDubious.insertText = new vscode.SnippetString('Dubious()');
				factionDubious.documentation = new vscode.MarkdownString("");
				results.push(factionDubious);				
				
				const factionIndifferent = new vscode.CompletionItem('Indifferent', vscode.CompletionItemKind.Method);
				
				factionIndifferent.detail = "faction.Indifferent()";
				factionIndifferent.insertText = new vscode.SnippetString('Indifferent()');
				factionIndifferent.documentation = new vscode.MarkdownString("");
				results.push(factionIndifferent);				
				
				const factionKindly = new vscode.CompletionItem('Kindly', vscode.CompletionItemKind.Method);
				
				factionKindly.detail = "faction.Kindly()";
				factionKindly.insertText = new vscode.SnippetString('Kindly()');
				factionKindly.documentation = new vscode.MarkdownString("");
				results.push(factionKindly);				
				
				const factionScowls = new vscode.CompletionItem('Scowls', vscode.CompletionItemKind.Method);
				
				factionScowls.detail = "faction.Scowls()";
				factionScowls.insertText = new vscode.SnippetString('Scowls()');
				factionScowls.documentation = new vscode.MarkdownString("");
				results.push(factionScowls);				
				
				const factionThreatenly = new vscode.CompletionItem('Threatenly', vscode.CompletionItemKind.Method);
				
				factionThreatenly.detail = "faction.Threatenly()";
				factionThreatenly.insertText = new vscode.SnippetString('Threatenly()');
				factionThreatenly.documentation = new vscode.MarkdownString("");
				results.push(factionThreatenly);				
				
				const factionWarmly = new vscode.CompletionItem('Warmly', vscode.CompletionItemKind.Method);
				
				factionWarmly.detail = "faction.Warmly()";
				factionWarmly.insertText = new vscode.SnippetString('Warmly()');
				factionWarmly.documentation = new vscode.MarkdownString("");
				results.push(factionWarmly);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('filter.')) {
					return undefined;
				}
				
				
				const filterAuctions = new vscode.CompletionItem('Auctions', vscode.CompletionItemKind.Property);
				
				filterAuctions.detail = "filter.Auctions";
				filterAuctions.insertText = new vscode.SnippetString('Auctions');
				filterAuctions.documentation = new vscode.MarkdownString("");
				results.push(filterAuctions);				
				
				const filterBadWords = new vscode.CompletionItem('BadWords', vscode.CompletionItemKind.Property);
				
				filterBadWords.detail = "filter.BadWords";
				filterBadWords.insertText = new vscode.SnippetString('BadWords');
				filterBadWords.documentation = new vscode.MarkdownString("");
				results.push(filterBadWords);				
				
				const filterBardSongs = new vscode.CompletionItem('BardSongs', vscode.CompletionItemKind.Property);
				
				filterBardSongs.detail = "filter.BardSongs";
				filterBardSongs.insertText = new vscode.SnippetString('BardSongs');
				filterBardSongs.documentation = new vscode.MarkdownString("");
				results.push(filterBardSongs);				
				
				const filterDamageShields = new vscode.CompletionItem('DamageShields', vscode.CompletionItemKind.Property);
				
				filterDamageShields.detail = "filter.DamageShields";
				filterDamageShields.insertText = new vscode.SnippetString('DamageShields');
				filterDamageShields.documentation = new vscode.MarkdownString("");
				results.push(filterDamageShields);				
				
				const filterDOT = new vscode.CompletionItem('DOT', vscode.CompletionItemKind.Property);
				
				filterDOT.detail = "filter.DOT";
				filterDOT.insertText = new vscode.SnippetString('DOT');
				filterDOT.documentation = new vscode.MarkdownString("");
				results.push(filterDOT);				
				
				const filterFocusEffects = new vscode.CompletionItem('FocusEffects', vscode.CompletionItemKind.Property);
				
				filterFocusEffects.detail = "filter.FocusEffects";
				filterFocusEffects.insertText = new vscode.SnippetString('FocusEffects');
				filterFocusEffects.documentation = new vscode.MarkdownString("");
				results.push(filterFocusEffects);				
				
				const filterGroupChat = new vscode.CompletionItem('GroupChat', vscode.CompletionItemKind.Property);
				
				filterGroupChat.detail = "filter.GroupChat";
				filterGroupChat.insertText = new vscode.SnippetString('GroupChat');
				filterGroupChat.documentation = new vscode.MarkdownString("");
				results.push(filterGroupChat);				
				
				const filterGuildChat = new vscode.CompletionItem('GuildChat', vscode.CompletionItemKind.Property);
				
				filterGuildChat.detail = "filter.GuildChat";
				filterGuildChat.insertText = new vscode.SnippetString('GuildChat');
				filterGuildChat.documentation = new vscode.MarkdownString("");
				results.push(filterGuildChat);				
				
				const filterHealOverTime = new vscode.CompletionItem('HealOverTime', vscode.CompletionItemKind.Property);
				
				filterHealOverTime.detail = "filter.HealOverTime";
				filterHealOverTime.insertText = new vscode.SnippetString('HealOverTime');
				filterHealOverTime.documentation = new vscode.MarkdownString("");
				results.push(filterHealOverTime);				
				
				const filterMeleeCrits = new vscode.CompletionItem('MeleeCrits', vscode.CompletionItemKind.Property);
				
				filterMeleeCrits.detail = "filter.MeleeCrits";
				filterMeleeCrits.insertText = new vscode.SnippetString('MeleeCrits');
				filterMeleeCrits.documentation = new vscode.MarkdownString("");
				results.push(filterMeleeCrits);				
				
				const filterMissedMe = new vscode.CompletionItem('MissedMe', vscode.CompletionItemKind.Property);
				
				filterMissedMe.detail = "filter.MissedMe";
				filterMissedMe.insertText = new vscode.SnippetString('MissedMe');
				filterMissedMe.documentation = new vscode.MarkdownString("");
				results.push(filterMissedMe);				
				
				const filterMyMisses = new vscode.CompletionItem('MyMisses', vscode.CompletionItemKind.Property);
				
				filterMyMisses.detail = "filter.MyMisses";
				filterMyMisses.insertText = new vscode.SnippetString('MyMisses');
				filterMyMisses.documentation = new vscode.MarkdownString("");
				results.push(filterMyMisses);				
				
				const filterNone = new vscode.CompletionItem('None', vscode.CompletionItemKind.Property);
				
				filterNone.detail = "filter.None";
				filterNone.insertText = new vscode.SnippetString('None');
				filterNone.documentation = new vscode.MarkdownString("");
				results.push(filterNone);				
				
				const filterNPCSpells = new vscode.CompletionItem('NPCSpells', vscode.CompletionItemKind.Property);
				
				filterNPCSpells.detail = "filter.NPCSpells";
				filterNPCSpells.insertText = new vscode.SnippetString('NPCSpells');
				filterNPCSpells.documentation = new vscode.MarkdownString("");
				results.push(filterNPCSpells);				
				
				const filterOOC = new vscode.CompletionItem('OOC', vscode.CompletionItemKind.Property);
				
				filterOOC.detail = "filter.OOC";
				filterOOC.insertText = new vscode.SnippetString('OOC');
				filterOOC.documentation = new vscode.MarkdownString("");
				results.push(filterOOC);				
				
				const filterOthersHit = new vscode.CompletionItem('OthersHit', vscode.CompletionItemKind.Property);
				
				filterOthersHit.detail = "filter.OthersHit";
				filterOthersHit.insertText = new vscode.SnippetString('OthersHit');
				filterOthersHit.documentation = new vscode.MarkdownString("");
				results.push(filterOthersHit);				
				
				const filterOthersMiss = new vscode.CompletionItem('OthersMiss', vscode.CompletionItemKind.Property);
				
				filterOthersMiss.detail = "filter.OthersMiss";
				filterOthersMiss.insertText = new vscode.SnippetString('OthersMiss');
				filterOthersMiss.documentation = new vscode.MarkdownString("");
				results.push(filterOthersMiss);				
				
				const filterPCSpells = new vscode.CompletionItem('PCSpells', vscode.CompletionItemKind.Property);
				
				filterPCSpells.detail = "filter.PCSpells";
				filterPCSpells.insertText = new vscode.SnippetString('PCSpells');
				filterPCSpells.documentation = new vscode.MarkdownString("");
				results.push(filterPCSpells);				
				
				const filterPetHits = new vscode.CompletionItem('PetHits', vscode.CompletionItemKind.Property);
				
				filterPetHits.detail = "filter.PetHits";
				filterPetHits.insertText = new vscode.SnippetString('PetHits');
				filterPetHits.documentation = new vscode.MarkdownString("");
				results.push(filterPetHits);				
				
				const filterPetMisses = new vscode.CompletionItem('PetMisses', vscode.CompletionItemKind.Property);
				
				filterPetMisses.detail = "filter.PetMisses";
				filterPetMisses.insertText = new vscode.SnippetString('PetMisses');
				filterPetMisses.documentation = new vscode.MarkdownString("");
				results.push(filterPetMisses);				
				
				const filterPetSpells = new vscode.CompletionItem('PetSpells', vscode.CompletionItemKind.Property);
				
				filterPetSpells.detail = "filter.PetSpells";
				filterPetSpells.insertText = new vscode.SnippetString('PetSpells');
				filterPetSpells.documentation = new vscode.MarkdownString("");
				results.push(filterPetSpells);				
				
				const filterShouts = new vscode.CompletionItem('Shouts', vscode.CompletionItemKind.Property);
				
				filterShouts.detail = "filter.Shouts";
				filterShouts.insertText = new vscode.SnippetString('Shouts');
				filterShouts.documentation = new vscode.MarkdownString("");
				results.push(filterShouts);				
				
				const filterSocials = new vscode.CompletionItem('Socials', vscode.CompletionItemKind.Property);
				
				filterSocials.detail = "filter.Socials";
				filterSocials.insertText = new vscode.SnippetString('Socials');
				filterSocials.documentation = new vscode.MarkdownString("");
				results.push(filterSocials);				
				
				const filterSpellCrits = new vscode.CompletionItem('SpellCrits', vscode.CompletionItemKind.Property);
				
				filterSpellCrits.detail = "filter.SpellCrits";
				filterSpellCrits.insertText = new vscode.SnippetString('SpellCrits');
				filterSpellCrits.documentation = new vscode.MarkdownString("");
				results.push(filterSpellCrits);				
				
				const filterSpellDamage = new vscode.CompletionItem('SpellDamage', vscode.CompletionItemKind.Property);
				
				filterSpellDamage.detail = "filter.SpellDamage";
				filterSpellDamage.insertText = new vscode.SnippetString('SpellDamage');
				filterSpellDamage.documentation = new vscode.MarkdownString("");
				results.push(filterSpellDamage);				
				
				const filterUnknown25 = new vscode.CompletionItem('Unknown25', vscode.CompletionItemKind.Property);
				
				filterUnknown25.detail = "filter.Unknown25";
				filterUnknown25.insertText = new vscode.SnippetString('Unknown25');
				filterUnknown25.documentation = new vscode.MarkdownString("");
				results.push(filterUnknown25);				
				
				const filterUnknown26 = new vscode.CompletionItem('Unknown26', vscode.CompletionItemKind.Property);
				
				filterUnknown26.detail = "filter.Unknown26";
				filterUnknown26.insertText = new vscode.SnippetString('Unknown26');
				filterUnknown26.documentation = new vscode.MarkdownString("");
				results.push(filterUnknown26);				
				
				const filterUnknown27 = new vscode.CompletionItem('Unknown27', vscode.CompletionItemKind.Property);
				
				filterUnknown27.detail = "filter.Unknown27";
				filterUnknown27.insertText = new vscode.SnippetString('Unknown27');
				filterUnknown27.documentation = new vscode.MarkdownString("");
				results.push(filterUnknown27);				
				
				const filterUnknown28 = new vscode.CompletionItem('Unknown28', vscode.CompletionItemKind.Property);
				
				filterUnknown28.detail = "filter.Unknown28";
				filterUnknown28.insertText = new vscode.SnippetString('Unknown28');
				filterUnknown28.documentation = new vscode.MarkdownString("");
				results.push(filterUnknown28);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('group.')) {
					return undefined;
				}
				
				
				const groupCastGroupSpell = new vscode.CompletionItem('CastGroupSpell', vscode.CompletionItemKind.Method);
				
				groupCastGroupSpell.detail = "group.CastGroupSpell()";
				groupCastGroupSpell.insertText = new vscode.SnippetString('CastGroupSpell()');
				groupCastGroupSpell.documentation = new vscode.MarkdownString("");
				results.push(groupCastGroupSpell);				
				
				const groupDisbandGroup = new vscode.CompletionItem('DisbandGroup', vscode.CompletionItemKind.Method);
				
				groupDisbandGroup.detail = "group.DisbandGroup()";
				groupDisbandGroup.insertText = new vscode.SnippetString('DisbandGroup()');
				groupDisbandGroup.documentation = new vscode.MarkdownString("");
				results.push(groupDisbandGroup);				
				
				const groupGetHighestLevel = new vscode.CompletionItem('GetHighestLevel', vscode.CompletionItemKind.Method);
				
				groupGetHighestLevel.detail = "group.GetHighestLevel()";
				groupGetHighestLevel.insertText = new vscode.SnippetString('GetHighestLevel()');
				groupGetHighestLevel.documentation = new vscode.MarkdownString("");
				results.push(groupGetHighestLevel);				
				
				const groupGetID = new vscode.CompletionItem('GetID', vscode.CompletionItemKind.Method);
				
				groupGetID.detail = "group.GetID()";
				groupGetID.insertText = new vscode.SnippetString('GetID()');
				groupGetID.documentation = new vscode.MarkdownString("");
				results.push(groupGetID);				
				
				const groupGetLeader = new vscode.CompletionItem('GetLeader', vscode.CompletionItemKind.Method);
				
				groupGetLeader.detail = "group.GetLeader()";
				groupGetLeader.insertText = new vscode.SnippetString('GetLeader()');
				groupGetLeader.documentation = new vscode.MarkdownString("");
				results.push(groupGetLeader);				
				
				const groupGetLeaderName = new vscode.CompletionItem('GetLeaderName', vscode.CompletionItemKind.Method);
				
				groupGetLeaderName.detail = "group.GetLeaderName()";
				groupGetLeaderName.insertText = new vscode.SnippetString('GetLeaderName()');
				groupGetLeaderName.documentation = new vscode.MarkdownString("");
				results.push(groupGetLeaderName);				
				
				const groupGetLowestLevel = new vscode.CompletionItem('GetLowestLevel', vscode.CompletionItemKind.Method);
				
				groupGetLowestLevel.detail = "group.GetLowestLevel()";
				groupGetLowestLevel.insertText = new vscode.SnippetString('GetLowestLevel()');
				groupGetLowestLevel.documentation = new vscode.MarkdownString("");
				results.push(groupGetLowestLevel);				
				
				const groupGetMember = new vscode.CompletionItem('GetMember', vscode.CompletionItemKind.Method);
				
				groupGetMember.detail = "group.GetMember()";
				groupGetMember.insertText = new vscode.SnippetString('GetMember()');
				groupGetMember.documentation = new vscode.MarkdownString("");
				results.push(groupGetMember);				
				
				const groupGetTotalGroupDamage = new vscode.CompletionItem('GetTotalGroupDamage', vscode.CompletionItemKind.Method);
				
				groupGetTotalGroupDamage.detail = "group.GetTotalGroupDamage()";
				groupGetTotalGroupDamage.insertText = new vscode.SnippetString('GetTotalGroupDamage()');
				groupGetTotalGroupDamage.documentation = new vscode.MarkdownString("");
				results.push(groupGetTotalGroupDamage);				
				
				const groupGroupCount = new vscode.CompletionItem('GroupCount', vscode.CompletionItemKind.Method);
				
				groupGroupCount.detail = "group.GroupCount()";
				groupGroupCount.insertText = new vscode.SnippetString('GroupCount()');
				groupGroupCount.documentation = new vscode.MarkdownString("");
				results.push(groupGroupCount);				
				
				const groupGroupMessage = new vscode.CompletionItem('GroupMessage', vscode.CompletionItemKind.Method);
				
				groupGroupMessage.detail = "group.GroupMessage()";
				groupGroupMessage.insertText = new vscode.SnippetString('GroupMessage()');
				groupGroupMessage.documentation = new vscode.MarkdownString("");
				results.push(groupGroupMessage);				
				
				const groupIsGroupMember = new vscode.CompletionItem('IsGroupMember', vscode.CompletionItemKind.Method);
				
				groupIsGroupMember.detail = "group.IsGroupMember()";
				groupIsGroupMember.insertText = new vscode.SnippetString('IsGroupMember()');
				groupIsGroupMember.documentation = new vscode.MarkdownString("");
				results.push(groupIsGroupMember);				
				
				const groupIsLeader = new vscode.CompletionItem('IsLeader', vscode.CompletionItemKind.Method);
				
				groupIsLeader.detail = "group.IsLeader()";
				groupIsLeader.insertText = new vscode.SnippetString('IsLeader()');
				groupIsLeader.documentation = new vscode.MarkdownString("");
				results.push(groupIsLeader);				
				
				const groupSetLeader = new vscode.CompletionItem('SetLeader', vscode.CompletionItemKind.Method);
				
				groupSetLeader.detail = "group.SetLeader()";
				groupSetLeader.insertText = new vscode.SnippetString('SetLeader()');
				groupSetLeader.documentation = new vscode.MarkdownString("");
				results.push(groupSetLeader);				
				
				const groupSplitExp = new vscode.CompletionItem('SplitExp', vscode.CompletionItemKind.Method);
				
				groupSplitExp.detail = "group.SplitExp()";
				groupSplitExp.insertText = new vscode.SnippetString('SplitExp()');
				groupSplitExp.documentation = new vscode.MarkdownString("");
				results.push(groupSplitExp);				
				
				const groupSplitMoney = new vscode.CompletionItem('SplitMoney', vscode.CompletionItemKind.Method);
				
				groupSplitMoney.detail = "group.SplitMoney()";
				groupSplitMoney.insertText = new vscode.SnippetString('SplitMoney()');
				groupSplitMoney.documentation = new vscode.MarkdownString("");
				results.push(groupSplitMoney);				
				
				const groupTeleportGroup = new vscode.CompletionItem('TeleportGroup', vscode.CompletionItemKind.Method);
				
				groupTeleportGroup.detail = "group.TeleportGroup()";
				groupTeleportGroup.insertText = new vscode.SnippetString('TeleportGroup()');
				groupTeleportGroup.documentation = new vscode.MarkdownString("");
				results.push(groupTeleportGroup);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('hate_list.')) {
					return undefined;
				}
				
				
				const hatelistEntries = new vscode.CompletionItem('Entries', vscode.CompletionItemKind.Method);
				
				hatelistEntries.detail = "hate_list.Entries()";
				hatelistEntries.insertText = new vscode.SnippetString('Entries()');
				hatelistEntries.documentation = new vscode.MarkdownString("");
				results.push(hatelistEntries);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('inventory.')) {
					return undefined;
				}
				
				
				const inventoryCalcBagIdx = new vscode.CompletionItem('CalcBagIdx', vscode.CompletionItemKind.Method);
				
				inventoryCalcBagIdx.detail = "inventory.CalcBagIdx()";
				inventoryCalcBagIdx.insertText = new vscode.SnippetString('CalcBagIdx()');
				inventoryCalcBagIdx.documentation = new vscode.MarkdownString("");
				results.push(inventoryCalcBagIdx);				
				
				const inventoryCalcMaterialFromSlot = new vscode.CompletionItem('CalcMaterialFromSlot', vscode.CompletionItemKind.Method);
				
				inventoryCalcMaterialFromSlot.detail = "inventory.CalcMaterialFromSlot()";
				inventoryCalcMaterialFromSlot.insertText = new vscode.SnippetString('CalcMaterialFromSlot()');
				inventoryCalcMaterialFromSlot.documentation = new vscode.MarkdownString("");
				results.push(inventoryCalcMaterialFromSlot);				
				
				const inventoryCalcSlotFromMaterial = new vscode.CompletionItem('CalcSlotFromMaterial', vscode.CompletionItemKind.Method);
				
				inventoryCalcSlotFromMaterial.detail = "inventory.CalcSlotFromMaterial()";
				inventoryCalcSlotFromMaterial.insertText = new vscode.SnippetString('CalcSlotFromMaterial()');
				inventoryCalcSlotFromMaterial.documentation = new vscode.MarkdownString("");
				results.push(inventoryCalcSlotFromMaterial);				
				
				const inventoryCalcSlotId = new vscode.CompletionItem('CalcSlotId', vscode.CompletionItemKind.Method);
				
				inventoryCalcSlotId.detail = "inventory.CalcSlotId()";
				inventoryCalcSlotId.insertText = new vscode.SnippetString('CalcSlotId()');
				inventoryCalcSlotId.documentation = new vscode.MarkdownString("");
				results.push(inventoryCalcSlotId);				
				
				const inventoryCanItemFitInContainer = new vscode.CompletionItem('CanItemFitInContainer', vscode.CompletionItemKind.Method);
				
				inventoryCanItemFitInContainer.detail = "inventory.CanItemFitInContainer()";
				inventoryCanItemFitInContainer.insertText = new vscode.SnippetString('CanItemFitInContainer()');
				inventoryCanItemFitInContainer.documentation = new vscode.MarkdownString("");
				results.push(inventoryCanItemFitInContainer);				
				
				const inventoryCheckNoDrop = new vscode.CompletionItem('CheckNoDrop', vscode.CompletionItemKind.Method);
				
				inventoryCheckNoDrop.detail = "inventory.CheckNoDrop()";
				inventoryCheckNoDrop.insertText = new vscode.SnippetString('CheckNoDrop()');
				inventoryCheckNoDrop.documentation = new vscode.MarkdownString("");
				results.push(inventoryCheckNoDrop);				
				
				const inventoryDeleteItem = new vscode.CompletionItem('DeleteItem', vscode.CompletionItemKind.Method);
				
				inventoryDeleteItem.detail = "inventory.DeleteItem()";
				inventoryDeleteItem.insertText = new vscode.SnippetString('DeleteItem()');
				inventoryDeleteItem.documentation = new vscode.MarkdownString("");
				results.push(inventoryDeleteItem);				
				
				const inventoryFindFreeSlot = new vscode.CompletionItem('FindFreeSlot', vscode.CompletionItemKind.Method);
				
				inventoryFindFreeSlot.detail = "inventory.FindFreeSlot()";
				inventoryFindFreeSlot.insertText = new vscode.SnippetString('FindFreeSlot()');
				inventoryFindFreeSlot.documentation = new vscode.MarkdownString("");
				results.push(inventoryFindFreeSlot);				
				
				const inventoryGetItem = new vscode.CompletionItem('GetItem', vscode.CompletionItemKind.Method);
				
				inventoryGetItem.detail = "inventory.GetItem()";
				inventoryGetItem.insertText = new vscode.SnippetString('GetItem()');
				inventoryGetItem.documentation = new vscode.MarkdownString("");
				results.push(inventoryGetItem);				
				
				const inventoryGetSlotByItemInst = new vscode.CompletionItem('GetSlotByItemInst', vscode.CompletionItemKind.Method);
				
				inventoryGetSlotByItemInst.detail = "inventory.GetSlotByItemInst()";
				inventoryGetSlotByItemInst.insertText = new vscode.SnippetString('GetSlotByItemInst()');
				inventoryGetSlotByItemInst.documentation = new vscode.MarkdownString("");
				results.push(inventoryGetSlotByItemInst);				
				
				const inventoryHasItem = new vscode.CompletionItem('HasItem', vscode.CompletionItemKind.Method);
				
				inventoryHasItem.detail = "inventory.HasItem()";
				inventoryHasItem.insertText = new vscode.SnippetString('HasItem()');
				inventoryHasItem.documentation = new vscode.MarkdownString("");
				results.push(inventoryHasItem);				
				
				const inventoryHasItemByLoreGroup = new vscode.CompletionItem('HasItemByLoreGroup', vscode.CompletionItemKind.Method);
				
				inventoryHasItemByLoreGroup.detail = "inventory.HasItemByLoreGroup()";
				inventoryHasItemByLoreGroup.insertText = new vscode.SnippetString('HasItemByLoreGroup()');
				inventoryHasItemByLoreGroup.documentation = new vscode.MarkdownString("");
				results.push(inventoryHasItemByLoreGroup);				
				
				const inventoryHasItemByUse = new vscode.CompletionItem('HasItemByUse', vscode.CompletionItemKind.Method);
				
				inventoryHasItemByUse.detail = "inventory.HasItemByUse()";
				inventoryHasItemByUse.insertText = new vscode.SnippetString('HasItemByUse()');
				inventoryHasItemByUse.documentation = new vscode.MarkdownString("");
				results.push(inventoryHasItemByUse);				
				
				const inventoryHasSpaceForItem = new vscode.CompletionItem('HasSpaceForItem', vscode.CompletionItemKind.Method);
				
				inventoryHasSpaceForItem.detail = "inventory.HasSpaceForItem()";
				inventoryHasSpaceForItem.insertText = new vscode.SnippetString('HasSpaceForItem()');
				inventoryHasSpaceForItem.documentation = new vscode.MarkdownString("");
				results.push(inventoryHasSpaceForItem);				
				
				const inventoryPopItem = new vscode.CompletionItem('PopItem', vscode.CompletionItemKind.Method);
				
				inventoryPopItem.detail = "inventory.PopItem()";
				inventoryPopItem.insertText = new vscode.SnippetString('PopItem()');
				inventoryPopItem.documentation = new vscode.MarkdownString("");
				results.push(inventoryPopItem);				
				
				const inventoryPushCursor = new vscode.CompletionItem('PushCursor', vscode.CompletionItemKind.Method);
				
				inventoryPushCursor.detail = "inventory.PushCursor()";
				inventoryPushCursor.insertText = new vscode.SnippetString('PushCursor()');
				inventoryPushCursor.documentation = new vscode.MarkdownString("");
				results.push(inventoryPushCursor);				
				
				const inventoryPutItem = new vscode.CompletionItem('PutItem', vscode.CompletionItemKind.Method);
				
				inventoryPutItem.detail = "inventory.PutItem()";
				inventoryPutItem.insertText = new vscode.SnippetString('PutItem()');
				inventoryPutItem.documentation = new vscode.MarkdownString("");
				results.push(inventoryPutItem);				
				
				const inventorySupportsContainers = new vscode.CompletionItem('SupportsContainers', vscode.CompletionItemKind.Method);
				
				inventorySupportsContainers.detail = "inventory.SupportsContainers()";
				inventorySupportsContainers.insertText = new vscode.SnippetString('SupportsContainers()');
				inventorySupportsContainers.documentation = new vscode.MarkdownString("");
				results.push(inventorySupportsContainers);				
				
				const inventorySwapItem = new vscode.CompletionItem('SwapItem', vscode.CompletionItemKind.Method);
				
				inventorySwapItem.detail = "inventory.SwapItem()";
				inventorySwapItem.insertText = new vscode.SnippetString('SwapItem()');
				inventorySwapItem.documentation = new vscode.MarkdownString("");
				results.push(inventorySwapItem);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('inventory_where.')) {
					return undefined;
				}
				
				
				const inventorywhereBank = new vscode.CompletionItem('Bank', vscode.CompletionItemKind.Method);
				
				inventorywhereBank.detail = "inventory_where.Bank()";
				inventorywhereBank.insertText = new vscode.SnippetString('Bank()');
				inventorywhereBank.documentation = new vscode.MarkdownString("");
				results.push(inventorywhereBank);				
				
				const inventorywhereCursor = new vscode.CompletionItem('Cursor', vscode.CompletionItemKind.Method);
				
				inventorywhereCursor.detail = "inventory_where.Cursor()";
				inventorywhereCursor.insertText = new vscode.SnippetString('Cursor()');
				inventorywhereCursor.documentation = new vscode.MarkdownString("");
				results.push(inventorywhereCursor);				
				
				const inventorywherePersonal = new vscode.CompletionItem('Personal', vscode.CompletionItemKind.Method);
				
				inventorywherePersonal.detail = "inventory_where.Personal()";
				inventorywherePersonal.insertText = new vscode.SnippetString('Personal()');
				inventorywherePersonal.documentation = new vscode.MarkdownString("");
				results.push(inventorywherePersonal);				
				
				const inventorywhereSharedBank = new vscode.CompletionItem('SharedBank', vscode.CompletionItemKind.Method);
				
				inventorywhereSharedBank.detail = "inventory_where.SharedBank()";
				inventorywhereSharedBank.insertText = new vscode.SnippetString('SharedBank()');
				inventorywhereSharedBank.documentation = new vscode.MarkdownString("");
				results.push(inventorywhereSharedBank);				
				
				const inventorywhereTrading = new vscode.CompletionItem('Trading', vscode.CompletionItemKind.Method);
				
				inventorywhereTrading.detail = "inventory_where.Trading()";
				inventorywhereTrading.insertText = new vscode.SnippetString('Trading()');
				inventorywhereTrading.documentation = new vscode.MarkdownString("");
				results.push(inventorywhereTrading);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('item.')) {
					return undefined;
				}
				
				
				const itemAAgi = new vscode.CompletionItem('AAgi', vscode.CompletionItemKind.Method);
				
				itemAAgi.detail = "item.AAgi()";
				itemAAgi.insertText = new vscode.SnippetString('AAgi()');
				itemAAgi.documentation = new vscode.MarkdownString("");
				results.push(itemAAgi);				
				
				const itemAC = new vscode.CompletionItem('AC', vscode.CompletionItemKind.Method);
				
				itemAC.detail = "item.AC()";
				itemAC.insertText = new vscode.SnippetString('AC()');
				itemAC.documentation = new vscode.MarkdownString("");
				results.push(itemAC);				
				
				const itemAccuracy = new vscode.CompletionItem('Accuracy', vscode.CompletionItemKind.Method);
				
				itemAccuracy.detail = "item.Accuracy()";
				itemAccuracy.insertText = new vscode.SnippetString('Accuracy()');
				itemAccuracy.documentation = new vscode.MarkdownString("");
				results.push(itemAccuracy);				
				
				const itemACha = new vscode.CompletionItem('ACha', vscode.CompletionItemKind.Method);
				
				itemACha.detail = "item.ACha()";
				itemACha.insertText = new vscode.SnippetString('ACha()');
				itemACha.documentation = new vscode.MarkdownString("");
				results.push(itemACha);				
				
				const itemADex = new vscode.CompletionItem('ADex', vscode.CompletionItemKind.Method);
				
				itemADex.detail = "item.ADex()";
				itemADex.insertText = new vscode.SnippetString('ADex()');
				itemADex.documentation = new vscode.MarkdownString("");
				results.push(itemADex);				
				
				const itemAInt = new vscode.CompletionItem('AInt', vscode.CompletionItemKind.Method);
				
				itemAInt.detail = "item.AInt()";
				itemAInt.insertText = new vscode.SnippetString('AInt()');
				itemAInt.documentation = new vscode.MarkdownString("");
				results.push(itemAInt);				
				
				const itemArtifactFlag = new vscode.CompletionItem('ArtifactFlag', vscode.CompletionItemKind.Method);
				
				itemArtifactFlag.detail = "item.ArtifactFlag()";
				itemArtifactFlag.insertText = new vscode.SnippetString('ArtifactFlag()');
				itemArtifactFlag.documentation = new vscode.MarkdownString("");
				results.push(itemArtifactFlag);				
				
				const itemASta = new vscode.CompletionItem('ASta', vscode.CompletionItemKind.Method);
				
				itemASta.detail = "item.ASta()";
				itemASta.insertText = new vscode.SnippetString('ASta()');
				itemASta.documentation = new vscode.MarkdownString("");
				results.push(itemASta);				
				
				const itemAStr = new vscode.CompletionItem('AStr', vscode.CompletionItemKind.Method);
				
				itemAStr.detail = "item.AStr()";
				itemAStr.insertText = new vscode.SnippetString('AStr()');
				itemAStr.documentation = new vscode.MarkdownString("");
				results.push(itemAStr);				
				
				const itemAttack = new vscode.CompletionItem('Attack', vscode.CompletionItemKind.Method);
				
				itemAttack.detail = "item.Attack()";
				itemAttack.insertText = new vscode.SnippetString('Attack()');
				itemAttack.documentation = new vscode.MarkdownString("");
				results.push(itemAttack);				
				
				const itemAttuneable = new vscode.CompletionItem('Attuneable', vscode.CompletionItemKind.Method);
				
				itemAttuneable.detail = "item.Attuneable()";
				itemAttuneable.insertText = new vscode.SnippetString('Attuneable()');
				itemAttuneable.documentation = new vscode.MarkdownString("");
				results.push(itemAttuneable);				
				
				const itemAugDistiller = new vscode.CompletionItem('AugDistiller', vscode.CompletionItemKind.Method);
				
				itemAugDistiller.detail = "item.AugDistiller()";
				itemAugDistiller.insertText = new vscode.SnippetString('AugDistiller()');
				itemAugDistiller.documentation = new vscode.MarkdownString("");
				results.push(itemAugDistiller);				
				
				const itemAugRestrict = new vscode.CompletionItem('AugRestrict', vscode.CompletionItemKind.Method);
				
				itemAugRestrict.detail = "item.AugRestrict()";
				itemAugRestrict.insertText = new vscode.SnippetString('AugRestrict()');
				itemAugRestrict.documentation = new vscode.MarkdownString("");
				results.push(itemAugRestrict);				
				
				const itemAugSlotType = new vscode.CompletionItem('AugSlotType', vscode.CompletionItemKind.Method);
				
				itemAugSlotType.detail = "item.AugSlotType()";
				itemAugSlotType.insertText = new vscode.SnippetString('AugSlotType()');
				itemAugSlotType.documentation = new vscode.MarkdownString("");
				results.push(itemAugSlotType);				
				
				const itemAugSlotVisible = new vscode.CompletionItem('AugSlotVisible', vscode.CompletionItemKind.Method);
				
				itemAugSlotVisible.detail = "item.AugSlotVisible()";
				itemAugSlotVisible.insertText = new vscode.SnippetString('AugSlotVisible()');
				itemAugSlotVisible.documentation = new vscode.MarkdownString("");
				results.push(itemAugSlotVisible);				
				
				const itemAugType = new vscode.CompletionItem('AugType', vscode.CompletionItemKind.Method);
				
				itemAugType.detail = "item.AugType()";
				itemAugType.insertText = new vscode.SnippetString('AugType()');
				itemAugType.documentation = new vscode.MarkdownString("");
				results.push(itemAugType);				
				
				const itemAvoidance = new vscode.CompletionItem('Avoidance', vscode.CompletionItemKind.Method);
				
				itemAvoidance.detail = "item.Avoidance()";
				itemAvoidance.insertText = new vscode.SnippetString('Avoidance()');
				itemAvoidance.documentation = new vscode.MarkdownString("");
				results.push(itemAvoidance);				
				
				const itemAWis = new vscode.CompletionItem('AWis', vscode.CompletionItemKind.Method);
				
				itemAWis.detail = "item.AWis()";
				itemAWis.insertText = new vscode.SnippetString('AWis()');
				itemAWis.documentation = new vscode.MarkdownString("");
				results.push(itemAWis);				
				
				const itemBackstabDmg = new vscode.CompletionItem('BackstabDmg', vscode.CompletionItemKind.Method);
				
				itemBackstabDmg.detail = "item.BackstabDmg()";
				itemBackstabDmg.insertText = new vscode.SnippetString('BackstabDmg()');
				itemBackstabDmg.documentation = new vscode.MarkdownString("");
				results.push(itemBackstabDmg);				
				
				const itemBagSize = new vscode.CompletionItem('BagSize', vscode.CompletionItemKind.Method);
				
				itemBagSize.detail = "item.BagSize()";
				itemBagSize.insertText = new vscode.SnippetString('BagSize()');
				itemBagSize.documentation = new vscode.MarkdownString("");
				results.push(itemBagSize);				
				
				const itemBagSlots = new vscode.CompletionItem('BagSlots', vscode.CompletionItemKind.Method);
				
				itemBagSlots.detail = "item.BagSlots()";
				itemBagSlots.insertText = new vscode.SnippetString('BagSlots()');
				itemBagSlots.documentation = new vscode.MarkdownString("");
				results.push(itemBagSlots);				
				
				const itemBagType = new vscode.CompletionItem('BagType', vscode.CompletionItemKind.Method);
				
				itemBagType.detail = "item.BagType()";
				itemBagType.insertText = new vscode.SnippetString('BagType()');
				itemBagType.documentation = new vscode.MarkdownString("");
				results.push(itemBagType);				
				
				const itemBagWR = new vscode.CompletionItem('BagWR', vscode.CompletionItemKind.Method);
				
				itemBagWR.detail = "item.BagWR()";
				itemBagWR.insertText = new vscode.SnippetString('BagWR()');
				itemBagWR.documentation = new vscode.MarkdownString("");
				results.push(itemBagWR);				
				
				const itemBaneDmgAmt = new vscode.CompletionItem('BaneDmgAmt', vscode.CompletionItemKind.Method);
				
				itemBaneDmgAmt.detail = "item.BaneDmgAmt()";
				itemBaneDmgAmt.insertText = new vscode.SnippetString('BaneDmgAmt()');
				itemBaneDmgAmt.documentation = new vscode.MarkdownString("");
				results.push(itemBaneDmgAmt);				
				
				const itemBaneDmgBody = new vscode.CompletionItem('BaneDmgBody', vscode.CompletionItemKind.Method);
				
				itemBaneDmgBody.detail = "item.BaneDmgBody()";
				itemBaneDmgBody.insertText = new vscode.SnippetString('BaneDmgBody()');
				itemBaneDmgBody.documentation = new vscode.MarkdownString("");
				results.push(itemBaneDmgBody);				
				
				const itemBaneDmgRace = new vscode.CompletionItem('BaneDmgRace', vscode.CompletionItemKind.Method);
				
				itemBaneDmgRace.detail = "item.BaneDmgRace()";
				itemBaneDmgRace.insertText = new vscode.SnippetString('BaneDmgRace()');
				itemBaneDmgRace.documentation = new vscode.MarkdownString("");
				results.push(itemBaneDmgRace);				
				
				const itemBaneDmgRaceAmt = new vscode.CompletionItem('BaneDmgRaceAmt', vscode.CompletionItemKind.Method);
				
				itemBaneDmgRaceAmt.detail = "item.BaneDmgRaceAmt()";
				itemBaneDmgRaceAmt.insertText = new vscode.SnippetString('BaneDmgRaceAmt()');
				itemBaneDmgRaceAmt.documentation = new vscode.MarkdownString("");
				results.push(itemBaneDmgRaceAmt);				
				
				const itemBardType = new vscode.CompletionItem('BardType', vscode.CompletionItemKind.Method);
				
				itemBardType.detail = "item.BardType()";
				itemBardType.insertText = new vscode.SnippetString('BardType()');
				itemBardType.documentation = new vscode.MarkdownString("");
				results.push(itemBardType);				
				
				const itemBardValue = new vscode.CompletionItem('BardValue', vscode.CompletionItemKind.Method);
				
				itemBardValue.detail = "item.BardValue()";
				itemBardValue.insertText = new vscode.SnippetString('BardValue()');
				itemBardValue.documentation = new vscode.MarkdownString("");
				results.push(itemBardValue);				
				
				const itemBenefitFlag = new vscode.CompletionItem('BenefitFlag', vscode.CompletionItemKind.Method);
				
				itemBenefitFlag.detail = "item.BenefitFlag()";
				itemBenefitFlag.insertText = new vscode.SnippetString('BenefitFlag()');
				itemBenefitFlag.documentation = new vscode.MarkdownString("");
				results.push(itemBenefitFlag);				
				
				const itemBook = new vscode.CompletionItem('Book', vscode.CompletionItemKind.Method);
				
				itemBook.detail = "item.Book()";
				itemBook.insertText = new vscode.SnippetString('Book()');
				itemBook.documentation = new vscode.MarkdownString("");
				results.push(itemBook);				
				
				const itemBookType = new vscode.CompletionItem('BookType', vscode.CompletionItemKind.Method);
				
				itemBookType.detail = "item.BookType()";
				itemBookType.insertText = new vscode.SnippetString('BookType()');
				itemBookType.documentation = new vscode.MarkdownString("");
				results.push(itemBookType);				
				
				const itemCastTime = new vscode.CompletionItem('CastTime', vscode.CompletionItemKind.Method);
				
				itemCastTime.detail = "item.CastTime()";
				itemCastTime.insertText = new vscode.SnippetString('CastTime()');
				itemCastTime.documentation = new vscode.MarkdownString("");
				results.push(itemCastTime);				
				
				const itemCharmFile = new vscode.CompletionItem('CharmFile', vscode.CompletionItemKind.Method);
				
				itemCharmFile.detail = "item.CharmFile()";
				itemCharmFile.insertText = new vscode.SnippetString('CharmFile()');
				itemCharmFile.documentation = new vscode.MarkdownString("");
				results.push(itemCharmFile);				
				
				const itemCharmFileID = new vscode.CompletionItem('CharmFileID', vscode.CompletionItemKind.Method);
				
				itemCharmFileID.detail = "item.CharmFileID()";
				itemCharmFileID.insertText = new vscode.SnippetString('CharmFileID()');
				itemCharmFileID.documentation = new vscode.MarkdownString("");
				results.push(itemCharmFileID);				
				
				const itemClairvoyance = new vscode.CompletionItem('Clairvoyance', vscode.CompletionItemKind.Method);
				
				itemClairvoyance.detail = "item.Clairvoyance()";
				itemClairvoyance.insertText = new vscode.SnippetString('Clairvoyance()');
				itemClairvoyance.documentation = new vscode.MarkdownString("");
				results.push(itemClairvoyance);				
				
				const itemClasses = new vscode.CompletionItem('Classes', vscode.CompletionItemKind.Method);
				
				itemClasses.detail = "item.Classes()";
				itemClasses.insertText = new vscode.SnippetString('Classes()');
				itemClasses.documentation = new vscode.MarkdownString("");
				results.push(itemClasses);				
				
				const itemClickName = new vscode.CompletionItem('ClickName', vscode.CompletionItemKind.Method);
				
				itemClickName.detail = "item.ClickName()";
				itemClickName.insertText = new vscode.SnippetString('ClickName()');
				itemClickName.documentation = new vscode.MarkdownString("");
				results.push(itemClickName);				
				
				const itemColor = new vscode.CompletionItem('Color', vscode.CompletionItemKind.Method);
				
				itemColor.detail = "item.Color()";
				itemColor.insertText = new vscode.SnippetString('Color()');
				itemColor.documentation = new vscode.MarkdownString("");
				results.push(itemColor);				
				
				const itemCombatEffects = new vscode.CompletionItem('CombatEffects', vscode.CompletionItemKind.Method);
				
				itemCombatEffects.detail = "item.CombatEffects()";
				itemCombatEffects.insertText = new vscode.SnippetString('CombatEffects()');
				itemCombatEffects.documentation = new vscode.MarkdownString("");
				results.push(itemCombatEffects);				
				
				const itemCR = new vscode.CompletionItem('CR', vscode.CompletionItemKind.Method);
				
				itemCR.detail = "item.CR()";
				itemCR.insertText = new vscode.SnippetString('CR()');
				itemCR.documentation = new vscode.MarkdownString("");
				results.push(itemCR);				
				
				const itemDamage = new vscode.CompletionItem('Damage', vscode.CompletionItemKind.Method);
				
				itemDamage.detail = "item.Damage()";
				itemDamage.insertText = new vscode.SnippetString('Damage()');
				itemDamage.documentation = new vscode.MarkdownString("");
				results.push(itemDamage);				
				
				const itemDamageShield = new vscode.CompletionItem('DamageShield', vscode.CompletionItemKind.Method);
				
				itemDamageShield.detail = "item.DamageShield()";
				itemDamageShield.insertText = new vscode.SnippetString('DamageShield()');
				itemDamageShield.documentation = new vscode.MarkdownString("");
				results.push(itemDamageShield);				
				
				const itemDeity = new vscode.CompletionItem('Deity', vscode.CompletionItemKind.Method);
				
				itemDeity.detail = "item.Deity()";
				itemDeity.insertText = new vscode.SnippetString('Deity()');
				itemDeity.documentation = new vscode.MarkdownString("");
				results.push(itemDeity);				
				
				const itemDelay = new vscode.CompletionItem('Delay', vscode.CompletionItemKind.Method);
				
				itemDelay.detail = "item.Delay()";
				itemDelay.insertText = new vscode.SnippetString('Delay()');
				itemDelay.documentation = new vscode.MarkdownString("");
				results.push(itemDelay);				
				
				const itemDotShielding = new vscode.CompletionItem('DotShielding', vscode.CompletionItemKind.Method);
				
				itemDotShielding.detail = "item.DotShielding()";
				itemDotShielding.insertText = new vscode.SnippetString('DotShielding()');
				itemDotShielding.documentation = new vscode.MarkdownString("");
				results.push(itemDotShielding);				
				
				const itemDR = new vscode.CompletionItem('DR', vscode.CompletionItemKind.Method);
				
				itemDR.detail = "item.DR()";
				itemDR.insertText = new vscode.SnippetString('DR()');
				itemDR.documentation = new vscode.MarkdownString("");
				results.push(itemDR);				
				
				const itemDSMitigation = new vscode.CompletionItem('DSMitigation', vscode.CompletionItemKind.Method);
				
				itemDSMitigation.detail = "item.DSMitigation()";
				itemDSMitigation.insertText = new vscode.SnippetString('DSMitigation()');
				itemDSMitigation.documentation = new vscode.MarkdownString("");
				results.push(itemDSMitigation);				
				
				const itemElemDmgAmt = new vscode.CompletionItem('ElemDmgAmt', vscode.CompletionItemKind.Method);
				
				itemElemDmgAmt.detail = "item.ElemDmgAmt()";
				itemElemDmgAmt.insertText = new vscode.SnippetString('ElemDmgAmt()');
				itemElemDmgAmt.documentation = new vscode.MarkdownString("");
				results.push(itemElemDmgAmt);				
				
				const itemElemDmgType = new vscode.CompletionItem('ElemDmgType', vscode.CompletionItemKind.Method);
				
				itemElemDmgType.detail = "item.ElemDmgType()";
				itemElemDmgType.insertText = new vscode.SnippetString('ElemDmgType()');
				itemElemDmgType.documentation = new vscode.MarkdownString("");
				results.push(itemElemDmgType);				
				
				const itemEliteMaterial = new vscode.CompletionItem('EliteMaterial', vscode.CompletionItemKind.Method);
				
				itemEliteMaterial.detail = "item.EliteMaterial()";
				itemEliteMaterial.insertText = new vscode.SnippetString('EliteMaterial()');
				itemEliteMaterial.documentation = new vscode.MarkdownString("");
				results.push(itemEliteMaterial);				
				
				const itemEndur = new vscode.CompletionItem('Endur', vscode.CompletionItemKind.Method);
				
				itemEndur.detail = "item.Endur()";
				itemEndur.insertText = new vscode.SnippetString('Endur()');
				itemEndur.documentation = new vscode.MarkdownString("");
				results.push(itemEndur);				
				
				const itemEnduranceRegen = new vscode.CompletionItem('EnduranceRegen', vscode.CompletionItemKind.Method);
				
				itemEnduranceRegen.detail = "item.EnduranceRegen()";
				itemEnduranceRegen.insertText = new vscode.SnippetString('EnduranceRegen()');
				itemEnduranceRegen.documentation = new vscode.MarkdownString("");
				results.push(itemEnduranceRegen);				
				
				const itemExpendableArrow = new vscode.CompletionItem('ExpendableArrow', vscode.CompletionItemKind.Method);
				
				itemExpendableArrow.detail = "item.ExpendableArrow()";
				itemExpendableArrow.insertText = new vscode.SnippetString('ExpendableArrow()');
				itemExpendableArrow.documentation = new vscode.MarkdownString("");
				results.push(itemExpendableArrow);				
				
				const itemExtraDmgAmt = new vscode.CompletionItem('ExtraDmgAmt', vscode.CompletionItemKind.Method);
				
				itemExtraDmgAmt.detail = "item.ExtraDmgAmt()";
				itemExtraDmgAmt.insertText = new vscode.SnippetString('ExtraDmgAmt()');
				itemExtraDmgAmt.documentation = new vscode.MarkdownString("");
				results.push(itemExtraDmgAmt);				
				
				const itemExtraDmgSkill = new vscode.CompletionItem('ExtraDmgSkill', vscode.CompletionItemKind.Method);
				
				itemExtraDmgSkill.detail = "item.ExtraDmgSkill()";
				itemExtraDmgSkill.insertText = new vscode.SnippetString('ExtraDmgSkill()');
				itemExtraDmgSkill.documentation = new vscode.MarkdownString("");
				results.push(itemExtraDmgSkill);				
				
				const itemFavor = new vscode.CompletionItem('Favor', vscode.CompletionItemKind.Method);
				
				itemFavor.detail = "item.Favor()";
				itemFavor.insertText = new vscode.SnippetString('Favor()');
				itemFavor.documentation = new vscode.MarkdownString("");
				results.push(itemFavor);				
				
				const itemFilename = new vscode.CompletionItem('Filename', vscode.CompletionItemKind.Method);
				
				itemFilename.detail = "item.Filename()";
				itemFilename.insertText = new vscode.SnippetString('Filename()');
				itemFilename.documentation = new vscode.MarkdownString("");
				results.push(itemFilename);				
				
				const itemFocusName = new vscode.CompletionItem('FocusName', vscode.CompletionItemKind.Method);
				
				itemFocusName.detail = "item.FocusName()";
				itemFocusName.insertText = new vscode.SnippetString('FocusName()');
				itemFocusName.documentation = new vscode.MarkdownString("");
				results.push(itemFocusName);				
				
				const itemFR = new vscode.CompletionItem('FR', vscode.CompletionItemKind.Method);
				
				itemFR.detail = "item.FR()";
				itemFR.insertText = new vscode.SnippetString('FR()');
				itemFR.documentation = new vscode.MarkdownString("");
				results.push(itemFR);				
				
				const itemFulfilment = new vscode.CompletionItem('Fulfilment', vscode.CompletionItemKind.Method);
				
				itemFulfilment.detail = "item.Fulfilment()";
				itemFulfilment.insertText = new vscode.SnippetString('Fulfilment()');
				itemFulfilment.documentation = new vscode.MarkdownString("");
				results.push(itemFulfilment);				
				
				const itemFVNoDrop = new vscode.CompletionItem('FVNoDrop', vscode.CompletionItemKind.Method);
				
				itemFVNoDrop.detail = "item.FVNoDrop()";
				itemFVNoDrop.insertText = new vscode.SnippetString('FVNoDrop()');
				itemFVNoDrop.documentation = new vscode.MarkdownString("");
				results.push(itemFVNoDrop);				
				
				const itemGuildFavor = new vscode.CompletionItem('GuildFavor', vscode.CompletionItemKind.Method);
				
				itemGuildFavor.detail = "item.GuildFavor()";
				itemGuildFavor.insertText = new vscode.SnippetString('GuildFavor()');
				itemGuildFavor.documentation = new vscode.MarkdownString("");
				results.push(itemGuildFavor);				
				
				const itemHaste = new vscode.CompletionItem('Haste', vscode.CompletionItemKind.Method);
				
				itemHaste.detail = "item.Haste()";
				itemHaste.insertText = new vscode.SnippetString('Haste()');
				itemHaste.documentation = new vscode.MarkdownString("");
				results.push(itemHaste);				
				
				const itemHealAmt = new vscode.CompletionItem('HealAmt', vscode.CompletionItemKind.Method);
				
				itemHealAmt.detail = "item.HealAmt()";
				itemHealAmt.insertText = new vscode.SnippetString('HealAmt()');
				itemHealAmt.documentation = new vscode.MarkdownString("");
				results.push(itemHealAmt);				
				
				const itemHeroicAgi = new vscode.CompletionItem('HeroicAgi', vscode.CompletionItemKind.Method);
				
				itemHeroicAgi.detail = "item.HeroicAgi()";
				itemHeroicAgi.insertText = new vscode.SnippetString('HeroicAgi()');
				itemHeroicAgi.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicAgi);				
				
				const itemHeroicCha = new vscode.CompletionItem('HeroicCha', vscode.CompletionItemKind.Method);
				
				itemHeroicCha.detail = "item.HeroicCha()";
				itemHeroicCha.insertText = new vscode.SnippetString('HeroicCha()');
				itemHeroicCha.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicCha);				
				
				const itemHeroicCR = new vscode.CompletionItem('HeroicCR', vscode.CompletionItemKind.Method);
				
				itemHeroicCR.detail = "item.HeroicCR()";
				itemHeroicCR.insertText = new vscode.SnippetString('HeroicCR()');
				itemHeroicCR.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicCR);				
				
				const itemHeroicDex = new vscode.CompletionItem('HeroicDex', vscode.CompletionItemKind.Method);
				
				itemHeroicDex.detail = "item.HeroicDex()";
				itemHeroicDex.insertText = new vscode.SnippetString('HeroicDex()');
				itemHeroicDex.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicDex);				
				
				const itemHeroicDR = new vscode.CompletionItem('HeroicDR', vscode.CompletionItemKind.Method);
				
				itemHeroicDR.detail = "item.HeroicDR()";
				itemHeroicDR.insertText = new vscode.SnippetString('HeroicDR()');
				itemHeroicDR.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicDR);				
				
				const itemHeroicFR = new vscode.CompletionItem('HeroicFR', vscode.CompletionItemKind.Method);
				
				itemHeroicFR.detail = "item.HeroicFR()";
				itemHeroicFR.insertText = new vscode.SnippetString('HeroicFR()');
				itemHeroicFR.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicFR);				
				
				const itemHeroicInt = new vscode.CompletionItem('HeroicInt', vscode.CompletionItemKind.Method);
				
				itemHeroicInt.detail = "item.HeroicInt()";
				itemHeroicInt.insertText = new vscode.SnippetString('HeroicInt()');
				itemHeroicInt.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicInt);				
				
				const itemHeroicMR = new vscode.CompletionItem('HeroicMR', vscode.CompletionItemKind.Method);
				
				itemHeroicMR.detail = "item.HeroicMR()";
				itemHeroicMR.insertText = new vscode.SnippetString('HeroicMR()');
				itemHeroicMR.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicMR);				
				
				const itemHeroicPR = new vscode.CompletionItem('HeroicPR', vscode.CompletionItemKind.Method);
				
				itemHeroicPR.detail = "item.HeroicPR()";
				itemHeroicPR.insertText = new vscode.SnippetString('HeroicPR()');
				itemHeroicPR.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicPR);				
				
				const itemHeroicSta = new vscode.CompletionItem('HeroicSta', vscode.CompletionItemKind.Method);
				
				itemHeroicSta.detail = "item.HeroicSta()";
				itemHeroicSta.insertText = new vscode.SnippetString('HeroicSta()');
				itemHeroicSta.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicSta);				
				
				const itemHeroicStr = new vscode.CompletionItem('HeroicStr', vscode.CompletionItemKind.Method);
				
				itemHeroicStr.detail = "item.HeroicStr()";
				itemHeroicStr.insertText = new vscode.SnippetString('HeroicStr()');
				itemHeroicStr.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicStr);				
				
				const itemHeroicSVCorrup = new vscode.CompletionItem('HeroicSVCorrup', vscode.CompletionItemKind.Method);
				
				itemHeroicSVCorrup.detail = "item.HeroicSVCorrup()";
				itemHeroicSVCorrup.insertText = new vscode.SnippetString('HeroicSVCorrup()');
				itemHeroicSVCorrup.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicSVCorrup);				
				
				const itemHeroicWis = new vscode.CompletionItem('HeroicWis', vscode.CompletionItemKind.Method);
				
				itemHeroicWis.detail = "item.HeroicWis()";
				itemHeroicWis.insertText = new vscode.SnippetString('HeroicWis()');
				itemHeroicWis.documentation = new vscode.MarkdownString("");
				results.push(itemHeroicWis);				
				
				const itemHP = new vscode.CompletionItem('HP', vscode.CompletionItemKind.Method);
				
				itemHP.detail = "item.HP()";
				itemHP.insertText = new vscode.SnippetString('HP()');
				itemHP.documentation = new vscode.MarkdownString("");
				results.push(itemHP);				
				
				const itemIcon = new vscode.CompletionItem('Icon', vscode.CompletionItemKind.Method);
				
				itemIcon.detail = "item.Icon()";
				itemIcon.insertText = new vscode.SnippetString('Icon()');
				itemIcon.documentation = new vscode.MarkdownString("");
				results.push(itemIcon);				
				
				const itemID = new vscode.CompletionItem('ID', vscode.CompletionItemKind.Method);
				
				itemID.detail = "item.ID()";
				itemID.insertText = new vscode.SnippetString('ID()');
				itemID.documentation = new vscode.MarkdownString("");
				results.push(itemID);				
				
				const itemIDFile = new vscode.CompletionItem('IDFile', vscode.CompletionItemKind.Method);
				
				itemIDFile.detail = "item.IDFile()";
				itemIDFile.insertText = new vscode.SnippetString('IDFile()');
				itemIDFile.documentation = new vscode.MarkdownString("");
				results.push(itemIDFile);				
				
				const itemItemClass = new vscode.CompletionItem('ItemClass', vscode.CompletionItemKind.Method);
				
				itemItemClass.detail = "item.ItemClass()";
				itemItemClass.insertText = new vscode.SnippetString('ItemClass()');
				itemItemClass.documentation = new vscode.MarkdownString("");
				results.push(itemItemClass);				
				
				const itemItemType = new vscode.CompletionItem('ItemType', vscode.CompletionItemKind.Method);
				
				itemItemType.detail = "item.ItemType()";
				itemItemType.insertText = new vscode.SnippetString('ItemType()');
				itemItemType.documentation = new vscode.MarkdownString("");
				results.push(itemItemType);				
				
				const itemLDoNPrice = new vscode.CompletionItem('LDoNPrice', vscode.CompletionItemKind.Method);
				
				itemLDoNPrice.detail = "item.LDoNPrice()";
				itemLDoNPrice.insertText = new vscode.SnippetString('LDoNPrice()');
				itemLDoNPrice.documentation = new vscode.MarkdownString("");
				results.push(itemLDoNPrice);				
				
				const itemLDoNSellBackRate = new vscode.CompletionItem('LDoNSellBackRate', vscode.CompletionItemKind.Method);
				
				itemLDoNSellBackRate.detail = "item.LDoNSellBackRate()";
				itemLDoNSellBackRate.insertText = new vscode.SnippetString('LDoNSellBackRate()');
				itemLDoNSellBackRate.documentation = new vscode.MarkdownString("");
				results.push(itemLDoNSellBackRate);				
				
				const itemLDoNSold = new vscode.CompletionItem('LDoNSold', vscode.CompletionItemKind.Method);
				
				itemLDoNSold.detail = "item.LDoNSold()";
				itemLDoNSold.insertText = new vscode.SnippetString('LDoNSold()');
				itemLDoNSold.documentation = new vscode.MarkdownString("");
				results.push(itemLDoNSold);				
				
				const itemLDoNTheme = new vscode.CompletionItem('LDoNTheme', vscode.CompletionItemKind.Method);
				
				itemLDoNTheme.detail = "item.LDoNTheme()";
				itemLDoNTheme.insertText = new vscode.SnippetString('LDoNTheme()');
				itemLDoNTheme.documentation = new vscode.MarkdownString("");
				results.push(itemLDoNTheme);				
				
				const itemLight = new vscode.CompletionItem('Light', vscode.CompletionItemKind.Method);
				
				itemLight.detail = "item.Light()";
				itemLight.insertText = new vscode.SnippetString('Light()');
				itemLight.documentation = new vscode.MarkdownString("");
				results.push(itemLight);				
				
				const itemLore = new vscode.CompletionItem('Lore', vscode.CompletionItemKind.Method);
				
				itemLore.detail = "item.Lore()";
				itemLore.insertText = new vscode.SnippetString('Lore()');
				itemLore.documentation = new vscode.MarkdownString("");
				results.push(itemLore);				
				
				const itemLoreFlag = new vscode.CompletionItem('LoreFlag', vscode.CompletionItemKind.Method);
				
				itemLoreFlag.detail = "item.LoreFlag()";
				itemLoreFlag.insertText = new vscode.SnippetString('LoreFlag()');
				itemLoreFlag.documentation = new vscode.MarkdownString("");
				results.push(itemLoreFlag);				
				
				const itemLoreGroup = new vscode.CompletionItem('LoreGroup', vscode.CompletionItemKind.Method);
				
				itemLoreGroup.detail = "item.LoreGroup()";
				itemLoreGroup.insertText = new vscode.SnippetString('LoreGroup()');
				itemLoreGroup.documentation = new vscode.MarkdownString("");
				results.push(itemLoreGroup);				
				
				const itemMagic = new vscode.CompletionItem('Magic', vscode.CompletionItemKind.Method);
				
				itemMagic.detail = "item.Magic()";
				itemMagic.insertText = new vscode.SnippetString('Magic()');
				itemMagic.documentation = new vscode.MarkdownString("");
				results.push(itemMagic);				
				
				const itemMana = new vscode.CompletionItem('Mana', vscode.CompletionItemKind.Method);
				
				itemMana.detail = "item.Mana()";
				itemMana.insertText = new vscode.SnippetString('Mana()');
				itemMana.documentation = new vscode.MarkdownString("");
				results.push(itemMana);				
				
				const itemManaRegen = new vscode.CompletionItem('ManaRegen', vscode.CompletionItemKind.Method);
				
				itemManaRegen.detail = "item.ManaRegen()";
				itemManaRegen.insertText = new vscode.SnippetString('ManaRegen()');
				itemManaRegen.documentation = new vscode.MarkdownString("");
				results.push(itemManaRegen);				
				
				const itemMaterial = new vscode.CompletionItem('Material', vscode.CompletionItemKind.Method);
				
				itemMaterial.detail = "item.Material()";
				itemMaterial.insertText = new vscode.SnippetString('Material()');
				itemMaterial.documentation = new vscode.MarkdownString("");
				results.push(itemMaterial);				
				
				const itemMaxCharges = new vscode.CompletionItem('MaxCharges', vscode.CompletionItemKind.Method);
				
				itemMaxCharges.detail = "item.MaxCharges()";
				itemMaxCharges.insertText = new vscode.SnippetString('MaxCharges()');
				itemMaxCharges.documentation = new vscode.MarkdownString("");
				results.push(itemMaxCharges);				
				
				const itemMinStatus = new vscode.CompletionItem('MinStatus', vscode.CompletionItemKind.Method);
				
				itemMinStatus.detail = "item.MinStatus()";
				itemMinStatus.insertText = new vscode.SnippetString('MinStatus()');
				itemMinStatus.documentation = new vscode.MarkdownString("");
				results.push(itemMinStatus);				
				
				const itemMR = new vscode.CompletionItem('MR', vscode.CompletionItemKind.Method);
				
				itemMR.detail = "item.MR()";
				itemMR.insertText = new vscode.SnippetString('MR()');
				itemMR.documentation = new vscode.MarkdownString("");
				results.push(itemMR);				
				
				const itemName = new vscode.CompletionItem('Name', vscode.CompletionItemKind.Method);
				
				itemName.detail = "item.Name()";
				itemName.insertText = new vscode.SnippetString('Name()');
				itemName.documentation = new vscode.MarkdownString("");
				results.push(itemName);				
				
				const itemNoDrop = new vscode.CompletionItem('NoDrop', vscode.CompletionItemKind.Method);
				
				itemNoDrop.detail = "item.NoDrop()";
				itemNoDrop.insertText = new vscode.SnippetString('NoDrop()');
				itemNoDrop.documentation = new vscode.MarkdownString("");
				results.push(itemNoDrop);				
				
				const itemNoPet = new vscode.CompletionItem('NoPet', vscode.CompletionItemKind.Method);
				
				itemNoPet.detail = "item.NoPet()";
				itemNoPet.insertText = new vscode.SnippetString('NoPet()');
				itemNoPet.documentation = new vscode.MarkdownString("");
				results.push(itemNoPet);				
				
				const itemNoRent = new vscode.CompletionItem('NoRent', vscode.CompletionItemKind.Method);
				
				itemNoRent.detail = "item.NoRent()";
				itemNoRent.insertText = new vscode.SnippetString('NoRent()');
				itemNoRent.documentation = new vscode.MarkdownString("");
				results.push(itemNoRent);				
				
				const itemNoTransfer = new vscode.CompletionItem('NoTransfer', vscode.CompletionItemKind.Method);
				
				itemNoTransfer.detail = "item.NoTransfer()";
				itemNoTransfer.insertText = new vscode.SnippetString('NoTransfer()');
				itemNoTransfer.documentation = new vscode.MarkdownString("");
				results.push(itemNoTransfer);				
				
				const itemnull = new vscode.CompletionItem('null', vscode.CompletionItemKind.Method);
				
				itemnull.detail = "item.null()";
				itemnull.insertText = new vscode.SnippetString('null()');
				itemnull.documentation = new vscode.MarkdownString("");
				results.push(itemnull);				
				
				const itemPendingLoreFlag = new vscode.CompletionItem('PendingLoreFlag', vscode.CompletionItemKind.Method);
				
				itemPendingLoreFlag.detail = "item.PendingLoreFlag()";
				itemPendingLoreFlag.insertText = new vscode.SnippetString('PendingLoreFlag()');
				itemPendingLoreFlag.documentation = new vscode.MarkdownString("");
				results.push(itemPendingLoreFlag);				
				
				const itemPointType = new vscode.CompletionItem('PointType', vscode.CompletionItemKind.Method);
				
				itemPointType.detail = "item.PointType()";
				itemPointType.insertText = new vscode.SnippetString('PointType()');
				itemPointType.documentation = new vscode.MarkdownString("");
				results.push(itemPointType);				
				
				const itemPotionBelt = new vscode.CompletionItem('PotionBelt', vscode.CompletionItemKind.Method);
				
				itemPotionBelt.detail = "item.PotionBelt()";
				itemPotionBelt.insertText = new vscode.SnippetString('PotionBelt()');
				itemPotionBelt.documentation = new vscode.MarkdownString("");
				results.push(itemPotionBelt);				
				
				const itemPotionBeltSlots = new vscode.CompletionItem('PotionBeltSlots', vscode.CompletionItemKind.Method);
				
				itemPotionBeltSlots.detail = "item.PotionBeltSlots()";
				itemPotionBeltSlots.insertText = new vscode.SnippetString('PotionBeltSlots()');
				itemPotionBeltSlots.documentation = new vscode.MarkdownString("");
				results.push(itemPotionBeltSlots);				
				
				const itemPR = new vscode.CompletionItem('PR', vscode.CompletionItemKind.Method);
				
				itemPR.detail = "item.PR()";
				itemPR.insertText = new vscode.SnippetString('PR()');
				itemPR.documentation = new vscode.MarkdownString("");
				results.push(itemPR);				
				
				const itemPrice = new vscode.CompletionItem('Price', vscode.CompletionItemKind.Method);
				
				itemPrice.detail = "item.Price()";
				itemPrice.insertText = new vscode.SnippetString('Price()');
				itemPrice.documentation = new vscode.MarkdownString("");
				results.push(itemPrice);				
				
				const itemProcName = new vscode.CompletionItem('ProcName', vscode.CompletionItemKind.Method);
				
				itemProcName.detail = "item.ProcName()";
				itemProcName.insertText = new vscode.SnippetString('ProcName()');
				itemProcName.documentation = new vscode.MarkdownString("");
				results.push(itemProcName);				
				
				const itemProcRate = new vscode.CompletionItem('ProcRate', vscode.CompletionItemKind.Method);
				
				itemProcRate.detail = "item.ProcRate()";
				itemProcRate.insertText = new vscode.SnippetString('ProcRate()');
				itemProcRate.documentation = new vscode.MarkdownString("");
				results.push(itemProcRate);				
				
				const itemPurity = new vscode.CompletionItem('Purity', vscode.CompletionItemKind.Method);
				
				itemPurity.detail = "item.Purity()";
				itemPurity.insertText = new vscode.SnippetString('Purity()');
				itemPurity.documentation = new vscode.MarkdownString("");
				results.push(itemPurity);				
				
				const itemQuestItemFlag = new vscode.CompletionItem('QuestItemFlag', vscode.CompletionItemKind.Method);
				
				itemQuestItemFlag.detail = "item.QuestItemFlag()";
				itemQuestItemFlag.insertText = new vscode.SnippetString('QuestItemFlag()');
				itemQuestItemFlag.documentation = new vscode.MarkdownString("");
				results.push(itemQuestItemFlag);				
				
				const itemRaces = new vscode.CompletionItem('Races', vscode.CompletionItemKind.Method);
				
				itemRaces.detail = "item.Races()";
				itemRaces.insertText = new vscode.SnippetString('Races()');
				itemRaces.documentation = new vscode.MarkdownString("");
				results.push(itemRaces);				
				
				const itemRange = new vscode.CompletionItem('Range', vscode.CompletionItemKind.Method);
				
				itemRange.detail = "item.Range()";
				itemRange.insertText = new vscode.SnippetString('Range()');
				itemRange.documentation = new vscode.MarkdownString("");
				results.push(itemRange);				
				
				const itemRecastDelay = new vscode.CompletionItem('RecastDelay', vscode.CompletionItemKind.Method);
				
				itemRecastDelay.detail = "item.RecastDelay()";
				itemRecastDelay.insertText = new vscode.SnippetString('RecastDelay()');
				itemRecastDelay.documentation = new vscode.MarkdownString("");
				results.push(itemRecastDelay);				
				
				const itemRecastType = new vscode.CompletionItem('RecastType', vscode.CompletionItemKind.Method);
				
				itemRecastType.detail = "item.RecastType()";
				itemRecastType.insertText = new vscode.SnippetString('RecastType()');
				itemRecastType.documentation = new vscode.MarkdownString("");
				results.push(itemRecastType);				
				
				const itemRecLevel = new vscode.CompletionItem('RecLevel', vscode.CompletionItemKind.Method);
				
				itemRecLevel.detail = "item.RecLevel()";
				itemRecLevel.insertText = new vscode.SnippetString('RecLevel()');
				itemRecLevel.documentation = new vscode.MarkdownString("");
				results.push(itemRecLevel);				
				
				const itemRecSkill = new vscode.CompletionItem('RecSkill', vscode.CompletionItemKind.Method);
				
				itemRecSkill.detail = "item.RecSkill()";
				itemRecSkill.insertText = new vscode.SnippetString('RecSkill()');
				itemRecSkill.documentation = new vscode.MarkdownString("");
				results.push(itemRecSkill);				
				
				const itemRegen = new vscode.CompletionItem('Regen', vscode.CompletionItemKind.Method);
				
				itemRegen.detail = "item.Regen()";
				itemRegen.insertText = new vscode.SnippetString('Regen()');
				itemRegen.documentation = new vscode.MarkdownString("");
				results.push(itemRegen);				
				
				const itemReqLevel = new vscode.CompletionItem('ReqLevel', vscode.CompletionItemKind.Method);
				
				itemReqLevel.detail = "item.ReqLevel()";
				itemReqLevel.insertText = new vscode.SnippetString('ReqLevel()');
				itemReqLevel.documentation = new vscode.MarkdownString("");
				results.push(itemReqLevel);				
				
				const itemScriptFileID = new vscode.CompletionItem('ScriptFileID', vscode.CompletionItemKind.Method);
				
				itemScriptFileID.detail = "item.ScriptFileID()";
				itemScriptFileID.insertText = new vscode.SnippetString('ScriptFileID()');
				itemScriptFileID.documentation = new vscode.MarkdownString("");
				results.push(itemScriptFileID);				
				
				const itemScrollName = new vscode.CompletionItem('ScrollName', vscode.CompletionItemKind.Method);
				
				itemScrollName.detail = "item.ScrollName()";
				itemScrollName.insertText = new vscode.SnippetString('ScrollName()');
				itemScrollName.documentation = new vscode.MarkdownString("");
				results.push(itemScrollName);				
				
				const itemSellRate = new vscode.CompletionItem('SellRate', vscode.CompletionItemKind.Method);
				
				itemSellRate.detail = "item.SellRate()";
				itemSellRate.insertText = new vscode.SnippetString('SellRate()');
				itemSellRate.documentation = new vscode.MarkdownString("");
				results.push(itemSellRate);				
				
				const itemShielding = new vscode.CompletionItem('Shielding', vscode.CompletionItemKind.Method);
				
				itemShielding.detail = "item.Shielding()";
				itemShielding.insertText = new vscode.SnippetString('Shielding()');
				itemShielding.documentation = new vscode.MarkdownString("");
				results.push(itemShielding);				
				
				const itemSize = new vscode.CompletionItem('Size', vscode.CompletionItemKind.Method);
				
				itemSize.detail = "item.Size()";
				itemSize.insertText = new vscode.SnippetString('Size()');
				itemSize.documentation = new vscode.MarkdownString("");
				results.push(itemSize);				
				
				const itemSkillModType = new vscode.CompletionItem('SkillModType', vscode.CompletionItemKind.Method);
				
				itemSkillModType.detail = "item.SkillModType()";
				itemSkillModType.insertText = new vscode.SnippetString('SkillModType()');
				itemSkillModType.documentation = new vscode.MarkdownString("");
				results.push(itemSkillModType);				
				
				const itemSkillModValue = new vscode.CompletionItem('SkillModValue', vscode.CompletionItemKind.Method);
				
				itemSkillModValue.detail = "item.SkillModValue()";
				itemSkillModValue.insertText = new vscode.SnippetString('SkillModValue()');
				itemSkillModValue.documentation = new vscode.MarkdownString("");
				results.push(itemSkillModValue);				
				
				const itemSlots = new vscode.CompletionItem('Slots', vscode.CompletionItemKind.Method);
				
				itemSlots.detail = "item.Slots()";
				itemSlots.insertText = new vscode.SnippetString('Slots()');
				itemSlots.documentation = new vscode.MarkdownString("");
				results.push(itemSlots);				
				
				const itemSpellDmg = new vscode.CompletionItem('SpellDmg', vscode.CompletionItemKind.Method);
				
				itemSpellDmg.detail = "item.SpellDmg()";
				itemSpellDmg.insertText = new vscode.SnippetString('SpellDmg()');
				itemSpellDmg.documentation = new vscode.MarkdownString("");
				results.push(itemSpellDmg);				
				
				const itemSpellShield = new vscode.CompletionItem('SpellShield', vscode.CompletionItemKind.Method);
				
				itemSpellShield.detail = "item.SpellShield()";
				itemSpellShield.insertText = new vscode.SnippetString('SpellShield()');
				itemSpellShield.documentation = new vscode.MarkdownString("");
				results.push(itemSpellShield);				
				
				const itemStackable = new vscode.CompletionItem('Stackable', vscode.CompletionItemKind.Method);
				
				itemStackable.detail = "item.Stackable()";
				itemStackable.insertText = new vscode.SnippetString('Stackable()');
				itemStackable.documentation = new vscode.MarkdownString("");
				results.push(itemStackable);				
				
				const itemStackSize = new vscode.CompletionItem('StackSize', vscode.CompletionItemKind.Method);
				
				itemStackSize.detail = "item.StackSize()";
				itemStackSize.insertText = new vscode.SnippetString('StackSize()');
				itemStackSize.documentation = new vscode.MarkdownString("");
				results.push(itemStackSize);				
				
				const itemStrikeThrough = new vscode.CompletionItem('StrikeThrough', vscode.CompletionItemKind.Method);
				
				itemStrikeThrough.detail = "item.StrikeThrough()";
				itemStrikeThrough.insertText = new vscode.SnippetString('StrikeThrough()');
				itemStrikeThrough.documentation = new vscode.MarkdownString("");
				results.push(itemStrikeThrough);				
				
				const itemStunResist = new vscode.CompletionItem('StunResist', vscode.CompletionItemKind.Method);
				
				itemStunResist.detail = "item.StunResist()";
				itemStunResist.insertText = new vscode.SnippetString('StunResist()');
				itemStunResist.documentation = new vscode.MarkdownString("");
				results.push(itemStunResist);				
				
				const itemSummonedFlag = new vscode.CompletionItem('SummonedFlag', vscode.CompletionItemKind.Method);
				
				itemSummonedFlag.detail = "item.SummonedFlag()";
				itemSummonedFlag.insertText = new vscode.SnippetString('SummonedFlag()');
				itemSummonedFlag.documentation = new vscode.MarkdownString("");
				results.push(itemSummonedFlag);				
				
				const itemSVCorruption = new vscode.CompletionItem('SVCorruption', vscode.CompletionItemKind.Method);
				
				itemSVCorruption.detail = "item.SVCorruption()";
				itemSVCorruption.insertText = new vscode.SnippetString('SVCorruption()');
				itemSVCorruption.documentation = new vscode.MarkdownString("");
				results.push(itemSVCorruption);				
				
				const itemTradeskills = new vscode.CompletionItem('Tradeskills', vscode.CompletionItemKind.Method);
				
				itemTradeskills.detail = "item.Tradeskills()";
				itemTradeskills.insertText = new vscode.SnippetString('Tradeskills()');
				itemTradeskills.documentation = new vscode.MarkdownString("");
				results.push(itemTradeskills);				
				
				const itemvalid = new vscode.CompletionItem('valid', vscode.CompletionItemKind.Method);
				
				itemvalid.detail = "item.valid()";
				itemvalid.insertText = new vscode.SnippetString('valid()');
				itemvalid.documentation = new vscode.MarkdownString("");
				results.push(itemvalid);				
				
				const itemWeight = new vscode.CompletionItem('Weight', vscode.CompletionItemKind.Method);
				
				itemWeight.detail = "item.Weight()";
				itemWeight.insertText = new vscode.SnippetString('Weight()');
				itemWeight.documentation = new vscode.MarkdownString("");
				results.push(itemWeight);				
				
				const itemWornName = new vscode.CompletionItem('WornName', vscode.CompletionItemKind.Method);
				
				itemWornName.detail = "item.WornName()";
				itemWornName.insertText = new vscode.SnippetString('WornName()');
				itemWornName.documentation = new vscode.MarkdownString("");
				results.push(itemWornName);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('iteminst.')) {
					return undefined;
				}
				
				
				const iteminstAddExp = new vscode.CompletionItem('AddExp', vscode.CompletionItemKind.Method);
				
				iteminstAddExp.detail = "iteminst.AddExp()";
				iteminstAddExp.insertText = new vscode.SnippetString('AddExp()');
				iteminstAddExp.documentation = new vscode.MarkdownString("");
				results.push(iteminstAddExp);				
				
				const iteminstClearTimers = new vscode.CompletionItem('ClearTimers', vscode.CompletionItemKind.Method);
				
				iteminstClearTimers.detail = "iteminst.ClearTimers()";
				iteminstClearTimers.insertText = new vscode.SnippetString('ClearTimers()');
				iteminstClearTimers.documentation = new vscode.MarkdownString("");
				results.push(iteminstClearTimers);				
				
				const iteminstClone = new vscode.CompletionItem('Clone', vscode.CompletionItemKind.Method);
				
				iteminstClone.detail = "iteminst.Clone()";
				iteminstClone.insertText = new vscode.SnippetString('Clone()');
				iteminstClone.documentation = new vscode.MarkdownString("");
				results.push(iteminstClone);				
				
				const iteminstDeleteCustomData = new vscode.CompletionItem('DeleteCustomData', vscode.CompletionItemKind.Method);
				
				iteminstDeleteCustomData.detail = "iteminst.DeleteCustomData()";
				iteminstDeleteCustomData.insertText = new vscode.SnippetString('DeleteCustomData()');
				iteminstDeleteCustomData.documentation = new vscode.MarkdownString("");
				results.push(iteminstDeleteCustomData);				
				
				const iteminstGetAugment = new vscode.CompletionItem('GetAugment', vscode.CompletionItemKind.Method);
				
				iteminstGetAugment.detail = "iteminst.GetAugment()";
				iteminstGetAugment.insertText = new vscode.SnippetString('GetAugment()');
				iteminstGetAugment.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetAugment);				
				
				const iteminstGetAugmentItemID = new vscode.CompletionItem('GetAugmentItemID', vscode.CompletionItemKind.Method);
				
				iteminstGetAugmentItemID.detail = "iteminst.GetAugmentItemID()";
				iteminstGetAugmentItemID.insertText = new vscode.SnippetString('GetAugmentItemID()');
				iteminstGetAugmentItemID.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetAugmentItemID);				
				
				const iteminstGetAugmentType = new vscode.CompletionItem('GetAugmentType', vscode.CompletionItemKind.Method);
				
				iteminstGetAugmentType.detail = "iteminst.GetAugmentType()";
				iteminstGetAugmentType.insertText = new vscode.SnippetString('GetAugmentType()');
				iteminstGetAugmentType.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetAugmentType);				
				
				const iteminstGetCharges = new vscode.CompletionItem('GetCharges', vscode.CompletionItemKind.Method);
				
				iteminstGetCharges.detail = "iteminst.GetCharges()";
				iteminstGetCharges.insertText = new vscode.SnippetString('GetCharges()');
				iteminstGetCharges.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetCharges);				
				
				const iteminstGetColor = new vscode.CompletionItem('GetColor', vscode.CompletionItemKind.Method);
				
				iteminstGetColor.detail = "iteminst.GetColor()";
				iteminstGetColor.insertText = new vscode.SnippetString('GetColor()');
				iteminstGetColor.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetColor);				
				
				const iteminstGetCustomData = new vscode.CompletionItem('GetCustomData', vscode.CompletionItemKind.Method);
				
				iteminstGetCustomData.detail = "iteminst.GetCustomData()";
				iteminstGetCustomData.insertText = new vscode.SnippetString('GetCustomData()');
				iteminstGetCustomData.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetCustomData);				
				
				const iteminstGetCustomDataString = new vscode.CompletionItem('GetCustomDataString', vscode.CompletionItemKind.Method);
				
				iteminstGetCustomDataString.detail = "iteminst.GetCustomDataString()";
				iteminstGetCustomDataString.insertText = new vscode.SnippetString('GetCustomDataString()');
				iteminstGetCustomDataString.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetCustomDataString);				
				
				const iteminstGetExp = new vscode.CompletionItem('GetExp', vscode.CompletionItemKind.Method);
				
				iteminstGetExp.detail = "iteminst.GetExp()";
				iteminstGetExp.insertText = new vscode.SnippetString('GetExp()');
				iteminstGetExp.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetExp);				
				
				const iteminstGetID = new vscode.CompletionItem('GetID', vscode.CompletionItemKind.Method);
				
				iteminstGetID.detail = "iteminst.GetID()";
				iteminstGetID.insertText = new vscode.SnippetString('GetID()');
				iteminstGetID.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetID);				
				
				const iteminstGetItem = new vscode.CompletionItem('GetItem', vscode.CompletionItemKind.Method);
				
				iteminstGetItem.detail = "iteminst.GetItem()";
				iteminstGetItem.insertText = new vscode.SnippetString('GetItem()');
				iteminstGetItem.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetItem);				
				
				const iteminstGetItemID = new vscode.CompletionItem('GetItemID', vscode.CompletionItemKind.Method);
				
				iteminstGetItemID.detail = "iteminst.GetItemID()";
				iteminstGetItemID.insertText = new vscode.SnippetString('GetItemID()');
				iteminstGetItemID.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetItemID);				
				
				const iteminstGetItemScriptID = new vscode.CompletionItem('GetItemScriptID', vscode.CompletionItemKind.Method);
				
				iteminstGetItemScriptID.detail = "iteminst.GetItemScriptID()";
				iteminstGetItemScriptID.insertText = new vscode.SnippetString('GetItemScriptID()');
				iteminstGetItemScriptID.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetItemScriptID);				
				
				const iteminstGetKillsNeeded = new vscode.CompletionItem('GetKillsNeeded', vscode.CompletionItemKind.Method);
				
				iteminstGetKillsNeeded.detail = "iteminst.GetKillsNeeded()";
				iteminstGetKillsNeeded.insertText = new vscode.SnippetString('GetKillsNeeded()');
				iteminstGetKillsNeeded.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetKillsNeeded);				
				
				const iteminstGetMaxEvolveLvl = new vscode.CompletionItem('GetMaxEvolveLvl', vscode.CompletionItemKind.Method);
				
				iteminstGetMaxEvolveLvl.detail = "iteminst.GetMaxEvolveLvl()";
				iteminstGetMaxEvolveLvl.insertText = new vscode.SnippetString('GetMaxEvolveLvl()');
				iteminstGetMaxEvolveLvl.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetMaxEvolveLvl);				
				
				const iteminstGetPrice = new vscode.CompletionItem('GetPrice', vscode.CompletionItemKind.Method);
				
				iteminstGetPrice.detail = "iteminst.GetPrice()";
				iteminstGetPrice.insertText = new vscode.SnippetString('GetPrice()');
				iteminstGetPrice.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetPrice);				
				
				const iteminstGetTotalItemCount = new vscode.CompletionItem('GetTotalItemCount', vscode.CompletionItemKind.Method);
				
				iteminstGetTotalItemCount.detail = "iteminst.GetTotalItemCount()";
				iteminstGetTotalItemCount.insertText = new vscode.SnippetString('GetTotalItemCount()');
				iteminstGetTotalItemCount.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetTotalItemCount);				
				
				const iteminstGetUnscaledItem = new vscode.CompletionItem('GetUnscaledItem', vscode.CompletionItemKind.Method);
				
				iteminstGetUnscaledItem.detail = "iteminst.GetUnscaledItem()";
				iteminstGetUnscaledItem.insertText = new vscode.SnippetString('GetUnscaledItem()');
				iteminstGetUnscaledItem.documentation = new vscode.MarkdownString("");
				results.push(iteminstGetUnscaledItem);				
				
				const iteminstIsAmmo = new vscode.CompletionItem('IsAmmo', vscode.CompletionItemKind.Method);
				
				iteminstIsAmmo.detail = "iteminst.IsAmmo()";
				iteminstIsAmmo.insertText = new vscode.SnippetString('IsAmmo()');
				iteminstIsAmmo.documentation = new vscode.MarkdownString("");
				results.push(iteminstIsAmmo);				
				
				const iteminstIsAugmentable = new vscode.CompletionItem('IsAugmentable', vscode.CompletionItemKind.Method);
				
				iteminstIsAugmentable.detail = "iteminst.IsAugmentable()";
				iteminstIsAugmentable.insertText = new vscode.SnippetString('IsAugmentable()');
				iteminstIsAugmentable.documentation = new vscode.MarkdownString("");
				results.push(iteminstIsAugmentable);				
				
				const iteminstIsAugmented = new vscode.CompletionItem('IsAugmented', vscode.CompletionItemKind.Method);
				
				iteminstIsAugmented.detail = "iteminst.IsAugmented()";
				iteminstIsAugmented.insertText = new vscode.SnippetString('IsAugmented()');
				iteminstIsAugmented.documentation = new vscode.MarkdownString("");
				results.push(iteminstIsAugmented);				
				
				const iteminstIsEquipable = new vscode.CompletionItem('IsEquipable', vscode.CompletionItemKind.Method);
				
				iteminstIsEquipable.detail = "iteminst.IsEquipable()";
				iteminstIsEquipable.insertText = new vscode.SnippetString('IsEquipable()');
				iteminstIsEquipable.documentation = new vscode.MarkdownString("");
				results.push(iteminstIsEquipable);				
				
				const iteminstIsExpendable = new vscode.CompletionItem('IsExpendable', vscode.CompletionItemKind.Method);
				
				iteminstIsExpendable.detail = "iteminst.IsExpendable()";
				iteminstIsExpendable.insertText = new vscode.SnippetString('IsExpendable()');
				iteminstIsExpendable.documentation = new vscode.MarkdownString("");
				results.push(iteminstIsExpendable);				
				
				const iteminstIsInstNoDrop = new vscode.CompletionItem('IsInstNoDrop', vscode.CompletionItemKind.Method);
				
				iteminstIsInstNoDrop.detail = "iteminst.IsInstNoDrop()";
				iteminstIsInstNoDrop.insertText = new vscode.SnippetString('IsInstNoDrop()');
				iteminstIsInstNoDrop.documentation = new vscode.MarkdownString("");
				results.push(iteminstIsInstNoDrop);				
				
				const iteminstIsStackable = new vscode.CompletionItem('IsStackable', vscode.CompletionItemKind.Method);
				
				iteminstIsStackable.detail = "iteminst.IsStackable()";
				iteminstIsStackable.insertText = new vscode.SnippetString('IsStackable()');
				iteminstIsStackable.documentation = new vscode.MarkdownString("");
				results.push(iteminstIsStackable);				
				
				const iteminstIsType = new vscode.CompletionItem('IsType', vscode.CompletionItemKind.Method);
				
				iteminstIsType.detail = "iteminst.IsType()";
				iteminstIsType.insertText = new vscode.SnippetString('IsType()');
				iteminstIsType.documentation = new vscode.MarkdownString("");
				results.push(iteminstIsType);				
				
				const iteminstIsWeapon = new vscode.CompletionItem('IsWeapon', vscode.CompletionItemKind.Method);
				
				iteminstIsWeapon.detail = "iteminst.IsWeapon()";
				iteminstIsWeapon.insertText = new vscode.SnippetString('IsWeapon()');
				iteminstIsWeapon.documentation = new vscode.MarkdownString("");
				results.push(iteminstIsWeapon);				
				
				const iteminstSetCharges = new vscode.CompletionItem('SetCharges', vscode.CompletionItemKind.Method);
				
				iteminstSetCharges.detail = "iteminst.SetCharges()";
				iteminstSetCharges.insertText = new vscode.SnippetString('SetCharges()');
				iteminstSetCharges.documentation = new vscode.MarkdownString("");
				results.push(iteminstSetCharges);				
				
				const iteminstSetColor = new vscode.CompletionItem('SetColor', vscode.CompletionItemKind.Method);
				
				iteminstSetColor.detail = "iteminst.SetColor()";
				iteminstSetColor.insertText = new vscode.SnippetString('SetColor()');
				iteminstSetColor.documentation = new vscode.MarkdownString("");
				results.push(iteminstSetColor);				
				
				const iteminstSetCustomData = new vscode.CompletionItem('SetCustomData', vscode.CompletionItemKind.Method);
				
				iteminstSetCustomData.detail = "iteminst.SetCustomData()";
				iteminstSetCustomData.insertText = new vscode.SnippetString('SetCustomData()');
				iteminstSetCustomData.documentation = new vscode.MarkdownString("");
				results.push(iteminstSetCustomData);				
				
				const iteminstSetExp = new vscode.CompletionItem('SetExp', vscode.CompletionItemKind.Method);
				
				iteminstSetExp.detail = "iteminst.SetExp()";
				iteminstSetExp.insertText = new vscode.SnippetString('SetExp()');
				iteminstSetExp.documentation = new vscode.MarkdownString("");
				results.push(iteminstSetExp);				
				
				const iteminstSetInstNoDrop = new vscode.CompletionItem('SetInstNoDrop', vscode.CompletionItemKind.Method);
				
				iteminstSetInstNoDrop.detail = "iteminst.SetInstNoDrop()";
				iteminstSetInstNoDrop.insertText = new vscode.SnippetString('SetInstNoDrop()');
				iteminstSetInstNoDrop.documentation = new vscode.MarkdownString("");
				results.push(iteminstSetInstNoDrop);				
				
				const iteminstSetPrice = new vscode.CompletionItem('SetPrice', vscode.CompletionItemKind.Method);
				
				iteminstSetPrice.detail = "iteminst.SetPrice()";
				iteminstSetPrice.insertText = new vscode.SnippetString('SetPrice()');
				iteminstSetPrice.documentation = new vscode.MarkdownString("");
				results.push(iteminstSetPrice);				
				
				const iteminstSetScale = new vscode.CompletionItem('SetScale', vscode.CompletionItemKind.Method);
				
				iteminstSetScale.detail = "iteminst.SetScale()";
				iteminstSetScale.insertText = new vscode.SnippetString('SetScale()');
				iteminstSetScale.documentation = new vscode.MarkdownString("");
				results.push(iteminstSetScale);				
				
				const iteminstSetScaling = new vscode.CompletionItem('SetScaling', vscode.CompletionItemKind.Method);
				
				iteminstSetScaling.detail = "iteminst.SetScaling()";
				iteminstSetScaling.insertText = new vscode.SnippetString('SetScaling()');
				iteminstSetScaling.documentation = new vscode.MarkdownString("");
				results.push(iteminstSetScaling);				
				
				const iteminstSetTimer = new vscode.CompletionItem('SetTimer', vscode.CompletionItemKind.Method);
				
				iteminstSetTimer.detail = "iteminst.SetTimer()";
				iteminstSetTimer.insertText = new vscode.SnippetString('SetTimer()');
				iteminstSetTimer.documentation = new vscode.MarkdownString("");
				results.push(iteminstSetTimer);				
				
				const iteminstStopTimer = new vscode.CompletionItem('StopTimer', vscode.CompletionItemKind.Method);
				
				iteminstStopTimer.detail = "iteminst.StopTimer()";
				iteminstStopTimer.insertText = new vscode.SnippetString('StopTimer()');
				iteminstStopTimer.documentation = new vscode.MarkdownString("");
				results.push(iteminstStopTimer);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('journal_mode.')) {
					return undefined;
				}
				
				
				const journalmodeLog1 = new vscode.CompletionItem('Log1', vscode.CompletionItemKind.Method);
				
				journalmodeLog1.detail = "journal_mode.Log1()";
				journalmodeLog1.insertText = new vscode.SnippetString('Log1()');
				journalmodeLog1.documentation = new vscode.MarkdownString("");
				results.push(journalmodeLog1);				
				
				const journalmodeLog2 = new vscode.CompletionItem('Log2', vscode.CompletionItemKind.Method);
				
				journalmodeLog2.detail = "journal_mode.Log2()";
				journalmodeLog2.insertText = new vscode.SnippetString('Log2()');
				journalmodeLog2.documentation = new vscode.MarkdownString("");
				results.push(journalmodeLog2);				
				
				const journalmodeNone = new vscode.CompletionItem('None', vscode.CompletionItemKind.Method);
				
				journalmodeNone.detail = "journal_mode.None()";
				journalmodeNone.insertText = new vscode.SnippetString('None()');
				journalmodeNone.documentation = new vscode.MarkdownString("");
				results.push(journalmodeNone);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('material.')) {
					return undefined;
				}
				
				
				const materialArms = new vscode.CompletionItem('Arms', vscode.CompletionItemKind.Property);
				
				materialArms.detail = "material.Arms";
				materialArms.insertText = new vscode.SnippetString('Arms');
				materialArms.documentation = new vscode.MarkdownString("");
				results.push(materialArms);				
				
				const materialBracer = new vscode.CompletionItem('Bracer', vscode.CompletionItemKind.Property);
				
				materialBracer.detail = "material.Bracer";
				materialBracer.insertText = new vscode.SnippetString('Bracer');
				materialBracer.documentation = new vscode.MarkdownString("");
				results.push(materialBracer);				
				
				const materialChest = new vscode.CompletionItem('Chest', vscode.CompletionItemKind.Property);
				
				materialChest.detail = "material.Chest";
				materialChest.insertText = new vscode.SnippetString('Chest');
				materialChest.documentation = new vscode.MarkdownString("");
				results.push(materialChest);				
				
				const materialCount = new vscode.CompletionItem('Count', vscode.CompletionItemKind.Property);
				
				materialCount.detail = "material.Count";
				materialCount.insertText = new vscode.SnippetString('Count');
				materialCount.documentation = new vscode.MarkdownString("");
				results.push(materialCount);				
				
				const materialFeet = new vscode.CompletionItem('Feet', vscode.CompletionItemKind.Property);
				
				materialFeet.detail = "material.Feet";
				materialFeet.insertText = new vscode.SnippetString('Feet');
				materialFeet.documentation = new vscode.MarkdownString("");
				results.push(materialFeet);				
				
				const materialHands = new vscode.CompletionItem('Hands', vscode.CompletionItemKind.Property);
				
				materialHands.detail = "material.Hands";
				materialHands.insertText = new vscode.SnippetString('Hands');
				materialHands.documentation = new vscode.MarkdownString("");
				results.push(materialHands);				
				
				const materialHead = new vscode.CompletionItem('Head', vscode.CompletionItemKind.Property);
				
				materialHead.detail = "material.Head";
				materialHead.insertText = new vscode.SnippetString('Head');
				materialHead.documentation = new vscode.MarkdownString("");
				results.push(materialHead);				
				
				const materialInvalid = new vscode.CompletionItem('Invalid', vscode.CompletionItemKind.Property);
				
				materialInvalid.detail = "material.Invalid";
				materialInvalid.insertText = new vscode.SnippetString('Invalid');
				materialInvalid.documentation = new vscode.MarkdownString("");
				results.push(materialInvalid);				
				
				const materialLegs = new vscode.CompletionItem('Legs', vscode.CompletionItemKind.Property);
				
				materialLegs.detail = "material.Legs";
				materialLegs.insertText = new vscode.SnippetString('Legs');
				materialLegs.documentation = new vscode.MarkdownString("");
				results.push(materialLegs);				
				
				const materialMax = new vscode.CompletionItem('Max', vscode.CompletionItemKind.Property);
				
				materialMax.detail = "material.Max";
				materialMax.insertText = new vscode.SnippetString('Max');
				materialMax.documentation = new vscode.MarkdownString("");
				results.push(materialMax);				
				
				const materialPrimary = new vscode.CompletionItem('Primary', vscode.CompletionItemKind.Property);
				
				materialPrimary.detail = "material.Primary";
				materialPrimary.insertText = new vscode.SnippetString('Primary');
				materialPrimary.documentation = new vscode.MarkdownString("");
				results.push(materialPrimary);				
				
				const materialSecondary = new vscode.CompletionItem('Secondary', vscode.CompletionItemKind.Property);
				
				materialSecondary.detail = "material.Secondary";
				materialSecondary.insertText = new vscode.SnippetString('Secondary');
				materialSecondary.documentation = new vscode.MarkdownString("");
				results.push(materialSecondary);				
				
				const materialWrist = new vscode.CompletionItem('Wrist', vscode.CompletionItemKind.Property);
				
				materialWrist.detail = "material.Wrist";
				materialWrist.insertText = new vscode.SnippetString('Wrist');
				materialWrist.documentation = new vscode.MarkdownString("");
				results.push(materialWrist);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('mob.')) {
					return undefined;
				}
				
				
				const mobAddNimbusEffect = new vscode.CompletionItem('AddNimbusEffect', vscode.CompletionItemKind.Method);
				
				mobAddNimbusEffect.detail = "mob.AddNimbusEffect()";
				mobAddNimbusEffect.insertText = new vscode.SnippetString('AddNimbusEffect()');
				mobAddNimbusEffect.documentation = new vscode.MarkdownString("");
				results.push(mobAddNimbusEffect);				
				
				const mobAddToHateList = new vscode.CompletionItem('AddToHateList', vscode.CompletionItemKind.Method);
				
				mobAddToHateList.detail = "mob.AddToHateList()";
				mobAddToHateList.insertText = new vscode.SnippetString('AddToHateList()');
				mobAddToHateList.documentation = new vscode.MarkdownString("");
				results.push(mobAddToHateList);				
				
				const mobAttack = new vscode.CompletionItem('Attack', vscode.CompletionItemKind.Method);
				
				mobAttack.detail = "mob.Attack()";
				mobAttack.insertText = new vscode.SnippetString('Attack()');
				mobAttack.documentation = new vscode.MarkdownString("");
				results.push(mobAttack);				
				
				const mobAttackAnimation = new vscode.CompletionItem('AttackAnimation', vscode.CompletionItemKind.Method);
				
				mobAttackAnimation.detail = "mob.AttackAnimation()";
				mobAttackAnimation.insertText = new vscode.SnippetString('AttackAnimation()');
				mobAttackAnimation.documentation = new vscode.MarkdownString("");
				results.push(mobAttackAnimation);				
				
				const mobBehindMob = new vscode.CompletionItem('BehindMob', vscode.CompletionItemKind.Method);
				
				mobBehindMob.detail = "mob.BehindMob()";
				mobBehindMob.insertText = new vscode.SnippetString('BehindMob()');
				mobBehindMob.documentation = new vscode.MarkdownString("");
				results.push(mobBehindMob);				
				
				const mobBuffCount = new vscode.CompletionItem('BuffCount', vscode.CompletionItemKind.Method);
				
				mobBuffCount.detail = "mob.BuffCount()";
				mobBuffCount.insertText = new vscode.SnippetString('BuffCount()');
				mobBuffCount.documentation = new vscode.MarkdownString("");
				results.push(mobBuffCount);				
				
				const mobBuffFadeAll = new vscode.CompletionItem('BuffFadeAll', vscode.CompletionItemKind.Method);
				
				mobBuffFadeAll.detail = "mob.BuffFadeAll()";
				mobBuffFadeAll.insertText = new vscode.SnippetString('BuffFadeAll()');
				mobBuffFadeAll.documentation = new vscode.MarkdownString("");
				results.push(mobBuffFadeAll);				
				
				const mobBuffFadeByEffect = new vscode.CompletionItem('BuffFadeByEffect', vscode.CompletionItemKind.Method);
				
				mobBuffFadeByEffect.detail = "mob.BuffFadeByEffect()";
				mobBuffFadeByEffect.insertText = new vscode.SnippetString('BuffFadeByEffect()');
				mobBuffFadeByEffect.documentation = new vscode.MarkdownString("");
				results.push(mobBuffFadeByEffect);				
				
				const mobBuffFadeBySlot = new vscode.CompletionItem('BuffFadeBySlot', vscode.CompletionItemKind.Method);
				
				mobBuffFadeBySlot.detail = "mob.BuffFadeBySlot()";
				mobBuffFadeBySlot.insertText = new vscode.SnippetString('BuffFadeBySlot()');
				mobBuffFadeBySlot.documentation = new vscode.MarkdownString("");
				results.push(mobBuffFadeBySlot);				
				
				const mobBuffFadeBySpellID = new vscode.CompletionItem('BuffFadeBySpellID', vscode.CompletionItemKind.Method);
				
				mobBuffFadeBySpellID.detail = "mob.BuffFadeBySpellID()";
				mobBuffFadeBySpellID.insertText = new vscode.SnippetString('BuffFadeBySpellID()');
				mobBuffFadeBySpellID.documentation = new vscode.MarkdownString("");
				results.push(mobBuffFadeBySpellID);				
				
				const mobCalculateDistance = new vscode.CompletionItem('CalculateDistance', vscode.CompletionItemKind.Method);
				
				mobCalculateDistance.detail = "mob.CalculateDistance()";
				mobCalculateDistance.insertText = new vscode.SnippetString('CalculateDistance()');
				mobCalculateDistance.documentation = new vscode.MarkdownString("");
				results.push(mobCalculateDistance);				
				
				const mobCalculateHeadingToTarget = new vscode.CompletionItem('CalculateHeadingToTarget', vscode.CompletionItemKind.Method);
				
				mobCalculateHeadingToTarget.detail = "mob.CalculateHeadingToTarget()";
				mobCalculateHeadingToTarget.insertText = new vscode.SnippetString('CalculateHeadingToTarget()');
				mobCalculateHeadingToTarget.documentation = new vscode.MarkdownString("");
				results.push(mobCalculateHeadingToTarget);				
				
				const mobCameraEffect = new vscode.CompletionItem('CameraEffect', vscode.CompletionItemKind.Method);
				
				mobCameraEffect.detail = "mob.CameraEffect()";
				mobCameraEffect.insertText = new vscode.SnippetString('CameraEffect()');
				mobCameraEffect.documentation = new vscode.MarkdownString("");
				results.push(mobCameraEffect);				
				
				const mobCanBuffStack = new vscode.CompletionItem('CanBuffStack', vscode.CompletionItemKind.Method);
				
				mobCanBuffStack.detail = "mob.CanBuffStack()";
				mobCanBuffStack.insertText = new vscode.SnippetString('CanBuffStack()');
				mobCanBuffStack.documentation = new vscode.MarkdownString("");
				results.push(mobCanBuffStack);				
				
				const mobCanThisClassBlock = new vscode.CompletionItem('CanThisClassBlock', vscode.CompletionItemKind.Method);
				
				mobCanThisClassBlock.detail = "mob.CanThisClassBlock()";
				mobCanThisClassBlock.insertText = new vscode.SnippetString('CanThisClassBlock()');
				mobCanThisClassBlock.documentation = new vscode.MarkdownString("");
				results.push(mobCanThisClassBlock);				
				
				const mobCanThisClassDodge = new vscode.CompletionItem('CanThisClassDodge', vscode.CompletionItemKind.Method);
				
				mobCanThisClassDodge.detail = "mob.CanThisClassDodge()";
				mobCanThisClassDodge.insertText = new vscode.SnippetString('CanThisClassDodge()');
				mobCanThisClassDodge.documentation = new vscode.MarkdownString("");
				results.push(mobCanThisClassDodge);				
				
				const mobCanThisClassDoubleAttack = new vscode.CompletionItem('CanThisClassDoubleAttack', vscode.CompletionItemKind.Method);
				
				mobCanThisClassDoubleAttack.detail = "mob.CanThisClassDoubleAttack()";
				mobCanThisClassDoubleAttack.insertText = new vscode.SnippetString('CanThisClassDoubleAttack()');
				mobCanThisClassDoubleAttack.documentation = new vscode.MarkdownString("");
				results.push(mobCanThisClassDoubleAttack);				
				
				const mobCanThisClassDualWield = new vscode.CompletionItem('CanThisClassDualWield', vscode.CompletionItemKind.Method);
				
				mobCanThisClassDualWield.detail = "mob.CanThisClassDualWield()";
				mobCanThisClassDualWield.insertText = new vscode.SnippetString('CanThisClassDualWield()');
				mobCanThisClassDualWield.documentation = new vscode.MarkdownString("");
				results.push(mobCanThisClassDualWield);				
				
				const mobCanThisClassParry = new vscode.CompletionItem('CanThisClassParry', vscode.CompletionItemKind.Method);
				
				mobCanThisClassParry.detail = "mob.CanThisClassParry()";
				mobCanThisClassParry.insertText = new vscode.SnippetString('CanThisClassParry()');
				mobCanThisClassParry.documentation = new vscode.MarkdownString("");
				results.push(mobCanThisClassParry);				
				
				const mobCanThisClassRiposte = new vscode.CompletionItem('CanThisClassRiposte', vscode.CompletionItemKind.Method);
				
				mobCanThisClassRiposte.detail = "mob.CanThisClassRiposte()";
				mobCanThisClassRiposte.insertText = new vscode.SnippetString('CanThisClassRiposte()');
				mobCanThisClassRiposte.documentation = new vscode.MarkdownString("");
				results.push(mobCanThisClassRiposte);				
				
				const mobCastSpell = new vscode.CompletionItem('CastSpell', vscode.CompletionItemKind.Method);
				
				mobCastSpell.detail = "mob.CastSpell()";
				mobCastSpell.insertText = new vscode.SnippetString('CastSpell()');
				mobCastSpell.documentation = new vscode.MarkdownString("");
				results.push(mobCastSpell);				
				
				const mobChangeBeard = new vscode.CompletionItem('ChangeBeard', vscode.CompletionItemKind.Method);
				
				mobChangeBeard.detail = "mob.ChangeBeard()";
				mobChangeBeard.insertText = new vscode.SnippetString('ChangeBeard()');
				mobChangeBeard.documentation = new vscode.MarkdownString("");
				results.push(mobChangeBeard);				
				
				const mobChangeBeardColor = new vscode.CompletionItem('ChangeBeardColor', vscode.CompletionItemKind.Method);
				
				mobChangeBeardColor.detail = "mob.ChangeBeardColor()";
				mobChangeBeardColor.insertText = new vscode.SnippetString('ChangeBeardColor()');
				mobChangeBeardColor.documentation = new vscode.MarkdownString("");
				results.push(mobChangeBeardColor);				
				
				const mobChangeDrakkinDetails = new vscode.CompletionItem('ChangeDrakkinDetails', vscode.CompletionItemKind.Method);
				
				mobChangeDrakkinDetails.detail = "mob.ChangeDrakkinDetails()";
				mobChangeDrakkinDetails.insertText = new vscode.SnippetString('ChangeDrakkinDetails()');
				mobChangeDrakkinDetails.documentation = new vscode.MarkdownString("");
				results.push(mobChangeDrakkinDetails);				
				
				const mobChangeDrakkinHeritage = new vscode.CompletionItem('ChangeDrakkinHeritage', vscode.CompletionItemKind.Method);
				
				mobChangeDrakkinHeritage.detail = "mob.ChangeDrakkinHeritage()";
				mobChangeDrakkinHeritage.insertText = new vscode.SnippetString('ChangeDrakkinHeritage()');
				mobChangeDrakkinHeritage.documentation = new vscode.MarkdownString("");
				results.push(mobChangeDrakkinHeritage);				
				
				const mobChangeDrakkinTattoo = new vscode.CompletionItem('ChangeDrakkinTattoo', vscode.CompletionItemKind.Method);
				
				mobChangeDrakkinTattoo.detail = "mob.ChangeDrakkinTattoo()";
				mobChangeDrakkinTattoo.insertText = new vscode.SnippetString('ChangeDrakkinTattoo()');
				mobChangeDrakkinTattoo.documentation = new vscode.MarkdownString("");
				results.push(mobChangeDrakkinTattoo);				
				
				const mobChangeGender = new vscode.CompletionItem('ChangeGender', vscode.CompletionItemKind.Method);
				
				mobChangeGender.detail = "mob.ChangeGender()";
				mobChangeGender.insertText = new vscode.SnippetString('ChangeGender()');
				mobChangeGender.documentation = new vscode.MarkdownString("");
				results.push(mobChangeGender);				
				
				const mobChangeHairColor = new vscode.CompletionItem('ChangeHairColor', vscode.CompletionItemKind.Method);
				
				mobChangeHairColor.detail = "mob.ChangeHairColor()";
				mobChangeHairColor.insertText = new vscode.SnippetString('ChangeHairColor()');
				mobChangeHairColor.documentation = new vscode.MarkdownString("");
				results.push(mobChangeHairColor);				
				
				const mobChangeHairStyle = new vscode.CompletionItem('ChangeHairStyle', vscode.CompletionItemKind.Method);
				
				mobChangeHairStyle.detail = "mob.ChangeHairStyle()";
				mobChangeHairStyle.insertText = new vscode.SnippetString('ChangeHairStyle()');
				mobChangeHairStyle.documentation = new vscode.MarkdownString("");
				results.push(mobChangeHairStyle);				
				
				const mobChangeHelmTexture = new vscode.CompletionItem('ChangeHelmTexture', vscode.CompletionItemKind.Method);
				
				mobChangeHelmTexture.detail = "mob.ChangeHelmTexture()";
				mobChangeHelmTexture.insertText = new vscode.SnippetString('ChangeHelmTexture()');
				mobChangeHelmTexture.documentation = new vscode.MarkdownString("");
				results.push(mobChangeHelmTexture);				
				
				const mobChangeLuclinFace = new vscode.CompletionItem('ChangeLuclinFace', vscode.CompletionItemKind.Method);
				
				mobChangeLuclinFace.detail = "mob.ChangeLuclinFace()";
				mobChangeLuclinFace.insertText = new vscode.SnippetString('ChangeLuclinFace()');
				mobChangeLuclinFace.documentation = new vscode.MarkdownString("");
				results.push(mobChangeLuclinFace);				
				
				const mobChangeRace = new vscode.CompletionItem('ChangeRace', vscode.CompletionItemKind.Method);
				
				mobChangeRace.detail = "mob.ChangeRace()";
				mobChangeRace.insertText = new vscode.SnippetString('ChangeRace()');
				mobChangeRace.documentation = new vscode.MarkdownString("");
				results.push(mobChangeRace);				
				
				const mobChangeSize = new vscode.CompletionItem('ChangeSize', vscode.CompletionItemKind.Method);
				
				mobChangeSize.detail = "mob.ChangeSize()";
				mobChangeSize.insertText = new vscode.SnippetString('ChangeSize()');
				mobChangeSize.documentation = new vscode.MarkdownString("");
				results.push(mobChangeSize);				
				
				const mobChangeTexture = new vscode.CompletionItem('ChangeTexture', vscode.CompletionItemKind.Method);
				
				mobChangeTexture.detail = "mob.ChangeTexture()";
				mobChangeTexture.insertText = new vscode.SnippetString('ChangeTexture()');
				mobChangeTexture.documentation = new vscode.MarkdownString("");
				results.push(mobChangeTexture);				
				
				const mobCharmed = new vscode.CompletionItem('Charmed', vscode.CompletionItemKind.Method);
				
				mobCharmed.detail = "mob.Charmed()";
				mobCharmed.insertText = new vscode.SnippetString('Charmed()');
				mobCharmed.documentation = new vscode.MarkdownString("");
				results.push(mobCharmed);				
				
				const mobCheckAggro = new vscode.CompletionItem('CheckAggro', vscode.CompletionItemKind.Method);
				
				mobCheckAggro.detail = "mob.CheckAggro()";
				mobCheckAggro.insertText = new vscode.SnippetString('CheckAggro()');
				mobCheckAggro.documentation = new vscode.MarkdownString("");
				results.push(mobCheckAggro);				
				
				const mobCheckAggroAmount = new vscode.CompletionItem('CheckAggroAmount', vscode.CompletionItemKind.Method);
				
				mobCheckAggroAmount.detail = "mob.CheckAggroAmount()";
				mobCheckAggroAmount.insertText = new vscode.SnippetString('CheckAggroAmount()');
				mobCheckAggroAmount.documentation = new vscode.MarkdownString("");
				results.push(mobCheckAggroAmount);				
				
				const mobCheckHealAggroAmount = new vscode.CompletionItem('CheckHealAggroAmount', vscode.CompletionItemKind.Method);
				
				mobCheckHealAggroAmount.detail = "mob.CheckHealAggroAmount()";
				mobCheckHealAggroAmount.insertText = new vscode.SnippetString('CheckHealAggroAmount()');
				mobCheckHealAggroAmount.documentation = new vscode.MarkdownString("");
				results.push(mobCheckHealAggroAmount);				
				
				const mobCheckLoS = new vscode.CompletionItem('CheckLoS', vscode.CompletionItemKind.Method);
				
				mobCheckLoS.detail = "mob.CheckLoS()";
				mobCheckLoS.insertText = new vscode.SnippetString('CheckLoS()');
				mobCheckLoS.documentation = new vscode.MarkdownString("");
				results.push(mobCheckLoS);				
				
				const mobCheckLoSToLoc = new vscode.CompletionItem('CheckLoSToLoc', vscode.CompletionItemKind.Method);
				
				mobCheckLoSToLoc.detail = "mob.CheckLoSToLoc()";
				mobCheckLoSToLoc.insertText = new vscode.SnippetString('CheckLoSToLoc()');
				mobCheckLoSToLoc.documentation = new vscode.MarkdownString("");
				results.push(mobCheckLoSToLoc);				
				
				const mobCheckNumHitsRemaining = new vscode.CompletionItem('CheckNumHitsRemaining', vscode.CompletionItemKind.Method);
				
				mobCheckNumHitsRemaining.detail = "mob.CheckNumHitsRemaining()";
				mobCheckNumHitsRemaining.insertText = new vscode.SnippetString('CheckNumHitsRemaining()');
				mobCheckNumHitsRemaining.documentation = new vscode.MarkdownString("");
				results.push(mobCheckNumHitsRemaining);				
				
				const mobClearSpecialAbilities = new vscode.CompletionItem('ClearSpecialAbilities', vscode.CompletionItemKind.Method);
				
				mobClearSpecialAbilities.detail = "mob.ClearSpecialAbilities()";
				mobClearSpecialAbilities.insertText = new vscode.SnippetString('ClearSpecialAbilities()');
				mobClearSpecialAbilities.documentation = new vscode.MarkdownString("");
				results.push(mobClearSpecialAbilities);				
				
				const mobCombatRange = new vscode.CompletionItem('CombatRange', vscode.CompletionItemKind.Method);
				
				mobCombatRange.detail = "mob.CombatRange()";
				mobCombatRange.insertText = new vscode.SnippetString('CombatRange()');
				mobCombatRange.documentation = new vscode.MarkdownString("");
				results.push(mobCombatRange);				
				
				const mobDamage = new vscode.CompletionItem('Damage', vscode.CompletionItemKind.Method);
				
				mobDamage.detail = "mob.Damage()";
				mobDamage.insertText = new vscode.SnippetString('Damage()');
				mobDamage.documentation = new vscode.MarkdownString("");
				results.push(mobDamage);				
				
				const mobDelGlobal = new vscode.CompletionItem('DelGlobal', vscode.CompletionItemKind.Method);
				
				mobDelGlobal.detail = "mob.DelGlobal()";
				mobDelGlobal.insertText = new vscode.SnippetString('DelGlobal()');
				mobDelGlobal.documentation = new vscode.MarkdownString("");
				results.push(mobDelGlobal);				
				
				const mobDepop = new vscode.CompletionItem('Depop', vscode.CompletionItemKind.Method);
				
				mobDepop.detail = "mob.Depop()";
				mobDepop.insertText = new vscode.SnippetString('Depop()');
				mobDepop.documentation = new vscode.MarkdownString("");
				results.push(mobDepop);				
				
				const mobDivineAura = new vscode.CompletionItem('DivineAura', vscode.CompletionItemKind.Method);
				
				mobDivineAura.detail = "mob.DivineAura()";
				mobDivineAura.insertText = new vscode.SnippetString('DivineAura()');
				mobDivineAura.documentation = new vscode.MarkdownString("");
				results.push(mobDivineAura);				
				
				const mobDoAnim = new vscode.CompletionItem('DoAnim', vscode.CompletionItemKind.Method);
				
				mobDoAnim.detail = "mob.DoAnim()";
				mobDoAnim.insertText = new vscode.SnippetString('DoAnim()');
				mobDoAnim.documentation = new vscode.MarkdownString("");
				results.push(mobDoAnim);				
				
				const mobDoArcheryAttackDmg = new vscode.CompletionItem('DoArcheryAttackDmg', vscode.CompletionItemKind.Method);
				
				mobDoArcheryAttackDmg.detail = "mob.DoArcheryAttackDmg()";
				mobDoArcheryAttackDmg.insertText = new vscode.SnippetString('DoArcheryAttackDmg()');
				mobDoArcheryAttackDmg.documentation = new vscode.MarkdownString("");
				results.push(mobDoArcheryAttackDmg);				
				
				const mobDoKnockback = new vscode.CompletionItem('DoKnockback', vscode.CompletionItemKind.Method);
				
				mobDoKnockback.detail = "mob.DoKnockback()";
				mobDoKnockback.insertText = new vscode.SnippetString('DoKnockback()');
				mobDoKnockback.documentation = new vscode.MarkdownString("");
				results.push(mobDoKnockback);				
				
				const mobDoMeleeSkillAttackDmg = new vscode.CompletionItem('DoMeleeSkillAttackDmg', vscode.CompletionItemKind.Method);
				
				mobDoMeleeSkillAttackDmg.detail = "mob.DoMeleeSkillAttackDmg()";
				mobDoMeleeSkillAttackDmg.insertText = new vscode.SnippetString('DoMeleeSkillAttackDmg()');
				mobDoMeleeSkillAttackDmg.documentation = new vscode.MarkdownString("");
				results.push(mobDoMeleeSkillAttackDmg);				
				
				const mobDoSpecialAttackDamage = new vscode.CompletionItem('DoSpecialAttackDamage', vscode.CompletionItemKind.Method);
				
				mobDoSpecialAttackDamage.detail = "mob.DoSpecialAttackDamage()";
				mobDoSpecialAttackDamage.insertText = new vscode.SnippetString('DoSpecialAttackDamage()');
				mobDoSpecialAttackDamage.documentation = new vscode.MarkdownString("");
				results.push(mobDoSpecialAttackDamage);				
				
				const mobDoThrowingAttackDmg = new vscode.CompletionItem('DoThrowingAttackDmg', vscode.CompletionItemKind.Method);
				
				mobDoThrowingAttackDmg.detail = "mob.DoThrowingAttackDmg()";
				mobDoThrowingAttackDmg.insertText = new vscode.SnippetString('DoThrowingAttackDmg()');
				mobDoThrowingAttackDmg.documentation = new vscode.MarkdownString("");
				results.push(mobDoThrowingAttackDmg);				
				
				const mobDoubleAggro = new vscode.CompletionItem('DoubleAggro', vscode.CompletionItemKind.Method);
				
				mobDoubleAggro.detail = "mob.DoubleAggro()";
				mobDoubleAggro.insertText = new vscode.SnippetString('DoubleAggro()');
				mobDoubleAggro.documentation = new vscode.MarkdownString("");
				results.push(mobDoubleAggro);				
				
				const mobEmote = new vscode.CompletionItem('Emote', vscode.CompletionItemKind.Method);
				
				mobEmote.detail = "mob.Emote()";
				mobEmote.insertText = new vscode.SnippetString('Emote()');
				mobEmote.documentation = new vscode.MarkdownString("");
				results.push(mobEmote);				
				
				const mobEntityVariableExists = new vscode.CompletionItem('EntityVariableExists', vscode.CompletionItemKind.Method);
				
				mobEntityVariableExists.detail = "mob.EntityVariableExists()";
				mobEntityVariableExists.insertText = new vscode.SnippetString('EntityVariableExists()');
				mobEntityVariableExists.documentation = new vscode.MarkdownString("");
				results.push(mobEntityVariableExists);				
				
				const mobFaceTarget = new vscode.CompletionItem('FaceTarget', vscode.CompletionItemKind.Method);
				
				mobFaceTarget.detail = "mob.FaceTarget()";
				mobFaceTarget.insertText = new vscode.SnippetString('FaceTarget()');
				mobFaceTarget.documentation = new vscode.MarkdownString("");
				results.push(mobFaceTarget);				
				
				const mobFindBuff = new vscode.CompletionItem('FindBuff', vscode.CompletionItemKind.Method);
				
				mobFindBuff.detail = "mob.FindBuff()";
				mobFindBuff.insertText = new vscode.SnippetString('FindBuff()');
				mobFindBuff.documentation = new vscode.MarkdownString("");
				results.push(mobFindBuff);				
				
				const mobFindBuffBySlot = new vscode.CompletionItem('FindBuffBySlot', vscode.CompletionItemKind.Method);
				
				mobFindBuffBySlot.detail = "mob.FindBuffBySlot()";
				mobFindBuffBySlot.insertText = new vscode.SnippetString('FindBuffBySlot()');
				mobFindBuffBySlot.documentation = new vscode.MarkdownString("");
				results.push(mobFindBuffBySlot);				
				
				const mobFindGroundZ = new vscode.CompletionItem('FindGroundZ', vscode.CompletionItemKind.Method);
				
				mobFindGroundZ.detail = "mob.FindGroundZ()";
				mobFindGroundZ.insertText = new vscode.SnippetString('FindGroundZ()');
				mobFindGroundZ.documentation = new vscode.MarkdownString("");
				results.push(mobFindGroundZ);				
				
				const mobFindType = new vscode.CompletionItem('FindType', vscode.CompletionItemKind.Method);
				
				mobFindType.detail = "mob.FindType()";
				mobFindType.insertText = new vscode.SnippetString('FindType()');
				mobFindType.documentation = new vscode.MarkdownString("");
				results.push(mobFindType);				
				
				const mobGetAA = new vscode.CompletionItem('GetAA', vscode.CompletionItemKind.Method);
				
				mobGetAA.detail = "mob.GetAA()";
				mobGetAA.insertText = new vscode.SnippetString('GetAA()');
				mobGetAA.documentation = new vscode.MarkdownString("");
				results.push(mobGetAA);				
				
				const mobGetAABonuses = new vscode.CompletionItem('GetAABonuses', vscode.CompletionItemKind.Method);
				
				mobGetAABonuses.detail = "mob.GetAABonuses()";
				mobGetAABonuses.insertText = new vscode.SnippetString('GetAABonuses()');
				mobGetAABonuses.documentation = new vscode.MarkdownString("");
				results.push(mobGetAABonuses);				
				
				const mobGetAAByAAID = new vscode.CompletionItem('GetAAByAAID', vscode.CompletionItemKind.Method);
				
				mobGetAAByAAID.detail = "mob.GetAAByAAID()";
				mobGetAAByAAID.insertText = new vscode.SnippetString('GetAAByAAID()');
				mobGetAAByAAID.documentation = new vscode.MarkdownString("");
				results.push(mobGetAAByAAID);				
				
				const mobGetAC = new vscode.CompletionItem('GetAC', vscode.CompletionItemKind.Method);
				
				mobGetAC.detail = "mob.GetAC()";
				mobGetAC.insertText = new vscode.SnippetString('GetAC()');
				mobGetAC.documentation = new vscode.MarkdownString("");
				results.push(mobGetAC);				
				
				const mobGetAggroRange = new vscode.CompletionItem('GetAggroRange', vscode.CompletionItemKind.Method);
				
				mobGetAggroRange.detail = "mob.GetAggroRange()";
				mobGetAggroRange.insertText = new vscode.SnippetString('GetAggroRange()');
				mobGetAggroRange.documentation = new vscode.MarkdownString("");
				results.push(mobGetAggroRange);				
				
				const mobGetAGI = new vscode.CompletionItem('GetAGI', vscode.CompletionItemKind.Method);
				
				mobGetAGI.detail = "mob.GetAGI()";
				mobGetAGI.insertText = new vscode.SnippetString('GetAGI()');
				mobGetAGI.documentation = new vscode.MarkdownString("");
				results.push(mobGetAGI);				
				
				const mobGetAllowBeneficial = new vscode.CompletionItem('GetAllowBeneficial', vscode.CompletionItemKind.Method);
				
				mobGetAllowBeneficial.detail = "mob.GetAllowBeneficial()";
				mobGetAllowBeneficial.insertText = new vscode.SnippetString('GetAllowBeneficial()');
				mobGetAllowBeneficial.documentation = new vscode.MarkdownString("");
				results.push(mobGetAllowBeneficial);				
				
				const mobGetAppearance = new vscode.CompletionItem('GetAppearance', vscode.CompletionItemKind.Method);
				
				mobGetAppearance.detail = "mob.GetAppearance()";
				mobGetAppearance.insertText = new vscode.SnippetString('GetAppearance()');
				mobGetAppearance.documentation = new vscode.MarkdownString("");
				results.push(mobGetAppearance);				
				
				const mobGetAssistRange = new vscode.CompletionItem('GetAssistRange', vscode.CompletionItemKind.Method);
				
				mobGetAssistRange.detail = "mob.GetAssistRange()";
				mobGetAssistRange.insertText = new vscode.SnippetString('GetAssistRange()');
				mobGetAssistRange.documentation = new vscode.MarkdownString("");
				results.push(mobGetAssistRange);				
				
				const mobGetATK = new vscode.CompletionItem('GetATK', vscode.CompletionItemKind.Method);
				
				mobGetATK.detail = "mob.GetATK()";
				mobGetATK.insertText = new vscode.SnippetString('GetATK()');
				mobGetATK.documentation = new vscode.MarkdownString("");
				results.push(mobGetATK);				
				
				const mobGetBaseGender = new vscode.CompletionItem('GetBaseGender', vscode.CompletionItemKind.Method);
				
				mobGetBaseGender.detail = "mob.GetBaseGender()";
				mobGetBaseGender.insertText = new vscode.SnippetString('GetBaseGender()');
				mobGetBaseGender.documentation = new vscode.MarkdownString("");
				results.push(mobGetBaseGender);				
				
				const mobGetBaseRace = new vscode.CompletionItem('GetBaseRace', vscode.CompletionItemKind.Method);
				
				mobGetBaseRace.detail = "mob.GetBaseRace()";
				mobGetBaseRace.insertText = new vscode.SnippetString('GetBaseRace()');
				mobGetBaseRace.documentation = new vscode.MarkdownString("");
				results.push(mobGetBaseRace);				
				
				const mobGetBaseSize = new vscode.CompletionItem('GetBaseSize', vscode.CompletionItemKind.Method);
				
				mobGetBaseSize.detail = "mob.GetBaseSize()";
				mobGetBaseSize.insertText = new vscode.SnippetString('GetBaseSize()');
				mobGetBaseSize.documentation = new vscode.MarkdownString("");
				results.push(mobGetBaseSize);				
				
				const mobGetBeard = new vscode.CompletionItem('GetBeard', vscode.CompletionItemKind.Method);
				
				mobGetBeard.detail = "mob.GetBeard()";
				mobGetBeard.insertText = new vscode.SnippetString('GetBeard()');
				mobGetBeard.documentation = new vscode.MarkdownString("");
				results.push(mobGetBeard);				
				
				const mobGetBeardColor = new vscode.CompletionItem('GetBeardColor', vscode.CompletionItemKind.Method);
				
				mobGetBeardColor.detail = "mob.GetBeardColor()";
				mobGetBeardColor.insertText = new vscode.SnippetString('GetBeardColor()');
				mobGetBeardColor.documentation = new vscode.MarkdownString("");
				results.push(mobGetBeardColor);				
				
				const mobGetBodyType = new vscode.CompletionItem('GetBodyType', vscode.CompletionItemKind.Method);
				
				mobGetBodyType.detail = "mob.GetBodyType()";
				mobGetBodyType.insertText = new vscode.SnippetString('GetBodyType()');
				mobGetBodyType.documentation = new vscode.MarkdownString("");
				results.push(mobGetBodyType);				
				
				const mobGetBuffSlotFromType = new vscode.CompletionItem('GetBuffSlotFromType', vscode.CompletionItemKind.Method);
				
				mobGetBuffSlotFromType.detail = "mob.GetBuffSlotFromType()";
				mobGetBuffSlotFromType.insertText = new vscode.SnippetString('GetBuffSlotFromType()');
				mobGetBuffSlotFromType.documentation = new vscode.MarkdownString("");
				results.push(mobGetBuffSlotFromType);				
				
				const mobGetCasterLevel = new vscode.CompletionItem('GetCasterLevel', vscode.CompletionItemKind.Method);
				
				mobGetCasterLevel.detail = "mob.GetCasterLevel()";
				mobGetCasterLevel.insertText = new vscode.SnippetString('GetCasterLevel()');
				mobGetCasterLevel.documentation = new vscode.MarkdownString("");
				results.push(mobGetCasterLevel);				
				
				const mobGetCHA = new vscode.CompletionItem('GetCHA', vscode.CompletionItemKind.Method);
				
				mobGetCHA.detail = "mob.GetCHA()";
				mobGetCHA.insertText = new vscode.SnippetString('GetCHA()');
				mobGetCHA.documentation = new vscode.MarkdownString("");
				results.push(mobGetCHA);				
				
				const mobGetClass = new vscode.CompletionItem('GetClass', vscode.CompletionItemKind.Method);
				
				mobGetClass.detail = "mob.GetClass()";
				mobGetClass.insertText = new vscode.SnippetString('GetClass()');
				mobGetClass.documentation = new vscode.MarkdownString("");
				results.push(mobGetClass);				
				
				const mobGetCleanName = new vscode.CompletionItem('GetCleanName', vscode.CompletionItemKind.Method);
				
				mobGetCleanName.detail = "mob.GetCleanName()";
				mobGetCleanName.insertText = new vscode.SnippetString('GetCleanName()');
				mobGetCleanName.documentation = new vscode.MarkdownString("");
				results.push(mobGetCleanName);				
				
				const mobGetCorruption = new vscode.CompletionItem('GetCorruption', vscode.CompletionItemKind.Method);
				
				mobGetCorruption.detail = "mob.GetCorruption()";
				mobGetCorruption.insertText = new vscode.SnippetString('GetCorruption()');
				mobGetCorruption.documentation = new vscode.MarkdownString("");
				results.push(mobGetCorruption);				
				
				const mobGetCR = new vscode.CompletionItem('GetCR', vscode.CompletionItemKind.Method);
				
				mobGetCR.detail = "mob.GetCR()";
				mobGetCR.insertText = new vscode.SnippetString('GetCR()');
				mobGetCR.documentation = new vscode.MarkdownString("");
				results.push(mobGetCR);				
				
				const mobGetDamageAmount = new vscode.CompletionItem('GetDamageAmount', vscode.CompletionItemKind.Method);
				
				mobGetDamageAmount.detail = "mob.GetDamageAmount()";
				mobGetDamageAmount.insertText = new vscode.SnippetString('GetDamageAmount()');
				mobGetDamageAmount.documentation = new vscode.MarkdownString("");
				results.push(mobGetDamageAmount);				
				
				const mobGetDeity = new vscode.CompletionItem('GetDeity', vscode.CompletionItemKind.Method);
				
				mobGetDeity.detail = "mob.GetDeity()";
				mobGetDeity.insertText = new vscode.SnippetString('GetDeity()');
				mobGetDeity.documentation = new vscode.MarkdownString("");
				results.push(mobGetDeity);				
				
				const mobGetDEX = new vscode.CompletionItem('GetDEX', vscode.CompletionItemKind.Method);
				
				mobGetDEX.detail = "mob.GetDEX()";
				mobGetDEX.insertText = new vscode.SnippetString('GetDEX()');
				mobGetDEX.documentation = new vscode.MarkdownString("");
				results.push(mobGetDEX);				
				
				const mobGetDisplayAC = new vscode.CompletionItem('GetDisplayAC', vscode.CompletionItemKind.Method);
				
				mobGetDisplayAC.detail = "mob.GetDisplayAC()";
				mobGetDisplayAC.insertText = new vscode.SnippetString('GetDisplayAC()');
				mobGetDisplayAC.documentation = new vscode.MarkdownString("");
				results.push(mobGetDisplayAC);				
				
				const mobGetDR = new vscode.CompletionItem('GetDR', vscode.CompletionItemKind.Method);
				
				mobGetDR.detail = "mob.GetDR()";
				mobGetDR.insertText = new vscode.SnippetString('GetDR()');
				mobGetDR.documentation = new vscode.MarkdownString("");
				results.push(mobGetDR);				
				
				const mobGetDrakkinDetails = new vscode.CompletionItem('GetDrakkinDetails', vscode.CompletionItemKind.Method);
				
				mobGetDrakkinDetails.detail = "mob.GetDrakkinDetails()";
				mobGetDrakkinDetails.insertText = new vscode.SnippetString('GetDrakkinDetails()');
				mobGetDrakkinDetails.documentation = new vscode.MarkdownString("");
				results.push(mobGetDrakkinDetails);				
				
				const mobGetDrakkinHeritage = new vscode.CompletionItem('GetDrakkinHeritage', vscode.CompletionItemKind.Method);
				
				mobGetDrakkinHeritage.detail = "mob.GetDrakkinHeritage()";
				mobGetDrakkinHeritage.insertText = new vscode.SnippetString('GetDrakkinHeritage()');
				mobGetDrakkinHeritage.documentation = new vscode.MarkdownString("");
				results.push(mobGetDrakkinHeritage);				
				
				const mobGetDrakkinTattoo = new vscode.CompletionItem('GetDrakkinTattoo', vscode.CompletionItemKind.Method);
				
				mobGetDrakkinTattoo.detail = "mob.GetDrakkinTattoo()";
				mobGetDrakkinTattoo.insertText = new vscode.SnippetString('GetDrakkinTattoo()');
				mobGetDrakkinTattoo.documentation = new vscode.MarkdownString("");
				results.push(mobGetDrakkinTattoo);				
				
				const mobGetEntityVariable = new vscode.CompletionItem('GetEntityVariable', vscode.CompletionItemKind.Method);
				
				mobGetEntityVariable.detail = "mob.GetEntityVariable()";
				mobGetEntityVariable.insertText = new vscode.SnippetString('GetEntityVariable()');
				mobGetEntityVariable.documentation = new vscode.MarkdownString("");
				results.push(mobGetEntityVariable);				
				
				const mobGetFcDamageAmtIncoming = new vscode.CompletionItem('GetFcDamageAmtIncoming', vscode.CompletionItemKind.Method);
				
				mobGetFcDamageAmtIncoming.detail = "mob.GetFcDamageAmtIncoming()";
				mobGetFcDamageAmtIncoming.insertText = new vscode.SnippetString('GetFcDamageAmtIncoming()');
				mobGetFcDamageAmtIncoming.documentation = new vscode.MarkdownString("");
				results.push(mobGetFcDamageAmtIncoming);				
				
				const mobGetFlurryChance = new vscode.CompletionItem('GetFlurryChance', vscode.CompletionItemKind.Method);
				
				mobGetFlurryChance.detail = "mob.GetFlurryChance()";
				mobGetFlurryChance.insertText = new vscode.SnippetString('GetFlurryChance()');
				mobGetFlurryChance.documentation = new vscode.MarkdownString("");
				results.push(mobGetFlurryChance);				
				
				const mobGetFR = new vscode.CompletionItem('GetFR', vscode.CompletionItemKind.Method);
				
				mobGetFR.detail = "mob.GetFR()";
				mobGetFR.insertText = new vscode.SnippetString('GetFR()');
				mobGetFR.documentation = new vscode.MarkdownString("");
				results.push(mobGetFR);				
				
				const mobGetGender = new vscode.CompletionItem('GetGender', vscode.CompletionItemKind.Method);
				
				mobGetGender.detail = "mob.GetGender()";
				mobGetGender.insertText = new vscode.SnippetString('GetGender()');
				mobGetGender.documentation = new vscode.MarkdownString("");
				results.push(mobGetGender);				
				
				const mobGetGlobal = new vscode.CompletionItem('GetGlobal', vscode.CompletionItemKind.Method);
				
				mobGetGlobal.detail = "mob.GetGlobal()";
				mobGetGlobal.insertText = new vscode.SnippetString('GetGlobal()');
				mobGetGlobal.documentation = new vscode.MarkdownString("");
				results.push(mobGetGlobal);				
				
				const mobGetHairColor = new vscode.CompletionItem('GetHairColor', vscode.CompletionItemKind.Method);
				
				mobGetHairColor.detail = "mob.GetHairColor()";
				mobGetHairColor.insertText = new vscode.SnippetString('GetHairColor()');
				mobGetHairColor.documentation = new vscode.MarkdownString("");
				results.push(mobGetHairColor);				
				
				const mobGetHairStyle = new vscode.CompletionItem('GetHairStyle', vscode.CompletionItemKind.Method);
				
				mobGetHairStyle.detail = "mob.GetHairStyle()";
				mobGetHairStyle.insertText = new vscode.SnippetString('GetHairStyle()');
				mobGetHairStyle.documentation = new vscode.MarkdownString("");
				results.push(mobGetHairStyle);				
				
				const mobGetHandToHandDamage = new vscode.CompletionItem('GetHandToHandDamage', vscode.CompletionItemKind.Method);
				
				mobGetHandToHandDamage.detail = "mob.GetHandToHandDamage()";
				mobGetHandToHandDamage.insertText = new vscode.SnippetString('GetHandToHandDamage()');
				mobGetHandToHandDamage.documentation = new vscode.MarkdownString("");
				results.push(mobGetHandToHandDamage);				
				
				const mobGetHandToHandDelay = new vscode.CompletionItem('GetHandToHandDelay', vscode.CompletionItemKind.Method);
				
				mobGetHandToHandDelay.detail = "mob.GetHandToHandDelay()";
				mobGetHandToHandDelay.insertText = new vscode.SnippetString('GetHandToHandDelay()');
				mobGetHandToHandDelay.documentation = new vscode.MarkdownString("");
				results.push(mobGetHandToHandDelay);				
				
				const mobGetHaste = new vscode.CompletionItem('GetHaste', vscode.CompletionItemKind.Method);
				
				mobGetHaste.detail = "mob.GetHaste()";
				mobGetHaste.insertText = new vscode.SnippetString('GetHaste()');
				mobGetHaste.documentation = new vscode.MarkdownString("");
				results.push(mobGetHaste);				
				
				const mobGetHateAmount = new vscode.CompletionItem('GetHateAmount', vscode.CompletionItemKind.Method);
				
				mobGetHateAmount.detail = "mob.GetHateAmount()";
				mobGetHateAmount.insertText = new vscode.SnippetString('GetHateAmount()');
				mobGetHateAmount.documentation = new vscode.MarkdownString("");
				results.push(mobGetHateAmount);				
				
				const mobGetHateDamageTop = new vscode.CompletionItem('GetHateDamageTop', vscode.CompletionItemKind.Method);
				
				mobGetHateDamageTop.detail = "mob.GetHateDamageTop()";
				mobGetHateDamageTop.insertText = new vscode.SnippetString('GetHateDamageTop()');
				mobGetHateDamageTop.documentation = new vscode.MarkdownString("");
				results.push(mobGetHateDamageTop);				
				
				const mobGetHateList = new vscode.CompletionItem('GetHateList', vscode.CompletionItemKind.Method);
				
				mobGetHateList.detail = "mob.GetHateList()";
				mobGetHateList.insertText = new vscode.SnippetString('GetHateList()');
				mobGetHateList.documentation = new vscode.MarkdownString("");
				results.push(mobGetHateList);				
				
				const mobGetHateRandom = new vscode.CompletionItem('GetHateRandom', vscode.CompletionItemKind.Method);
				
				mobGetHateRandom.detail = "mob.GetHateRandom()";
				mobGetHateRandom.insertText = new vscode.SnippetString('GetHateRandom()');
				mobGetHateRandom.documentation = new vscode.MarkdownString("");
				results.push(mobGetHateRandom);				
				
				const mobGetHateTop = new vscode.CompletionItem('GetHateTop', vscode.CompletionItemKind.Method);
				
				mobGetHateTop.detail = "mob.GetHateTop()";
				mobGetHateTop.insertText = new vscode.SnippetString('GetHateTop()');
				mobGetHateTop.documentation = new vscode.MarkdownString("");
				results.push(mobGetHateTop);				
				
				const mobGetHeading = new vscode.CompletionItem('GetHeading', vscode.CompletionItemKind.Method);
				
				mobGetHeading.detail = "mob.GetHeading()";
				mobGetHeading.insertText = new vscode.SnippetString('GetHeading()');
				mobGetHeading.documentation = new vscode.MarkdownString("");
				results.push(mobGetHeading);				
				
				const mobGetHelmTexture = new vscode.CompletionItem('GetHelmTexture', vscode.CompletionItemKind.Method);
				
				mobGetHelmTexture.detail = "mob.GetHelmTexture()";
				mobGetHelmTexture.insertText = new vscode.SnippetString('GetHelmTexture()');
				mobGetHelmTexture.documentation = new vscode.MarkdownString("");
				results.push(mobGetHelmTexture);				
				
				const mobGetHerosForgeModel = new vscode.CompletionItem('GetHerosForgeModel', vscode.CompletionItemKind.Method);
				
				mobGetHerosForgeModel.detail = "mob.GetHerosForgeModel()";
				mobGetHerosForgeModel.insertText = new vscode.SnippetString('GetHerosForgeModel()');
				mobGetHerosForgeModel.documentation = new vscode.MarkdownString("");
				results.push(mobGetHerosForgeModel);				
				
				const mobGetHP = new vscode.CompletionItem('GetHP', vscode.CompletionItemKind.Method);
				
				mobGetHP.detail = "mob.GetHP()";
				mobGetHP.insertText = new vscode.SnippetString('GetHP()');
				mobGetHP.documentation = new vscode.MarkdownString("");
				results.push(mobGetHP);				
				
				const mobGetHPRatio = new vscode.CompletionItem('GetHPRatio', vscode.CompletionItemKind.Method);
				
				mobGetHPRatio.detail = "mob.GetHPRatio()";
				mobGetHPRatio.insertText = new vscode.SnippetString('GetHPRatio()');
				mobGetHPRatio.documentation = new vscode.MarkdownString("");
				results.push(mobGetHPRatio);				
				
				const mobGetINT = new vscode.CompletionItem('GetINT', vscode.CompletionItemKind.Method);
				
				mobGetINT.detail = "mob.GetINT()";
				mobGetINT.insertText = new vscode.SnippetString('GetINT()');
				mobGetINT.documentation = new vscode.MarkdownString("");
				results.push(mobGetINT);				
				
				const mobGetInvul = new vscode.CompletionItem('GetInvul', vscode.CompletionItemKind.Method);
				
				mobGetInvul.detail = "mob.GetInvul()";
				mobGetInvul.insertText = new vscode.SnippetString('GetInvul()');
				mobGetInvul.documentation = new vscode.MarkdownString("");
				results.push(mobGetInvul);				
				
				const mobGetItemBonuses = new vscode.CompletionItem('GetItemBonuses', vscode.CompletionItemKind.Method);
				
				mobGetItemBonuses.detail = "mob.GetItemBonuses()";
				mobGetItemBonuses.insertText = new vscode.SnippetString('GetItemBonuses()');
				mobGetItemBonuses.documentation = new vscode.MarkdownString("");
				results.push(mobGetItemBonuses);				
				
				const mobGetItemHPBonuses = new vscode.CompletionItem('GetItemHPBonuses', vscode.CompletionItemKind.Method);
				
				mobGetItemHPBonuses.detail = "mob.GetItemHPBonuses()";
				mobGetItemHPBonuses.insertText = new vscode.SnippetString('GetItemHPBonuses()');
				mobGetItemHPBonuses.documentation = new vscode.MarkdownString("");
				results.push(mobGetItemHPBonuses);				
				
				const mobGetItemStat = new vscode.CompletionItem('GetItemStat', vscode.CompletionItemKind.Method);
				
				mobGetItemStat.detail = "mob.GetItemStat()";
				mobGetItemStat.insertText = new vscode.SnippetString('GetItemStat()');
				mobGetItemStat.documentation = new vscode.MarkdownString("");
				results.push(mobGetItemStat);				
				
				const mobGetLevel = new vscode.CompletionItem('GetLevel', vscode.CompletionItemKind.Method);
				
				mobGetLevel.detail = "mob.GetLevel()";
				mobGetLevel.insertText = new vscode.SnippetString('GetLevel()');
				mobGetLevel.documentation = new vscode.MarkdownString("");
				results.push(mobGetLevel);				
				
				const mobGetLevelCon = new vscode.CompletionItem('GetLevelCon', vscode.CompletionItemKind.Method);
				
				mobGetLevelCon.detail = "mob.GetLevelCon()";
				mobGetLevelCon.insertText = new vscode.SnippetString('GetLevelCon()');
				mobGetLevelCon.documentation = new vscode.MarkdownString("");
				results.push(mobGetLevelCon);				
				
				const mobGetLuclinFace = new vscode.CompletionItem('GetLuclinFace', vscode.CompletionItemKind.Method);
				
				mobGetLuclinFace.detail = "mob.GetLuclinFace()";
				mobGetLuclinFace.insertText = new vscode.SnippetString('GetLuclinFace()');
				mobGetLuclinFace.documentation = new vscode.MarkdownString("");
				results.push(mobGetLuclinFace);				
				
				const mobGetMana = new vscode.CompletionItem('GetMana', vscode.CompletionItemKind.Method);
				
				mobGetMana.detail = "mob.GetMana()";
				mobGetMana.insertText = new vscode.SnippetString('GetMana()');
				mobGetMana.documentation = new vscode.MarkdownString("");
				results.push(mobGetMana);				
				
				const mobGetManaRatio = new vscode.CompletionItem('GetManaRatio', vscode.CompletionItemKind.Method);
				
				mobGetManaRatio.detail = "mob.GetManaRatio()";
				mobGetManaRatio.insertText = new vscode.SnippetString('GetManaRatio()');
				mobGetManaRatio.documentation = new vscode.MarkdownString("");
				results.push(mobGetManaRatio);				
				
				const mobGetMaxAGI = new vscode.CompletionItem('GetMaxAGI', vscode.CompletionItemKind.Method);
				
				mobGetMaxAGI.detail = "mob.GetMaxAGI()";
				mobGetMaxAGI.insertText = new vscode.SnippetString('GetMaxAGI()');
				mobGetMaxAGI.documentation = new vscode.MarkdownString("");
				results.push(mobGetMaxAGI);				
				
				const mobGetMaxCHA = new vscode.CompletionItem('GetMaxCHA', vscode.CompletionItemKind.Method);
				
				mobGetMaxCHA.detail = "mob.GetMaxCHA()";
				mobGetMaxCHA.insertText = new vscode.SnippetString('GetMaxCHA()');
				mobGetMaxCHA.documentation = new vscode.MarkdownString("");
				results.push(mobGetMaxCHA);				
				
				const mobGetMaxDEX = new vscode.CompletionItem('GetMaxDEX', vscode.CompletionItemKind.Method);
				
				mobGetMaxDEX.detail = "mob.GetMaxDEX()";
				mobGetMaxDEX.insertText = new vscode.SnippetString('GetMaxDEX()');
				mobGetMaxDEX.documentation = new vscode.MarkdownString("");
				results.push(mobGetMaxDEX);				
				
				const mobGetMaxHP = new vscode.CompletionItem('GetMaxHP', vscode.CompletionItemKind.Method);
				
				mobGetMaxHP.detail = "mob.GetMaxHP()";
				mobGetMaxHP.insertText = new vscode.SnippetString('GetMaxHP()');
				mobGetMaxHP.documentation = new vscode.MarkdownString("");
				results.push(mobGetMaxHP);				
				
				const mobGetMaxINT = new vscode.CompletionItem('GetMaxINT', vscode.CompletionItemKind.Method);
				
				mobGetMaxINT.detail = "mob.GetMaxINT()";
				mobGetMaxINT.insertText = new vscode.SnippetString('GetMaxINT()');
				mobGetMaxINT.documentation = new vscode.MarkdownString("");
				results.push(mobGetMaxINT);				
				
				const mobGetMaxMana = new vscode.CompletionItem('GetMaxMana', vscode.CompletionItemKind.Method);
				
				mobGetMaxMana.detail = "mob.GetMaxMana()";
				mobGetMaxMana.insertText = new vscode.SnippetString('GetMaxMana()');
				mobGetMaxMana.documentation = new vscode.MarkdownString("");
				results.push(mobGetMaxMana);				
				
				const mobGetMaxSTA = new vscode.CompletionItem('GetMaxSTA', vscode.CompletionItemKind.Method);
				
				mobGetMaxSTA.detail = "mob.GetMaxSTA()";
				mobGetMaxSTA.insertText = new vscode.SnippetString('GetMaxSTA()');
				mobGetMaxSTA.documentation = new vscode.MarkdownString("");
				results.push(mobGetMaxSTA);				
				
				const mobGetMaxSTR = new vscode.CompletionItem('GetMaxSTR', vscode.CompletionItemKind.Method);
				
				mobGetMaxSTR.detail = "mob.GetMaxSTR()";
				mobGetMaxSTR.insertText = new vscode.SnippetString('GetMaxSTR()');
				mobGetMaxSTR.documentation = new vscode.MarkdownString("");
				results.push(mobGetMaxSTR);				
				
				const mobGetMaxWIS = new vscode.CompletionItem('GetMaxWIS', vscode.CompletionItemKind.Method);
				
				mobGetMaxWIS.detail = "mob.GetMaxWIS()";
				mobGetMaxWIS.insertText = new vscode.SnippetString('GetMaxWIS()');
				mobGetMaxWIS.documentation = new vscode.MarkdownString("");
				results.push(mobGetMaxWIS);				
				
				const mobGetMeleeMitigation = new vscode.CompletionItem('GetMeleeMitigation', vscode.CompletionItemKind.Method);
				
				mobGetMeleeMitigation.detail = "mob.GetMeleeMitigation()";
				mobGetMeleeMitigation.insertText = new vscode.SnippetString('GetMeleeMitigation()');
				mobGetMeleeMitigation.documentation = new vscode.MarkdownString("");
				results.push(mobGetMeleeMitigation);				
				
				const mobGetModSkillDmgTaken = new vscode.CompletionItem('GetModSkillDmgTaken', vscode.CompletionItemKind.Method);
				
				mobGetModSkillDmgTaken.detail = "mob.GetModSkillDmgTaken()";
				mobGetModSkillDmgTaken.insertText = new vscode.SnippetString('GetModSkillDmgTaken()');
				mobGetModSkillDmgTaken.documentation = new vscode.MarkdownString("");
				results.push(mobGetModSkillDmgTaken);				
				
				const mobGetModVulnerability = new vscode.CompletionItem('GetModVulnerability', vscode.CompletionItemKind.Method);
				
				mobGetModVulnerability.detail = "mob.GetModVulnerability()";
				mobGetModVulnerability.insertText = new vscode.SnippetString('GetModVulnerability()');
				mobGetModVulnerability.documentation = new vscode.MarkdownString("");
				results.push(mobGetModVulnerability);				
				
				const mobGetMR = new vscode.CompletionItem('GetMR', vscode.CompletionItemKind.Method);
				
				mobGetMR.detail = "mob.GetMR()";
				mobGetMR.insertText = new vscode.SnippetString('GetMR()');
				mobGetMR.documentation = new vscode.MarkdownString("");
				results.push(mobGetMR);				
				
				const mobGetName = new vscode.CompletionItem('GetName', vscode.CompletionItemKind.Method);
				
				mobGetName.detail = "mob.GetName()";
				mobGetName.insertText = new vscode.SnippetString('GetName()');
				mobGetName.documentation = new vscode.MarkdownString("");
				results.push(mobGetName);				
				
				const mobGetNPCTypeID = new vscode.CompletionItem('GetNPCTypeID', vscode.CompletionItemKind.Method);
				
				mobGetNPCTypeID.detail = "mob.GetNPCTypeID()";
				mobGetNPCTypeID.insertText = new vscode.SnippetString('GetNPCTypeID()');
				mobGetNPCTypeID.documentation = new vscode.MarkdownString("");
				results.push(mobGetNPCTypeID);				
				
				const mobGetOrigBodyType = new vscode.CompletionItem('GetOrigBodyType', vscode.CompletionItemKind.Method);
				
				mobGetOrigBodyType.detail = "mob.GetOrigBodyType()";
				mobGetOrigBodyType.insertText = new vscode.SnippetString('GetOrigBodyType()');
				mobGetOrigBodyType.documentation = new vscode.MarkdownString("");
				results.push(mobGetOrigBodyType);				
				
				const mobGetOwner = new vscode.CompletionItem('GetOwner', vscode.CompletionItemKind.Method);
				
				mobGetOwner.detail = "mob.GetOwner()";
				mobGetOwner.insertText = new vscode.SnippetString('GetOwner()');
				mobGetOwner.documentation = new vscode.MarkdownString("");
				results.push(mobGetOwner);				
				
				const mobGetPet = new vscode.CompletionItem('GetPet', vscode.CompletionItemKind.Method);
				
				mobGetPet.detail = "mob.GetPet()";
				mobGetPet.insertText = new vscode.SnippetString('GetPet()');
				mobGetPet.documentation = new vscode.MarkdownString("");
				results.push(mobGetPet);				
				
				const mobGetPetOrder = new vscode.CompletionItem('GetPetOrder', vscode.CompletionItemKind.Method);
				
				mobGetPetOrder.detail = "mob.GetPetOrder()";
				mobGetPetOrder.insertText = new vscode.SnippetString('GetPetOrder()');
				mobGetPetOrder.documentation = new vscode.MarkdownString("");
				results.push(mobGetPetOrder);				
				
				const mobGetPhR = new vscode.CompletionItem('GetPhR', vscode.CompletionItemKind.Method);
				
				mobGetPhR.detail = "mob.GetPhR()";
				mobGetPhR.insertText = new vscode.SnippetString('GetPhR()');
				mobGetPhR.documentation = new vscode.MarkdownString("");
				results.push(mobGetPhR);				
				
				const mobGetPR = new vscode.CompletionItem('GetPR', vscode.CompletionItemKind.Method);
				
				mobGetPR.detail = "mob.GetPR()";
				mobGetPR.insertText = new vscode.SnippetString('GetPR()');
				mobGetPR.documentation = new vscode.MarkdownString("");
				results.push(mobGetPR);				
				
				const mobGetRace = new vscode.CompletionItem('GetRace', vscode.CompletionItemKind.Method);
				
				mobGetRace.detail = "mob.GetRace()";
				mobGetRace.insertText = new vscode.SnippetString('GetRace()');
				mobGetRace.documentation = new vscode.MarkdownString("");
				results.push(mobGetRace);				
				
				const mobGetResist = new vscode.CompletionItem('GetResist', vscode.CompletionItemKind.Method);
				
				mobGetResist.detail = "mob.GetResist()";
				mobGetResist.insertText = new vscode.SnippetString('GetResist()');
				mobGetResist.documentation = new vscode.MarkdownString("");
				results.push(mobGetResist);				
				
				const mobGetReverseFactionCon = new vscode.CompletionItem('GetReverseFactionCon', vscode.CompletionItemKind.Method);
				
				mobGetReverseFactionCon.detail = "mob.GetReverseFactionCon()";
				mobGetReverseFactionCon.insertText = new vscode.SnippetString('GetReverseFactionCon()');
				mobGetReverseFactionCon.documentation = new vscode.MarkdownString("");
				results.push(mobGetReverseFactionCon);				
				
				const mobGetRunspeed = new vscode.CompletionItem('GetRunspeed', vscode.CompletionItemKind.Method);
				
				mobGetRunspeed.detail = "mob.GetRunspeed()";
				mobGetRunspeed.insertText = new vscode.SnippetString('GetRunspeed()');
				mobGetRunspeed.documentation = new vscode.MarkdownString("");
				results.push(mobGetRunspeed);				
				
				const mobGetSize = new vscode.CompletionItem('GetSize', vscode.CompletionItemKind.Method);
				
				mobGetSize.detail = "mob.GetSize()";
				mobGetSize.insertText = new vscode.SnippetString('GetSize()');
				mobGetSize.documentation = new vscode.MarkdownString("");
				results.push(mobGetSize);				
				
				const mobGetSkill = new vscode.CompletionItem('GetSkill', vscode.CompletionItemKind.Method);
				
				mobGetSkill.detail = "mob.GetSkill()";
				mobGetSkill.insertText = new vscode.SnippetString('GetSkill()');
				mobGetSkill.documentation = new vscode.MarkdownString("");
				results.push(mobGetSkill);				
				
				const mobGetSkillDmgAmt = new vscode.CompletionItem('GetSkillDmgAmt', vscode.CompletionItemKind.Method);
				
				mobGetSkillDmgAmt.detail = "mob.GetSkillDmgAmt()";
				mobGetSkillDmgAmt.insertText = new vscode.SnippetString('GetSkillDmgAmt()');
				mobGetSkillDmgAmt.documentation = new vscode.MarkdownString("");
				results.push(mobGetSkillDmgAmt);				
				
				const mobGetSkillDmgTaken = new vscode.CompletionItem('GetSkillDmgTaken', vscode.CompletionItemKind.Method);
				
				mobGetSkillDmgTaken.detail = "mob.GetSkillDmgTaken()";
				mobGetSkillDmgTaken.insertText = new vscode.SnippetString('GetSkillDmgTaken()');
				mobGetSkillDmgTaken.documentation = new vscode.MarkdownString("");
				results.push(mobGetSkillDmgTaken);				
				
				const mobGetSpecialAbility = new vscode.CompletionItem('GetSpecialAbility', vscode.CompletionItemKind.Method);
				
				mobGetSpecialAbility.detail = "mob.GetSpecialAbility()";
				mobGetSpecialAbility.insertText = new vscode.SnippetString('GetSpecialAbility()');
				mobGetSpecialAbility.documentation = new vscode.MarkdownString("");
				results.push(mobGetSpecialAbility);				
				
				const mobGetSpecialAbilityParam = new vscode.CompletionItem('GetSpecialAbilityParam', vscode.CompletionItemKind.Method);
				
				mobGetSpecialAbilityParam.detail = "mob.GetSpecialAbilityParam()";
				mobGetSpecialAbilityParam.insertText = new vscode.SnippetString('GetSpecialAbilityParam()');
				mobGetSpecialAbilityParam.documentation = new vscode.MarkdownString("");
				results.push(mobGetSpecialAbilityParam);				
				
				const mobGetSpecializeSkillValue = new vscode.CompletionItem('GetSpecializeSkillValue', vscode.CompletionItemKind.Method);
				
				mobGetSpecializeSkillValue.detail = "mob.GetSpecializeSkillValue()";
				mobGetSpecializeSkillValue.insertText = new vscode.SnippetString('GetSpecializeSkillValue()');
				mobGetSpecializeSkillValue.documentation = new vscode.MarkdownString("");
				results.push(mobGetSpecializeSkillValue);				
				
				const mobGetSpellBonuses = new vscode.CompletionItem('GetSpellBonuses', vscode.CompletionItemKind.Method);
				
				mobGetSpellBonuses.detail = "mob.GetSpellBonuses()";
				mobGetSpellBonuses.insertText = new vscode.SnippetString('GetSpellBonuses()');
				mobGetSpellBonuses.documentation = new vscode.MarkdownString("");
				results.push(mobGetSpellBonuses);				
				
				const mobGetSpellHPBonuses = new vscode.CompletionItem('GetSpellHPBonuses', vscode.CompletionItemKind.Method);
				
				mobGetSpellHPBonuses.detail = "mob.GetSpellHPBonuses()";
				mobGetSpellHPBonuses.insertText = new vscode.SnippetString('GetSpellHPBonuses()');
				mobGetSpellHPBonuses.documentation = new vscode.MarkdownString("");
				results.push(mobGetSpellHPBonuses);				
				
				const mobGetSTA = new vscode.CompletionItem('GetSTA', vscode.CompletionItemKind.Method);
				
				mobGetSTA.detail = "mob.GetSTA()";
				mobGetSTA.insertText = new vscode.SnippetString('GetSTA()');
				mobGetSTA.documentation = new vscode.MarkdownString("");
				results.push(mobGetSTA);				
				
				const mobGetSTR = new vscode.CompletionItem('GetSTR', vscode.CompletionItemKind.Method);
				
				mobGetSTR.detail = "mob.GetSTR()";
				mobGetSTR.insertText = new vscode.SnippetString('GetSTR()');
				mobGetSTR.documentation = new vscode.MarkdownString("");
				results.push(mobGetSTR);				
				
				const mobGetTarget = new vscode.CompletionItem('GetTarget', vscode.CompletionItemKind.Method);
				
				mobGetTarget.detail = "mob.GetTarget()";
				mobGetTarget.insertText = new vscode.SnippetString('GetTarget()');
				mobGetTarget.documentation = new vscode.MarkdownString("");
				results.push(mobGetTarget);				
				
				const mobGetTexture = new vscode.CompletionItem('GetTexture', vscode.CompletionItemKind.Method);
				
				mobGetTexture.detail = "mob.GetTexture()";
				mobGetTexture.insertText = new vscode.SnippetString('GetTexture()');
				mobGetTexture.documentation = new vscode.MarkdownString("");
				results.push(mobGetTexture);				
				
				const mobGetWalkspeed = new vscode.CompletionItem('GetWalkspeed', vscode.CompletionItemKind.Method);
				
				mobGetWalkspeed.detail = "mob.GetWalkspeed()";
				mobGetWalkspeed.insertText = new vscode.SnippetString('GetWalkspeed()');
				mobGetWalkspeed.documentation = new vscode.MarkdownString("");
				results.push(mobGetWalkspeed);				
				
				const mobGetWaypointH = new vscode.CompletionItem('GetWaypointH', vscode.CompletionItemKind.Method);
				
				mobGetWaypointH.detail = "mob.GetWaypointH()";
				mobGetWaypointH.insertText = new vscode.SnippetString('GetWaypointH()');
				mobGetWaypointH.documentation = new vscode.MarkdownString("");
				results.push(mobGetWaypointH);				
				
				const mobGetWaypointID = new vscode.CompletionItem('GetWaypointID', vscode.CompletionItemKind.Method);
				
				mobGetWaypointID.detail = "mob.GetWaypointID()";
				mobGetWaypointID.insertText = new vscode.SnippetString('GetWaypointID()');
				mobGetWaypointID.documentation = new vscode.MarkdownString("");
				results.push(mobGetWaypointID);				
				
				const mobGetWaypointPause = new vscode.CompletionItem('GetWaypointPause', vscode.CompletionItemKind.Method);
				
				mobGetWaypointPause.detail = "mob.GetWaypointPause()";
				mobGetWaypointPause.insertText = new vscode.SnippetString('GetWaypointPause()');
				mobGetWaypointPause.documentation = new vscode.MarkdownString("");
				results.push(mobGetWaypointPause);				
				
				const mobGetWaypointX = new vscode.CompletionItem('GetWaypointX', vscode.CompletionItemKind.Method);
				
				mobGetWaypointX.detail = "mob.GetWaypointX()";
				mobGetWaypointX.insertText = new vscode.SnippetString('GetWaypointX()');
				mobGetWaypointX.documentation = new vscode.MarkdownString("");
				results.push(mobGetWaypointX);				
				
				const mobGetWaypointY = new vscode.CompletionItem('GetWaypointY', vscode.CompletionItemKind.Method);
				
				mobGetWaypointY.detail = "mob.GetWaypointY()";
				mobGetWaypointY.insertText = new vscode.SnippetString('GetWaypointY()');
				mobGetWaypointY.documentation = new vscode.MarkdownString("");
				results.push(mobGetWaypointY);				
				
				const mobGetWaypointZ = new vscode.CompletionItem('GetWaypointZ', vscode.CompletionItemKind.Method);
				
				mobGetWaypointZ.detail = "mob.GetWaypointZ()";
				mobGetWaypointZ.insertText = new vscode.SnippetString('GetWaypointZ()');
				mobGetWaypointZ.documentation = new vscode.MarkdownString("");
				results.push(mobGetWaypointZ);				
				
				const mobGetWeaponDamage = new vscode.CompletionItem('GetWeaponDamage', vscode.CompletionItemKind.Method);
				
				mobGetWeaponDamage.detail = "mob.GetWeaponDamage()";
				mobGetWeaponDamage.insertText = new vscode.SnippetString('GetWeaponDamage()');
				mobGetWeaponDamage.documentation = new vscode.MarkdownString("");
				results.push(mobGetWeaponDamage);				
				
				const mobGetWeaponDamageBonus = new vscode.CompletionItem('GetWeaponDamageBonus', vscode.CompletionItemKind.Method);
				
				mobGetWeaponDamageBonus.detail = "mob.GetWeaponDamageBonus()";
				mobGetWeaponDamageBonus.insertText = new vscode.SnippetString('GetWeaponDamageBonus()');
				mobGetWeaponDamageBonus.documentation = new vscode.MarkdownString("");
				results.push(mobGetWeaponDamageBonus);				
				
				const mobGetWIS = new vscode.CompletionItem('GetWIS', vscode.CompletionItemKind.Method);
				
				mobGetWIS.detail = "mob.GetWIS()";
				mobGetWIS.insertText = new vscode.SnippetString('GetWIS()');
				mobGetWIS.documentation = new vscode.MarkdownString("");
				results.push(mobGetWIS);				
				
				const mobGetX = new vscode.CompletionItem('GetX', vscode.CompletionItemKind.Method);
				
				mobGetX.detail = "mob.GetX()";
				mobGetX.insertText = new vscode.SnippetString('GetX()');
				mobGetX.documentation = new vscode.MarkdownString("");
				results.push(mobGetX);				
				
				const mobGetY = new vscode.CompletionItem('GetY', vscode.CompletionItemKind.Method);
				
				mobGetY.detail = "mob.GetY()";
				mobGetY.insertText = new vscode.SnippetString('GetY()');
				mobGetY.documentation = new vscode.MarkdownString("");
				results.push(mobGetY);				
				
				const mobGetZ = new vscode.CompletionItem('GetZ', vscode.CompletionItemKind.Method);
				
				mobGetZ.detail = "mob.GetZ()";
				mobGetZ.insertText = new vscode.SnippetString('GetZ()');
				mobGetZ.documentation = new vscode.MarkdownString("");
				results.push(mobGetZ);				
				
				const mobGMMove = new vscode.CompletionItem('GMMove', vscode.CompletionItemKind.Method);
				
				mobGMMove.detail = "mob.GMMove()";
				mobGMMove.insertText = new vscode.SnippetString('GMMove()');
				mobGMMove.documentation = new vscode.MarkdownString("");
				results.push(mobGMMove);				
				
				const mobGotoBind = new vscode.CompletionItem('GotoBind', vscode.CompletionItemKind.Method);
				
				mobGotoBind.detail = "mob.GotoBind()";
				mobGotoBind.insertText = new vscode.SnippetString('GotoBind()');
				mobGotoBind.documentation = new vscode.MarkdownString("");
				results.push(mobGotoBind);				
				
				const mobHalveAggro = new vscode.CompletionItem('HalveAggro', vscode.CompletionItemKind.Method);
				
				mobHalveAggro.detail = "mob.HalveAggro()";
				mobHalveAggro.insertText = new vscode.SnippetString('HalveAggro()');
				mobHalveAggro.documentation = new vscode.MarkdownString("");
				results.push(mobHalveAggro);				
				
				const mobHasNPCSpecialAtk = new vscode.CompletionItem('HasNPCSpecialAtk', vscode.CompletionItemKind.Method);
				
				mobHasNPCSpecialAtk.detail = "mob.HasNPCSpecialAtk()";
				mobHasNPCSpecialAtk.insertText = new vscode.SnippetString('HasNPCSpecialAtk()');
				mobHasNPCSpecialAtk.documentation = new vscode.MarkdownString("");
				results.push(mobHasNPCSpecialAtk);				
				
				const mobHasOwner = new vscode.CompletionItem('HasOwner', vscode.CompletionItemKind.Method);
				
				mobHasOwner.detail = "mob.HasOwner()";
				mobHasOwner.insertText = new vscode.SnippetString('HasOwner()');
				mobHasOwner.documentation = new vscode.MarkdownString("");
				results.push(mobHasOwner);				
				
				const mobHasPet = new vscode.CompletionItem('HasPet', vscode.CompletionItemKind.Method);
				
				mobHasPet.detail = "mob.HasPet()";
				mobHasPet.insertText = new vscode.SnippetString('HasPet()');
				mobHasPet.documentation = new vscode.MarkdownString("");
				results.push(mobHasPet);				
				
				const mobHasProcs = new vscode.CompletionItem('HasProcs', vscode.CompletionItemKind.Method);
				
				mobHasProcs.detail = "mob.HasProcs()";
				mobHasProcs.insertText = new vscode.SnippetString('HasProcs()');
				mobHasProcs.documentation = new vscode.MarkdownString("");
				results.push(mobHasProcs);				
				
				const mobHasShieldEquiped = new vscode.CompletionItem('HasShieldEquiped', vscode.CompletionItemKind.Method);
				
				mobHasShieldEquiped.detail = "mob.HasShieldEquiped()";
				mobHasShieldEquiped.insertText = new vscode.SnippetString('HasShieldEquiped()');
				mobHasShieldEquiped.documentation = new vscode.MarkdownString("");
				results.push(mobHasShieldEquiped);				
				
				const mobHasTwoHandBluntEquiped = new vscode.CompletionItem('HasTwoHandBluntEquiped', vscode.CompletionItemKind.Method);
				
				mobHasTwoHandBluntEquiped.detail = "mob.HasTwoHandBluntEquiped()";
				mobHasTwoHandBluntEquiped.insertText = new vscode.SnippetString('HasTwoHandBluntEquiped()');
				mobHasTwoHandBluntEquiped.documentation = new vscode.MarkdownString("");
				results.push(mobHasTwoHandBluntEquiped);				
				
				const mobHasTwoHanderEquipped = new vscode.CompletionItem('HasTwoHanderEquipped', vscode.CompletionItemKind.Method);
				
				mobHasTwoHanderEquipped.detail = "mob.HasTwoHanderEquipped()";
				mobHasTwoHanderEquipped.insertText = new vscode.SnippetString('HasTwoHanderEquipped()');
				mobHasTwoHanderEquipped.documentation = new vscode.MarkdownString("");
				results.push(mobHasTwoHanderEquipped);				
				
				const mobHeal = new vscode.CompletionItem('Heal', vscode.CompletionItemKind.Method);
				
				mobHeal.detail = "mob.Heal()";
				mobHeal.insertText = new vscode.SnippetString('Heal()');
				mobHeal.documentation = new vscode.MarkdownString("");
				results.push(mobHeal);				
				
				const mobHealDamage = new vscode.CompletionItem('HealDamage', vscode.CompletionItemKind.Method);
				
				mobHealDamage.detail = "mob.HealDamage()";
				mobHealDamage.insertText = new vscode.SnippetString('HealDamage()');
				mobHealDamage.documentation = new vscode.MarkdownString("");
				results.push(mobHealDamage);				
				
				const mobInterruptSpell = new vscode.CompletionItem('InterruptSpell', vscode.CompletionItemKind.Method);
				
				mobInterruptSpell.detail = "mob.InterruptSpell()";
				mobInterruptSpell.insertText = new vscode.SnippetString('InterruptSpell()');
				mobInterruptSpell.documentation = new vscode.MarkdownString("");
				results.push(mobInterruptSpell);				
				
				const mobIsAIControlled = new vscode.CompletionItem('IsAIControlled', vscode.CompletionItemKind.Method);
				
				mobIsAIControlled.detail = "mob.IsAIControlled()";
				mobIsAIControlled.insertText = new vscode.SnippetString('IsAIControlled()');
				mobIsAIControlled.documentation = new vscode.MarkdownString("");
				results.push(mobIsAIControlled);				
				
				const mobIsAmnesiad = new vscode.CompletionItem('IsAmnesiad', vscode.CompletionItemKind.Method);
				
				mobIsAmnesiad.detail = "mob.IsAmnesiad()";
				mobIsAmnesiad.insertText = new vscode.SnippetString('IsAmnesiad()');
				mobIsAmnesiad.documentation = new vscode.MarkdownString("");
				results.push(mobIsAmnesiad);				
				
				const mobIsAttackAllowed = new vscode.CompletionItem('IsAttackAllowed', vscode.CompletionItemKind.Method);
				
				mobIsAttackAllowed.detail = "mob.IsAttackAllowed()";
				mobIsAttackAllowed.insertText = new vscode.SnippetString('IsAttackAllowed()');
				mobIsAttackAllowed.documentation = new vscode.MarkdownString("");
				results.push(mobIsAttackAllowed);				
				
				const mobIsBeneficialAllowed = new vscode.CompletionItem('IsBeneficialAllowed', vscode.CompletionItemKind.Method);
				
				mobIsBeneficialAllowed.detail = "mob.IsBeneficialAllowed()";
				mobIsBeneficialAllowed.insertText = new vscode.SnippetString('IsBeneficialAllowed()');
				mobIsBeneficialAllowed.documentation = new vscode.MarkdownString("");
				results.push(mobIsBeneficialAllowed);				
				
				const mobIsBerserk = new vscode.CompletionItem('IsBerserk', vscode.CompletionItemKind.Method);
				
				mobIsBerserk.detail = "mob.IsBerserk()";
				mobIsBerserk.insertText = new vscode.SnippetString('IsBerserk()');
				mobIsBerserk.documentation = new vscode.MarkdownString("");
				results.push(mobIsBerserk);				
				
				const mobIsBlind = new vscode.CompletionItem('IsBlind', vscode.CompletionItemKind.Method);
				
				mobIsBlind.detail = "mob.IsBlind()";
				mobIsBlind.insertText = new vscode.SnippetString('IsBlind()');
				mobIsBlind.documentation = new vscode.MarkdownString("");
				results.push(mobIsBlind);				
				
				const mobIsCasting = new vscode.CompletionItem('IsCasting', vscode.CompletionItemKind.Method);
				
				mobIsCasting.detail = "mob.IsCasting()";
				mobIsCasting.insertText = new vscode.SnippetString('IsCasting()');
				mobIsCasting.documentation = new vscode.MarkdownString("");
				results.push(mobIsCasting);				
				
				const mobIsEliteMaterialItem = new vscode.CompletionItem('IsEliteMaterialItem', vscode.CompletionItemKind.Method);
				
				mobIsEliteMaterialItem.detail = "mob.IsEliteMaterialItem()";
				mobIsEliteMaterialItem.insertText = new vscode.SnippetString('IsEliteMaterialItem()');
				mobIsEliteMaterialItem.documentation = new vscode.MarkdownString("");
				results.push(mobIsEliteMaterialItem);				
				
				const mobIsEngaged = new vscode.CompletionItem('IsEngaged', vscode.CompletionItemKind.Method);
				
				mobIsEngaged.detail = "mob.IsEngaged()";
				mobIsEngaged.insertText = new vscode.SnippetString('IsEngaged()');
				mobIsEngaged.documentation = new vscode.MarkdownString("");
				results.push(mobIsEngaged);				
				
				const mobIsEnraged = new vscode.CompletionItem('IsEnraged', vscode.CompletionItemKind.Method);
				
				mobIsEnraged.detail = "mob.IsEnraged()";
				mobIsEnraged.insertText = new vscode.SnippetString('IsEnraged()');
				mobIsEnraged.documentation = new vscode.MarkdownString("");
				results.push(mobIsEnraged);				
				
				const mobIsFeared = new vscode.CompletionItem('IsFeared', vscode.CompletionItemKind.Method);
				
				mobIsFeared.detail = "mob.IsFeared()";
				mobIsFeared.insertText = new vscode.SnippetString('IsFeared()');
				mobIsFeared.documentation = new vscode.MarkdownString("");
				results.push(mobIsFeared);				
				
				const mobIsImmuneToSpell = new vscode.CompletionItem('IsImmuneToSpell', vscode.CompletionItemKind.Method);
				
				mobIsImmuneToSpell.detail = "mob.IsImmuneToSpell()";
				mobIsImmuneToSpell.insertText = new vscode.SnippetString('IsImmuneToSpell()');
				mobIsImmuneToSpell.documentation = new vscode.MarkdownString("");
				results.push(mobIsImmuneToSpell);				
				
				const mobIsInvisible = new vscode.CompletionItem('IsInvisible', vscode.CompletionItemKind.Method);
				
				mobIsInvisible.detail = "mob.IsInvisible()";
				mobIsInvisible.insertText = new vscode.SnippetString('IsInvisible()');
				mobIsInvisible.documentation = new vscode.MarkdownString("");
				results.push(mobIsInvisible);				
				
				const mobIsMeleeDisabled = new vscode.CompletionItem('IsMeleeDisabled', vscode.CompletionItemKind.Method);
				
				mobIsMeleeDisabled.detail = "mob.IsMeleeDisabled()";
				mobIsMeleeDisabled.insertText = new vscode.SnippetString('IsMeleeDisabled()');
				mobIsMeleeDisabled.documentation = new vscode.MarkdownString("");
				results.push(mobIsMeleeDisabled);				
				
				const mobIsMezzed = new vscode.CompletionItem('IsMezzed', vscode.CompletionItemKind.Method);
				
				mobIsMezzed.detail = "mob.IsMezzed()";
				mobIsMezzed.insertText = new vscode.SnippetString('IsMezzed()');
				mobIsMezzed.documentation = new vscode.MarkdownString("");
				results.push(mobIsMezzed);				
				
				const mobIsMoving = new vscode.CompletionItem('IsMoving', vscode.CompletionItemKind.Method);
				
				mobIsMoving.detail = "mob.IsMoving()";
				mobIsMoving.insertText = new vscode.SnippetString('IsMoving()');
				mobIsMoving.documentation = new vscode.MarkdownString("");
				results.push(mobIsMoving);				
				
				const mobIsPet = new vscode.CompletionItem('IsPet', vscode.CompletionItemKind.Method);
				
				mobIsPet.detail = "mob.IsPet()";
				mobIsPet.insertText = new vscode.SnippetString('IsPet()');
				mobIsPet.documentation = new vscode.MarkdownString("");
				results.push(mobIsPet);				
				
				const mobIsRoamer = new vscode.CompletionItem('IsRoamer', vscode.CompletionItemKind.Method);
				
				mobIsRoamer.detail = "mob.IsRoamer()";
				mobIsRoamer.insertText = new vscode.SnippetString('IsRoamer()');
				mobIsRoamer.documentation = new vscode.MarkdownString("");
				results.push(mobIsRoamer);				
				
				const mobIsRooted = new vscode.CompletionItem('IsRooted', vscode.CompletionItemKind.Method);
				
				mobIsRooted.detail = "mob.IsRooted()";
				mobIsRooted.insertText = new vscode.SnippetString('IsRooted()');
				mobIsRooted.documentation = new vscode.MarkdownString("");
				results.push(mobIsRooted);				
				
				const mobIsRunning = new vscode.CompletionItem('IsRunning', vscode.CompletionItemKind.Method);
				
				mobIsRunning.detail = "mob.IsRunning()";
				mobIsRunning.insertText = new vscode.SnippetString('IsRunning()');
				mobIsRunning.documentation = new vscode.MarkdownString("");
				results.push(mobIsRunning);				
				
				const mobIsSilenced = new vscode.CompletionItem('IsSilenced', vscode.CompletionItemKind.Method);
				
				mobIsSilenced.detail = "mob.IsSilenced()";
				mobIsSilenced.insertText = new vscode.SnippetString('IsSilenced()');
				mobIsSilenced.documentation = new vscode.MarkdownString("");
				results.push(mobIsSilenced);				
				
				const mobIsStunned = new vscode.CompletionItem('IsStunned', vscode.CompletionItemKind.Method);
				
				mobIsStunned.detail = "mob.IsStunned()";
				mobIsStunned.insertText = new vscode.SnippetString('IsStunned()');
				mobIsStunned.documentation = new vscode.MarkdownString("");
				results.push(mobIsStunned);				
				
				const mobIsTargetable = new vscode.CompletionItem('IsTargetable', vscode.CompletionItemKind.Method);
				
				mobIsTargetable.detail = "mob.IsTargetable()";
				mobIsTargetable.insertText = new vscode.SnippetString('IsTargetable()');
				mobIsTargetable.documentation = new vscode.MarkdownString("");
				results.push(mobIsTargetable);				
				
				const mobIsTargeted = new vscode.CompletionItem('IsTargeted', vscode.CompletionItemKind.Method);
				
				mobIsTargeted.detail = "mob.IsTargeted()";
				mobIsTargeted.insertText = new vscode.SnippetString('IsTargeted()');
				mobIsTargeted.documentation = new vscode.MarkdownString("");
				results.push(mobIsTargeted);				
				
				const mobIsWarriorClass = new vscode.CompletionItem('IsWarriorClass', vscode.CompletionItemKind.Method);
				
				mobIsWarriorClass.detail = "mob.IsWarriorClass()";
				mobIsWarriorClass.insertText = new vscode.SnippetString('IsWarriorClass()');
				mobIsWarriorClass.documentation = new vscode.MarkdownString("");
				results.push(mobIsWarriorClass);				
				
				const mobKill = new vscode.CompletionItem('Kill', vscode.CompletionItemKind.Method);
				
				mobKill.detail = "mob.Kill()";
				mobKill.insertText = new vscode.SnippetString('Kill()');
				mobKill.documentation = new vscode.MarkdownString("");
				results.push(mobKill);				
				
				const mobMesmerize = new vscode.CompletionItem('Mesmerize', vscode.CompletionItemKind.Method);
				
				mobMesmerize.detail = "mob.Mesmerize()";
				mobMesmerize.insertText = new vscode.SnippetString('Mesmerize()');
				mobMesmerize.documentation = new vscode.MarkdownString("");
				results.push(mobMesmerize);				
				
				const mobMessage = new vscode.CompletionItem('Message', vscode.CompletionItemKind.Method);
				
				mobMessage.detail = "mob.Message()";
				mobMessage.insertText = new vscode.SnippetString('Message()');
				mobMessage.documentation = new vscode.MarkdownString("");
				results.push(mobMessage);				
				
				const mobMessageString = new vscode.CompletionItem('MessageString', vscode.CompletionItemKind.Method);
				
				mobMessageString.detail = "mob.MessageString()";
				mobMessageString.insertText = new vscode.SnippetString('MessageString()');
				mobMessageString.documentation = new vscode.MarkdownString("");
				results.push(mobMessageString);				
				
				const mobModSkillDmgTaken = new vscode.CompletionItem('ModSkillDmgTaken', vscode.CompletionItemKind.Method);
				
				mobModSkillDmgTaken.detail = "mob.ModSkillDmgTaken()";
				mobModSkillDmgTaken.insertText = new vscode.SnippetString('ModSkillDmgTaken()');
				mobModSkillDmgTaken.documentation = new vscode.MarkdownString("");
				results.push(mobModSkillDmgTaken);				
				
				const mobModVulnerability = new vscode.CompletionItem('ModVulnerability', vscode.CompletionItemKind.Method);
				
				mobModVulnerability.detail = "mob.ModVulnerability()";
				mobModVulnerability.insertText = new vscode.SnippetString('ModVulnerability()');
				mobModVulnerability.documentation = new vscode.MarkdownString("");
				results.push(mobModVulnerability);				
				
				const mobNavigateTo = new vscode.CompletionItem('NavigateTo', vscode.CompletionItemKind.Method);
				
				mobNavigateTo.detail = "mob.NavigateTo()";
				mobNavigateTo.insertText = new vscode.SnippetString('NavigateTo()');
				mobNavigateTo.documentation = new vscode.MarkdownString("");
				results.push(mobNavigateTo);				
				
				const mobNPCSpecialAttacks = new vscode.CompletionItem('NPCSpecialAttacks', vscode.CompletionItemKind.Method);
				
				mobNPCSpecialAttacks.detail = "mob.NPCSpecialAttacks()";
				mobNPCSpecialAttacks.insertText = new vscode.SnippetString('NPCSpecialAttacks()');
				mobNPCSpecialAttacks.documentation = new vscode.MarkdownString("");
				results.push(mobNPCSpecialAttacks);				
				
				const mobProcessSpecialAbilities = new vscode.CompletionItem('ProcessSpecialAbilities', vscode.CompletionItemKind.Method);
				
				mobProcessSpecialAbilities.detail = "mob.ProcessSpecialAbilities()";
				mobProcessSpecialAbilities.insertText = new vscode.SnippetString('ProcessSpecialAbilities()');
				mobProcessSpecialAbilities.documentation = new vscode.MarkdownString("");
				results.push(mobProcessSpecialAbilities);				
				
				const mobProjectileAnimation = new vscode.CompletionItem('ProjectileAnimation', vscode.CompletionItemKind.Method);
				
				mobProjectileAnimation.detail = "mob.ProjectileAnimation()";
				mobProjectileAnimation.insertText = new vscode.SnippetString('ProjectileAnimation()');
				mobProjectileAnimation.documentation = new vscode.MarkdownString("");
				results.push(mobProjectileAnimation);				
				
				const mobQuestSay = new vscode.CompletionItem('QuestSay', vscode.CompletionItemKind.Method);
				
				mobQuestSay.detail = "mob.QuestSay()";
				mobQuestSay.insertText = new vscode.SnippetString('QuestSay()');
				mobQuestSay.documentation = new vscode.MarkdownString("");
				results.push(mobQuestSay);				
				
				const mobRandomizeFeatures = new vscode.CompletionItem('RandomizeFeatures', vscode.CompletionItemKind.Method);
				
				mobRandomizeFeatures.detail = "mob.RandomizeFeatures()";
				mobRandomizeFeatures.insertText = new vscode.SnippetString('RandomizeFeatures()');
				mobRandomizeFeatures.documentation = new vscode.MarkdownString("");
				results.push(mobRandomizeFeatures);				
				
				const mobRangedAttack = new vscode.CompletionItem('RangedAttack', vscode.CompletionItemKind.Method);
				
				mobRangedAttack.detail = "mob.RangedAttack()";
				mobRangedAttack.insertText = new vscode.SnippetString('RangedAttack()');
				mobRangedAttack.documentation = new vscode.MarkdownString("");
				results.push(mobRangedAttack);				
				
				const mobRemoveNimbusEffect = new vscode.CompletionItem('RemoveNimbusEffect', vscode.CompletionItemKind.Method);
				
				mobRemoveNimbusEffect.detail = "mob.RemoveNimbusEffect()";
				mobRemoveNimbusEffect.insertText = new vscode.SnippetString('RemoveNimbusEffect()');
				mobRemoveNimbusEffect.documentation = new vscode.MarkdownString("");
				results.push(mobRemoveNimbusEffect);				
				
				const mobResistSpell = new vscode.CompletionItem('ResistSpell', vscode.CompletionItemKind.Method);
				
				mobResistSpell.detail = "mob.ResistSpell()";
				mobResistSpell.insertText = new vscode.SnippetString('ResistSpell()');
				mobResistSpell.documentation = new vscode.MarkdownString("");
				results.push(mobResistSpell);				
				
				const mobRunTo = new vscode.CompletionItem('RunTo', vscode.CompletionItemKind.Method);
				
				mobRunTo.detail = "mob.RunTo()";
				mobRunTo.insertText = new vscode.SnippetString('RunTo()');
				mobRunTo.documentation = new vscode.MarkdownString("");
				results.push(mobRunTo);				
				
				const mobSay = new vscode.CompletionItem('Say', vscode.CompletionItemKind.Method);
				
				mobSay.detail = "mob.Say()";
				mobSay.insertText = new vscode.SnippetString('Say()');
				mobSay.documentation = new vscode.MarkdownString("");
				results.push(mobSay);				
				
				const mobSeeHide = new vscode.CompletionItem('SeeHide', vscode.CompletionItemKind.Method);
				
				mobSeeHide.detail = "mob.SeeHide()";
				mobSeeHide.insertText = new vscode.SnippetString('SeeHide()');
				mobSeeHide.documentation = new vscode.MarkdownString("");
				results.push(mobSeeHide);				
				
				const mobSeeImprovedHide = new vscode.CompletionItem('SeeImprovedHide', vscode.CompletionItemKind.Method);
				
				mobSeeImprovedHide.detail = "mob.SeeImprovedHide()";
				mobSeeImprovedHide.insertText = new vscode.SnippetString('SeeImprovedHide()');
				mobSeeImprovedHide.documentation = new vscode.MarkdownString("");
				results.push(mobSeeImprovedHide);				
				
				const mobSeeInvisible = new vscode.CompletionItem('SeeInvisible', vscode.CompletionItemKind.Method);
				
				mobSeeInvisible.detail = "mob.SeeInvisible()";
				mobSeeInvisible.insertText = new vscode.SnippetString('SeeInvisible()');
				mobSeeInvisible.documentation = new vscode.MarkdownString("");
				results.push(mobSeeInvisible);				
				
				const mobSeeInvisibleUndead = new vscode.CompletionItem('SeeInvisibleUndead', vscode.CompletionItemKind.Method);
				
				mobSeeInvisibleUndead.detail = "mob.SeeInvisibleUndead()";
				mobSeeInvisibleUndead.insertText = new vscode.SnippetString('SeeInvisibleUndead()');
				mobSeeInvisibleUndead.documentation = new vscode.MarkdownString("");
				results.push(mobSeeInvisibleUndead);				
				
				const mobSendAppearanceEffect = new vscode.CompletionItem('SendAppearanceEffect', vscode.CompletionItemKind.Method);
				
				mobSendAppearanceEffect.detail = "mob.SendAppearanceEffect()";
				mobSendAppearanceEffect.insertText = new vscode.SnippetString('SendAppearanceEffect()');
				mobSendAppearanceEffect.documentation = new vscode.MarkdownString("");
				results.push(mobSendAppearanceEffect);				
				
				const mobSendBeginCast = new vscode.CompletionItem('SendBeginCast', vscode.CompletionItemKind.Method);
				
				mobSendBeginCast.detail = "mob.SendBeginCast()";
				mobSendBeginCast.insertText = new vscode.SnippetString('SendBeginCast()');
				mobSendBeginCast.documentation = new vscode.MarkdownString("");
				results.push(mobSendBeginCast);				
				
				const mobSendIllusionPacket = new vscode.CompletionItem('SendIllusionPacket', vscode.CompletionItemKind.Method);
				
				mobSendIllusionPacket.detail = "mob.SendIllusionPacket()";
				mobSendIllusionPacket.insertText = new vscode.SnippetString('SendIllusionPacket()');
				mobSendIllusionPacket.documentation = new vscode.MarkdownString("");
				results.push(mobSendIllusionPacket);				
				
				const mobSendSpellEffect = new vscode.CompletionItem('SendSpellEffect', vscode.CompletionItemKind.Method);
				
				mobSendSpellEffect.detail = "mob.SendSpellEffect()";
				mobSendSpellEffect.insertText = new vscode.SnippetString('SendSpellEffect()');
				mobSendSpellEffect.documentation = new vscode.MarkdownString("");
				results.push(mobSendSpellEffect);				
				
				const mobSendTo = new vscode.CompletionItem('SendTo', vscode.CompletionItemKind.Method);
				
				mobSendTo.detail = "mob.SendTo()";
				mobSendTo.insertText = new vscode.SnippetString('SendTo()');
				mobSendTo.documentation = new vscode.MarkdownString("");
				results.push(mobSendTo);				
				
				const mobSendToFixZ = new vscode.CompletionItem('SendToFixZ', vscode.CompletionItemKind.Method);
				
				mobSendToFixZ.detail = "mob.SendToFixZ()";
				mobSendToFixZ.insertText = new vscode.SnippetString('SendToFixZ()');
				mobSendToFixZ.documentation = new vscode.MarkdownString("");
				results.push(mobSendToFixZ);				
				
				const mobSetAA = new vscode.CompletionItem('SetAA', vscode.CompletionItemKind.Method);
				
				mobSetAA.detail = "mob.SetAA()";
				mobSetAA.insertText = new vscode.SnippetString('SetAA()');
				mobSetAA.documentation = new vscode.MarkdownString("");
				results.push(mobSetAA);				
				
				const mobSetAllowBeneficial = new vscode.CompletionItem('SetAllowBeneficial', vscode.CompletionItemKind.Method);
				
				mobSetAllowBeneficial.detail = "mob.SetAllowBeneficial()";
				mobSetAllowBeneficial.insertText = new vscode.SnippetString('SetAllowBeneficial()');
				mobSetAllowBeneficial.documentation = new vscode.MarkdownString("");
				results.push(mobSetAllowBeneficial);				
				
				const mobSetAppearance = new vscode.CompletionItem('SetAppearance', vscode.CompletionItemKind.Method);
				
				mobSetAppearance.detail = "mob.SetAppearance()";
				mobSetAppearance.insertText = new vscode.SnippetString('SetAppearance()');
				mobSetAppearance.documentation = new vscode.MarkdownString("");
				results.push(mobSetAppearance);				
				
				const mobSetBodyType = new vscode.CompletionItem('SetBodyType', vscode.CompletionItemKind.Method);
				
				mobSetBodyType.detail = "mob.SetBodyType()";
				mobSetBodyType.insertText = new vscode.SnippetString('SetBodyType()');
				mobSetBodyType.documentation = new vscode.MarkdownString("");
				results.push(mobSetBodyType);				
				
				const mobSetCurrentWP = new vscode.CompletionItem('SetCurrentWP', vscode.CompletionItemKind.Method);
				
				mobSetCurrentWP.detail = "mob.SetCurrentWP()";
				mobSetCurrentWP.insertText = new vscode.SnippetString('SetCurrentWP()');
				mobSetCurrentWP.documentation = new vscode.MarkdownString("");
				results.push(mobSetCurrentWP);				
				
				const mobSetDestructibleObject = new vscode.CompletionItem('SetDestructibleObject', vscode.CompletionItemKind.Method);
				
				mobSetDestructibleObject.detail = "mob.SetDestructibleObject()";
				mobSetDestructibleObject.insertText = new vscode.SnippetString('SetDestructibleObject()');
				mobSetDestructibleObject.documentation = new vscode.MarkdownString("");
				results.push(mobSetDestructibleObject);				
				
				const mobSetDisableMelee = new vscode.CompletionItem('SetDisableMelee', vscode.CompletionItemKind.Method);
				
				mobSetDisableMelee.detail = "mob.SetDisableMelee()";
				mobSetDisableMelee.insertText = new vscode.SnippetString('SetDisableMelee()');
				mobSetDisableMelee.documentation = new vscode.MarkdownString("");
				results.push(mobSetDisableMelee);				
				
				const mobSetEntityVariable = new vscode.CompletionItem('SetEntityVariable', vscode.CompletionItemKind.Method);
				
				mobSetEntityVariable.detail = "mob.SetEntityVariable()";
				mobSetEntityVariable.insertText = new vscode.SnippetString('SetEntityVariable()');
				mobSetEntityVariable.documentation = new vscode.MarkdownString("");
				results.push(mobSetEntityVariable);				
				
				const mobSetExtraHaste = new vscode.CompletionItem('SetExtraHaste', vscode.CompletionItemKind.Method);
				
				mobSetExtraHaste.detail = "mob.SetExtraHaste()";
				mobSetExtraHaste.insertText = new vscode.SnippetString('SetExtraHaste()');
				mobSetExtraHaste.documentation = new vscode.MarkdownString("");
				results.push(mobSetExtraHaste);				
				
				const mobSetFlurryChance = new vscode.CompletionItem('SetFlurryChance', vscode.CompletionItemKind.Method);
				
				mobSetFlurryChance.detail = "mob.SetFlurryChance()";
				mobSetFlurryChance.insertText = new vscode.SnippetString('SetFlurryChance()');
				mobSetFlurryChance.documentation = new vscode.MarkdownString("");
				results.push(mobSetFlurryChance);				
				
				const mobSetFlyMode = new vscode.CompletionItem('SetFlyMode', vscode.CompletionItemKind.Method);
				
				mobSetFlyMode.detail = "mob.SetFlyMode()";
				mobSetFlyMode.insertText = new vscode.SnippetString('SetFlyMode()');
				mobSetFlyMode.documentation = new vscode.MarkdownString("");
				results.push(mobSetFlyMode);				
				
				const mobSetGender = new vscode.CompletionItem('SetGender', vscode.CompletionItemKind.Method);
				
				mobSetGender.detail = "mob.SetGender()";
				mobSetGender.insertText = new vscode.SnippetString('SetGender()');
				mobSetGender.documentation = new vscode.MarkdownString("");
				results.push(mobSetGender);				
				
				const mobSetGlobal = new vscode.CompletionItem('SetGlobal', vscode.CompletionItemKind.Method);
				
				mobSetGlobal.detail = "mob.SetGlobal()";
				mobSetGlobal.insertText = new vscode.SnippetString('SetGlobal()');
				mobSetGlobal.documentation = new vscode.MarkdownString("");
				results.push(mobSetGlobal);				
				
				const mobSetHate = new vscode.CompletionItem('SetHate', vscode.CompletionItemKind.Method);
				
				mobSetHate.detail = "mob.SetHate()";
				mobSetHate.insertText = new vscode.SnippetString('SetHate()');
				mobSetHate.documentation = new vscode.MarkdownString("");
				results.push(mobSetHate);				
				
				const mobSetHeading = new vscode.CompletionItem('SetHeading', vscode.CompletionItemKind.Method);
				
				mobSetHeading.detail = "mob.SetHeading()";
				mobSetHeading.insertText = new vscode.SnippetString('SetHeading()');
				mobSetHeading.documentation = new vscode.MarkdownString("");
				results.push(mobSetHeading);				
				
				const mobSetHP = new vscode.CompletionItem('SetHP', vscode.CompletionItemKind.Method);
				
				mobSetHP.detail = "mob.SetHP()";
				mobSetHP.insertText = new vscode.SnippetString('SetHP()');
				mobSetHP.documentation = new vscode.MarkdownString("");
				results.push(mobSetHP);				
				
				const mobSetInvisible = new vscode.CompletionItem('SetInvisible', vscode.CompletionItemKind.Method);
				
				mobSetInvisible.detail = "mob.SetInvisible()";
				mobSetInvisible.insertText = new vscode.SnippetString('SetInvisible()');
				mobSetInvisible.documentation = new vscode.MarkdownString("");
				results.push(mobSetInvisible);				
				
				const mobSetInvul = new vscode.CompletionItem('SetInvul', vscode.CompletionItemKind.Method);
				
				mobSetInvul.detail = "mob.SetInvul()";
				mobSetInvul.insertText = new vscode.SnippetString('SetInvul()');
				mobSetInvul.documentation = new vscode.MarkdownString("");
				results.push(mobSetInvul);				
				
				const mobSetLevel = new vscode.CompletionItem('SetLevel', vscode.CompletionItemKind.Method);
				
				mobSetLevel.detail = "mob.SetLevel()";
				mobSetLevel.insertText = new vscode.SnippetString('SetLevel()');
				mobSetLevel.documentation = new vscode.MarkdownString("");
				results.push(mobSetLevel);				
				
				const mobSetMana = new vscode.CompletionItem('SetMana', vscode.CompletionItemKind.Method);
				
				mobSetMana.detail = "mob.SetMana()";
				mobSetMana.insertText = new vscode.SnippetString('SetMana()');
				mobSetMana.documentation = new vscode.MarkdownString("");
				results.push(mobSetMana);				
				
				const mobSetOOCRegen = new vscode.CompletionItem('SetOOCRegen', vscode.CompletionItemKind.Method);
				
				mobSetOOCRegen.detail = "mob.SetOOCRegen()";
				mobSetOOCRegen.insertText = new vscode.SnippetString('SetOOCRegen()');
				mobSetOOCRegen.documentation = new vscode.MarkdownString("");
				results.push(mobSetOOCRegen);				
				
				const mobSetPetOrder = new vscode.CompletionItem('SetPetOrder', vscode.CompletionItemKind.Method);
				
				mobSetPetOrder.detail = "mob.SetPetOrder()";
				mobSetPetOrder.insertText = new vscode.SnippetString('SetPetOrder()');
				mobSetPetOrder.documentation = new vscode.MarkdownString("");
				results.push(mobSetPetOrder);				
				
				const mobSetPseudoRoot = new vscode.CompletionItem('SetPseudoRoot', vscode.CompletionItemKind.Method);
				
				mobSetPseudoRoot.detail = "mob.SetPseudoRoot()";
				mobSetPseudoRoot.insertText = new vscode.SnippetString('SetPseudoRoot()');
				mobSetPseudoRoot.documentation = new vscode.MarkdownString("");
				results.push(mobSetPseudoRoot);				
				
				const mobSetRace = new vscode.CompletionItem('SetRace', vscode.CompletionItemKind.Method);
				
				mobSetRace.detail = "mob.SetRace()";
				mobSetRace.insertText = new vscode.SnippetString('SetRace()');
				mobSetRace.documentation = new vscode.MarkdownString("");
				results.push(mobSetRace);				
				
				const mobSetRunning = new vscode.CompletionItem('SetRunning', vscode.CompletionItemKind.Method);
				
				mobSetRunning.detail = "mob.SetRunning()";
				mobSetRunning.insertText = new vscode.SnippetString('SetRunning()');
				mobSetRunning.documentation = new vscode.MarkdownString("");
				results.push(mobSetRunning);				
				
				const mobSetSlotTint = new vscode.CompletionItem('SetSlotTint', vscode.CompletionItemKind.Method);
				
				mobSetSlotTint.detail = "mob.SetSlotTint()";
				mobSetSlotTint.insertText = new vscode.SnippetString('SetSlotTint()');
				mobSetSlotTint.documentation = new vscode.MarkdownString("");
				results.push(mobSetSlotTint);				
				
				const mobSetSpecialAbility = new vscode.CompletionItem('SetSpecialAbility', vscode.CompletionItemKind.Method);
				
				mobSetSpecialAbility.detail = "mob.SetSpecialAbility()";
				mobSetSpecialAbility.insertText = new vscode.SnippetString('SetSpecialAbility()');
				mobSetSpecialAbility.documentation = new vscode.MarkdownString("");
				results.push(mobSetSpecialAbility);				
				
				const mobSetSpecialAbilityParam = new vscode.CompletionItem('SetSpecialAbilityParam', vscode.CompletionItemKind.Method);
				
				mobSetSpecialAbilityParam.detail = "mob.SetSpecialAbilityParam()";
				mobSetSpecialAbilityParam.insertText = new vscode.SnippetString('SetSpecialAbilityParam()');
				mobSetSpecialAbilityParam.documentation = new vscode.MarkdownString("");
				results.push(mobSetSpecialAbilityParam);				
				
				const mobSetTarget = new vscode.CompletionItem('SetTarget', vscode.CompletionItemKind.Method);
				
				mobSetTarget.detail = "mob.SetTarget()";
				mobSetTarget.insertText = new vscode.SnippetString('SetTarget()');
				mobSetTarget.documentation = new vscode.MarkdownString("");
				results.push(mobSetTarget);				
				
				const mobSetTargetable = new vscode.CompletionItem('SetTargetable', vscode.CompletionItemKind.Method);
				
				mobSetTargetable.detail = "mob.SetTargetable()";
				mobSetTargetable.insertText = new vscode.SnippetString('SetTargetable()');
				mobSetTargetable.documentation = new vscode.MarkdownString("");
				results.push(mobSetTargetable);				
				
				const mobSetTexture = new vscode.CompletionItem('SetTexture', vscode.CompletionItemKind.Method);
				
				mobSetTexture.detail = "mob.SetTexture()";
				mobSetTexture.insertText = new vscode.SnippetString('SetTexture()');
				mobSetTexture.documentation = new vscode.MarkdownString("");
				results.push(mobSetTexture);				
				
				const mobShout = new vscode.CompletionItem('Shout', vscode.CompletionItemKind.Method);
				
				mobShout.detail = "mob.Shout()";
				mobShout.insertText = new vscode.SnippetString('Shout()');
				mobShout.documentation = new vscode.MarkdownString("");
				results.push(mobShout);				
				
				const mobSignal = new vscode.CompletionItem('Signal', vscode.CompletionItemKind.Method);
				
				mobSignal.detail = "mob.Signal()";
				mobSignal.insertText = new vscode.SnippetString('Signal()');
				mobSignal.documentation = new vscode.MarkdownString("");
				results.push(mobSignal);				
				
				const mobSpellEffect = new vscode.CompletionItem('SpellEffect', vscode.CompletionItemKind.Method);
				
				mobSpellEffect.detail = "mob.SpellEffect()";
				mobSpellEffect.insertText = new vscode.SnippetString('SpellEffect()');
				mobSpellEffect.documentation = new vscode.MarkdownString("");
				results.push(mobSpellEffect);				
				
				const mobSpellFinished = new vscode.CompletionItem('SpellFinished', vscode.CompletionItemKind.Method);
				
				mobSpellFinished.detail = "mob.SpellFinished()";
				mobSpellFinished.insertText = new vscode.SnippetString('SpellFinished()');
				mobSpellFinished.documentation = new vscode.MarkdownString("");
				results.push(mobSpellFinished);				
				
				const mobSpin = new vscode.CompletionItem('Spin', vscode.CompletionItemKind.Method);
				
				mobSpin.detail = "mob.Spin()";
				mobSpin.insertText = new vscode.SnippetString('Spin()');
				mobSpin.documentation = new vscode.MarkdownString("");
				results.push(mobSpin);				
				
				const mobStopNavigation = new vscode.CompletionItem('StopNavigation', vscode.CompletionItemKind.Method);
				
				mobStopNavigation.detail = "mob.StopNavigation()";
				mobStopNavigation.insertText = new vscode.SnippetString('StopNavigation()');
				mobStopNavigation.documentation = new vscode.MarkdownString("");
				results.push(mobStopNavigation);				
				
				const mobStun = new vscode.CompletionItem('Stun', vscode.CompletionItemKind.Method);
				
				mobStun.detail = "mob.Stun()";
				mobStun.insertText = new vscode.SnippetString('Stun()');
				mobStun.documentation = new vscode.MarkdownString("");
				results.push(mobStun);				
				
				const mobTarGlobal = new vscode.CompletionItem('TarGlobal', vscode.CompletionItemKind.Method);
				
				mobTarGlobal.detail = "mob.TarGlobal()";
				mobTarGlobal.insertText = new vscode.SnippetString('TarGlobal()');
				mobTarGlobal.documentation = new vscode.MarkdownString("");
				results.push(mobTarGlobal);				
				
				const mobTempName = new vscode.CompletionItem('TempName', vscode.CompletionItemKind.Method);
				
				mobTempName.detail = "mob.TempName()";
				mobTempName.insertText = new vscode.SnippetString('TempName()');
				mobTempName.documentation = new vscode.MarkdownString("");
				results.push(mobTempName);				
				
				const mobThrowingAttack = new vscode.CompletionItem('ThrowingAttack', vscode.CompletionItemKind.Method);
				
				mobThrowingAttack.detail = "mob.ThrowingAttack()";
				mobThrowingAttack.insertText = new vscode.SnippetString('ThrowingAttack()');
				mobThrowingAttack.documentation = new vscode.MarkdownString("");
				results.push(mobThrowingAttack);				
				
				const mobTryFinishingBlow = new vscode.CompletionItem('TryFinishingBlow', vscode.CompletionItemKind.Method);
				
				mobTryFinishingBlow.detail = "mob.TryFinishingBlow()";
				mobTryFinishingBlow.insertText = new vscode.SnippetString('TryFinishingBlow()');
				mobTryFinishingBlow.documentation = new vscode.MarkdownString("");
				results.push(mobTryFinishingBlow);				
				
				const mobTryMoveAlong = new vscode.CompletionItem('TryMoveAlong', vscode.CompletionItemKind.Method);
				
				mobTryMoveAlong.detail = "mob.TryMoveAlong()";
				mobTryMoveAlong.insertText = new vscode.SnippetString('TryMoveAlong()');
				mobTryMoveAlong.documentation = new vscode.MarkdownString("");
				results.push(mobTryMoveAlong);				
				
				const mobUnStun = new vscode.CompletionItem('UnStun', vscode.CompletionItemKind.Method);
				
				mobUnStun.detail = "mob.UnStun()";
				mobUnStun.insertText = new vscode.SnippetString('UnStun()');
				mobUnStun.documentation = new vscode.MarkdownString("");
				results.push(mobUnStun);				
				
				const mobWalkTo = new vscode.CompletionItem('WalkTo', vscode.CompletionItemKind.Method);
				
				mobWalkTo.detail = "mob.WalkTo()";
				mobWalkTo.insertText = new vscode.SnippetString('WalkTo()');
				mobWalkTo.documentation = new vscode.MarkdownString("");
				results.push(mobWalkTo);				
				
				const mobWearChange = new vscode.CompletionItem('WearChange', vscode.CompletionItemKind.Method);
				
				mobWearChange.detail = "mob.WearChange()";
				mobWearChange.insertText = new vscode.SnippetString('WearChange()');
				mobWearChange.documentation = new vscode.MarkdownString("");
				results.push(mobWearChange);				
				
				const mobWipeHateList = new vscode.CompletionItem('WipeHateList', vscode.CompletionItemKind.Method);
				
				mobWipeHateList.detail = "mob.WipeHateList()";
				mobWipeHateList.insertText = new vscode.SnippetString('WipeHateList()');
				mobWipeHateList.documentation = new vscode.MarkdownString("");
				results.push(mobWipeHateList);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('mob_list.')) {
					return undefined;
				}
				
				
				const moblistEntries = new vscode.CompletionItem('Entries', vscode.CompletionItemKind.Method);
				
				moblistEntries.detail = "mob_list.Entries()";
				moblistEntries.insertText = new vscode.SnippetString('Entries()');
				moblistEntries.documentation = new vscode.MarkdownString("");
				results.push(moblistEntries);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('mt.')) {
					return undefined;
				}
				
				
				const mtAuction = new vscode.CompletionItem('Auction', vscode.CompletionItemKind.Property);
				
				mtAuction.detail = "mt.Auction";
				mtAuction.insertText = new vscode.SnippetString('Auction');
				mtAuction.documentation = new vscode.MarkdownString("");
				results.push(mtAuction);				
				
				const mtAuctionEcho = new vscode.CompletionItem('AuctionEcho', vscode.CompletionItemKind.Property);
				
				mtAuctionEcho.detail = "mt.AuctionEcho";
				mtAuctionEcho.insertText = new vscode.SnippetString('AuctionEcho');
				mtAuctionEcho.documentation = new vscode.MarkdownString("");
				results.push(mtAuctionEcho);				
				
				const mtBroadcasts = new vscode.CompletionItem('Broadcasts', vscode.CompletionItemKind.Property);
				
				mtBroadcasts.detail = "mt.Broadcasts";
				mtBroadcasts.insertText = new vscode.SnippetString('Broadcasts');
				mtBroadcasts.documentation = new vscode.MarkdownString("");
				results.push(mtBroadcasts);				
				
				const mtChannel1 = new vscode.CompletionItem('Channel1', vscode.CompletionItemKind.Property);
				
				mtChannel1.detail = "mt.Channel1";
				mtChannel1.insertText = new vscode.SnippetString('Channel1');
				mtChannel1.documentation = new vscode.MarkdownString("");
				results.push(mtChannel1);				
				
				const mtChannel10 = new vscode.CompletionItem('Channel10', vscode.CompletionItemKind.Property);
				
				mtChannel10.detail = "mt.Channel10";
				mtChannel10.insertText = new vscode.SnippetString('Channel10');
				mtChannel10.documentation = new vscode.MarkdownString("");
				results.push(mtChannel10);				
				
				const mtChannel2 = new vscode.CompletionItem('Channel2', vscode.CompletionItemKind.Property);
				
				mtChannel2.detail = "mt.Channel2";
				mtChannel2.insertText = new vscode.SnippetString('Channel2');
				mtChannel2.documentation = new vscode.MarkdownString("");
				results.push(mtChannel2);				
				
				const mtChannel3 = new vscode.CompletionItem('Channel3', vscode.CompletionItemKind.Property);
				
				mtChannel3.detail = "mt.Channel3";
				mtChannel3.insertText = new vscode.SnippetString('Channel3');
				mtChannel3.documentation = new vscode.MarkdownString("");
				results.push(mtChannel3);				
				
				const mtChannel4 = new vscode.CompletionItem('Channel4', vscode.CompletionItemKind.Property);
				
				mtChannel4.detail = "mt.Channel4";
				mtChannel4.insertText = new vscode.SnippetString('Channel4');
				mtChannel4.documentation = new vscode.MarkdownString("");
				results.push(mtChannel4);				
				
				const mtChannel5 = new vscode.CompletionItem('Channel5', vscode.CompletionItemKind.Property);
				
				mtChannel5.detail = "mt.Channel5";
				mtChannel5.insertText = new vscode.SnippetString('Channel5');
				mtChannel5.documentation = new vscode.MarkdownString("");
				results.push(mtChannel5);				
				
				const mtChannel6 = new vscode.CompletionItem('Channel6', vscode.CompletionItemKind.Property);
				
				mtChannel6.detail = "mt.Channel6";
				mtChannel6.insertText = new vscode.SnippetString('Channel6');
				mtChannel6.documentation = new vscode.MarkdownString("");
				results.push(mtChannel6);				
				
				const mtChannel7 = new vscode.CompletionItem('Channel7', vscode.CompletionItemKind.Property);
				
				mtChannel7.detail = "mt.Channel7";
				mtChannel7.insertText = new vscode.SnippetString('Channel7');
				mtChannel7.documentation = new vscode.MarkdownString("");
				results.push(mtChannel7);				
				
				const mtChannel8 = new vscode.CompletionItem('Channel8', vscode.CompletionItemKind.Property);
				
				mtChannel8.detail = "mt.Channel8";
				mtChannel8.insertText = new vscode.SnippetString('Channel8');
				mtChannel8.documentation = new vscode.MarkdownString("");
				results.push(mtChannel8);				
				
				const mtChannel9 = new vscode.CompletionItem('Channel9', vscode.CompletionItemKind.Property);
				
				mtChannel9.detail = "mt.Channel9";
				mtChannel9.insertText = new vscode.SnippetString('Channel9');
				mtChannel9.documentation = new vscode.MarkdownString("");
				results.push(mtChannel9);				
				
				const mtChat = new vscode.CompletionItem('Chat', vscode.CompletionItemKind.Property);
				
				mtChat.detail = "mt.Chat";
				mtChat.insertText = new vscode.SnippetString('Chat');
				mtChat.documentation = new vscode.MarkdownString("");
				results.push(mtChat);				
				
				const mtChat10Echo = new vscode.CompletionItem('Chat10Echo', vscode.CompletionItemKind.Property);
				
				mtChat10Echo.detail = "mt.Chat10Echo";
				mtChat10Echo.insertText = new vscode.SnippetString('Chat10Echo');
				mtChat10Echo.documentation = new vscode.MarkdownString("");
				results.push(mtChat10Echo);				
				
				const mtChat1Echo = new vscode.CompletionItem('Chat1Echo', vscode.CompletionItemKind.Property);
				
				mtChat1Echo.detail = "mt.Chat1Echo";
				mtChat1Echo.insertText = new vscode.SnippetString('Chat1Echo');
				mtChat1Echo.documentation = new vscode.MarkdownString("");
				results.push(mtChat1Echo);				
				
				const mtChat2Echo = new vscode.CompletionItem('Chat2Echo', vscode.CompletionItemKind.Property);
				
				mtChat2Echo.detail = "mt.Chat2Echo";
				mtChat2Echo.insertText = new vscode.SnippetString('Chat2Echo');
				mtChat2Echo.documentation = new vscode.MarkdownString("");
				results.push(mtChat2Echo);				
				
				const mtChat3Echo = new vscode.CompletionItem('Chat3Echo', vscode.CompletionItemKind.Property);
				
				mtChat3Echo.detail = "mt.Chat3Echo";
				mtChat3Echo.insertText = new vscode.SnippetString('Chat3Echo');
				mtChat3Echo.documentation = new vscode.MarkdownString("");
				results.push(mtChat3Echo);				
				
				const mtChat4Echo = new vscode.CompletionItem('Chat4Echo', vscode.CompletionItemKind.Property);
				
				mtChat4Echo.detail = "mt.Chat4Echo";
				mtChat4Echo.insertText = new vscode.SnippetString('Chat4Echo');
				mtChat4Echo.documentation = new vscode.MarkdownString("");
				results.push(mtChat4Echo);				
				
				const mtChat5Echo = new vscode.CompletionItem('Chat5Echo', vscode.CompletionItemKind.Property);
				
				mtChat5Echo.detail = "mt.Chat5Echo";
				mtChat5Echo.insertText = new vscode.SnippetString('Chat5Echo');
				mtChat5Echo.documentation = new vscode.MarkdownString("");
				results.push(mtChat5Echo);				
				
				const mtChat6Echo = new vscode.CompletionItem('Chat6Echo', vscode.CompletionItemKind.Property);
				
				mtChat6Echo.detail = "mt.Chat6Echo";
				mtChat6Echo.insertText = new vscode.SnippetString('Chat6Echo');
				mtChat6Echo.documentation = new vscode.MarkdownString("");
				results.push(mtChat6Echo);				
				
				const mtChat7Echo = new vscode.CompletionItem('Chat7Echo', vscode.CompletionItemKind.Property);
				
				mtChat7Echo.detail = "mt.Chat7Echo";
				mtChat7Echo.insertText = new vscode.SnippetString('Chat7Echo');
				mtChat7Echo.documentation = new vscode.MarkdownString("");
				results.push(mtChat7Echo);				
				
				const mtChat8Echo = new vscode.CompletionItem('Chat8Echo', vscode.CompletionItemKind.Property);
				
				mtChat8Echo.detail = "mt.Chat8Echo";
				mtChat8Echo.insertText = new vscode.SnippetString('Chat8Echo');
				mtChat8Echo.documentation = new vscode.MarkdownString("");
				results.push(mtChat8Echo);				
				
				const mtChat9Echo = new vscode.CompletionItem('Chat9Echo', vscode.CompletionItemKind.Property);
				
				mtChat9Echo.detail = "mt.Chat9Echo";
				mtChat9Echo.insertText = new vscode.SnippetString('Chat9Echo');
				mtChat9Echo.documentation = new vscode.MarkdownString("");
				results.push(mtChat9Echo);				
				
				const mtCritMelee = new vscode.CompletionItem('CritMelee', vscode.CompletionItemKind.Property);
				
				mtCritMelee.detail = "mt.CritMelee";
				mtCritMelee.insertText = new vscode.SnippetString('CritMelee');
				mtCritMelee.documentation = new vscode.MarkdownString("");
				results.push(mtCritMelee);				
				
				const mtDefaultText = new vscode.CompletionItem('DefaultText', vscode.CompletionItemKind.Property);
				
				mtDefaultText.detail = "mt.DefaultText";
				mtDefaultText.insertText = new vscode.SnippetString('DefaultText');
				mtDefaultText.documentation = new vscode.MarkdownString("");
				results.push(mtDefaultText);				
				
				const mtDiceRoll = new vscode.CompletionItem('DiceRoll', vscode.CompletionItemKind.Property);
				
				mtDiceRoll.detail = "mt.DiceRoll";
				mtDiceRoll.insertText = new vscode.SnippetString('DiceRoll');
				mtDiceRoll.documentation = new vscode.MarkdownString("");
				results.push(mtDiceRoll);				
				
				const mtDisciplines = new vscode.CompletionItem('Disciplines', vscode.CompletionItemKind.Property);
				
				mtDisciplines.detail = "mt.Disciplines";
				mtDisciplines.insertText = new vscode.SnippetString('Disciplines');
				mtDisciplines.documentation = new vscode.MarkdownString("");
				results.push(mtDisciplines);				
				
				const mtDoTDamage = new vscode.CompletionItem('DoTDamage', vscode.CompletionItemKind.Property);
				
				mtDoTDamage.detail = "mt.DoTDamage";
				mtDoTDamage.insertText = new vscode.SnippetString('DoTDamage');
				mtDoTDamage.documentation = new vscode.MarkdownString("");
				results.push(mtDoTDamage);				
				
				const mtDS = new vscode.CompletionItem('DS', vscode.CompletionItemKind.Property);
				
				mtDS.detail = "mt.DS";
				mtDS.insertText = new vscode.SnippetString('DS');
				mtDS.documentation = new vscode.MarkdownString("");
				results.push(mtDS);				
				
				const mtEmote = new vscode.CompletionItem('Emote', vscode.CompletionItemKind.Property);
				
				mtEmote.detail = "mt.Emote";
				mtEmote.insertText = new vscode.SnippetString('Emote');
				mtEmote.documentation = new vscode.MarkdownString("");
				results.push(mtEmote);				
				
				const mtEmoteEcho = new vscode.CompletionItem('EmoteEcho', vscode.CompletionItemKind.Property);
				
				mtEmoteEcho.detail = "mt.EmoteEcho";
				mtEmoteEcho.insertText = new vscode.SnippetString('EmoteEcho');
				mtEmoteEcho.documentation = new vscode.MarkdownString("");
				results.push(mtEmoteEcho);				
				
				const mtExperience = new vscode.CompletionItem('Experience', vscode.CompletionItemKind.Property);
				
				mtExperience.detail = "mt.Experience";
				mtExperience.insertText = new vscode.SnippetString('Experience');
				mtExperience.documentation = new vscode.MarkdownString("");
				results.push(mtExperience);				
				
				const mtFocusEffect = new vscode.CompletionItem('FocusEffect', vscode.CompletionItemKind.Property);
				
				mtFocusEffect.detail = "mt.FocusEffect";
				mtFocusEffect.insertText = new vscode.SnippetString('FocusEffect');
				mtFocusEffect.documentation = new vscode.MarkdownString("");
				results.push(mtFocusEffect);				
				
				const mtGroup = new vscode.CompletionItem('Group', vscode.CompletionItemKind.Property);
				
				mtGroup.detail = "mt.Group";
				mtGroup.insertText = new vscode.SnippetString('Group');
				mtGroup.documentation = new vscode.MarkdownString("");
				results.push(mtGroup);				
				
				const mtGroupEcho = new vscode.CompletionItem('GroupEcho', vscode.CompletionItemKind.Property);
				
				mtGroupEcho.detail = "mt.GroupEcho";
				mtGroupEcho.insertText = new vscode.SnippetString('GroupEcho');
				mtGroupEcho.documentation = new vscode.MarkdownString("");
				results.push(mtGroupEcho);				
				
				const mtGuild = new vscode.CompletionItem('Guild', vscode.CompletionItemKind.Property);
				
				mtGuild.detail = "mt.Guild";
				mtGuild.insertText = new vscode.SnippetString('Guild');
				mtGuild.documentation = new vscode.MarkdownString("");
				results.push(mtGuild);				
				
				const mtGuildEcho = new vscode.CompletionItem('GuildEcho', vscode.CompletionItemKind.Property);
				
				mtGuildEcho.detail = "mt.GuildEcho";
				mtGuildEcho.insertText = new vscode.SnippetString('GuildEcho');
				mtGuildEcho.documentation = new vscode.MarkdownString("");
				results.push(mtGuildEcho);				
				
				const mtItemLink = new vscode.CompletionItem('ItemLink', vscode.CompletionItemKind.Property);
				
				mtItemLink.detail = "mt.ItemLink";
				mtItemLink.insertText = new vscode.SnippetString('ItemLink');
				mtItemLink.documentation = new vscode.MarkdownString("");
				results.push(mtItemLink);				
				
				const mtItemSpeech = new vscode.CompletionItem('ItemSpeech', vscode.CompletionItemKind.Property);
				
				mtItemSpeech.detail = "mt.ItemSpeech";
				mtItemSpeech.insertText = new vscode.SnippetString('ItemSpeech');
				mtItemSpeech.documentation = new vscode.MarkdownString("");
				results.push(mtItemSpeech);				
				
				const mtLeadership = new vscode.CompletionItem('Leadership', vscode.CompletionItemKind.Property);
				
				mtLeadership.detail = "mt.Leadership";
				mtLeadership.insertText = new vscode.SnippetString('Leadership');
				mtLeadership.documentation = new vscode.MarkdownString("");
				results.push(mtLeadership);				
				
				const mtLootMessages = new vscode.CompletionItem('LootMessages', vscode.CompletionItemKind.Property);
				
				mtLootMessages.detail = "mt.LootMessages";
				mtLootMessages.insertText = new vscode.SnippetString('LootMessages');
				mtLootMessages.documentation = new vscode.MarkdownString("");
				results.push(mtLootMessages);				
				
				const mtMerchantBuySell = new vscode.CompletionItem('MerchantBuySell', vscode.CompletionItemKind.Property);
				
				mtMerchantBuySell.detail = "mt.MerchantBuySell";
				mtMerchantBuySell.insertText = new vscode.SnippetString('MerchantBuySell');
				mtMerchantBuySell.documentation = new vscode.MarkdownString("");
				results.push(mtMerchantBuySell);				
				
				const mtMerchantOffer = new vscode.CompletionItem('MerchantOffer', vscode.CompletionItemKind.Property);
				
				mtMerchantOffer.detail = "mt.MerchantOffer";
				mtMerchantOffer.insertText = new vscode.SnippetString('MerchantOffer');
				mtMerchantOffer.documentation = new vscode.MarkdownString("");
				results.push(mtMerchantOffer);				
				
				const mtMoneySplit = new vscode.CompletionItem('MoneySplit', vscode.CompletionItemKind.Property);
				
				mtMoneySplit.detail = "mt.MoneySplit";
				mtMoneySplit.insertText = new vscode.SnippetString('MoneySplit');
				mtMoneySplit.documentation = new vscode.MarkdownString("");
				results.push(mtMoneySplit);				
				
				const mtMyPet = new vscode.CompletionItem('MyPet', vscode.CompletionItemKind.Property);
				
				mtMyPet.detail = "mt.MyPet";
				mtMyPet.insertText = new vscode.SnippetString('MyPet');
				mtMyPet.documentation = new vscode.MarkdownString("");
				results.push(mtMyPet);				
				
				const mtNonMelee = new vscode.CompletionItem('NonMelee', vscode.CompletionItemKind.Property);
				
				mtNonMelee.detail = "mt.NonMelee";
				mtNonMelee.insertText = new vscode.SnippetString('NonMelee');
				mtNonMelee.documentation = new vscode.MarkdownString("");
				results.push(mtNonMelee);				
				
				const mtNPCEnrage = new vscode.CompletionItem('NPCEnrage', vscode.CompletionItemKind.Property);
				
				mtNPCEnrage.detail = "mt.NPCEnrage";
				mtNPCEnrage.insertText = new vscode.SnippetString('NPCEnrage');
				mtNPCEnrage.documentation = new vscode.MarkdownString("");
				results.push(mtNPCEnrage);				
				
				const mtNPCFlurry = new vscode.CompletionItem('NPCFlurry', vscode.CompletionItemKind.Property);
				
				mtNPCFlurry.detail = "mt.NPCFlurry";
				mtNPCFlurry.insertText = new vscode.SnippetString('NPCFlurry');
				mtNPCFlurry.documentation = new vscode.MarkdownString("");
				results.push(mtNPCFlurry);				
				
				const mtNPCQuestSay = new vscode.CompletionItem('NPCQuestSay', vscode.CompletionItemKind.Property);
				
				mtNPCQuestSay.detail = "mt.NPCQuestSay";
				mtNPCQuestSay.insertText = new vscode.SnippetString('NPCQuestSay');
				mtNPCQuestSay.documentation = new vscode.MarkdownString("");
				results.push(mtNPCQuestSay);				
				
				const mtNPCRampage = new vscode.CompletionItem('NPCRampage', vscode.CompletionItemKind.Property);
				
				mtNPCRampage.detail = "mt.NPCRampage";
				mtNPCRampage.insertText = new vscode.SnippetString('NPCRampage');
				mtNPCRampage.documentation = new vscode.MarkdownString("");
				results.push(mtNPCRampage);				
				
				const mtOOC = new vscode.CompletionItem('OOC', vscode.CompletionItemKind.Property);
				
				mtOOC.detail = "mt.OOC";
				mtOOC.insertText = new vscode.SnippetString('OOC');
				mtOOC.documentation = new vscode.MarkdownString("");
				results.push(mtOOC);				
				
				const mtOOCEcho = new vscode.CompletionItem('OOCEcho', vscode.CompletionItemKind.Property);
				
				mtOOCEcho.detail = "mt.OOCEcho";
				mtOOCEcho.insertText = new vscode.SnippetString('OOCEcho');
				mtOOCEcho.documentation = new vscode.MarkdownString("");
				results.push(mtOOCEcho);				
				
				const mtOtherDeath = new vscode.CompletionItem('OtherDeath', vscode.CompletionItemKind.Property);
				
				mtOtherDeath.detail = "mt.OtherDeath";
				mtOtherDeath.insertText = new vscode.SnippetString('OtherDeath');
				mtOtherDeath.documentation = new vscode.MarkdownString("");
				results.push(mtOtherDeath);				
				
				const mtOtherHits = new vscode.CompletionItem('OtherHits', vscode.CompletionItemKind.Property);
				
				mtOtherHits.detail = "mt.OtherHits";
				mtOtherHits.insertText = new vscode.SnippetString('OtherHits');
				mtOtherHits.documentation = new vscode.MarkdownString("");
				results.push(mtOtherHits);				
				
				const mtOtherHitsYou = new vscode.CompletionItem('OtherHitsYou', vscode.CompletionItemKind.Property);
				
				mtOtherHitsYou.detail = "mt.OtherHitsYou";
				mtOtherHitsYou.insertText = new vscode.SnippetString('OtherHitsYou');
				mtOtherHitsYou.documentation = new vscode.MarkdownString("");
				results.push(mtOtherHitsYou);				
				
				const mtOtherMisses = new vscode.CompletionItem('OtherMisses', vscode.CompletionItemKind.Property);
				
				mtOtherMisses.detail = "mt.OtherMisses";
				mtOtherMisses.insertText = new vscode.SnippetString('OtherMisses');
				mtOtherMisses.documentation = new vscode.MarkdownString("");
				results.push(mtOtherMisses);				
				
				const mtOtherMissesYou = new vscode.CompletionItem('OtherMissesYou', vscode.CompletionItemKind.Property);
				
				mtOtherMissesYou.detail = "mt.OtherMissesYou";
				mtOtherMissesYou.insertText = new vscode.SnippetString('OtherMissesYou');
				mtOtherMissesYou.documentation = new vscode.MarkdownString("");
				results.push(mtOtherMissesYou);				
				
				const mtOtherSpells = new vscode.CompletionItem('OtherSpells', vscode.CompletionItemKind.Property);
				
				mtOtherSpells.detail = "mt.OtherSpells";
				mtOtherSpells.insertText = new vscode.SnippetString('OtherSpells');
				mtOtherSpells.documentation = new vscode.MarkdownString("");
				results.push(mtOtherSpells);				
				
				const mtPetCrit = new vscode.CompletionItem('PetCrit', vscode.CompletionItemKind.Property);
				
				mtPetCrit.detail = "mt.PetCrit";
				mtPetCrit.insertText = new vscode.SnippetString('PetCrit');
				mtPetCrit.documentation = new vscode.MarkdownString("");
				results.push(mtPetCrit);				
				
				const mtPetFlurry = new vscode.CompletionItem('PetFlurry', vscode.CompletionItemKind.Property);
				
				mtPetFlurry.detail = "mt.PetFlurry";
				mtPetFlurry.insertText = new vscode.SnippetString('PetFlurry');
				mtPetFlurry.documentation = new vscode.MarkdownString("");
				results.push(mtPetFlurry);				
				
				const mtPetResponse = new vscode.CompletionItem('PetResponse', vscode.CompletionItemKind.Property);
				
				mtPetResponse.detail = "mt.PetResponse";
				mtPetResponse.insertText = new vscode.SnippetString('PetResponse');
				mtPetResponse.documentation = new vscode.MarkdownString("");
				results.push(mtPetResponse);				
				
				const mtPetSpell = new vscode.CompletionItem('PetSpell', vscode.CompletionItemKind.Property);
				
				mtPetSpell.detail = "mt.PetSpell";
				mtPetSpell.insertText = new vscode.SnippetString('PetSpell');
				mtPetSpell.documentation = new vscode.MarkdownString("");
				results.push(mtPetSpell);				
				
				const mtRaidSay = new vscode.CompletionItem('RaidSay', vscode.CompletionItemKind.Property);
				
				mtRaidSay.detail = "mt.RaidSay";
				mtRaidSay.insertText = new vscode.SnippetString('RaidSay');
				mtRaidSay.documentation = new vscode.MarkdownString("");
				results.push(mtRaidSay);				
				
				const mtSay = new vscode.CompletionItem('Say', vscode.CompletionItemKind.Property);
				
				mtSay.detail = "mt.Say";
				mtSay.insertText = new vscode.SnippetString('Say');
				mtSay.documentation = new vscode.MarkdownString("");
				results.push(mtSay);				
				
				const mtSayEcho = new vscode.CompletionItem('SayEcho', vscode.CompletionItemKind.Property);
				
				mtSayEcho.detail = "mt.SayEcho";
				mtSayEcho.insertText = new vscode.SnippetString('SayEcho');
				mtSayEcho.documentation = new vscode.MarkdownString("");
				results.push(mtSayEcho);				
				
				const mtShout = new vscode.CompletionItem('Shout', vscode.CompletionItemKind.Property);
				
				mtShout.detail = "mt.Shout";
				mtShout.insertText = new vscode.SnippetString('Shout');
				mtShout.documentation = new vscode.MarkdownString("");
				results.push(mtShout);				
				
				const mtShoutECho = new vscode.CompletionItem('ShoutECho', vscode.CompletionItemKind.Property);
				
				mtShoutECho.detail = "mt.ShoutECho";
				mtShoutECho.insertText = new vscode.SnippetString('ShoutECho');
				mtShoutECho.documentation = new vscode.MarkdownString("");
				results.push(mtShoutECho);				
				
				const mtSkills = new vscode.CompletionItem('Skills', vscode.CompletionItemKind.Property);
				
				mtSkills.detail = "mt.Skills";
				mtSkills.insertText = new vscode.SnippetString('Skills');
				mtSkills.documentation = new vscode.MarkdownString("");
				results.push(mtSkills);				
				
				const mtSpellCrits = new vscode.CompletionItem('SpellCrits', vscode.CompletionItemKind.Property);
				
				mtSpellCrits.detail = "mt.SpellCrits";
				mtSpellCrits.insertText = new vscode.SnippetString('SpellCrits');
				mtSpellCrits.documentation = new vscode.MarkdownString("");
				results.push(mtSpellCrits);				
				
				const mtSpellFailure = new vscode.CompletionItem('SpellFailure', vscode.CompletionItemKind.Property);
				
				mtSpellFailure.detail = "mt.SpellFailure";
				mtSpellFailure.insertText = new vscode.SnippetString('SpellFailure');
				mtSpellFailure.documentation = new vscode.MarkdownString("");
				results.push(mtSpellFailure);				
				
				const mtSpells = new vscode.CompletionItem('Spells', vscode.CompletionItemKind.Property);
				
				mtSpells.detail = "mt.Spells";
				mtSpells.insertText = new vscode.SnippetString('Spells');
				mtSpells.documentation = new vscode.MarkdownString("");
				results.push(mtSpells);				
				
				const mtStrikeThrough = new vscode.CompletionItem('StrikeThrough', vscode.CompletionItemKind.Property);
				
				mtStrikeThrough.detail = "mt.StrikeThrough";
				mtStrikeThrough.insertText = new vscode.SnippetString('StrikeThrough');
				mtStrikeThrough.documentation = new vscode.MarkdownString("");
				results.push(mtStrikeThrough);				
				
				const mtStun = new vscode.CompletionItem('Stun', vscode.CompletionItemKind.Property);
				
				mtStun.detail = "mt.Stun";
				mtStun.insertText = new vscode.SnippetString('Stun');
				mtStun.documentation = new vscode.MarkdownString("");
				results.push(mtStun);				
				
				const mtSystem = new vscode.CompletionItem('System', vscode.CompletionItemKind.Property);
				
				mtSystem.detail = "mt.System";
				mtSystem.insertText = new vscode.SnippetString('System');
				mtSystem.documentation = new vscode.MarkdownString("");
				results.push(mtSystem);				
				
				const mtTell = new vscode.CompletionItem('Tell', vscode.CompletionItemKind.Property);
				
				mtTell.detail = "mt.Tell";
				mtTell.insertText = new vscode.SnippetString('Tell');
				mtTell.documentation = new vscode.MarkdownString("");
				results.push(mtTell);				
				
				const mtTellEcho = new vscode.CompletionItem('TellEcho', vscode.CompletionItemKind.Property);
				
				mtTellEcho.detail = "mt.TellEcho";
				mtTellEcho.insertText = new vscode.SnippetString('TellEcho');
				mtTellEcho.documentation = new vscode.MarkdownString("");
				results.push(mtTellEcho);				
				
				const mtTooFarAway = new vscode.CompletionItem('TooFarAway', vscode.CompletionItemKind.Property);
				
				mtTooFarAway.detail = "mt.TooFarAway";
				mtTooFarAway.insertText = new vscode.SnippetString('TooFarAway');
				mtTooFarAway.documentation = new vscode.MarkdownString("");
				results.push(mtTooFarAway);				
				
				const mtUnused1 = new vscode.CompletionItem('Unused1', vscode.CompletionItemKind.Property);
				
				mtUnused1.detail = "mt.Unused1";
				mtUnused1.insertText = new vscode.SnippetString('Unused1');
				mtUnused1.documentation = new vscode.MarkdownString("");
				results.push(mtUnused1);				
				
				const mtUnused2 = new vscode.CompletionItem('Unused2', vscode.CompletionItemKind.Property);
				
				mtUnused2.detail = "mt.Unused2";
				mtUnused2.insertText = new vscode.SnippetString('Unused2');
				mtUnused2.documentation = new vscode.MarkdownString("");
				results.push(mtUnused2);				
				
				const mtWho = new vscode.CompletionItem('Who', vscode.CompletionItemKind.Property);
				
				mtWho.detail = "mt.Who";
				mtWho.insertText = new vscode.SnippetString('Who');
				mtWho.documentation = new vscode.MarkdownString("");
				results.push(mtWho);				
				
				const mtWornOff = new vscode.CompletionItem('WornOff', vscode.CompletionItemKind.Property);
				
				mtWornOff.detail = "mt.WornOff";
				mtWornOff.insertText = new vscode.SnippetString('WornOff');
				mtWornOff.documentation = new vscode.MarkdownString("");
				results.push(mtWornOff);				
				
				const mtYellForHelp = new vscode.CompletionItem('YellForHelp', vscode.CompletionItemKind.Property);
				
				mtYellForHelp.detail = "mt.YellForHelp";
				mtYellForHelp.insertText = new vscode.SnippetString('YellForHelp');
				mtYellForHelp.documentation = new vscode.MarkdownString("");
				results.push(mtYellForHelp);				
				
				const mtYouHitOther = new vscode.CompletionItem('YouHitOther', vscode.CompletionItemKind.Property);
				
				mtYouHitOther.detail = "mt.YouHitOther";
				mtYouHitOther.insertText = new vscode.SnippetString('YouHitOther');
				mtYouHitOther.documentation = new vscode.MarkdownString("");
				results.push(mtYouHitOther);				
				
				const mtYouMissOther = new vscode.CompletionItem('YouMissOther', vscode.CompletionItemKind.Property);
				
				mtYouMissOther.detail = "mt.YouMissOther";
				mtYouMissOther.insertText = new vscode.SnippetString('YouMissOther');
				mtYouMissOther.documentation = new vscode.MarkdownString("");
				results.push(mtYouMissOther);				
				
				const mtYourDeath = new vscode.CompletionItem('YourDeath', vscode.CompletionItemKind.Property);
				
				mtYourDeath.detail = "mt.YourDeath";
				mtYourDeath.insertText = new vscode.SnippetString('YourDeath');
				mtYourDeath.documentation = new vscode.MarkdownString("");
				results.push(mtYourDeath);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('npc.')) {
					return undefined;
				}
				
				
				const npcAddAISpell = new vscode.CompletionItem('AddAISpell', vscode.CompletionItemKind.Method);
				
				npcAddAISpell.detail = "npc.AddAISpell()";
				npcAddAISpell.insertText = new vscode.SnippetString('AddAISpell()');
				npcAddAISpell.documentation = new vscode.MarkdownString("");
				results.push(npcAddAISpell);				
				
				const npcAddCash = new vscode.CompletionItem('AddCash', vscode.CompletionItemKind.Method);
				
				npcAddCash.detail = "npc.AddCash()";
				npcAddCash.insertText = new vscode.SnippetString('AddCash()');
				npcAddCash.documentation = new vscode.MarkdownString("");
				results.push(npcAddCash);				
				
				const npcAddItem = new vscode.CompletionItem('AddItem', vscode.CompletionItemKind.Method);
				
				npcAddItem.detail = "npc.AddItem()";
				npcAddItem.insertText = new vscode.SnippetString('AddItem()');
				npcAddItem.documentation = new vscode.MarkdownString("");
				results.push(npcAddItem);				
				
				const npcAddLootTable = new vscode.CompletionItem('AddLootTable', vscode.CompletionItemKind.Method);
				
				npcAddLootTable.detail = "npc.AddLootTable()";
				npcAddLootTable.insertText = new vscode.SnippetString('AddLootTable()');
				npcAddLootTable.documentation = new vscode.MarkdownString("");
				results.push(npcAddLootTable);				
				
				const npcAssignWaypoints = new vscode.CompletionItem('AssignWaypoints', vscode.CompletionItemKind.Method);
				
				npcAssignWaypoints.detail = "npc.AssignWaypoints()";
				npcAssignWaypoints.insertText = new vscode.SnippetString('AssignWaypoints()');
				npcAssignWaypoints.documentation = new vscode.MarkdownString("");
				results.push(npcAssignWaypoints);				
				
				const npcCalculateNewWaypoint = new vscode.CompletionItem('CalculateNewWaypoint', vscode.CompletionItemKind.Method);
				
				npcCalculateNewWaypoint.detail = "npc.CalculateNewWaypoint()";
				npcCalculateNewWaypoint.insertText = new vscode.SnippetString('CalculateNewWaypoint()');
				npcCalculateNewWaypoint.documentation = new vscode.MarkdownString("");
				results.push(npcCalculateNewWaypoint);				
				
				const npcCheckNPCFactionAlly = new vscode.CompletionItem('CheckNPCFactionAlly', vscode.CompletionItemKind.Method);
				
				npcCheckNPCFactionAlly.detail = "npc.CheckNPCFactionAlly()";
				npcCheckNPCFactionAlly.insertText = new vscode.SnippetString('CheckNPCFactionAlly()');
				npcCheckNPCFactionAlly.documentation = new vscode.MarkdownString("");
				results.push(npcCheckNPCFactionAlly);				
				
				const npcClearItemList = new vscode.CompletionItem('ClearItemList', vscode.CompletionItemKind.Method);
				
				npcClearItemList.detail = "npc.ClearItemList()";
				npcClearItemList.insertText = new vscode.SnippetString('ClearItemList()');
				npcClearItemList.documentation = new vscode.MarkdownString("");
				results.push(npcClearItemList);				
				
				const npcCountLoot = new vscode.CompletionItem('CountLoot', vscode.CompletionItemKind.Method);
				
				npcCountLoot.detail = "npc.CountLoot()";
				npcCountLoot.insertText = new vscode.SnippetString('CountLoot()');
				npcCountLoot.documentation = new vscode.MarkdownString("");
				results.push(npcCountLoot);				
				
				const npcDisplayWaypointInfo = new vscode.CompletionItem('DisplayWaypointInfo', vscode.CompletionItemKind.Method);
				
				npcDisplayWaypointInfo.detail = "npc.DisplayWaypointInfo()";
				npcDisplayWaypointInfo.insertText = new vscode.SnippetString('DisplayWaypointInfo()');
				npcDisplayWaypointInfo.documentation = new vscode.MarkdownString("");
				results.push(npcDisplayWaypointInfo);				
				
				const npcDoClassAttacks = new vscode.CompletionItem('DoClassAttacks', vscode.CompletionItemKind.Method);
				
				npcDoClassAttacks.detail = "npc.DoClassAttacks()";
				npcDoClassAttacks.insertText = new vscode.SnippetString('DoClassAttacks()');
				npcDoClassAttacks.documentation = new vscode.MarkdownString("");
				results.push(npcDoClassAttacks);				
				
				const npcGetAccuracyRating = new vscode.CompletionItem('GetAccuracyRating', vscode.CompletionItemKind.Method);
				
				npcGetAccuracyRating.detail = "npc.GetAccuracyRating()";
				npcGetAccuracyRating.insertText = new vscode.SnippetString('GetAccuracyRating()');
				npcGetAccuracyRating.documentation = new vscode.MarkdownString("");
				results.push(npcGetAccuracyRating);				
				
				const npcGetAttackDelay = new vscode.CompletionItem('GetAttackDelay', vscode.CompletionItemKind.Method);
				
				npcGetAttackDelay.detail = "npc.GetAttackDelay()";
				npcGetAttackDelay.insertText = new vscode.SnippetString('GetAttackDelay()');
				npcGetAttackDelay.documentation = new vscode.MarkdownString("");
				results.push(npcGetAttackDelay);				
				
				const npcGetAttackSpeed = new vscode.CompletionItem('GetAttackSpeed', vscode.CompletionItemKind.Method);
				
				npcGetAttackSpeed.detail = "npc.GetAttackSpeed()";
				npcGetAttackSpeed.insertText = new vscode.SnippetString('GetAttackSpeed()');
				npcGetAttackSpeed.documentation = new vscode.MarkdownString("");
				results.push(npcGetAttackSpeed);				
				
				const npcGetAvoidanceRating = new vscode.CompletionItem('GetAvoidanceRating', vscode.CompletionItemKind.Method);
				
				npcGetAvoidanceRating.detail = "npc.GetAvoidanceRating()";
				npcGetAvoidanceRating.insertText = new vscode.SnippetString('GetAvoidanceRating()');
				npcGetAvoidanceRating.documentation = new vscode.MarkdownString("");
				results.push(npcGetAvoidanceRating);				
				
				const npcGetCopper = new vscode.CompletionItem('GetCopper', vscode.CompletionItemKind.Method);
				
				npcGetCopper.detail = "npc.GetCopper()";
				npcGetCopper.insertText = new vscode.SnippetString('GetCopper()');
				npcGetCopper.documentation = new vscode.MarkdownString("");
				results.push(npcGetCopper);				
				
				const npcGetFollowCanRun = new vscode.CompletionItem('GetFollowCanRun', vscode.CompletionItemKind.Method);
				
				npcGetFollowCanRun.detail = "npc.GetFollowCanRun()";
				npcGetFollowCanRun.insertText = new vscode.SnippetString('GetFollowCanRun()');
				npcGetFollowCanRun.documentation = new vscode.MarkdownString("");
				results.push(npcGetFollowCanRun);				
				
				const npcGetFollowDistance = new vscode.CompletionItem('GetFollowDistance', vscode.CompletionItemKind.Method);
				
				npcGetFollowDistance.detail = "npc.GetFollowDistance()";
				npcGetFollowDistance.insertText = new vscode.SnippetString('GetFollowDistance()');
				npcGetFollowDistance.documentation = new vscode.MarkdownString("");
				results.push(npcGetFollowDistance);				
				
				const npcGetFollowID = new vscode.CompletionItem('GetFollowID', vscode.CompletionItemKind.Method);
				
				npcGetFollowID.detail = "npc.GetFollowID()";
				npcGetFollowID.insertText = new vscode.SnippetString('GetFollowID()');
				npcGetFollowID.documentation = new vscode.MarkdownString("");
				results.push(npcGetFollowID);				
				
				const npcGetGold = new vscode.CompletionItem('GetGold', vscode.CompletionItemKind.Method);
				
				npcGetGold.detail = "npc.GetGold()";
				npcGetGold.insertText = new vscode.SnippetString('GetGold()');
				npcGetGold.documentation = new vscode.MarkdownString("");
				results.push(npcGetGold);				
				
				const npcGetGrid = new vscode.CompletionItem('GetGrid', vscode.CompletionItemKind.Method);
				
				npcGetGrid.detail = "npc.GetGrid()";
				npcGetGrid.insertText = new vscode.SnippetString('GetGrid()');
				npcGetGrid.documentation = new vscode.MarkdownString("");
				results.push(npcGetGrid);				
				
				const npcGetGuardPointX = new vscode.CompletionItem('GetGuardPointX', vscode.CompletionItemKind.Method);
				
				npcGetGuardPointX.detail = "npc.GetGuardPointX()";
				npcGetGuardPointX.insertText = new vscode.SnippetString('GetGuardPointX()');
				npcGetGuardPointX.documentation = new vscode.MarkdownString("");
				results.push(npcGetGuardPointX);				
				
				const npcGetGuardPointY = new vscode.CompletionItem('GetGuardPointY', vscode.CompletionItemKind.Method);
				
				npcGetGuardPointY.detail = "npc.GetGuardPointY()";
				npcGetGuardPointY.insertText = new vscode.SnippetString('GetGuardPointY()');
				npcGetGuardPointY.documentation = new vscode.MarkdownString("");
				results.push(npcGetGuardPointY);				
				
				const npcGetGuardPointZ = new vscode.CompletionItem('GetGuardPointZ', vscode.CompletionItemKind.Method);
				
				npcGetGuardPointZ.detail = "npc.GetGuardPointZ()";
				npcGetGuardPointZ.insertText = new vscode.SnippetString('GetGuardPointZ()');
				npcGetGuardPointZ.documentation = new vscode.MarkdownString("");
				results.push(npcGetGuardPointZ);				
				
				const npcGetLoottableID = new vscode.CompletionItem('GetLoottableID', vscode.CompletionItemKind.Method);
				
				npcGetLoottableID.detail = "npc.GetLoottableID()";
				npcGetLoottableID.insertText = new vscode.SnippetString('GetLoottableID()');
				npcGetLoottableID.documentation = new vscode.MarkdownString("");
				results.push(npcGetLoottableID);				
				
				const npcGetMaxDamage = new vscode.CompletionItem('GetMaxDamage', vscode.CompletionItemKind.Method);
				
				npcGetMaxDamage.detail = "npc.GetMaxDamage()";
				npcGetMaxDamage.insertText = new vscode.SnippetString('GetMaxDamage()');
				npcGetMaxDamage.documentation = new vscode.MarkdownString("");
				results.push(npcGetMaxDamage);				
				
				const npcGetMaxDMG = new vscode.CompletionItem('GetMaxDMG', vscode.CompletionItemKind.Method);
				
				npcGetMaxDMG.detail = "npc.GetMaxDMG()";
				npcGetMaxDMG.insertText = new vscode.SnippetString('GetMaxDMG()');
				npcGetMaxDMG.documentation = new vscode.MarkdownString("");
				results.push(npcGetMaxDMG);				
				
				const npcGetMaxWp = new vscode.CompletionItem('GetMaxWp', vscode.CompletionItemKind.Method);
				
				npcGetMaxWp.detail = "npc.GetMaxWp()";
				npcGetMaxWp.insertText = new vscode.SnippetString('GetMaxWp()');
				npcGetMaxWp.documentation = new vscode.MarkdownString("");
				results.push(npcGetMaxWp);				
				
				const npcGetMinDMG = new vscode.CompletionItem('GetMinDMG', vscode.CompletionItemKind.Method);
				
				npcGetMinDMG.detail = "npc.GetMinDMG()";
				npcGetMinDMG.insertText = new vscode.SnippetString('GetMinDMG()');
				npcGetMinDMG.documentation = new vscode.MarkdownString("");
				results.push(npcGetMinDMG);				
				
				const npcGetNPCFactionID = new vscode.CompletionItem('GetNPCFactionID', vscode.CompletionItemKind.Method);
				
				npcGetNPCFactionID.detail = "npc.GetNPCFactionID()";
				npcGetNPCFactionID.insertText = new vscode.SnippetString('GetNPCFactionID()');
				npcGetNPCFactionID.documentation = new vscode.MarkdownString("");
				results.push(npcGetNPCFactionID);				
				
				const npcGetNPCHate = new vscode.CompletionItem('GetNPCHate', vscode.CompletionItemKind.Method);
				
				npcGetNPCHate.detail = "npc.GetNPCHate()";
				npcGetNPCHate.insertText = new vscode.SnippetString('GetNPCHate()');
				npcGetNPCHate.documentation = new vscode.MarkdownString("");
				results.push(npcGetNPCHate);				
				
				const npcGetNPCSpellsID = new vscode.CompletionItem('GetNPCSpellsID', vscode.CompletionItemKind.Method);
				
				npcGetNPCSpellsID.detail = "npc.GetNPCSpellsID()";
				npcGetNPCSpellsID.insertText = new vscode.SnippetString('GetNPCSpellsID()');
				npcGetNPCSpellsID.documentation = new vscode.MarkdownString("");
				results.push(npcGetNPCSpellsID);				
				
				const npcGetPetSpellID = new vscode.CompletionItem('GetPetSpellID', vscode.CompletionItemKind.Method);
				
				npcGetPetSpellID.detail = "npc.GetPetSpellID()";
				npcGetPetSpellID.insertText = new vscode.SnippetString('GetPetSpellID()');
				npcGetPetSpellID.documentation = new vscode.MarkdownString("");
				results.push(npcGetPetSpellID);				
				
				const npcGetPlatinum = new vscode.CompletionItem('GetPlatinum', vscode.CompletionItemKind.Method);
				
				npcGetPlatinum.detail = "npc.GetPlatinum()";
				npcGetPlatinum.insertText = new vscode.SnippetString('GetPlatinum()');
				npcGetPlatinum.documentation = new vscode.MarkdownString("");
				results.push(npcGetPlatinum);				
				
				const npcGetPrimaryFaction = new vscode.CompletionItem('GetPrimaryFaction', vscode.CompletionItemKind.Method);
				
				npcGetPrimaryFaction.detail = "npc.GetPrimaryFaction()";
				npcGetPrimaryFaction.insertText = new vscode.SnippetString('GetPrimaryFaction()');
				npcGetPrimaryFaction.documentation = new vscode.MarkdownString("");
				results.push(npcGetPrimaryFaction);				
				
				const npcGetPrimSkill = new vscode.CompletionItem('GetPrimSkill', vscode.CompletionItemKind.Method);
				
				npcGetPrimSkill.detail = "npc.GetPrimSkill()";
				npcGetPrimSkill.insertText = new vscode.SnippetString('GetPrimSkill()');
				npcGetPrimSkill.documentation = new vscode.MarkdownString("");
				results.push(npcGetPrimSkill);				
				
				const npcGetRawAC = new vscode.CompletionItem('GetRawAC', vscode.CompletionItemKind.Method);
				
				npcGetRawAC.detail = "npc.GetRawAC()";
				npcGetRawAC.insertText = new vscode.SnippetString('GetRawAC()');
				npcGetRawAC.documentation = new vscode.MarkdownString("");
				results.push(npcGetRawAC);				
				
				const npcGetScore = new vscode.CompletionItem('GetScore', vscode.CompletionItemKind.Method);
				
				npcGetScore.detail = "npc.GetScore()";
				npcGetScore.insertText = new vscode.SnippetString('GetScore()');
				npcGetScore.documentation = new vscode.MarkdownString("");
				results.push(npcGetScore);				
				
				const npcGetSecSkill = new vscode.CompletionItem('GetSecSkill', vscode.CompletionItemKind.Method);
				
				npcGetSecSkill.detail = "npc.GetSecSkill()";
				npcGetSecSkill.insertText = new vscode.SnippetString('GetSecSkill()');
				npcGetSecSkill.documentation = new vscode.MarkdownString("");
				results.push(npcGetSecSkill);				
				
				const npcGetSilver = new vscode.CompletionItem('GetSilver', vscode.CompletionItemKind.Method);
				
				npcGetSilver.detail = "npc.GetSilver()";
				npcGetSilver.insertText = new vscode.SnippetString('GetSilver()');
				npcGetSilver.documentation = new vscode.MarkdownString("");
				results.push(npcGetSilver);				
				
				const npcGetSlowMitigation = new vscode.CompletionItem('GetSlowMitigation', vscode.CompletionItemKind.Method);
				
				npcGetSlowMitigation.detail = "npc.GetSlowMitigation()";
				npcGetSlowMitigation.insertText = new vscode.SnippetString('GetSlowMitigation()');
				npcGetSlowMitigation.documentation = new vscode.MarkdownString("");
				results.push(npcGetSlowMitigation);				
				
				const npcGetSpawnKillCount = new vscode.CompletionItem('GetSpawnKillCount', vscode.CompletionItemKind.Method);
				
				npcGetSpawnKillCount.detail = "npc.GetSpawnKillCount()";
				npcGetSpawnKillCount.insertText = new vscode.SnippetString('GetSpawnKillCount()');
				npcGetSpawnKillCount.documentation = new vscode.MarkdownString("");
				results.push(npcGetSpawnKillCount);				
				
				const npcGetSpawnPointH = new vscode.CompletionItem('GetSpawnPointH', vscode.CompletionItemKind.Method);
				
				npcGetSpawnPointH.detail = "npc.GetSpawnPointH()";
				npcGetSpawnPointH.insertText = new vscode.SnippetString('GetSpawnPointH()');
				npcGetSpawnPointH.documentation = new vscode.MarkdownString("");
				results.push(npcGetSpawnPointH);				
				
				const npcGetSpawnPointID = new vscode.CompletionItem('GetSpawnPointID', vscode.CompletionItemKind.Method);
				
				npcGetSpawnPointID.detail = "npc.GetSpawnPointID()";
				npcGetSpawnPointID.insertText = new vscode.SnippetString('GetSpawnPointID()');
				npcGetSpawnPointID.documentation = new vscode.MarkdownString("");
				results.push(npcGetSpawnPointID);				
				
				const npcGetSpawnPointX = new vscode.CompletionItem('GetSpawnPointX', vscode.CompletionItemKind.Method);
				
				npcGetSpawnPointX.detail = "npc.GetSpawnPointX()";
				npcGetSpawnPointX.insertText = new vscode.SnippetString('GetSpawnPointX()');
				npcGetSpawnPointX.documentation = new vscode.MarkdownString("");
				results.push(npcGetSpawnPointX);				
				
				const npcGetSpawnPointY = new vscode.CompletionItem('GetSpawnPointY', vscode.CompletionItemKind.Method);
				
				npcGetSpawnPointY.detail = "npc.GetSpawnPointY()";
				npcGetSpawnPointY.insertText = new vscode.SnippetString('GetSpawnPointY()');
				npcGetSpawnPointY.documentation = new vscode.MarkdownString("");
				results.push(npcGetSpawnPointY);				
				
				const npcGetSpawnPointZ = new vscode.CompletionItem('GetSpawnPointZ', vscode.CompletionItemKind.Method);
				
				npcGetSpawnPointZ.detail = "npc.GetSpawnPointZ()";
				npcGetSpawnPointZ.insertText = new vscode.SnippetString('GetSpawnPointZ()');
				npcGetSpawnPointZ.documentation = new vscode.MarkdownString("");
				results.push(npcGetSpawnPointZ);				
				
				const npcGetSpellFocusDMG = new vscode.CompletionItem('GetSpellFocusDMG', vscode.CompletionItemKind.Method);
				
				npcGetSpellFocusDMG.detail = "npc.GetSpellFocusDMG()";
				npcGetSpellFocusDMG.insertText = new vscode.SnippetString('GetSpellFocusDMG()');
				npcGetSpellFocusDMG.documentation = new vscode.MarkdownString("");
				results.push(npcGetSpellFocusDMG);				
				
				const npcGetSpellFocusHeal = new vscode.CompletionItem('GetSpellFocusHeal', vscode.CompletionItemKind.Method);
				
				npcGetSpellFocusHeal.detail = "npc.GetSpellFocusHeal()";
				npcGetSpellFocusHeal.insertText = new vscode.SnippetString('GetSpellFocusHeal()');
				npcGetSpellFocusHeal.documentation = new vscode.MarkdownString("");
				results.push(npcGetSpellFocusHeal);				
				
				const npcGetSwarmOwner = new vscode.CompletionItem('GetSwarmOwner', vscode.CompletionItemKind.Method);
				
				npcGetSwarmOwner.detail = "npc.GetSwarmOwner()";
				npcGetSwarmOwner.insertText = new vscode.SnippetString('GetSwarmOwner()');
				npcGetSwarmOwner.documentation = new vscode.MarkdownString("");
				results.push(npcGetSwarmOwner);				
				
				const npcGetSwarmTarget = new vscode.CompletionItem('GetSwarmTarget', vscode.CompletionItemKind.Method);
				
				npcGetSwarmTarget.detail = "npc.GetSwarmTarget()";
				npcGetSwarmTarget.insertText = new vscode.SnippetString('GetSwarmTarget()');
				npcGetSwarmTarget.documentation = new vscode.MarkdownString("");
				results.push(npcGetSwarmTarget);				
				
				const npcGetWaypointMax = new vscode.CompletionItem('GetWaypointMax', vscode.CompletionItemKind.Method);
				
				npcGetWaypointMax.detail = "npc.GetWaypointMax()";
				npcGetWaypointMax.insertText = new vscode.SnippetString('GetWaypointMax()');
				npcGetWaypointMax.documentation = new vscode.MarkdownString("");
				results.push(npcGetWaypointMax);				
				
				const npcIsAnimal = new vscode.CompletionItem('IsAnimal', vscode.CompletionItemKind.Method);
				
				npcIsAnimal.detail = "npc.IsAnimal()";
				npcIsAnimal.insertText = new vscode.SnippetString('IsAnimal()');
				npcIsAnimal.documentation = new vscode.MarkdownString("");
				results.push(npcIsAnimal);				
				
				const npcIsGuarding = new vscode.CompletionItem('IsGuarding', vscode.CompletionItemKind.Method);
				
				npcIsGuarding.detail = "npc.IsGuarding()";
				npcIsGuarding.insertText = new vscode.SnippetString('IsGuarding()');
				npcIsGuarding.documentation = new vscode.MarkdownString("");
				results.push(npcIsGuarding);				
				
				const npcIsOnHatelist = new vscode.CompletionItem('IsOnHatelist', vscode.CompletionItemKind.Method);
				
				npcIsOnHatelist.detail = "npc.IsOnHatelist()";
				npcIsOnHatelist.insertText = new vscode.SnippetString('IsOnHatelist()');
				npcIsOnHatelist.documentation = new vscode.MarkdownString("");
				results.push(npcIsOnHatelist);				
				
				const npcIsTaunting = new vscode.CompletionItem('IsTaunting', vscode.CompletionItemKind.Method);
				
				npcIsTaunting.detail = "npc.IsTaunting()";
				npcIsTaunting.insertText = new vscode.SnippetString('IsTaunting()');
				npcIsTaunting.documentation = new vscode.MarkdownString("");
				results.push(npcIsTaunting);				
				
				const npcMerchantCloseShop = new vscode.CompletionItem('MerchantCloseShop', vscode.CompletionItemKind.Method);
				
				npcMerchantCloseShop.detail = "npc.MerchantCloseShop()";
				npcMerchantCloseShop.insertText = new vscode.SnippetString('MerchantCloseShop()');
				npcMerchantCloseShop.documentation = new vscode.MarkdownString("");
				results.push(npcMerchantCloseShop);				
				
				const npcMerchantOpenShop = new vscode.CompletionItem('MerchantOpenShop', vscode.CompletionItemKind.Method);
				
				npcMerchantOpenShop.detail = "npc.MerchantOpenShop()";
				npcMerchantOpenShop.insertText = new vscode.SnippetString('MerchantOpenShop()');
				npcMerchantOpenShop.documentation = new vscode.MarkdownString("");
				results.push(npcMerchantOpenShop);				
				
				const npcModifyNPCStat = new vscode.CompletionItem('ModifyNPCStat', vscode.CompletionItemKind.Method);
				
				npcModifyNPCStat.detail = "npc.ModifyNPCStat()";
				npcModifyNPCStat.insertText = new vscode.SnippetString('ModifyNPCStat()');
				npcModifyNPCStat.documentation = new vscode.MarkdownString("");
				results.push(npcModifyNPCStat);				
				
				const npcMoveTo = new vscode.CompletionItem('MoveTo', vscode.CompletionItemKind.Method);
				
				npcMoveTo.detail = "npc.MoveTo()";
				npcMoveTo.insertText = new vscode.SnippetString('MoveTo()');
				npcMoveTo.documentation = new vscode.MarkdownString("");
				results.push(npcMoveTo);				
				
				const npcNextGuardPosition = new vscode.CompletionItem('NextGuardPosition', vscode.CompletionItemKind.Method);
				
				npcNextGuardPosition.detail = "npc.NextGuardPosition()";
				npcNextGuardPosition.insertText = new vscode.SnippetString('NextGuardPosition()');
				npcNextGuardPosition.documentation = new vscode.MarkdownString("");
				results.push(npcNextGuardPosition);				
				
				const npcPauseWandering = new vscode.CompletionItem('PauseWandering', vscode.CompletionItemKind.Method);
				
				npcPauseWandering.detail = "npc.PauseWandering()";
				npcPauseWandering.insertText = new vscode.SnippetString('PauseWandering()');
				npcPauseWandering.documentation = new vscode.MarkdownString("");
				results.push(npcPauseWandering);				
				
				const npcPickPocket = new vscode.CompletionItem('PickPocket', vscode.CompletionItemKind.Method);
				
				npcPickPocket.detail = "npc.PickPocket()";
				npcPickPocket.insertText = new vscode.SnippetString('PickPocket()');
				npcPickPocket.documentation = new vscode.MarkdownString("");
				results.push(npcPickPocket);				
				
				const npcRecalculateSkills = new vscode.CompletionItem('RecalculateSkills', vscode.CompletionItemKind.Method);
				
				npcRecalculateSkills.detail = "npc.RecalculateSkills()";
				npcRecalculateSkills.insertText = new vscode.SnippetString('RecalculateSkills()');
				npcRecalculateSkills.documentation = new vscode.MarkdownString("");
				results.push(npcRecalculateSkills);				
				
				const npcRemoveAISpell = new vscode.CompletionItem('RemoveAISpell', vscode.CompletionItemKind.Method);
				
				npcRemoveAISpell.detail = "npc.RemoveAISpell()";
				npcRemoveAISpell.insertText = new vscode.SnippetString('RemoveAISpell()');
				npcRemoveAISpell.documentation = new vscode.MarkdownString("");
				results.push(npcRemoveAISpell);				
				
				const npcRemoveCash = new vscode.CompletionItem('RemoveCash', vscode.CompletionItemKind.Method);
				
				npcRemoveCash.detail = "npc.RemoveCash()";
				npcRemoveCash.insertText = new vscode.SnippetString('RemoveCash()');
				npcRemoveCash.documentation = new vscode.MarkdownString("");
				results.push(npcRemoveCash);				
				
				const npcRemoveItem = new vscode.CompletionItem('RemoveItem', vscode.CompletionItemKind.Method);
				
				npcRemoveItem.detail = "npc.RemoveItem()";
				npcRemoveItem.insertText = new vscode.SnippetString('RemoveItem()');
				npcRemoveItem.documentation = new vscode.MarkdownString("");
				results.push(npcRemoveItem);				
				
				const npcResumeWandering = new vscode.CompletionItem('ResumeWandering', vscode.CompletionItemKind.Method);
				
				npcResumeWandering.detail = "npc.ResumeWandering()";
				npcResumeWandering.insertText = new vscode.SnippetString('ResumeWandering()');
				npcResumeWandering.documentation = new vscode.MarkdownString("");
				results.push(npcResumeWandering);				
				
				const npcSaveGuardSpot = new vscode.CompletionItem('SaveGuardSpot', vscode.CompletionItemKind.Method);
				
				npcSaveGuardSpot.detail = "npc.SaveGuardSpot()";
				npcSaveGuardSpot.insertText = new vscode.SnippetString('SaveGuardSpot()');
				npcSaveGuardSpot.documentation = new vscode.MarkdownString("");
				results.push(npcSaveGuardSpot);				
				
				const npcSetCopper = new vscode.CompletionItem('SetCopper', vscode.CompletionItemKind.Method);
				
				npcSetCopper.detail = "npc.SetCopper()";
				npcSetCopper.insertText = new vscode.SnippetString('SetCopper()');
				npcSetCopper.documentation = new vscode.MarkdownString("");
				results.push(npcSetCopper);				
				
				const npcSetFollowCanRun = new vscode.CompletionItem('SetFollowCanRun', vscode.CompletionItemKind.Method);
				
				npcSetFollowCanRun.detail = "npc.SetFollowCanRun()";
				npcSetFollowCanRun.insertText = new vscode.SnippetString('SetFollowCanRun()');
				npcSetFollowCanRun.documentation = new vscode.MarkdownString("");
				results.push(npcSetFollowCanRun);				
				
				const npcSetFollowDistance = new vscode.CompletionItem('SetFollowDistance', vscode.CompletionItemKind.Method);
				
				npcSetFollowDistance.detail = "npc.SetFollowDistance()";
				npcSetFollowDistance.insertText = new vscode.SnippetString('SetFollowDistance()');
				npcSetFollowDistance.documentation = new vscode.MarkdownString("");
				results.push(npcSetFollowDistance);				
				
				const npcSetFollowID = new vscode.CompletionItem('SetFollowID', vscode.CompletionItemKind.Method);
				
				npcSetFollowID.detail = "npc.SetFollowID()";
				npcSetFollowID.insertText = new vscode.SnippetString('SetFollowID()');
				npcSetFollowID.documentation = new vscode.MarkdownString("");
				results.push(npcSetFollowID);				
				
				const npcSetGold = new vscode.CompletionItem('SetGold', vscode.CompletionItemKind.Method);
				
				npcSetGold.detail = "npc.SetGold()";
				npcSetGold.insertText = new vscode.SnippetString('SetGold()');
				npcSetGold.documentation = new vscode.MarkdownString("");
				results.push(npcSetGold);				
				
				const npcSetGrid = new vscode.CompletionItem('SetGrid', vscode.CompletionItemKind.Method);
				
				npcSetGrid.detail = "npc.SetGrid()";
				npcSetGrid.insertText = new vscode.SnippetString('SetGrid()');
				npcSetGrid.documentation = new vscode.MarkdownString("");
				results.push(npcSetGrid);				
				
				const npcSetNPCFactionID = new vscode.CompletionItem('SetNPCFactionID', vscode.CompletionItemKind.Method);
				
				npcSetNPCFactionID.detail = "npc.SetNPCFactionID()";
				npcSetNPCFactionID.insertText = new vscode.SnippetString('SetNPCFactionID()');
				npcSetNPCFactionID.documentation = new vscode.MarkdownString("");
				results.push(npcSetNPCFactionID);				
				
				const npcSetPetSpellID = new vscode.CompletionItem('SetPetSpellID', vscode.CompletionItemKind.Method);
				
				npcSetPetSpellID.detail = "npc.SetPetSpellID()";
				npcSetPetSpellID.insertText = new vscode.SnippetString('SetPetSpellID()');
				npcSetPetSpellID.documentation = new vscode.MarkdownString("");
				results.push(npcSetPetSpellID);				
				
				const npcSetPlatinum = new vscode.CompletionItem('SetPlatinum', vscode.CompletionItemKind.Method);
				
				npcSetPlatinum.detail = "npc.SetPlatinum()";
				npcSetPlatinum.insertText = new vscode.SnippetString('SetPlatinum()');
				npcSetPlatinum.documentation = new vscode.MarkdownString("");
				results.push(npcSetPlatinum);				
				
				const npcSetPrimSkill = new vscode.CompletionItem('SetPrimSkill', vscode.CompletionItemKind.Method);
				
				npcSetPrimSkill.detail = "npc.SetPrimSkill()";
				npcSetPrimSkill.insertText = new vscode.SnippetString('SetPrimSkill()');
				npcSetPrimSkill.documentation = new vscode.MarkdownString("");
				results.push(npcSetPrimSkill);				
				
				const npcSetSaveWaypoint = new vscode.CompletionItem('SetSaveWaypoint', vscode.CompletionItemKind.Method);
				
				npcSetSaveWaypoint.detail = "npc.SetSaveWaypoint()";
				npcSetSaveWaypoint.insertText = new vscode.SnippetString('SetSaveWaypoint()');
				npcSetSaveWaypoint.documentation = new vscode.MarkdownString("");
				results.push(npcSetSaveWaypoint);				
				
				const npcSetSecSkill = new vscode.CompletionItem('SetSecSkill', vscode.CompletionItemKind.Method);
				
				npcSetSecSkill.detail = "npc.SetSecSkill()";
				npcSetSecSkill.insertText = new vscode.SnippetString('SetSecSkill()');
				npcSetSecSkill.documentation = new vscode.MarkdownString("");
				results.push(npcSetSecSkill);				
				
				const npcSetSilver = new vscode.CompletionItem('SetSilver', vscode.CompletionItemKind.Method);
				
				npcSetSilver.detail = "npc.SetSilver()";
				npcSetSilver.insertText = new vscode.SnippetString('SetSilver()');
				npcSetSilver.documentation = new vscode.MarkdownString("");
				results.push(npcSetSilver);				
				
				const npcSetSimpleRoamBox = new vscode.CompletionItem('SetSimpleRoamBox', vscode.CompletionItemKind.Method);
				
				npcSetSimpleRoamBox.detail = "npc.SetSimpleRoamBox()";
				npcSetSimpleRoamBox.insertText = new vscode.SnippetString('SetSimpleRoamBox()');
				npcSetSimpleRoamBox.documentation = new vscode.MarkdownString("");
				results.push(npcSetSimpleRoamBox);				
				
				const npcSetSpellFocusDMG = new vscode.CompletionItem('SetSpellFocusDMG', vscode.CompletionItemKind.Method);
				
				npcSetSpellFocusDMG.detail = "npc.SetSpellFocusDMG()";
				npcSetSpellFocusDMG.insertText = new vscode.SnippetString('SetSpellFocusDMG()');
				npcSetSpellFocusDMG.documentation = new vscode.MarkdownString("");
				results.push(npcSetSpellFocusDMG);				
				
				const npcSetSpellFocusHeal = new vscode.CompletionItem('SetSpellFocusHeal', vscode.CompletionItemKind.Method);
				
				npcSetSpellFocusHeal.detail = "npc.SetSpellFocusHeal()";
				npcSetSpellFocusHeal.insertText = new vscode.SnippetString('SetSpellFocusHeal()');
				npcSetSpellFocusHeal.documentation = new vscode.MarkdownString("");
				results.push(npcSetSpellFocusHeal);				
				
				const npcSetSwarmTarget = new vscode.CompletionItem('SetSwarmTarget', vscode.CompletionItemKind.Method);
				
				npcSetSwarmTarget.detail = "npc.SetSwarmTarget()";
				npcSetSwarmTarget.insertText = new vscode.SnippetString('SetSwarmTarget()');
				npcSetSwarmTarget.documentation = new vscode.MarkdownString("");
				results.push(npcSetSwarmTarget);				
				
				const npcSetTaunting = new vscode.CompletionItem('SetTaunting', vscode.CompletionItemKind.Method);
				
				npcSetTaunting.detail = "npc.SetTaunting()";
				npcSetTaunting.insertText = new vscode.SnippetString('SetTaunting()');
				npcSetTaunting.documentation = new vscode.MarkdownString("");
				results.push(npcSetTaunting);				
				
				const npcSetWaypointPause = new vscode.CompletionItem('SetWaypointPause', vscode.CompletionItemKind.Method);
				
				npcSetWaypointPause.detail = "npc.SetWaypointPause()";
				npcSetWaypointPause.insertText = new vscode.SnippetString('SetWaypointPause()');
				npcSetWaypointPause.documentation = new vscode.MarkdownString("");
				results.push(npcSetWaypointPause);				
				
				const npcSignal = new vscode.CompletionItem('Signal', vscode.CompletionItemKind.Method);
				
				npcSignal.detail = "npc.Signal()";
				npcSignal.insertText = new vscode.SnippetString('Signal()');
				npcSignal.documentation = new vscode.MarkdownString("");
				results.push(npcSignal);				
				
				const npcStartSwarmTimer = new vscode.CompletionItem('StartSwarmTimer', vscode.CompletionItemKind.Method);
				
				npcStartSwarmTimer.detail = "npc.StartSwarmTimer()";
				npcStartSwarmTimer.insertText = new vscode.SnippetString('StartSwarmTimer()');
				npcStartSwarmTimer.documentation = new vscode.MarkdownString("");
				results.push(npcStartSwarmTimer);				
				
				const npcStopWandering = new vscode.CompletionItem('StopWandering', vscode.CompletionItemKind.Method);
				
				npcStopWandering.detail = "npc.StopWandering()";
				npcStopWandering.insertText = new vscode.SnippetString('StopWandering()');
				npcStopWandering.documentation = new vscode.MarkdownString("");
				results.push(npcStopWandering);				
				
				const npcUpdateWaypoint = new vscode.CompletionItem('UpdateWaypoint', vscode.CompletionItemKind.Method);
				
				npcUpdateWaypoint.detail = "npc.UpdateWaypoint()";
				npcUpdateWaypoint.insertText = new vscode.SnippetString('UpdateWaypoint()');
				npcUpdateWaypoint.documentation = new vscode.MarkdownString("");
				results.push(npcUpdateWaypoint);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('npc_list.')) {
					return undefined;
				}
				
				
				const npclistEntries = new vscode.CompletionItem('Entries', vscode.CompletionItemKind.Method);
				
				npclistEntries.detail = "npc_list.Entries()";
				npclistEntries.insertText = new vscode.SnippetString('Entries()');
				npclistEntries.documentation = new vscode.MarkdownString("");
				results.push(npclistEntries);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('object.')) {
					return undefined;
				}
				
				
				const objectClearUser = new vscode.CompletionItem('ClearUser', vscode.CompletionItemKind.Method);
				
				objectClearUser.detail = "object.ClearUser()";
				objectClearUser.insertText = new vscode.SnippetString('ClearUser()');
				objectClearUser.documentation = new vscode.MarkdownString("");
				results.push(objectClearUser);				
				
				const objectClose = new vscode.CompletionItem('Close', vscode.CompletionItemKind.Method);
				
				objectClose.detail = "object.Close()";
				objectClose.insertText = new vscode.SnippetString('Close()');
				objectClose.documentation = new vscode.MarkdownString("");
				results.push(objectClose);				
				
				const objectDelete = new vscode.CompletionItem('Delete', vscode.CompletionItemKind.Method);
				
				objectDelete.detail = "object.Delete()";
				objectDelete.insertText = new vscode.SnippetString('Delete()');
				objectDelete.documentation = new vscode.MarkdownString("");
				results.push(objectDelete);				
				
				const objectDeleteItem = new vscode.CompletionItem('DeleteItem', vscode.CompletionItemKind.Method);
				
				objectDeleteItem.detail = "object.DeleteItem()";
				objectDeleteItem.insertText = new vscode.SnippetString('DeleteItem()');
				objectDeleteItem.documentation = new vscode.MarkdownString("");
				results.push(objectDeleteItem);				
				
				const objectDepop = new vscode.CompletionItem('Depop', vscode.CompletionItemKind.Method);
				
				objectDepop.detail = "object.Depop()";
				objectDepop.insertText = new vscode.SnippetString('Depop()');
				objectDepop.documentation = new vscode.MarkdownString("");
				results.push(objectDepop);				
				
				const objectEntityVariableExists = new vscode.CompletionItem('EntityVariableExists', vscode.CompletionItemKind.Method);
				
				objectEntityVariableExists.detail = "object.EntityVariableExists()";
				objectEntityVariableExists.insertText = new vscode.SnippetString('EntityVariableExists()');
				objectEntityVariableExists.documentation = new vscode.MarkdownString("");
				results.push(objectEntityVariableExists);				
				
				const objectGetDBID = new vscode.CompletionItem('GetDBID', vscode.CompletionItemKind.Method);
				
				objectGetDBID.detail = "object.GetDBID()";
				objectGetDBID.insertText = new vscode.SnippetString('GetDBID()');
				objectGetDBID.documentation = new vscode.MarkdownString("");
				results.push(objectGetDBID);				
				
				const objectGetEntityVariable = new vscode.CompletionItem('GetEntityVariable', vscode.CompletionItemKind.Method);
				
				objectGetEntityVariable.detail = "object.GetEntityVariable()";
				objectGetEntityVariable.insertText = new vscode.SnippetString('GetEntityVariable()');
				objectGetEntityVariable.documentation = new vscode.MarkdownString("");
				results.push(objectGetEntityVariable);				
				
				const objectGetHeading = new vscode.CompletionItem('GetHeading', vscode.CompletionItemKind.Method);
				
				objectGetHeading.detail = "object.GetHeading()";
				objectGetHeading.insertText = new vscode.SnippetString('GetHeading()');
				objectGetHeading.documentation = new vscode.MarkdownString("");
				results.push(objectGetHeading);				
				
				const objectGetIcon = new vscode.CompletionItem('GetIcon', vscode.CompletionItemKind.Method);
				
				objectGetIcon.detail = "object.GetIcon()";
				objectGetIcon.insertText = new vscode.SnippetString('GetIcon()');
				objectGetIcon.documentation = new vscode.MarkdownString("");
				results.push(objectGetIcon);				
				
				const objectGetID = new vscode.CompletionItem('GetID', vscode.CompletionItemKind.Method);
				
				objectGetID.detail = "object.GetID()";
				objectGetID.insertText = new vscode.SnippetString('GetID()');
				objectGetID.documentation = new vscode.MarkdownString("");
				results.push(objectGetID);				
				
				const objectGetItemID = new vscode.CompletionItem('GetItemID', vscode.CompletionItemKind.Method);
				
				objectGetItemID.detail = "object.GetItemID()";
				objectGetItemID.insertText = new vscode.SnippetString('GetItemID()');
				objectGetItemID.documentation = new vscode.MarkdownString("");
				results.push(objectGetItemID);				
				
				const objectGetModelName = new vscode.CompletionItem('GetModelName', vscode.CompletionItemKind.Method);
				
				objectGetModelName.detail = "object.GetModelName()";
				objectGetModelName.insertText = new vscode.SnippetString('GetModelName()');
				objectGetModelName.documentation = new vscode.MarkdownString("");
				results.push(objectGetModelName);				
				
				const objectGetType = new vscode.CompletionItem('GetType', vscode.CompletionItemKind.Method);
				
				objectGetType.detail = "object.GetType()";
				objectGetType.insertText = new vscode.SnippetString('GetType()');
				objectGetType.documentation = new vscode.MarkdownString("");
				results.push(objectGetType);				
				
				const objectGetX = new vscode.CompletionItem('GetX', vscode.CompletionItemKind.Method);
				
				objectGetX.detail = "object.GetX()";
				objectGetX.insertText = new vscode.SnippetString('GetX()');
				objectGetX.documentation = new vscode.MarkdownString("");
				results.push(objectGetX);				
				
				const objectGetY = new vscode.CompletionItem('GetY', vscode.CompletionItemKind.Method);
				
				objectGetY.detail = "object.GetY()";
				objectGetY.insertText = new vscode.SnippetString('GetY()');
				objectGetY.documentation = new vscode.MarkdownString("");
				results.push(objectGetY);				
				
				const objectGetZ = new vscode.CompletionItem('GetZ', vscode.CompletionItemKind.Method);
				
				objectGetZ.detail = "object.GetZ()";
				objectGetZ.insertText = new vscode.SnippetString('GetZ()');
				objectGetZ.documentation = new vscode.MarkdownString("");
				results.push(objectGetZ);				
				
				const objectIsGroundSpawn = new vscode.CompletionItem('IsGroundSpawn', vscode.CompletionItemKind.Method);
				
				objectIsGroundSpawn.detail = "object.IsGroundSpawn()";
				objectIsGroundSpawn.insertText = new vscode.SnippetString('IsGroundSpawn()');
				objectIsGroundSpawn.documentation = new vscode.MarkdownString("");
				results.push(objectIsGroundSpawn);				
				
				const objectRepop = new vscode.CompletionItem('Repop', vscode.CompletionItemKind.Method);
				
				objectRepop.detail = "object.Repop()";
				objectRepop.insertText = new vscode.SnippetString('Repop()');
				objectRepop.documentation = new vscode.MarkdownString("");
				results.push(objectRepop);				
				
				const objectSave = new vscode.CompletionItem('Save', vscode.CompletionItemKind.Method);
				
				objectSave.detail = "object.Save()";
				objectSave.insertText = new vscode.SnippetString('Save()');
				objectSave.documentation = new vscode.MarkdownString("");
				results.push(objectSave);				
				
				const objectSetEntityVariable = new vscode.CompletionItem('SetEntityVariable', vscode.CompletionItemKind.Method);
				
				objectSetEntityVariable.detail = "object.SetEntityVariable()";
				objectSetEntityVariable.insertText = new vscode.SnippetString('SetEntityVariable()');
				objectSetEntityVariable.documentation = new vscode.MarkdownString("");
				results.push(objectSetEntityVariable);				
				
				const objectSetHeading = new vscode.CompletionItem('SetHeading', vscode.CompletionItemKind.Method);
				
				objectSetHeading.detail = "object.SetHeading()";
				objectSetHeading.insertText = new vscode.SnippetString('SetHeading()');
				objectSetHeading.documentation = new vscode.MarkdownString("");
				results.push(objectSetHeading);				
				
				const objectSetIcon = new vscode.CompletionItem('SetIcon', vscode.CompletionItemKind.Method);
				
				objectSetIcon.detail = "object.SetIcon()";
				objectSetIcon.insertText = new vscode.SnippetString('SetIcon()');
				objectSetIcon.documentation = new vscode.MarkdownString("");
				results.push(objectSetIcon);				
				
				const objectSetID = new vscode.CompletionItem('SetID', vscode.CompletionItemKind.Method);
				
				objectSetID.detail = "object.SetID()";
				objectSetID.insertText = new vscode.SnippetString('SetID()');
				objectSetID.documentation = new vscode.MarkdownString("");
				results.push(objectSetID);				
				
				const objectSetItemID = new vscode.CompletionItem('SetItemID', vscode.CompletionItemKind.Method);
				
				objectSetItemID.detail = "object.SetItemID()";
				objectSetItemID.insertText = new vscode.SnippetString('SetItemID()');
				objectSetItemID.documentation = new vscode.MarkdownString("");
				results.push(objectSetItemID);				
				
				const objectSetLocation = new vscode.CompletionItem('SetLocation', vscode.CompletionItemKind.Method);
				
				objectSetLocation.detail = "object.SetLocation()";
				objectSetLocation.insertText = new vscode.SnippetString('SetLocation()');
				objectSetLocation.documentation = new vscode.MarkdownString("");
				results.push(objectSetLocation);				
				
				const objectSetModelName = new vscode.CompletionItem('SetModelName', vscode.CompletionItemKind.Method);
				
				objectSetModelName.detail = "object.SetModelName()";
				objectSetModelName.insertText = new vscode.SnippetString('SetModelName()');
				objectSetModelName.documentation = new vscode.MarkdownString("");
				results.push(objectSetModelName);				
				
				const objectSetType = new vscode.CompletionItem('SetType', vscode.CompletionItemKind.Method);
				
				objectSetType.detail = "object.SetType()";
				objectSetType.insertText = new vscode.SnippetString('SetType()');
				objectSetType.documentation = new vscode.MarkdownString("");
				results.push(objectSetType);				
				
				const objectSetX = new vscode.CompletionItem('SetX', vscode.CompletionItemKind.Method);
				
				objectSetX.detail = "object.SetX()";
				objectSetX.insertText = new vscode.SnippetString('SetX()');
				objectSetX.documentation = new vscode.MarkdownString("");
				results.push(objectSetX);				
				
				const objectSetY = new vscode.CompletionItem('SetY', vscode.CompletionItemKind.Method);
				
				objectSetY.detail = "object.SetY()";
				objectSetY.insertText = new vscode.SnippetString('SetY()');
				objectSetY.documentation = new vscode.MarkdownString("");
				results.push(objectSetY);				
				
				const objectSetZ = new vscode.CompletionItem('SetZ', vscode.CompletionItemKind.Method);
				
				objectSetZ.detail = "object.SetZ()";
				objectSetZ.insertText = new vscode.SnippetString('SetZ()');
				objectSetZ.documentation = new vscode.MarkdownString("");
				results.push(objectSetZ);				
				
				const objectStartDecay = new vscode.CompletionItem('StartDecay', vscode.CompletionItemKind.Method);
				
				objectStartDecay.detail = "object.StartDecay()";
				objectStartDecay.insertText = new vscode.SnippetString('StartDecay()');
				objectStartDecay.documentation = new vscode.MarkdownString("");
				results.push(objectStartDecay);				
				
				const objectVarSave = new vscode.CompletionItem('VarSave', vscode.CompletionItemKind.Method);
				
				objectVarSave.detail = "object.VarSave()";
				objectVarSave.insertText = new vscode.SnippetString('VarSave()');
				objectVarSave.documentation = new vscode.MarkdownString("");
				results.push(objectVarSave);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('object_list.')) {
					return undefined;
				}
				
				
				const objectlistEntries = new vscode.CompletionItem('Entries', vscode.CompletionItemKind.Method);
				
				objectlistEntries.detail = "object_list.Entries()";
				objectlistEntries.insertText = new vscode.SnippetString('Entries()');
				objectlistEntries.documentation = new vscode.MarkdownString("");
				results.push(objectlistEntries);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('opcode.')) {
					return undefined;
				}
				
				
				const opcode0x0193 = new vscode.CompletionItem('0x0193', vscode.CompletionItemKind.Method);
				
				opcode0x0193.detail = "opcode.0x0193()";
				opcode0x0193.insertText = new vscode.SnippetString('0x0193()');
				opcode0x0193.documentation = new vscode.MarkdownString("");
				results.push(opcode0x0193);				
				
				const opcode0x0347 = new vscode.CompletionItem('0x0347', vscode.CompletionItemKind.Method);
				
				opcode0x0347.detail = "opcode.0x0347()";
				opcode0x0347.insertText = new vscode.SnippetString('0x0347()');
				opcode0x0347.documentation = new vscode.MarkdownString("");
				results.push(opcode0x0347);				
				
				const opcodeAAAction = new vscode.CompletionItem('AAAction', vscode.CompletionItemKind.Property);
				
				opcodeAAAction.detail = "opcode.AAAction";
				opcodeAAAction.insertText = new vscode.SnippetString('AAAction');
				opcodeAAAction.documentation = new vscode.MarkdownString("");
				results.push(opcodeAAAction);				
				
				const opcodeAAExpUpdate = new vscode.CompletionItem('AAExpUpdate', vscode.CompletionItemKind.Property);
				
				opcodeAAExpUpdate.detail = "opcode.AAExpUpdate";
				opcodeAAExpUpdate.insertText = new vscode.SnippetString('AAExpUpdate');
				opcodeAAExpUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeAAExpUpdate);				
				
				const opcodeAcceptNewTask = new vscode.CompletionItem('AcceptNewTask', vscode.CompletionItemKind.Property);
				
				opcodeAcceptNewTask.detail = "opcode.AcceptNewTask";
				opcodeAcceptNewTask.insertText = new vscode.SnippetString('AcceptNewTask');
				opcodeAcceptNewTask.documentation = new vscode.MarkdownString("");
				results.push(opcodeAcceptNewTask);				
				
				const opcodeAckPacket = new vscode.CompletionItem('AckPacket', vscode.CompletionItemKind.Property);
				
				opcodeAckPacket.detail = "opcode.AckPacket";
				opcodeAckPacket.insertText = new vscode.SnippetString('AckPacket');
				opcodeAckPacket.documentation = new vscode.MarkdownString("");
				results.push(opcodeAckPacket);				
				
				const opcodeAction = new vscode.CompletionItem('Action', vscode.CompletionItemKind.Property);
				
				opcodeAction.detail = "opcode.Action";
				opcodeAction.insertText = new vscode.SnippetString('Action');
				opcodeAction.documentation = new vscode.MarkdownString("");
				results.push(opcodeAction);				
				
				const opcodeAction2 = new vscode.CompletionItem('Action2', vscode.CompletionItemKind.Property);
				
				opcodeAction2.detail = "opcode.Action2";
				opcodeAction2.insertText = new vscode.SnippetString('Action2');
				opcodeAction2.documentation = new vscode.MarkdownString("");
				results.push(opcodeAction2);				
				
				const opcodeAdventureData = new vscode.CompletionItem('AdventureData', vscode.CompletionItemKind.Property);
				
				opcodeAdventureData.detail = "opcode.AdventureData";
				opcodeAdventureData.insertText = new vscode.SnippetString('AdventureData');
				opcodeAdventureData.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureData);				
				
				const opcodeAdventureDetails = new vscode.CompletionItem('AdventureDetails', vscode.CompletionItemKind.Property);
				
				opcodeAdventureDetails.detail = "opcode.AdventureDetails";
				opcodeAdventureDetails.insertText = new vscode.SnippetString('AdventureDetails');
				opcodeAdventureDetails.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureDetails);				
				
				const opcodeAdventureFinish = new vscode.CompletionItem('AdventureFinish', vscode.CompletionItemKind.Property);
				
				opcodeAdventureFinish.detail = "opcode.AdventureFinish";
				opcodeAdventureFinish.insertText = new vscode.SnippetString('AdventureFinish');
				opcodeAdventureFinish.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureFinish);				
				
				const opcodeAdventureInfo = new vscode.CompletionItem('AdventureInfo', vscode.CompletionItemKind.Property);
				
				opcodeAdventureInfo.detail = "opcode.AdventureInfo";
				opcodeAdventureInfo.insertText = new vscode.SnippetString('AdventureInfo');
				opcodeAdventureInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureInfo);				
				
				const opcodeAdventureInfoRequest = new vscode.CompletionItem('AdventureInfoRequest', vscode.CompletionItemKind.Property);
				
				opcodeAdventureInfoRequest.detail = "opcode.AdventureInfoRequest";
				opcodeAdventureInfoRequest.insertText = new vscode.SnippetString('AdventureInfoRequest');
				opcodeAdventureInfoRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureInfoRequest);				
				
				const opcodeAdventureLeaderboardReply = new vscode.CompletionItem('AdventureLeaderboardReply', vscode.CompletionItemKind.Property);
				
				opcodeAdventureLeaderboardReply.detail = "opcode.AdventureLeaderboardReply";
				opcodeAdventureLeaderboardReply.insertText = new vscode.SnippetString('AdventureLeaderboardReply');
				opcodeAdventureLeaderboardReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureLeaderboardReply);				
				
				const opcodeAdventureLeaderboardRequest = new vscode.CompletionItem('AdventureLeaderboardRequest', vscode.CompletionItemKind.Property);
				
				opcodeAdventureLeaderboardRequest.detail = "opcode.AdventureLeaderboardRequest";
				opcodeAdventureLeaderboardRequest.insertText = new vscode.SnippetString('AdventureLeaderboardRequest');
				opcodeAdventureLeaderboardRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureLeaderboardRequest);				
				
				const opcodeAdventureMerchantPurchase = new vscode.CompletionItem('AdventureMerchantPurchase', vscode.CompletionItemKind.Property);
				
				opcodeAdventureMerchantPurchase.detail = "opcode.AdventureMerchantPurchase";
				opcodeAdventureMerchantPurchase.insertText = new vscode.SnippetString('AdventureMerchantPurchase');
				opcodeAdventureMerchantPurchase.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureMerchantPurchase);				
				
				const opcodeAdventureMerchantRequest = new vscode.CompletionItem('AdventureMerchantRequest', vscode.CompletionItemKind.Property);
				
				opcodeAdventureMerchantRequest.detail = "opcode.AdventureMerchantRequest";
				opcodeAdventureMerchantRequest.insertText = new vscode.SnippetString('AdventureMerchantRequest');
				opcodeAdventureMerchantRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureMerchantRequest);				
				
				const opcodeAdventureMerchantResponse = new vscode.CompletionItem('AdventureMerchantResponse', vscode.CompletionItemKind.Property);
				
				opcodeAdventureMerchantResponse.detail = "opcode.AdventureMerchantResponse";
				opcodeAdventureMerchantResponse.insertText = new vscode.SnippetString('AdventureMerchantResponse');
				opcodeAdventureMerchantResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureMerchantResponse);				
				
				const opcodeAdventureMerchantSell = new vscode.CompletionItem('AdventureMerchantSell', vscode.CompletionItemKind.Property);
				
				opcodeAdventureMerchantSell.detail = "opcode.AdventureMerchantSell";
				opcodeAdventureMerchantSell.insertText = new vscode.SnippetString('AdventureMerchantSell');
				opcodeAdventureMerchantSell.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureMerchantSell);				
				
				const opcodeAdventurePointsUpdate = new vscode.CompletionItem('AdventurePointsUpdate', vscode.CompletionItemKind.Property);
				
				opcodeAdventurePointsUpdate.detail = "opcode.AdventurePointsUpdate";
				opcodeAdventurePointsUpdate.insertText = new vscode.SnippetString('AdventurePointsUpdate');
				opcodeAdventurePointsUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventurePointsUpdate);				
				
				const opcodeAdventureRequest = new vscode.CompletionItem('AdventureRequest', vscode.CompletionItemKind.Property);
				
				opcodeAdventureRequest.detail = "opcode.AdventureRequest";
				opcodeAdventureRequest.insertText = new vscode.SnippetString('AdventureRequest');
				opcodeAdventureRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureRequest);				
				
				const opcodeAdventureStatsReply = new vscode.CompletionItem('AdventureStatsReply', vscode.CompletionItemKind.Property);
				
				opcodeAdventureStatsReply.detail = "opcode.AdventureStatsReply";
				opcodeAdventureStatsReply.insertText = new vscode.SnippetString('AdventureStatsReply');
				opcodeAdventureStatsReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureStatsReply);				
				
				const opcodeAdventureStatsRequest = new vscode.CompletionItem('AdventureStatsRequest', vscode.CompletionItemKind.Property);
				
				opcodeAdventureStatsRequest.detail = "opcode.AdventureStatsRequest";
				opcodeAdventureStatsRequest.insertText = new vscode.SnippetString('AdventureStatsRequest');
				opcodeAdventureStatsRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureStatsRequest);				
				
				const opcodeAdventureUpdate = new vscode.CompletionItem('AdventureUpdate', vscode.CompletionItemKind.Property);
				
				opcodeAdventureUpdate.detail = "opcode.AdventureUpdate";
				opcodeAdventureUpdate.insertText = new vscode.SnippetString('AdventureUpdate');
				opcodeAdventureUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeAdventureUpdate);				
				
				const opcodeAltCurrency = new vscode.CompletionItem('AltCurrency', vscode.CompletionItemKind.Property);
				
				opcodeAltCurrency.detail = "opcode.AltCurrency";
				opcodeAltCurrency.insertText = new vscode.SnippetString('AltCurrency');
				opcodeAltCurrency.documentation = new vscode.MarkdownString("");
				results.push(opcodeAltCurrency);				
				
				const opcodeAltCurrencyMerchantReply = new vscode.CompletionItem('AltCurrencyMerchantReply', vscode.CompletionItemKind.Property);
				
				opcodeAltCurrencyMerchantReply.detail = "opcode.AltCurrencyMerchantReply";
				opcodeAltCurrencyMerchantReply.insertText = new vscode.SnippetString('AltCurrencyMerchantReply');
				opcodeAltCurrencyMerchantReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeAltCurrencyMerchantReply);				
				
				const opcodeAltCurrencyMerchantRequest = new vscode.CompletionItem('AltCurrencyMerchantRequest', vscode.CompletionItemKind.Property);
				
				opcodeAltCurrencyMerchantRequest.detail = "opcode.AltCurrencyMerchantRequest";
				opcodeAltCurrencyMerchantRequest.insertText = new vscode.SnippetString('AltCurrencyMerchantRequest');
				opcodeAltCurrencyMerchantRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeAltCurrencyMerchantRequest);				
				
				const opcodeAltCurrencyPurchase = new vscode.CompletionItem('AltCurrencyPurchase', vscode.CompletionItemKind.Property);
				
				opcodeAltCurrencyPurchase.detail = "opcode.AltCurrencyPurchase";
				opcodeAltCurrencyPurchase.insertText = new vscode.SnippetString('AltCurrencyPurchase');
				opcodeAltCurrencyPurchase.documentation = new vscode.MarkdownString("");
				results.push(opcodeAltCurrencyPurchase);				
				
				const opcodeAltCurrencyReclaim = new vscode.CompletionItem('AltCurrencyReclaim', vscode.CompletionItemKind.Property);
				
				opcodeAltCurrencyReclaim.detail = "opcode.AltCurrencyReclaim";
				opcodeAltCurrencyReclaim.insertText = new vscode.SnippetString('AltCurrencyReclaim');
				opcodeAltCurrencyReclaim.documentation = new vscode.MarkdownString("");
				results.push(opcodeAltCurrencyReclaim);				
				
				const opcodeAltCurrencySell = new vscode.CompletionItem('AltCurrencySell', vscode.CompletionItemKind.Property);
				
				opcodeAltCurrencySell.detail = "opcode.AltCurrencySell";
				opcodeAltCurrencySell.insertText = new vscode.SnippetString('AltCurrencySell');
				opcodeAltCurrencySell.documentation = new vscode.MarkdownString("");
				results.push(opcodeAltCurrencySell);				
				
				const opcodeAltCurrencySellSelection = new vscode.CompletionItem('AltCurrencySellSelection', vscode.CompletionItemKind.Property);
				
				opcodeAltCurrencySellSelection.detail = "opcode.AltCurrencySellSelection";
				opcodeAltCurrencySellSelection.insertText = new vscode.SnippetString('AltCurrencySellSelection');
				opcodeAltCurrencySellSelection.documentation = new vscode.MarkdownString("");
				results.push(opcodeAltCurrencySellSelection);				
				
				const opcodeAnimation = new vscode.CompletionItem('Animation', vscode.CompletionItemKind.Property);
				
				opcodeAnimation.detail = "opcode.Animation";
				opcodeAnimation.insertText = new vscode.SnippetString('Animation');
				opcodeAnimation.documentation = new vscode.MarkdownString("");
				results.push(opcodeAnimation);				
				
				const opcodeAnnoyingZoneUnknown = new vscode.CompletionItem('AnnoyingZoneUnknown', vscode.CompletionItemKind.Property);
				
				opcodeAnnoyingZoneUnknown.detail = "opcode.AnnoyingZoneUnknown";
				opcodeAnnoyingZoneUnknown.insertText = new vscode.SnippetString('AnnoyingZoneUnknown');
				opcodeAnnoyingZoneUnknown.documentation = new vscode.MarkdownString("");
				results.push(opcodeAnnoyingZoneUnknown);				
				
				const opcodeApplyPoison = new vscode.CompletionItem('ApplyPoison', vscode.CompletionItemKind.Property);
				
				opcodeApplyPoison.detail = "opcode.ApplyPoison";
				opcodeApplyPoison.insertText = new vscode.SnippetString('ApplyPoison');
				opcodeApplyPoison.documentation = new vscode.MarkdownString("");
				results.push(opcodeApplyPoison);				
				
				const opcodeApproveName = new vscode.CompletionItem('ApproveName', vscode.CompletionItemKind.Property);
				
				opcodeApproveName.detail = "opcode.ApproveName";
				opcodeApproveName.insertText = new vscode.SnippetString('ApproveName');
				opcodeApproveName.documentation = new vscode.MarkdownString("");
				results.push(opcodeApproveName);				
				
				const opcodeApproveWorld = new vscode.CompletionItem('ApproveWorld', vscode.CompletionItemKind.Property);
				
				opcodeApproveWorld.detail = "opcode.ApproveWorld";
				opcodeApproveWorld.insertText = new vscode.SnippetString('ApproveWorld');
				opcodeApproveWorld.documentation = new vscode.MarkdownString("");
				results.push(opcodeApproveWorld);				
				
				const opcodeApproveZone = new vscode.CompletionItem('ApproveZone', vscode.CompletionItemKind.Property);
				
				opcodeApproveZone.detail = "opcode.ApproveZone";
				opcodeApproveZone.insertText = new vscode.SnippetString('ApproveZone');
				opcodeApproveZone.documentation = new vscode.MarkdownString("");
				results.push(opcodeApproveZone);				
				
				const opcodeAssist = new vscode.CompletionItem('Assist', vscode.CompletionItemKind.Property);
				
				opcodeAssist.detail = "opcode.Assist";
				opcodeAssist.insertText = new vscode.SnippetString('Assist');
				opcodeAssist.documentation = new vscode.MarkdownString("");
				results.push(opcodeAssist);				
				
				const opcodeAssistGroup = new vscode.CompletionItem('AssistGroup', vscode.CompletionItemKind.Property);
				
				opcodeAssistGroup.detail = "opcode.AssistGroup";
				opcodeAssistGroup.insertText = new vscode.SnippetString('AssistGroup');
				opcodeAssistGroup.documentation = new vscode.MarkdownString("");
				results.push(opcodeAssistGroup);				
				
				const opcodeAugmentInfo = new vscode.CompletionItem('AugmentInfo', vscode.CompletionItemKind.Property);
				
				opcodeAugmentInfo.detail = "opcode.AugmentInfo";
				opcodeAugmentInfo.insertText = new vscode.SnippetString('AugmentInfo');
				opcodeAugmentInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeAugmentInfo);				
				
				const opcodeAugmentItem = new vscode.CompletionItem('AugmentItem', vscode.CompletionItemKind.Property);
				
				opcodeAugmentItem.detail = "opcode.AugmentItem";
				opcodeAugmentItem.insertText = new vscode.SnippetString('AugmentItem');
				opcodeAugmentItem.documentation = new vscode.MarkdownString("");
				results.push(opcodeAugmentItem);				
				
				const opcodeAutoAttack = new vscode.CompletionItem('AutoAttack', vscode.CompletionItemKind.Property);
				
				opcodeAutoAttack.detail = "opcode.AutoAttack";
				opcodeAutoAttack.insertText = new vscode.SnippetString('AutoAttack');
				opcodeAutoAttack.documentation = new vscode.MarkdownString("");
				results.push(opcodeAutoAttack);				
				
				const opcodeAutoAttack2 = new vscode.CompletionItem('AutoAttack2', vscode.CompletionItemKind.Property);
				
				opcodeAutoAttack2.detail = "opcode.AutoAttack2";
				opcodeAutoAttack2.insertText = new vscode.SnippetString('AutoAttack2');
				opcodeAutoAttack2.documentation = new vscode.MarkdownString("");
				results.push(opcodeAutoAttack2);				
				
				const opcodeAutoFire = new vscode.CompletionItem('AutoFire', vscode.CompletionItemKind.Property);
				
				opcodeAutoFire.detail = "opcode.AutoFire";
				opcodeAutoFire.insertText = new vscode.SnippetString('AutoFire');
				opcodeAutoFire.documentation = new vscode.MarkdownString("");
				results.push(opcodeAutoFire);				
				
				const opcodeBandolier = new vscode.CompletionItem('Bandolier', vscode.CompletionItemKind.Property);
				
				opcodeBandolier.detail = "opcode.Bandolier";
				opcodeBandolier.insertText = new vscode.SnippetString('Bandolier');
				opcodeBandolier.documentation = new vscode.MarkdownString("");
				results.push(opcodeBandolier);				
				
				const opcodeBankerChange = new vscode.CompletionItem('BankerChange', vscode.CompletionItemKind.Property);
				
				opcodeBankerChange.detail = "opcode.BankerChange";
				opcodeBankerChange.insertText = new vscode.SnippetString('BankerChange');
				opcodeBankerChange.documentation = new vscode.MarkdownString("");
				results.push(opcodeBankerChange);				
				
				const opcodeBarter = new vscode.CompletionItem('Barter', vscode.CompletionItemKind.Property);
				
				opcodeBarter.detail = "opcode.Barter";
				opcodeBarter.insertText = new vscode.SnippetString('Barter');
				opcodeBarter.documentation = new vscode.MarkdownString("");
				results.push(opcodeBarter);				
				
				const opcodeBazaar = new vscode.CompletionItem('Bazaar', vscode.CompletionItemKind.Property);
				
				opcodeBazaar.detail = "opcode.Bazaar";
				opcodeBazaar.insertText = new vscode.SnippetString('Bazaar');
				opcodeBazaar.documentation = new vscode.MarkdownString("");
				results.push(opcodeBazaar);				
				
				const opcodeBazaarInspect = new vscode.CompletionItem('BazaarInspect', vscode.CompletionItemKind.Property);
				
				opcodeBazaarInspect.detail = "opcode.BazaarInspect";
				opcodeBazaarInspect.insertText = new vscode.SnippetString('BazaarInspect');
				opcodeBazaarInspect.documentation = new vscode.MarkdownString("");
				results.push(opcodeBazaarInspect);				
				
				const opcodeBazaarSearch = new vscode.CompletionItem('BazaarSearch', vscode.CompletionItemKind.Property);
				
				opcodeBazaarSearch.detail = "opcode.BazaarSearch";
				opcodeBazaarSearch.insertText = new vscode.SnippetString('BazaarSearch');
				opcodeBazaarSearch.documentation = new vscode.MarkdownString("");
				results.push(opcodeBazaarSearch);				
				
				const opcodeBecomeCorpse = new vscode.CompletionItem('BecomeCorpse', vscode.CompletionItemKind.Property);
				
				opcodeBecomeCorpse.detail = "opcode.BecomeCorpse";
				opcodeBecomeCorpse.insertText = new vscode.SnippetString('BecomeCorpse');
				opcodeBecomeCorpse.documentation = new vscode.MarkdownString("");
				results.push(opcodeBecomeCorpse);				
				
				const opcodeBecomeTrader = new vscode.CompletionItem('BecomeTrader', vscode.CompletionItemKind.Property);
				
				opcodeBecomeTrader.detail = "opcode.BecomeTrader";
				opcodeBecomeTrader.insertText = new vscode.SnippetString('BecomeTrader');
				opcodeBecomeTrader.documentation = new vscode.MarkdownString("");
				results.push(opcodeBecomeTrader);				
				
				const opcodeBegging = new vscode.CompletionItem('Begging', vscode.CompletionItemKind.Property);
				
				opcodeBegging.detail = "opcode.Begging";
				opcodeBegging.insertText = new vscode.SnippetString('Begging');
				opcodeBegging.documentation = new vscode.MarkdownString("");
				results.push(opcodeBegging);				
				
				const opcodeBeginCast = new vscode.CompletionItem('BeginCast', vscode.CompletionItemKind.Property);
				
				opcodeBeginCast.detail = "opcode.BeginCast";
				opcodeBeginCast.insertText = new vscode.SnippetString('BeginCast');
				opcodeBeginCast.documentation = new vscode.MarkdownString("");
				results.push(opcodeBeginCast);				
				
				const opcodeBindWound = new vscode.CompletionItem('Bind_Wound', vscode.CompletionItemKind.Property);
				
				opcodeBindWound.detail = "opcode.Bind_Wound";
				opcodeBindWound.insertText = new vscode.SnippetString('Bind_Wound');
				opcodeBindWound.documentation = new vscode.MarkdownString("");
				results.push(opcodeBindWound);				
				
				const opcodeBlockedBuffs = new vscode.CompletionItem('BlockedBuffs', vscode.CompletionItemKind.Property);
				
				opcodeBlockedBuffs.detail = "opcode.BlockedBuffs";
				opcodeBlockedBuffs.insertText = new vscode.SnippetString('BlockedBuffs');
				opcodeBlockedBuffs.documentation = new vscode.MarkdownString("");
				results.push(opcodeBlockedBuffs);				
				
				const opcodeBoardBoat = new vscode.CompletionItem('BoardBoat', vscode.CompletionItemKind.Property);
				
				opcodeBoardBoat.detail = "opcode.BoardBoat";
				opcodeBoardBoat.insertText = new vscode.SnippetString('BoardBoat');
				opcodeBoardBoat.documentation = new vscode.MarkdownString("");
				results.push(opcodeBoardBoat);				
				
				const opcodeBuff = new vscode.CompletionItem('Buff', vscode.CompletionItemKind.Property);
				
				opcodeBuff.detail = "opcode.Buff";
				opcodeBuff.insertText = new vscode.SnippetString('Buff');
				opcodeBuff.documentation = new vscode.MarkdownString("");
				results.push(opcodeBuff);				
				
				const opcodeBuffCreate = new vscode.CompletionItem('BuffCreate', vscode.CompletionItemKind.Property);
				
				opcodeBuffCreate.detail = "opcode.BuffCreate";
				opcodeBuffCreate.insertText = new vscode.SnippetString('BuffCreate');
				opcodeBuffCreate.documentation = new vscode.MarkdownString("");
				results.push(opcodeBuffCreate);				
				
				const opcodeBuffRemoveRequest = new vscode.CompletionItem('BuffRemoveRequest', vscode.CompletionItemKind.Property);
				
				opcodeBuffRemoveRequest.detail = "opcode.BuffRemoveRequest";
				opcodeBuffRemoveRequest.insertText = new vscode.SnippetString('BuffRemoveRequest');
				opcodeBuffRemoveRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeBuffRemoveRequest);				
				
				const opcodeBug = new vscode.CompletionItem('Bug', vscode.CompletionItemKind.Property);
				
				opcodeBug.detail = "opcode.Bug";
				opcodeBug.insertText = new vscode.SnippetString('Bug');
				opcodeBug.documentation = new vscode.MarkdownString("");
				results.push(opcodeBug);				
				
				const opcodeCameraEffect = new vscode.CompletionItem('CameraEffect', vscode.CompletionItemKind.Property);
				
				opcodeCameraEffect.detail = "opcode.CameraEffect";
				opcodeCameraEffect.insertText = new vscode.SnippetString('CameraEffect');
				opcodeCameraEffect.documentation = new vscode.MarkdownString("");
				results.push(opcodeCameraEffect);				
				
				const opcodeCamp = new vscode.CompletionItem('Camp', vscode.CompletionItemKind.Property);
				
				opcodeCamp.detail = "opcode.Camp";
				opcodeCamp.insertText = new vscode.SnippetString('Camp');
				opcodeCamp.documentation = new vscode.MarkdownString("");
				results.push(opcodeCamp);				
				
				const opcodeCancelTask = new vscode.CompletionItem('CancelTask', vscode.CompletionItemKind.Property);
				
				opcodeCancelTask.detail = "opcode.CancelTask";
				opcodeCancelTask.insertText = new vscode.SnippetString('CancelTask');
				opcodeCancelTask.documentation = new vscode.MarkdownString("");
				results.push(opcodeCancelTask);				
				
				const opcodeCancelTrade = new vscode.CompletionItem('CancelTrade', vscode.CompletionItemKind.Property);
				
				opcodeCancelTrade.detail = "opcode.CancelTrade";
				opcodeCancelTrade.insertText = new vscode.SnippetString('CancelTrade');
				opcodeCancelTrade.documentation = new vscode.MarkdownString("");
				results.push(opcodeCancelTrade);				
				
				const opcodeCastSpell = new vscode.CompletionItem('CastSpell', vscode.CompletionItemKind.Property);
				
				opcodeCastSpell.detail = "opcode.CastSpell";
				opcodeCastSpell.insertText = new vscode.SnippetString('CastSpell');
				opcodeCastSpell.documentation = new vscode.MarkdownString("");
				results.push(opcodeCastSpell);				
				
				const opcodeChangeSize = new vscode.CompletionItem('ChangeSize', vscode.CompletionItemKind.Property);
				
				opcodeChangeSize.detail = "opcode.ChangeSize";
				opcodeChangeSize.insertText = new vscode.SnippetString('ChangeSize');
				opcodeChangeSize.documentation = new vscode.MarkdownString("");
				results.push(opcodeChangeSize);				
				
				const opcodeChannelMessage = new vscode.CompletionItem('ChannelMessage', vscode.CompletionItemKind.Property);
				
				opcodeChannelMessage.detail = "opcode.ChannelMessage";
				opcodeChannelMessage.insertText = new vscode.SnippetString('ChannelMessage');
				opcodeChannelMessage.documentation = new vscode.MarkdownString("");
				results.push(opcodeChannelMessage);				
				
				const opcodeCharacterCreate = new vscode.CompletionItem('CharacterCreate', vscode.CompletionItemKind.Property);
				
				opcodeCharacterCreate.detail = "opcode.CharacterCreate";
				opcodeCharacterCreate.insertText = new vscode.SnippetString('CharacterCreate');
				opcodeCharacterCreate.documentation = new vscode.MarkdownString("");
				results.push(opcodeCharacterCreate);				
				
				const opcodeCharacterCreateRequest = new vscode.CompletionItem('CharacterCreateRequest', vscode.CompletionItemKind.Property);
				
				opcodeCharacterCreateRequest.detail = "opcode.CharacterCreateRequest";
				opcodeCharacterCreateRequest.insertText = new vscode.SnippetString('CharacterCreateRequest');
				opcodeCharacterCreateRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeCharacterCreateRequest);				
				
				const opcodeCharInventory = new vscode.CompletionItem('CharInventory', vscode.CompletionItemKind.Property);
				
				opcodeCharInventory.detail = "opcode.CharInventory";
				opcodeCharInventory.insertText = new vscode.SnippetString('CharInventory');
				opcodeCharInventory.documentation = new vscode.MarkdownString("");
				results.push(opcodeCharInventory);				
				
				const opcodeCharm = new vscode.CompletionItem('Charm', vscode.CompletionItemKind.Property);
				
				opcodeCharm.detail = "opcode.Charm";
				opcodeCharm.insertText = new vscode.SnippetString('Charm');
				opcodeCharm.documentation = new vscode.MarkdownString("");
				results.push(opcodeCharm);				
				
				const opcodeChatMessage = new vscode.CompletionItem('ChatMessage', vscode.CompletionItemKind.Property);
				
				opcodeChatMessage.detail = "opcode.ChatMessage";
				opcodeChatMessage.insertText = new vscode.SnippetString('ChatMessage');
				opcodeChatMessage.documentation = new vscode.MarkdownString("");
				results.push(opcodeChatMessage);				
				
				const opcodeClearBlockedBuffs = new vscode.CompletionItem('ClearBlockedBuffs', vscode.CompletionItemKind.Property);
				
				opcodeClearBlockedBuffs.detail = "opcode.ClearBlockedBuffs";
				opcodeClearBlockedBuffs.insertText = new vscode.SnippetString('ClearBlockedBuffs');
				opcodeClearBlockedBuffs.documentation = new vscode.MarkdownString("");
				results.push(opcodeClearBlockedBuffs);				
				
				const opcodeClearNPCMarks = new vscode.CompletionItem('ClearNPCMarks', vscode.CompletionItemKind.Property);
				
				opcodeClearNPCMarks.detail = "opcode.ClearNPCMarks";
				opcodeClearNPCMarks.insertText = new vscode.SnippetString('ClearNPCMarks');
				opcodeClearNPCMarks.documentation = new vscode.MarkdownString("");
				results.push(opcodeClearNPCMarks);				
				
				const opcodeClearObject = new vscode.CompletionItem('ClearObject', vscode.CompletionItemKind.Property);
				
				opcodeClearObject.detail = "opcode.ClearObject";
				opcodeClearObject.insertText = new vscode.SnippetString('ClearObject');
				opcodeClearObject.documentation = new vscode.MarkdownString("");
				results.push(opcodeClearObject);				
				
				const opcodeClearSurname = new vscode.CompletionItem('ClearSurname', vscode.CompletionItemKind.Property);
				
				opcodeClearSurname.detail = "opcode.ClearSurname";
				opcodeClearSurname.insertText = new vscode.SnippetString('ClearSurname');
				opcodeClearSurname.documentation = new vscode.MarkdownString("");
				results.push(opcodeClearSurname);				
				
				const opcodeClickDoor = new vscode.CompletionItem('ClickDoor', vscode.CompletionItemKind.Property);
				
				opcodeClickDoor.detail = "opcode.ClickDoor";
				opcodeClickDoor.insertText = new vscode.SnippetString('ClickDoor');
				opcodeClickDoor.documentation = new vscode.MarkdownString("");
				results.push(opcodeClickDoor);				
				
				const opcodeClickObject = new vscode.CompletionItem('ClickObject', vscode.CompletionItemKind.Property);
				
				opcodeClickObject.detail = "opcode.ClickObject";
				opcodeClickObject.insertText = new vscode.SnippetString('ClickObject');
				opcodeClickObject.documentation = new vscode.MarkdownString("");
				results.push(opcodeClickObject);				
				
				const opcodeClickObjectAction = new vscode.CompletionItem('ClickObjectAction', vscode.CompletionItemKind.Property);
				
				opcodeClickObjectAction.detail = "opcode.ClickObjectAction";
				opcodeClickObjectAction.insertText = new vscode.SnippetString('ClickObjectAction');
				opcodeClickObjectAction.documentation = new vscode.MarkdownString("");
				results.push(opcodeClickObjectAction);				
				
				const opcodeClientError = new vscode.CompletionItem('ClientError', vscode.CompletionItemKind.Property);
				
				opcodeClientError.detail = "opcode.ClientError";
				opcodeClientError.insertText = new vscode.SnippetString('ClientError');
				opcodeClientError.documentation = new vscode.MarkdownString("");
				results.push(opcodeClientError);				
				
				const opcodeClientReady = new vscode.CompletionItem('ClientReady', vscode.CompletionItemKind.Property);
				
				opcodeClientReady.detail = "opcode.ClientReady";
				opcodeClientReady.insertText = new vscode.SnippetString('ClientReady');
				opcodeClientReady.documentation = new vscode.MarkdownString("");
				results.push(opcodeClientReady);				
				
				const opcodeClientTimeStamp = new vscode.CompletionItem('ClientTimeStamp', vscode.CompletionItemKind.Property);
				
				opcodeClientTimeStamp.detail = "opcode.ClientTimeStamp";
				opcodeClientTimeStamp.insertText = new vscode.SnippetString('ClientTimeStamp');
				opcodeClientTimeStamp.documentation = new vscode.MarkdownString("");
				results.push(opcodeClientTimeStamp);				
				
				const opcodeClientUpdate = new vscode.CompletionItem('ClientUpdate', vscode.CompletionItemKind.Property);
				
				opcodeClientUpdate.detail = "opcode.ClientUpdate";
				opcodeClientUpdate.insertText = new vscode.SnippetString('ClientUpdate');
				opcodeClientUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeClientUpdate);				
				
				const opcodeCloseContainer = new vscode.CompletionItem('CloseContainer', vscode.CompletionItemKind.Property);
				
				opcodeCloseContainer.detail = "opcode.CloseContainer";
				opcodeCloseContainer.insertText = new vscode.SnippetString('CloseContainer');
				opcodeCloseContainer.documentation = new vscode.MarkdownString("");
				results.push(opcodeCloseContainer);				
				
				const opcodeCloseTributeMaster = new vscode.CompletionItem('CloseTributeMaster', vscode.CompletionItemKind.Property);
				
				opcodeCloseTributeMaster.detail = "opcode.CloseTributeMaster";
				opcodeCloseTributeMaster.insertText = new vscode.SnippetString('CloseTributeMaster');
				opcodeCloseTributeMaster.documentation = new vscode.MarkdownString("");
				results.push(opcodeCloseTributeMaster);				
				
				const opcodeColoredText = new vscode.CompletionItem('ColoredText', vscode.CompletionItemKind.Property);
				
				opcodeColoredText.detail = "opcode.ColoredText";
				opcodeColoredText.insertText = new vscode.SnippetString('ColoredText');
				opcodeColoredText.documentation = new vscode.MarkdownString("");
				results.push(opcodeColoredText);				
				
				const opcodeCombatAbility = new vscode.CompletionItem('CombatAbility', vscode.CompletionItemKind.Property);
				
				opcodeCombatAbility.detail = "opcode.CombatAbility";
				opcodeCombatAbility.insertText = new vscode.SnippetString('CombatAbility');
				opcodeCombatAbility.documentation = new vscode.MarkdownString("");
				results.push(opcodeCombatAbility);				
				
				const opcodeCommand = new vscode.CompletionItem('Command', vscode.CompletionItemKind.Property);
				
				opcodeCommand.detail = "opcode.Command";
				opcodeCommand.insertText = new vscode.SnippetString('Command');
				opcodeCommand.documentation = new vscode.MarkdownString("");
				results.push(opcodeCommand);				
				
				const opcodeCompletedTasks = new vscode.CompletionItem('CompletedTasks', vscode.CompletionItemKind.Property);
				
				opcodeCompletedTasks.detail = "opcode.CompletedTasks";
				opcodeCompletedTasks.insertText = new vscode.SnippetString('CompletedTasks');
				opcodeCompletedTasks.documentation = new vscode.MarkdownString("");
				results.push(opcodeCompletedTasks);				
				
				const opcodeConfirmDelete = new vscode.CompletionItem('ConfirmDelete', vscode.CompletionItemKind.Property);
				
				opcodeConfirmDelete.detail = "opcode.ConfirmDelete";
				opcodeConfirmDelete.insertText = new vscode.SnippetString('ConfirmDelete');
				opcodeConfirmDelete.documentation = new vscode.MarkdownString("");
				results.push(opcodeConfirmDelete);				
				
				const opcodeConsent = new vscode.CompletionItem('Consent', vscode.CompletionItemKind.Property);
				
				opcodeConsent.detail = "opcode.Consent";
				opcodeConsent.insertText = new vscode.SnippetString('Consent');
				opcodeConsent.documentation = new vscode.MarkdownString("");
				results.push(opcodeConsent);				
				
				const opcodeConsentDeny = new vscode.CompletionItem('ConsentDeny', vscode.CompletionItemKind.Property);
				
				opcodeConsentDeny.detail = "opcode.ConsentDeny";
				opcodeConsentDeny.insertText = new vscode.SnippetString('ConsentDeny');
				opcodeConsentDeny.documentation = new vscode.MarkdownString("");
				results.push(opcodeConsentDeny);				
				
				const opcodeConsentResponse = new vscode.CompletionItem('ConsentResponse', vscode.CompletionItemKind.Property);
				
				opcodeConsentResponse.detail = "opcode.ConsentResponse";
				opcodeConsentResponse.insertText = new vscode.SnippetString('ConsentResponse');
				opcodeConsentResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeConsentResponse);				
				
				const opcodeConsider = new vscode.CompletionItem('Consider', vscode.CompletionItemKind.Property);
				
				opcodeConsider.detail = "opcode.Consider";
				opcodeConsider.insertText = new vscode.SnippetString('Consider');
				opcodeConsider.documentation = new vscode.MarkdownString("");
				results.push(opcodeConsider);				
				
				const opcodeConsiderCorpse = new vscode.CompletionItem('ConsiderCorpse', vscode.CompletionItemKind.Property);
				
				opcodeConsiderCorpse.detail = "opcode.ConsiderCorpse";
				opcodeConsiderCorpse.insertText = new vscode.SnippetString('ConsiderCorpse');
				opcodeConsiderCorpse.documentation = new vscode.MarkdownString("");
				results.push(opcodeConsiderCorpse);				
				
				const opcodeConsume = new vscode.CompletionItem('Consume', vscode.CompletionItemKind.Property);
				
				opcodeConsume.detail = "opcode.Consume";
				opcodeConsume.insertText = new vscode.SnippetString('Consume');
				opcodeConsume.documentation = new vscode.MarkdownString("");
				results.push(opcodeConsume);				
				
				const opcodeControlBoat = new vscode.CompletionItem('ControlBoat', vscode.CompletionItemKind.Property);
				
				opcodeControlBoat.detail = "opcode.ControlBoat";
				opcodeControlBoat.insertText = new vscode.SnippetString('ControlBoat');
				opcodeControlBoat.documentation = new vscode.MarkdownString("");
				results.push(opcodeControlBoat);				
				
				const opcodeCorpseDrag = new vscode.CompletionItem('CorpseDrag', vscode.CompletionItemKind.Property);
				
				opcodeCorpseDrag.detail = "opcode.CorpseDrag";
				opcodeCorpseDrag.insertText = new vscode.SnippetString('CorpseDrag');
				opcodeCorpseDrag.documentation = new vscode.MarkdownString("");
				results.push(opcodeCorpseDrag);				
				
				const opcodeCorpseDrop = new vscode.CompletionItem('CorpseDrop', vscode.CompletionItemKind.Property);
				
				opcodeCorpseDrop.detail = "opcode.CorpseDrop";
				opcodeCorpseDrop.insertText = new vscode.SnippetString('CorpseDrop');
				opcodeCorpseDrop.documentation = new vscode.MarkdownString("");
				results.push(opcodeCorpseDrop);				
				
				const opcodeCrashDump = new vscode.CompletionItem('CrashDump', vscode.CompletionItemKind.Property);
				
				opcodeCrashDump.detail = "opcode.CrashDump";
				opcodeCrashDump.insertText = new vscode.SnippetString('CrashDump');
				opcodeCrashDump.documentation = new vscode.MarkdownString("");
				results.push(opcodeCrashDump);				
				
				const opcodeCrystalCountUpdate = new vscode.CompletionItem('CrystalCountUpdate', vscode.CompletionItemKind.Property);
				
				opcodeCrystalCountUpdate.detail = "opcode.CrystalCountUpdate";
				opcodeCrystalCountUpdate.insertText = new vscode.SnippetString('CrystalCountUpdate');
				opcodeCrystalCountUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeCrystalCountUpdate);				
				
				const opcodeCrystalCreate = new vscode.CompletionItem('CrystalCreate', vscode.CompletionItemKind.Property);
				
				opcodeCrystalCreate.detail = "opcode.CrystalCreate";
				opcodeCrystalCreate.insertText = new vscode.SnippetString('CrystalCreate');
				opcodeCrystalCreate.documentation = new vscode.MarkdownString("");
				results.push(opcodeCrystalCreate);				
				
				const opcodeCrystalReclaim = new vscode.CompletionItem('CrystalReclaim', vscode.CompletionItemKind.Property);
				
				opcodeCrystalReclaim.detail = "opcode.CrystalReclaim";
				opcodeCrystalReclaim.insertText = new vscode.SnippetString('CrystalReclaim');
				opcodeCrystalReclaim.documentation = new vscode.MarkdownString("");
				results.push(opcodeCrystalReclaim);				
				
				const opcodeCustomTitles = new vscode.CompletionItem('CustomTitles', vscode.CompletionItemKind.Property);
				
				opcodeCustomTitles.detail = "opcode.CustomTitles";
				opcodeCustomTitles.insertText = new vscode.SnippetString('CustomTitles');
				opcodeCustomTitles.documentation = new vscode.MarkdownString("");
				results.push(opcodeCustomTitles);				
				
				const opcodeDamage = new vscode.CompletionItem('Damage', vscode.CompletionItemKind.Property);
				
				opcodeDamage.detail = "opcode.Damage";
				opcodeDamage.insertText = new vscode.SnippetString('Damage');
				opcodeDamage.documentation = new vscode.MarkdownString("");
				results.push(opcodeDamage);				
				
				const opcodeDeath = new vscode.CompletionItem('Death', vscode.CompletionItemKind.Property);
				
				opcodeDeath.detail = "opcode.Death";
				opcodeDeath.insertText = new vscode.SnippetString('Death');
				opcodeDeath.documentation = new vscode.MarkdownString("");
				results.push(opcodeDeath);				
				
				const opcodeDelegateAbility = new vscode.CompletionItem('DelegateAbility', vscode.CompletionItemKind.Property);
				
				opcodeDelegateAbility.detail = "opcode.DelegateAbility";
				opcodeDelegateAbility.insertText = new vscode.SnippetString('DelegateAbility');
				opcodeDelegateAbility.documentation = new vscode.MarkdownString("");
				results.push(opcodeDelegateAbility);				
				
				const opcodeDeleteCharacter = new vscode.CompletionItem('DeleteCharacter', vscode.CompletionItemKind.Property);
				
				opcodeDeleteCharacter.detail = "opcode.DeleteCharacter";
				opcodeDeleteCharacter.insertText = new vscode.SnippetString('DeleteCharacter');
				opcodeDeleteCharacter.documentation = new vscode.MarkdownString("");
				results.push(opcodeDeleteCharacter);				
				
				const opcodeDeleteCharge = new vscode.CompletionItem('DeleteCharge', vscode.CompletionItemKind.Property);
				
				opcodeDeleteCharge.detail = "opcode.DeleteCharge";
				opcodeDeleteCharge.insertText = new vscode.SnippetString('DeleteCharge');
				opcodeDeleteCharge.documentation = new vscode.MarkdownString("");
				results.push(opcodeDeleteCharge);				
				
				const opcodeDeleteItem = new vscode.CompletionItem('DeleteItem', vscode.CompletionItemKind.Property);
				
				opcodeDeleteItem.detail = "opcode.DeleteItem";
				opcodeDeleteItem.insertText = new vscode.SnippetString('DeleteItem');
				opcodeDeleteItem.documentation = new vscode.MarkdownString("");
				results.push(opcodeDeleteItem);				
				
				const opcodeDeletePetition = new vscode.CompletionItem('DeletePetition', vscode.CompletionItemKind.Property);
				
				opcodeDeletePetition.detail = "opcode.DeletePetition";
				opcodeDeletePetition.insertText = new vscode.SnippetString('DeletePetition');
				opcodeDeletePetition.documentation = new vscode.MarkdownString("");
				results.push(opcodeDeletePetition);				
				
				const opcodeDeleteSpawn = new vscode.CompletionItem('DeleteSpawn', vscode.CompletionItemKind.Property);
				
				opcodeDeleteSpawn.detail = "opcode.DeleteSpawn";
				opcodeDeleteSpawn.insertText = new vscode.SnippetString('DeleteSpawn');
				opcodeDeleteSpawn.documentation = new vscode.MarkdownString("");
				results.push(opcodeDeleteSpawn);				
				
				const opcodeDeleteSpell = new vscode.CompletionItem('DeleteSpell', vscode.CompletionItemKind.Property);
				
				opcodeDeleteSpell.detail = "opcode.DeleteSpell";
				opcodeDeleteSpell.insertText = new vscode.SnippetString('DeleteSpell');
				opcodeDeleteSpell.documentation = new vscode.MarkdownString("");
				results.push(opcodeDeleteSpell);				
				
				const opcodeDenyResponse = new vscode.CompletionItem('DenyResponse', vscode.CompletionItemKind.Property);
				
				opcodeDenyResponse.detail = "opcode.DenyResponse";
				opcodeDenyResponse.insertText = new vscode.SnippetString('DenyResponse');
				opcodeDenyResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeDenyResponse);				
				
				const opcodeDisarm = new vscode.CompletionItem('Disarm', vscode.CompletionItemKind.Property);
				
				opcodeDisarm.detail = "opcode.Disarm";
				opcodeDisarm.insertText = new vscode.SnippetString('Disarm');
				opcodeDisarm.documentation = new vscode.MarkdownString("");
				results.push(opcodeDisarm);				
				
				const opcodeDisarmTraps = new vscode.CompletionItem('DisarmTraps', vscode.CompletionItemKind.Property);
				
				opcodeDisarmTraps.detail = "opcode.DisarmTraps";
				opcodeDisarmTraps.insertText = new vscode.SnippetString('DisarmTraps');
				opcodeDisarmTraps.documentation = new vscode.MarkdownString("");
				results.push(opcodeDisarmTraps);				
				
				const opcodeDisciplineTimer = new vscode.CompletionItem('DisciplineTimer', vscode.CompletionItemKind.Property);
				
				opcodeDisciplineTimer.detail = "opcode.DisciplineTimer";
				opcodeDisciplineTimer.insertText = new vscode.SnippetString('DisciplineTimer');
				opcodeDisciplineTimer.documentation = new vscode.MarkdownString("");
				results.push(opcodeDisciplineTimer);				
				
				const opcodeDisciplineUpdate = new vscode.CompletionItem('DisciplineUpdate', vscode.CompletionItemKind.Property);
				
				opcodeDisciplineUpdate.detail = "opcode.DisciplineUpdate";
				opcodeDisciplineUpdate.insertText = new vscode.SnippetString('DisciplineUpdate');
				opcodeDisciplineUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeDisciplineUpdate);				
				
				const opcodeDiscordMerchantInventory = new vscode.CompletionItem('DiscordMerchantInventory', vscode.CompletionItemKind.Property);
				
				opcodeDiscordMerchantInventory.detail = "opcode.DiscordMerchantInventory";
				opcodeDiscordMerchantInventory.insertText = new vscode.SnippetString('DiscordMerchantInventory');
				opcodeDiscordMerchantInventory.documentation = new vscode.MarkdownString("");
				results.push(opcodeDiscordMerchantInventory);				
				
				const opcodeDoGroupLeadershipAbility = new vscode.CompletionItem('DoGroupLeadershipAbility', vscode.CompletionItemKind.Property);
				
				opcodeDoGroupLeadershipAbility.detail = "opcode.DoGroupLeadershipAbility";
				opcodeDoGroupLeadershipAbility.insertText = new vscode.SnippetString('DoGroupLeadershipAbility');
				opcodeDoGroupLeadershipAbility.documentation = new vscode.MarkdownString("");
				results.push(opcodeDoGroupLeadershipAbility);				
				
				const opcodeDuelResponse = new vscode.CompletionItem('DuelResponse', vscode.CompletionItemKind.Property);
				
				opcodeDuelResponse.detail = "opcode.DuelResponse";
				opcodeDuelResponse.insertText = new vscode.SnippetString('DuelResponse');
				opcodeDuelResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeDuelResponse);				
				
				const opcodeDuelResponse2 = new vscode.CompletionItem('DuelResponse2', vscode.CompletionItemKind.Property);
				
				opcodeDuelResponse2.detail = "opcode.DuelResponse2";
				opcodeDuelResponse2.insertText = new vscode.SnippetString('DuelResponse2');
				opcodeDuelResponse2.documentation = new vscode.MarkdownString("");
				results.push(opcodeDuelResponse2);				
				
				const opcodeDumpName = new vscode.CompletionItem('DumpName', vscode.CompletionItemKind.Property);
				
				opcodeDumpName.detail = "opcode.DumpName";
				opcodeDumpName.insertText = new vscode.SnippetString('DumpName');
				opcodeDumpName.documentation = new vscode.MarkdownString("");
				results.push(opcodeDumpName);				
				
				const opcodeDye = new vscode.CompletionItem('Dye', vscode.CompletionItemKind.Property);
				
				opcodeDye.detail = "opcode.Dye";
				opcodeDye.insertText = new vscode.SnippetString('Dye');
				opcodeDye.documentation = new vscode.MarkdownString("");
				results.push(opcodeDye);				
				
				const opcodeDynamicWall = new vscode.CompletionItem('DynamicWall', vscode.CompletionItemKind.Property);
				
				opcodeDynamicWall.detail = "opcode.DynamicWall";
				opcodeDynamicWall.insertText = new vscode.SnippetString('DynamicWall');
				opcodeDynamicWall.documentation = new vscode.MarkdownString("");
				results.push(opcodeDynamicWall);				
				
				const opcodeDzAddPlayer = new vscode.CompletionItem('DzAddPlayer', vscode.CompletionItemKind.Property);
				
				opcodeDzAddPlayer.detail = "opcode.DzAddPlayer";
				opcodeDzAddPlayer.insertText = new vscode.SnippetString('DzAddPlayer');
				opcodeDzAddPlayer.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzAddPlayer);				
				
				const opcodeDzChooseZone = new vscode.CompletionItem('DzChooseZone', vscode.CompletionItemKind.Property);
				
				opcodeDzChooseZone.detail = "opcode.DzChooseZone";
				opcodeDzChooseZone.insertText = new vscode.SnippetString('DzChooseZone');
				opcodeDzChooseZone.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzChooseZone);				
				
				const opcodeDzCompass = new vscode.CompletionItem('DzCompass', vscode.CompletionItemKind.Property);
				
				opcodeDzCompass.detail = "opcode.DzCompass";
				opcodeDzCompass.insertText = new vscode.SnippetString('DzCompass');
				opcodeDzCompass.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzCompass);				
				
				const opcodeDzExpeditionEndsWarning = new vscode.CompletionItem('DzExpeditionEndsWarning', vscode.CompletionItemKind.Property);
				
				opcodeDzExpeditionEndsWarning.detail = "opcode.DzExpeditionEndsWarning";
				opcodeDzExpeditionEndsWarning.insertText = new vscode.SnippetString('DzExpeditionEndsWarning');
				opcodeDzExpeditionEndsWarning.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzExpeditionEndsWarning);				
				
				const opcodeDzExpeditionInfo = new vscode.CompletionItem('DzExpeditionInfo', vscode.CompletionItemKind.Property);
				
				opcodeDzExpeditionInfo.detail = "opcode.DzExpeditionInfo";
				opcodeDzExpeditionInfo.insertText = new vscode.SnippetString('DzExpeditionInfo');
				opcodeDzExpeditionInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzExpeditionInfo);				
				
				const opcodeDzExpeditionList = new vscode.CompletionItem('DzExpeditionList', vscode.CompletionItemKind.Property);
				
				opcodeDzExpeditionList.detail = "opcode.DzExpeditionList";
				opcodeDzExpeditionList.insertText = new vscode.SnippetString('DzExpeditionList');
				opcodeDzExpeditionList.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzExpeditionList);				
				
				const opcodeDzJoinExpeditionConfirm = new vscode.CompletionItem('DzJoinExpeditionConfirm', vscode.CompletionItemKind.Property);
				
				opcodeDzJoinExpeditionConfirm.detail = "opcode.DzJoinExpeditionConfirm";
				opcodeDzJoinExpeditionConfirm.insertText = new vscode.SnippetString('DzJoinExpeditionConfirm');
				opcodeDzJoinExpeditionConfirm.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzJoinExpeditionConfirm);				
				
				const opcodeDzJoinExpeditionReply = new vscode.CompletionItem('DzJoinExpeditionReply', vscode.CompletionItemKind.Property);
				
				opcodeDzJoinExpeditionReply.detail = "opcode.DzJoinExpeditionReply";
				opcodeDzJoinExpeditionReply.insertText = new vscode.SnippetString('DzJoinExpeditionReply');
				opcodeDzJoinExpeditionReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzJoinExpeditionReply);				
				
				const opcodeDzLeaderStatus = new vscode.CompletionItem('DzLeaderStatus', vscode.CompletionItemKind.Property);
				
				opcodeDzLeaderStatus.detail = "opcode.DzLeaderStatus";
				opcodeDzLeaderStatus.insertText = new vscode.SnippetString('DzLeaderStatus');
				opcodeDzLeaderStatus.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzLeaderStatus);				
				
				const opcodeDzListTimers = new vscode.CompletionItem('DzListTimers', vscode.CompletionItemKind.Property);
				
				opcodeDzListTimers.detail = "opcode.DzListTimers";
				opcodeDzListTimers.insertText = new vscode.SnippetString('DzListTimers');
				opcodeDzListTimers.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzListTimers);				
				
				const opcodeDzMakeLeader = new vscode.CompletionItem('DzMakeLeader', vscode.CompletionItemKind.Property);
				
				opcodeDzMakeLeader.detail = "opcode.DzMakeLeader";
				opcodeDzMakeLeader.insertText = new vscode.SnippetString('DzMakeLeader');
				opcodeDzMakeLeader.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzMakeLeader);				
				
				const opcodeDzMemberList = new vscode.CompletionItem('DzMemberList', vscode.CompletionItemKind.Property);
				
				opcodeDzMemberList.detail = "opcode.DzMemberList";
				opcodeDzMemberList.insertText = new vscode.SnippetString('DzMemberList');
				opcodeDzMemberList.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzMemberList);				
				
				const opcodeDzMemberStatus = new vscode.CompletionItem('DzMemberStatus', vscode.CompletionItemKind.Property);
				
				opcodeDzMemberStatus.detail = "opcode.DzMemberStatus";
				opcodeDzMemberStatus.insertText = new vscode.SnippetString('DzMemberStatus');
				opcodeDzMemberStatus.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzMemberStatus);				
				
				const opcodeDzPlayerList = new vscode.CompletionItem('DzPlayerList', vscode.CompletionItemKind.Property);
				
				opcodeDzPlayerList.detail = "opcode.DzPlayerList";
				opcodeDzPlayerList.insertText = new vscode.SnippetString('DzPlayerList');
				opcodeDzPlayerList.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzPlayerList);				
				
				const opcodeDzQuit = new vscode.CompletionItem('DzQuit', vscode.CompletionItemKind.Property);
				
				opcodeDzQuit.detail = "opcode.DzQuit";
				opcodeDzQuit.insertText = new vscode.SnippetString('DzQuit');
				opcodeDzQuit.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzQuit);				
				
				const opcodeDzRemovePlayer = new vscode.CompletionItem('DzRemovePlayer', vscode.CompletionItemKind.Property);
				
				opcodeDzRemovePlayer.detail = "opcode.DzRemovePlayer";
				opcodeDzRemovePlayer.insertText = new vscode.SnippetString('DzRemovePlayer');
				opcodeDzRemovePlayer.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzRemovePlayer);				
				
				const opcodeDzSwapPlayer = new vscode.CompletionItem('DzSwapPlayer', vscode.CompletionItemKind.Property);
				
				opcodeDzSwapPlayer.detail = "opcode.DzSwapPlayer";
				opcodeDzSwapPlayer.insertText = new vscode.SnippetString('DzSwapPlayer');
				opcodeDzSwapPlayer.documentation = new vscode.MarkdownString("");
				results.push(opcodeDzSwapPlayer);				
				
				const opcodeEmote = new vscode.CompletionItem('Emote', vscode.CompletionItemKind.Property);
				
				opcodeEmote.detail = "opcode.Emote";
				opcodeEmote.insertText = new vscode.SnippetString('Emote');
				opcodeEmote.documentation = new vscode.MarkdownString("");
				results.push(opcodeEmote);				
				
				const opcodeEndLootRequest = new vscode.CompletionItem('EndLootRequest', vscode.CompletionItemKind.Property);
				
				opcodeEndLootRequest.detail = "opcode.EndLootRequest";
				opcodeEndLootRequest.insertText = new vscode.SnippetString('EndLootRequest');
				opcodeEndLootRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeEndLootRequest);				
				
				const opcodeEnduranceUpdate = new vscode.CompletionItem('EnduranceUpdate', vscode.CompletionItemKind.Property);
				
				opcodeEnduranceUpdate.detail = "opcode.EnduranceUpdate";
				opcodeEnduranceUpdate.insertText = new vscode.SnippetString('EnduranceUpdate');
				opcodeEnduranceUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeEnduranceUpdate);				
				
				const opcodeEnterChat = new vscode.CompletionItem('EnterChat', vscode.CompletionItemKind.Property);
				
				opcodeEnterChat.detail = "opcode.EnterChat";
				opcodeEnterChat.insertText = new vscode.SnippetString('EnterChat');
				opcodeEnterChat.documentation = new vscode.MarkdownString("");
				results.push(opcodeEnterChat);				
				
				const opcodeEnterWorld = new vscode.CompletionItem('EnterWorld', vscode.CompletionItemKind.Property);
				
				opcodeEnterWorld.detail = "opcode.EnterWorld";
				opcodeEnterWorld.insertText = new vscode.SnippetString('EnterWorld');
				opcodeEnterWorld.documentation = new vscode.MarkdownString("");
				results.push(opcodeEnterWorld);				
				
				const opcodeEnvDamage = new vscode.CompletionItem('EnvDamage', vscode.CompletionItemKind.Property);
				
				opcodeEnvDamage.detail = "opcode.EnvDamage";
				opcodeEnvDamage.insertText = new vscode.SnippetString('EnvDamage');
				opcodeEnvDamage.documentation = new vscode.MarkdownString("");
				results.push(opcodeEnvDamage);				
				
				const opcodeExpansionInfo = new vscode.CompletionItem('ExpansionInfo', vscode.CompletionItemKind.Property);
				
				opcodeExpansionInfo.detail = "opcode.ExpansionInfo";
				opcodeExpansionInfo.insertText = new vscode.SnippetString('ExpansionInfo');
				opcodeExpansionInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeExpansionInfo);				
				
				const opcodeExploreUnknown = new vscode.CompletionItem('ExploreUnknown', vscode.CompletionItemKind.Property);
				
				opcodeExploreUnknown.detail = "opcode.ExploreUnknown";
				opcodeExploreUnknown.insertText = new vscode.SnippetString('ExploreUnknown');
				opcodeExploreUnknown.documentation = new vscode.MarkdownString("");
				results.push(opcodeExploreUnknown);				
				
				const opcodeExpUpdate = new vscode.CompletionItem('ExpUpdate', vscode.CompletionItemKind.Property);
				
				opcodeExpUpdate.detail = "opcode.ExpUpdate";
				opcodeExpUpdate.insertText = new vscode.SnippetString('ExpUpdate');
				opcodeExpUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeExpUpdate);				
				
				const opcodeFaceChange = new vscode.CompletionItem('FaceChange', vscode.CompletionItemKind.Property);
				
				opcodeFaceChange.detail = "opcode.FaceChange";
				opcodeFaceChange.insertText = new vscode.SnippetString('FaceChange');
				opcodeFaceChange.documentation = new vscode.MarkdownString("");
				results.push(opcodeFaceChange);				
				
				const opcodeFeedback = new vscode.CompletionItem('Feedback', vscode.CompletionItemKind.Property);
				
				opcodeFeedback.detail = "opcode.Feedback";
				opcodeFeedback.insertText = new vscode.SnippetString('Feedback');
				opcodeFeedback.documentation = new vscode.MarkdownString("");
				results.push(opcodeFeedback);				
				
				const opcodeFeignDeath = new vscode.CompletionItem('FeignDeath', vscode.CompletionItemKind.Property);
				
				opcodeFeignDeath.detail = "opcode.FeignDeath";
				opcodeFeignDeath.insertText = new vscode.SnippetString('FeignDeath');
				opcodeFeignDeath.documentation = new vscode.MarkdownString("");
				results.push(opcodeFeignDeath);				
				
				const opcodeFellowshipUpdate = new vscode.CompletionItem('FellowshipUpdate', vscode.CompletionItemKind.Property);
				
				opcodeFellowshipUpdate.detail = "opcode.FellowshipUpdate";
				opcodeFellowshipUpdate.insertText = new vscode.SnippetString('FellowshipUpdate');
				opcodeFellowshipUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeFellowshipUpdate);				
				
				const opcodeFindPersonReply = new vscode.CompletionItem('FindPersonReply', vscode.CompletionItemKind.Property);
				
				opcodeFindPersonReply.detail = "opcode.FindPersonReply";
				opcodeFindPersonReply.insertText = new vscode.SnippetString('FindPersonReply');
				opcodeFindPersonReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeFindPersonReply);				
				
				const opcodeFindPersonRequest = new vscode.CompletionItem('FindPersonRequest', vscode.CompletionItemKind.Property);
				
				opcodeFindPersonRequest.detail = "opcode.FindPersonRequest";
				opcodeFindPersonRequest.insertText = new vscode.SnippetString('FindPersonRequest');
				opcodeFindPersonRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeFindPersonRequest);				
				
				const opcodeFinishTrade = new vscode.CompletionItem('FinishTrade', vscode.CompletionItemKind.Property);
				
				opcodeFinishTrade.detail = "opcode.FinishTrade";
				opcodeFinishTrade.insertText = new vscode.SnippetString('FinishTrade');
				opcodeFinishTrade.documentation = new vscode.MarkdownString("");
				results.push(opcodeFinishTrade);				
				
				const opcodeFinishWindow = new vscode.CompletionItem('FinishWindow', vscode.CompletionItemKind.Property);
				
				opcodeFinishWindow.detail = "opcode.FinishWindow";
				opcodeFinishWindow.insertText = new vscode.SnippetString('FinishWindow');
				opcodeFinishWindow.documentation = new vscode.MarkdownString("");
				results.push(opcodeFinishWindow);				
				
				const opcodeFinishWindow2 = new vscode.CompletionItem('FinishWindow2', vscode.CompletionItemKind.Property);
				
				opcodeFinishWindow2.detail = "opcode.FinishWindow2";
				opcodeFinishWindow2.insertText = new vscode.SnippetString('FinishWindow2');
				opcodeFinishWindow2.documentation = new vscode.MarkdownString("");
				results.push(opcodeFinishWindow2);				
				
				const opcodeFishing = new vscode.CompletionItem('Fishing', vscode.CompletionItemKind.Property);
				
				opcodeFishing.detail = "opcode.Fishing";
				opcodeFishing.insertText = new vscode.SnippetString('Fishing');
				opcodeFishing.documentation = new vscode.MarkdownString("");
				results.push(opcodeFishing);				
				
				const opcodeFling = new vscode.CompletionItem('Fling', vscode.CompletionItemKind.Property);
				
				opcodeFling.detail = "opcode.Fling";
				opcodeFling.insertText = new vscode.SnippetString('Fling');
				opcodeFling.documentation = new vscode.MarkdownString("");
				results.push(opcodeFling);				
				
				const opcodeFloatListThing = new vscode.CompletionItem('FloatListThing', vscode.CompletionItemKind.Property);
				
				opcodeFloatListThing.detail = "opcode.FloatListThing";
				opcodeFloatListThing.insertText = new vscode.SnippetString('FloatListThing');
				opcodeFloatListThing.documentation = new vscode.MarkdownString("");
				results.push(opcodeFloatListThing);				
				
				const opcodeForage = new vscode.CompletionItem('Forage', vscode.CompletionItemKind.Property);
				
				opcodeForage.detail = "opcode.Forage";
				opcodeForage.insertText = new vscode.SnippetString('Forage');
				opcodeForage.documentation = new vscode.MarkdownString("");
				results.push(opcodeForage);				
				
				const opcodeForceFindPerson = new vscode.CompletionItem('ForceFindPerson', vscode.CompletionItemKind.Property);
				
				opcodeForceFindPerson.detail = "opcode.ForceFindPerson";
				opcodeForceFindPerson.insertText = new vscode.SnippetString('ForceFindPerson');
				opcodeForceFindPerson.documentation = new vscode.MarkdownString("");
				results.push(opcodeForceFindPerson);				
				
				const opcodeFormattedMessage = new vscode.CompletionItem('FormattedMessage', vscode.CompletionItemKind.Property);
				
				opcodeFormattedMessage.detail = "opcode.FormattedMessage";
				opcodeFormattedMessage.insertText = new vscode.SnippetString('FormattedMessage');
				opcodeFormattedMessage.documentation = new vscode.MarkdownString("");
				results.push(opcodeFormattedMessage);				
				
				const opcodeFriendsWho = new vscode.CompletionItem('FriendsWho', vscode.CompletionItemKind.Property);
				
				opcodeFriendsWho.detail = "opcode.FriendsWho";
				opcodeFriendsWho.insertText = new vscode.SnippetString('FriendsWho');
				opcodeFriendsWho.documentation = new vscode.MarkdownString("");
				results.push(opcodeFriendsWho);				
				
				const opcodeGetGuildMOTD = new vscode.CompletionItem('GetGuildMOTD', vscode.CompletionItemKind.Property);
				
				opcodeGetGuildMOTD.detail = "opcode.GetGuildMOTD";
				opcodeGetGuildMOTD.insertText = new vscode.SnippetString('GetGuildMOTD');
				opcodeGetGuildMOTD.documentation = new vscode.MarkdownString("");
				results.push(opcodeGetGuildMOTD);				
				
				const opcodeGetGuildMOTDReply = new vscode.CompletionItem('GetGuildMOTDReply', vscode.CompletionItemKind.Property);
				
				opcodeGetGuildMOTDReply.detail = "opcode.GetGuildMOTDReply";
				opcodeGetGuildMOTDReply.insertText = new vscode.SnippetString('GetGuildMOTDReply');
				opcodeGetGuildMOTDReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeGetGuildMOTDReply);				
				
				const opcodeGetGuildsList = new vscode.CompletionItem('GetGuildsList', vscode.CompletionItemKind.Property);
				
				opcodeGetGuildsList.detail = "opcode.GetGuildsList";
				opcodeGetGuildsList.insertText = new vscode.SnippetString('GetGuildsList');
				opcodeGetGuildsList.documentation = new vscode.MarkdownString("");
				results.push(opcodeGetGuildsList);				
				
				const opcodeGiveMoney = new vscode.CompletionItem('GiveMoney', vscode.CompletionItemKind.Property);
				
				opcodeGiveMoney.detail = "opcode.GiveMoney";
				opcodeGiveMoney.insertText = new vscode.SnippetString('GiveMoney');
				opcodeGiveMoney.documentation = new vscode.MarkdownString("");
				results.push(opcodeGiveMoney);				
				
				const opcodeGMApproval = new vscode.CompletionItem('GMApproval', vscode.CompletionItemKind.Property);
				
				opcodeGMApproval.detail = "opcode.GMApproval";
				opcodeGMApproval.insertText = new vscode.SnippetString('GMApproval');
				opcodeGMApproval.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMApproval);				
				
				const opcodeGMBecomeNPC = new vscode.CompletionItem('GMBecomeNPC', vscode.CompletionItemKind.Property);
				
				opcodeGMBecomeNPC.detail = "opcode.GMBecomeNPC";
				opcodeGMBecomeNPC.insertText = new vscode.SnippetString('GMBecomeNPC');
				opcodeGMBecomeNPC.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMBecomeNPC);				
				
				const opcodeGMDelCorpse = new vscode.CompletionItem('GMDelCorpse', vscode.CompletionItemKind.Property);
				
				opcodeGMDelCorpse.detail = "opcode.GMDelCorpse";
				opcodeGMDelCorpse.insertText = new vscode.SnippetString('GMDelCorpse');
				opcodeGMDelCorpse.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMDelCorpse);				
				
				const opcodeGMEmoteZone = new vscode.CompletionItem('GMEmoteZone', vscode.CompletionItemKind.Property);
				
				opcodeGMEmoteZone.detail = "opcode.GMEmoteZone";
				opcodeGMEmoteZone.insertText = new vscode.SnippetString('GMEmoteZone');
				opcodeGMEmoteZone.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMEmoteZone);				
				
				const opcodeGMEndTraining = new vscode.CompletionItem('GMEndTraining', vscode.CompletionItemKind.Property);
				
				opcodeGMEndTraining.detail = "opcode.GMEndTraining";
				opcodeGMEndTraining.insertText = new vscode.SnippetString('GMEndTraining');
				opcodeGMEndTraining.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMEndTraining);				
				
				const opcodeGMEndTrainingResponse = new vscode.CompletionItem('GMEndTrainingResponse', vscode.CompletionItemKind.Property);
				
				opcodeGMEndTrainingResponse.detail = "opcode.GMEndTrainingResponse";
				opcodeGMEndTrainingResponse.insertText = new vscode.SnippetString('GMEndTrainingResponse');
				opcodeGMEndTrainingResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMEndTrainingResponse);				
				
				const opcodeGMFind = new vscode.CompletionItem('GMFind', vscode.CompletionItemKind.Property);
				
				opcodeGMFind.detail = "opcode.GMFind";
				opcodeGMFind.insertText = new vscode.SnippetString('GMFind');
				opcodeGMFind.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMFind);				
				
				const opcodeGMGoto = new vscode.CompletionItem('GMGoto', vscode.CompletionItemKind.Property);
				
				opcodeGMGoto.detail = "opcode.GMGoto";
				opcodeGMGoto.insertText = new vscode.SnippetString('GMGoto');
				opcodeGMGoto.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMGoto);				
				
				const opcodeGMHideMe = new vscode.CompletionItem('GMHideMe', vscode.CompletionItemKind.Property);
				
				opcodeGMHideMe.detail = "opcode.GMHideMe";
				opcodeGMHideMe.insertText = new vscode.SnippetString('GMHideMe');
				opcodeGMHideMe.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMHideMe);				
				
				const opcodeGMKick = new vscode.CompletionItem('GMKick', vscode.CompletionItemKind.Property);
				
				opcodeGMKick.detail = "opcode.GMKick";
				opcodeGMKick.insertText = new vscode.SnippetString('GMKick');
				opcodeGMKick.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMKick);				
				
				const opcodeGMKill = new vscode.CompletionItem('GMKill', vscode.CompletionItemKind.Property);
				
				opcodeGMKill.detail = "opcode.GMKill";
				opcodeGMKill.insertText = new vscode.SnippetString('GMKill');
				opcodeGMKill.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMKill);				
				
				const opcodeGMLastName = new vscode.CompletionItem('GMLastName', vscode.CompletionItemKind.Property);
				
				opcodeGMLastName.detail = "opcode.GMLastName";
				opcodeGMLastName.insertText = new vscode.SnippetString('GMLastName');
				opcodeGMLastName.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMLastName);				
				
				const opcodeGMNameChange = new vscode.CompletionItem('GMNameChange', vscode.CompletionItemKind.Property);
				
				opcodeGMNameChange.detail = "opcode.GMNameChange";
				opcodeGMNameChange.insertText = new vscode.SnippetString('GMNameChange');
				opcodeGMNameChange.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMNameChange);				
				
				const opcodeGMSearchCorpse = new vscode.CompletionItem('GMSearchCorpse', vscode.CompletionItemKind.Property);
				
				opcodeGMSearchCorpse.detail = "opcode.GMSearchCorpse";
				opcodeGMSearchCorpse.insertText = new vscode.SnippetString('GMSearchCorpse');
				opcodeGMSearchCorpse.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMSearchCorpse);				
				
				const opcodeGMServers = new vscode.CompletionItem('GMServers', vscode.CompletionItemKind.Property);
				
				opcodeGMServers.detail = "opcode.GMServers";
				opcodeGMServers.insertText = new vscode.SnippetString('GMServers');
				opcodeGMServers.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMServers);				
				
				const opcodeGMSummon = new vscode.CompletionItem('GMSummon', vscode.CompletionItemKind.Property);
				
				opcodeGMSummon.detail = "opcode.GMSummon";
				opcodeGMSummon.insertText = new vscode.SnippetString('GMSummon');
				opcodeGMSummon.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMSummon);				
				
				const opcodeGMToggle = new vscode.CompletionItem('GMToggle', vscode.CompletionItemKind.Property);
				
				opcodeGMToggle.detail = "opcode.GMToggle";
				opcodeGMToggle.insertText = new vscode.SnippetString('GMToggle');
				opcodeGMToggle.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMToggle);				
				
				const opcodeGMTraining = new vscode.CompletionItem('GMTraining', vscode.CompletionItemKind.Property);
				
				opcodeGMTraining.detail = "opcode.GMTraining";
				opcodeGMTraining.insertText = new vscode.SnippetString('GMTraining');
				opcodeGMTraining.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMTraining);				
				
				const opcodeGMTrainSkill = new vscode.CompletionItem('GMTrainSkill', vscode.CompletionItemKind.Property);
				
				opcodeGMTrainSkill.detail = "opcode.GMTrainSkill";
				opcodeGMTrainSkill.insertText = new vscode.SnippetString('GMTrainSkill');
				opcodeGMTrainSkill.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMTrainSkill);				
				
				const opcodeGMTrainSkillConfirm = new vscode.CompletionItem('GMTrainSkillConfirm', vscode.CompletionItemKind.Property);
				
				opcodeGMTrainSkillConfirm.detail = "opcode.GMTrainSkillConfirm";
				opcodeGMTrainSkillConfirm.insertText = new vscode.SnippetString('GMTrainSkillConfirm');
				opcodeGMTrainSkillConfirm.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMTrainSkillConfirm);				
				
				const opcodeGMZoneRequest = new vscode.CompletionItem('GMZoneRequest', vscode.CompletionItemKind.Property);
				
				opcodeGMZoneRequest.detail = "opcode.GMZoneRequest";
				opcodeGMZoneRequest.insertText = new vscode.SnippetString('GMZoneRequest');
				opcodeGMZoneRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMZoneRequest);				
				
				const opcodeGMZoneRequest2 = new vscode.CompletionItem('GMZoneRequest2', vscode.CompletionItemKind.Property);
				
				opcodeGMZoneRequest2.detail = "opcode.GMZoneRequest2";
				opcodeGMZoneRequest2.insertText = new vscode.SnippetString('GMZoneRequest2');
				opcodeGMZoneRequest2.documentation = new vscode.MarkdownString("");
				results.push(opcodeGMZoneRequest2);				
				
				const opcodeGroundSpawn = new vscode.CompletionItem('GroundSpawn', vscode.CompletionItemKind.Property);
				
				opcodeGroundSpawn.detail = "opcode.GroundSpawn";
				opcodeGroundSpawn.insertText = new vscode.SnippetString('GroundSpawn');
				opcodeGroundSpawn.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroundSpawn);				
				
				const opcodeGroupAcknowledge = new vscode.CompletionItem('GroupAcknowledge', vscode.CompletionItemKind.Property);
				
				opcodeGroupAcknowledge.detail = "opcode.GroupAcknowledge";
				opcodeGroupAcknowledge.insertText = new vscode.SnippetString('GroupAcknowledge');
				opcodeGroupAcknowledge.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupAcknowledge);				
				
				const opcodeGroupCancelInvite = new vscode.CompletionItem('GroupCancelInvite', vscode.CompletionItemKind.Property);
				
				opcodeGroupCancelInvite.detail = "opcode.GroupCancelInvite";
				opcodeGroupCancelInvite.insertText = new vscode.SnippetString('GroupCancelInvite');
				opcodeGroupCancelInvite.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupCancelInvite);				
				
				const opcodeGroupDelete = new vscode.CompletionItem('GroupDelete', vscode.CompletionItemKind.Property);
				
				opcodeGroupDelete.detail = "opcode.GroupDelete";
				opcodeGroupDelete.insertText = new vscode.SnippetString('GroupDelete');
				opcodeGroupDelete.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupDelete);				
				
				const opcodeGroupDisband = new vscode.CompletionItem('GroupDisband', vscode.CompletionItemKind.Property);
				
				opcodeGroupDisband.detail = "opcode.GroupDisband";
				opcodeGroupDisband.insertText = new vscode.SnippetString('GroupDisband');
				opcodeGroupDisband.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupDisband);				
				
				const opcodeGroupDisbandOther = new vscode.CompletionItem('GroupDisbandOther', vscode.CompletionItemKind.Property);
				
				opcodeGroupDisbandOther.detail = "opcode.GroupDisbandOther";
				opcodeGroupDisbandOther.insertText = new vscode.SnippetString('GroupDisbandOther');
				opcodeGroupDisbandOther.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupDisbandOther);				
				
				const opcodeGroupDisbandYou = new vscode.CompletionItem('GroupDisbandYou', vscode.CompletionItemKind.Property);
				
				opcodeGroupDisbandYou.detail = "opcode.GroupDisbandYou";
				opcodeGroupDisbandYou.insertText = new vscode.SnippetString('GroupDisbandYou');
				opcodeGroupDisbandYou.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupDisbandYou);				
				
				const opcodeGroupFollow = new vscode.CompletionItem('GroupFollow', vscode.CompletionItemKind.Property);
				
				opcodeGroupFollow.detail = "opcode.GroupFollow";
				opcodeGroupFollow.insertText = new vscode.SnippetString('GroupFollow');
				opcodeGroupFollow.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupFollow);				
				
				const opcodeGroupFollow2 = new vscode.CompletionItem('GroupFollow2', vscode.CompletionItemKind.Property);
				
				opcodeGroupFollow2.detail = "opcode.GroupFollow2";
				opcodeGroupFollow2.insertText = new vscode.SnippetString('GroupFollow2');
				opcodeGroupFollow2.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupFollow2);				
				
				const opcodeGroupInvite = new vscode.CompletionItem('GroupInvite', vscode.CompletionItemKind.Property);
				
				opcodeGroupInvite.detail = "opcode.GroupInvite";
				opcodeGroupInvite.insertText = new vscode.SnippetString('GroupInvite');
				opcodeGroupInvite.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupInvite);				
				
				const opcodeGroupInvite2 = new vscode.CompletionItem('GroupInvite2', vscode.CompletionItemKind.Property);
				
				opcodeGroupInvite2.detail = "opcode.GroupInvite2";
				opcodeGroupInvite2.insertText = new vscode.SnippetString('GroupInvite2');
				opcodeGroupInvite2.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupInvite2);				
				
				const opcodeGroupLeaderChange = new vscode.CompletionItem('GroupLeaderChange', vscode.CompletionItemKind.Property);
				
				opcodeGroupLeaderChange.detail = "opcode.GroupLeaderChange";
				opcodeGroupLeaderChange.insertText = new vscode.SnippetString('GroupLeaderChange');
				opcodeGroupLeaderChange.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupLeaderChange);				
				
				const opcodeGroupLeadershipAAUpdate = new vscode.CompletionItem('GroupLeadershipAAUpdate', vscode.CompletionItemKind.Property);
				
				opcodeGroupLeadershipAAUpdate.detail = "opcode.GroupLeadershipAAUpdate";
				opcodeGroupLeadershipAAUpdate.insertText = new vscode.SnippetString('GroupLeadershipAAUpdate');
				opcodeGroupLeadershipAAUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupLeadershipAAUpdate);				
				
				const opcodeGroupMakeLeader = new vscode.CompletionItem('GroupMakeLeader', vscode.CompletionItemKind.Property);
				
				opcodeGroupMakeLeader.detail = "opcode.GroupMakeLeader";
				opcodeGroupMakeLeader.insertText = new vscode.SnippetString('GroupMakeLeader');
				opcodeGroupMakeLeader.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupMakeLeader);				
				
				const opcodeGroupRoles = new vscode.CompletionItem('GroupRoles', vscode.CompletionItemKind.Property);
				
				opcodeGroupRoles.detail = "opcode.GroupRoles";
				opcodeGroupRoles.insertText = new vscode.SnippetString('GroupRoles');
				opcodeGroupRoles.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupRoles);				
				
				const opcodeGroupUpdate = new vscode.CompletionItem('GroupUpdate', vscode.CompletionItemKind.Property);
				
				opcodeGroupUpdate.detail = "opcode.GroupUpdate";
				opcodeGroupUpdate.insertText = new vscode.SnippetString('GroupUpdate');
				opcodeGroupUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupUpdate);				
				
				const opcodeGroupUpdateB = new vscode.CompletionItem('GroupUpdateB', vscode.CompletionItemKind.Property);
				
				opcodeGroupUpdateB.detail = "opcode.GroupUpdateB";
				opcodeGroupUpdateB.insertText = new vscode.SnippetString('GroupUpdateB');
				opcodeGroupUpdateB.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupUpdateB);				
				
				const opcodeGroupUpdateLeaderAA = new vscode.CompletionItem('GroupUpdateLeaderAA', vscode.CompletionItemKind.Property);
				
				opcodeGroupUpdateLeaderAA.detail = "opcode.GroupUpdateLeaderAA";
				opcodeGroupUpdateLeaderAA.insertText = new vscode.SnippetString('GroupUpdateLeaderAA');
				opcodeGroupUpdateLeaderAA.documentation = new vscode.MarkdownString("");
				results.push(opcodeGroupUpdateLeaderAA);				
				
				const opcodeGuildBank = new vscode.CompletionItem('GuildBank', vscode.CompletionItemKind.Property);
				
				opcodeGuildBank.detail = "opcode.GuildBank";
				opcodeGuildBank.insertText = new vscode.SnippetString('GuildBank');
				opcodeGuildBank.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildBank);				
				
				const opcodeGuildCreate = new vscode.CompletionItem('GuildCreate', vscode.CompletionItemKind.Property);
				
				opcodeGuildCreate.detail = "opcode.GuildCreate";
				opcodeGuildCreate.insertText = new vscode.SnippetString('GuildCreate');
				opcodeGuildCreate.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildCreate);				
				
				const opcodeGuildDelete = new vscode.CompletionItem('GuildDelete', vscode.CompletionItemKind.Property);
				
				opcodeGuildDelete.detail = "opcode.GuildDelete";
				opcodeGuildDelete.insertText = new vscode.SnippetString('GuildDelete');
				opcodeGuildDelete.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildDelete);				
				
				const opcodeGuildDemote = new vscode.CompletionItem('GuildDemote', vscode.CompletionItemKind.Property);
				
				opcodeGuildDemote.detail = "opcode.GuildDemote";
				opcodeGuildDemote.insertText = new vscode.SnippetString('GuildDemote');
				opcodeGuildDemote.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildDemote);				
				
				const opcodeGuildInvite = new vscode.CompletionItem('GuildInvite', vscode.CompletionItemKind.Property);
				
				opcodeGuildInvite.detail = "opcode.GuildInvite";
				opcodeGuildInvite.insertText = new vscode.SnippetString('GuildInvite');
				opcodeGuildInvite.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildInvite);				
				
				const opcodeGuildInviteAccept = new vscode.CompletionItem('GuildInviteAccept', vscode.CompletionItemKind.Property);
				
				opcodeGuildInviteAccept.detail = "opcode.GuildInviteAccept";
				opcodeGuildInviteAccept.insertText = new vscode.SnippetString('GuildInviteAccept');
				opcodeGuildInviteAccept.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildInviteAccept);				
				
				const opcodeGuildLeader = new vscode.CompletionItem('GuildLeader', vscode.CompletionItemKind.Property);
				
				opcodeGuildLeader.detail = "opcode.GuildLeader";
				opcodeGuildLeader.insertText = new vscode.SnippetString('GuildLeader');
				opcodeGuildLeader.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildLeader);				
				
				const opcodeGuildManageAdd = new vscode.CompletionItem('GuildManageAdd', vscode.CompletionItemKind.Property);
				
				opcodeGuildManageAdd.detail = "opcode.GuildManageAdd";
				opcodeGuildManageAdd.insertText = new vscode.SnippetString('GuildManageAdd');
				opcodeGuildManageAdd.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildManageAdd);				
				
				const opcodeGuildManageBanker = new vscode.CompletionItem('GuildManageBanker', vscode.CompletionItemKind.Property);
				
				opcodeGuildManageBanker.detail = "opcode.GuildManageBanker";
				opcodeGuildManageBanker.insertText = new vscode.SnippetString('GuildManageBanker');
				opcodeGuildManageBanker.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildManageBanker);				
				
				const opcodeGuildManageRemove = new vscode.CompletionItem('GuildManageRemove', vscode.CompletionItemKind.Property);
				
				opcodeGuildManageRemove.detail = "opcode.GuildManageRemove";
				opcodeGuildManageRemove.insertText = new vscode.SnippetString('GuildManageRemove');
				opcodeGuildManageRemove.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildManageRemove);				
				
				const opcodeGuildManageStatus = new vscode.CompletionItem('GuildManageStatus', vscode.CompletionItemKind.Property);
				
				opcodeGuildManageStatus.detail = "opcode.GuildManageStatus";
				opcodeGuildManageStatus.insertText = new vscode.SnippetString('GuildManageStatus');
				opcodeGuildManageStatus.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildManageStatus);				
				
				const opcodeGuildMemberLevelUpdate = new vscode.CompletionItem('GuildMemberLevelUpdate', vscode.CompletionItemKind.Property);
				
				opcodeGuildMemberLevelUpdate.detail = "opcode.GuildMemberLevelUpdate";
				opcodeGuildMemberLevelUpdate.insertText = new vscode.SnippetString('GuildMemberLevelUpdate');
				opcodeGuildMemberLevelUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildMemberLevelUpdate);				
				
				const opcodeGuildMemberList = new vscode.CompletionItem('GuildMemberList', vscode.CompletionItemKind.Property);
				
				opcodeGuildMemberList.detail = "opcode.GuildMemberList";
				opcodeGuildMemberList.insertText = new vscode.SnippetString('GuildMemberList');
				opcodeGuildMemberList.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildMemberList);				
				
				const opcodeGuildMemberUpdate = new vscode.CompletionItem('GuildMemberUpdate', vscode.CompletionItemKind.Property);
				
				opcodeGuildMemberUpdate.detail = "opcode.GuildMemberUpdate";
				opcodeGuildMemberUpdate.insertText = new vscode.SnippetString('GuildMemberUpdate');
				opcodeGuildMemberUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildMemberUpdate);				
				
				const opcodeGuildMOTD = new vscode.CompletionItem('GuildMOTD', vscode.CompletionItemKind.Property);
				
				opcodeGuildMOTD.detail = "opcode.GuildMOTD";
				opcodeGuildMOTD.insertText = new vscode.SnippetString('GuildMOTD');
				opcodeGuildMOTD.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildMOTD);				
				
				const opcodeGuildPeace = new vscode.CompletionItem('GuildPeace', vscode.CompletionItemKind.Property);
				
				opcodeGuildPeace.detail = "opcode.GuildPeace";
				opcodeGuildPeace.insertText = new vscode.SnippetString('GuildPeace');
				opcodeGuildPeace.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildPeace);				
				
				const opcodeGuildPromote = new vscode.CompletionItem('GuildPromote', vscode.CompletionItemKind.Property);
				
				opcodeGuildPromote.detail = "opcode.GuildPromote";
				opcodeGuildPromote.insertText = new vscode.SnippetString('GuildPromote');
				opcodeGuildPromote.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildPromote);				
				
				const opcodeGuildPublicNote = new vscode.CompletionItem('GuildPublicNote', vscode.CompletionItemKind.Property);
				
				opcodeGuildPublicNote.detail = "opcode.GuildPublicNote";
				opcodeGuildPublicNote.insertText = new vscode.SnippetString('GuildPublicNote');
				opcodeGuildPublicNote.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildPublicNote);				
				
				const opcodeGuildRemove = new vscode.CompletionItem('GuildRemove', vscode.CompletionItemKind.Property);
				
				opcodeGuildRemove.detail = "opcode.GuildRemove";
				opcodeGuildRemove.insertText = new vscode.SnippetString('GuildRemove');
				opcodeGuildRemove.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildRemove);				
				
				const opcodeGuildsList = new vscode.CompletionItem('GuildsList', vscode.CompletionItemKind.Property);
				
				opcodeGuildsList.detail = "opcode.GuildsList";
				opcodeGuildsList.insertText = new vscode.SnippetString('GuildsList');
				opcodeGuildsList.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildsList);				
				
				const opcodeGuildStatus = new vscode.CompletionItem('GuildStatus', vscode.CompletionItemKind.Property);
				
				opcodeGuildStatus.detail = "opcode.GuildStatus";
				opcodeGuildStatus.insertText = new vscode.SnippetString('GuildStatus');
				opcodeGuildStatus.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildStatus);				
				
				const opcodeGuildTributeInfo = new vscode.CompletionItem('GuildTributeInfo', vscode.CompletionItemKind.Property);
				
				opcodeGuildTributeInfo.detail = "opcode.GuildTributeInfo";
				opcodeGuildTributeInfo.insertText = new vscode.SnippetString('GuildTributeInfo');
				opcodeGuildTributeInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildTributeInfo);				
				
				const opcodeGuildUpdateURLAndChannel = new vscode.CompletionItem('GuildUpdateURLAndChannel', vscode.CompletionItemKind.Property);
				
				opcodeGuildUpdateURLAndChannel.detail = "opcode.GuildUpdateURLAndChannel";
				opcodeGuildUpdateURLAndChannel.insertText = new vscode.SnippetString('GuildUpdateURLAndChannel');
				opcodeGuildUpdateURLAndChannel.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildUpdateURLAndChannel);				
				
				const opcodeGuildWar = new vscode.CompletionItem('GuildWar', vscode.CompletionItemKind.Property);
				
				opcodeGuildWar.detail = "opcode.GuildWar";
				opcodeGuildWar.insertText = new vscode.SnippetString('GuildWar');
				opcodeGuildWar.documentation = new vscode.MarkdownString("");
				results.push(opcodeGuildWar);				
				
				const opcodeHeartbeat = new vscode.CompletionItem('Heartbeat', vscode.CompletionItemKind.Property);
				
				opcodeHeartbeat.detail = "opcode.Heartbeat";
				opcodeHeartbeat.insertText = new vscode.SnippetString('Heartbeat');
				opcodeHeartbeat.documentation = new vscode.MarkdownString("");
				results.push(opcodeHeartbeat);				
				
				const opcodeHide = new vscode.CompletionItem('Hide', vscode.CompletionItemKind.Property);
				
				opcodeHide.detail = "opcode.Hide";
				opcodeHide.insertText = new vscode.SnippetString('Hide');
				opcodeHide.documentation = new vscode.MarkdownString("");
				results.push(opcodeHide);				
				
				const opcodeHideCorpse = new vscode.CompletionItem('HideCorpse', vscode.CompletionItemKind.Property);
				
				opcodeHideCorpse.detail = "opcode.HideCorpse";
				opcodeHideCorpse.insertText = new vscode.SnippetString('HideCorpse');
				opcodeHideCorpse.documentation = new vscode.MarkdownString("");
				results.push(opcodeHideCorpse);				
				
				const opcodeHPUpdate = new vscode.CompletionItem('HPUpdate', vscode.CompletionItemKind.Property);
				
				opcodeHPUpdate.detail = "opcode.HPUpdate";
				opcodeHPUpdate.insertText = new vscode.SnippetString('HPUpdate');
				opcodeHPUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeHPUpdate);				
				
				const opcodeIllusion = new vscode.CompletionItem('Illusion', vscode.CompletionItemKind.Property);
				
				opcodeIllusion.detail = "opcode.Illusion";
				opcodeIllusion.insertText = new vscode.SnippetString('Illusion');
				opcodeIllusion.documentation = new vscode.MarkdownString("");
				results.push(opcodeIllusion);				
				
				const opcodeIncreaseStats = new vscode.CompletionItem('IncreaseStats', vscode.CompletionItemKind.Property);
				
				opcodeIncreaseStats.detail = "opcode.IncreaseStats";
				opcodeIncreaseStats.insertText = new vscode.SnippetString('IncreaseStats');
				opcodeIncreaseStats.documentation = new vscode.MarkdownString("");
				results.push(opcodeIncreaseStats);				
				
				const opcodeInitialHPUpdate = new vscode.CompletionItem('InitialHPUpdate', vscode.CompletionItemKind.Property);
				
				opcodeInitialHPUpdate.detail = "opcode.InitialHPUpdate";
				opcodeInitialHPUpdate.insertText = new vscode.SnippetString('InitialHPUpdate');
				opcodeInitialHPUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeInitialHPUpdate);				
				
				const opcodeInitialMobHealth = new vscode.CompletionItem('InitialMobHealth', vscode.CompletionItemKind.Property);
				
				opcodeInitialMobHealth.detail = "opcode.InitialMobHealth";
				opcodeInitialMobHealth.insertText = new vscode.SnippetString('InitialMobHealth');
				opcodeInitialMobHealth.documentation = new vscode.MarkdownString("");
				results.push(opcodeInitialMobHealth);				
				
				const opcodeInspectAnswer = new vscode.CompletionItem('InspectAnswer', vscode.CompletionItemKind.Property);
				
				opcodeInspectAnswer.detail = "opcode.InspectAnswer";
				opcodeInspectAnswer.insertText = new vscode.SnippetString('InspectAnswer');
				opcodeInspectAnswer.documentation = new vscode.MarkdownString("");
				results.push(opcodeInspectAnswer);				
				
				const opcodeInspectMessageUpdate = new vscode.CompletionItem('InspectMessageUpdate', vscode.CompletionItemKind.Property);
				
				opcodeInspectMessageUpdate.detail = "opcode.InspectMessageUpdate";
				opcodeInspectMessageUpdate.insertText = new vscode.SnippetString('InspectMessageUpdate');
				opcodeInspectMessageUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeInspectMessageUpdate);				
				
				const opcodeInspectRequest = new vscode.CompletionItem('InspectRequest', vscode.CompletionItemKind.Property);
				
				opcodeInspectRequest.detail = "opcode.InspectRequest";
				opcodeInspectRequest.insertText = new vscode.SnippetString('InspectRequest');
				opcodeInspectRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeInspectRequest);				
				
				const opcodeInstillDoubt = new vscode.CompletionItem('InstillDoubt', vscode.CompletionItemKind.Property);
				
				opcodeInstillDoubt.detail = "opcode.InstillDoubt";
				opcodeInstillDoubt.insertText = new vscode.SnippetString('InstillDoubt');
				opcodeInstillDoubt.documentation = new vscode.MarkdownString("");
				results.push(opcodeInstillDoubt);				
				
				const opcodeInterruptCast = new vscode.CompletionItem('InterruptCast', vscode.CompletionItemKind.Property);
				
				opcodeInterruptCast.detail = "opcode.InterruptCast";
				opcodeInterruptCast.insertText = new vscode.SnippetString('InterruptCast');
				opcodeInterruptCast.documentation = new vscode.MarkdownString("");
				results.push(opcodeInterruptCast);				
				
				const opcodeItemLinkClick = new vscode.CompletionItem('ItemLinkClick', vscode.CompletionItemKind.Property);
				
				opcodeItemLinkClick.detail = "opcode.ItemLinkClick";
				opcodeItemLinkClick.insertText = new vscode.SnippetString('ItemLinkClick');
				opcodeItemLinkClick.documentation = new vscode.MarkdownString("");
				results.push(opcodeItemLinkClick);				
				
				const opcodeItemLinkResponse = new vscode.CompletionItem('ItemLinkResponse', vscode.CompletionItemKind.Property);
				
				opcodeItemLinkResponse.detail = "opcode.ItemLinkResponse";
				opcodeItemLinkResponse.insertText = new vscode.SnippetString('ItemLinkResponse');
				opcodeItemLinkResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeItemLinkResponse);				
				
				const opcodeItemLinkText = new vscode.CompletionItem('ItemLinkText', vscode.CompletionItemKind.Property);
				
				opcodeItemLinkText.detail = "opcode.ItemLinkText";
				opcodeItemLinkText.insertText = new vscode.SnippetString('ItemLinkText');
				opcodeItemLinkText.documentation = new vscode.MarkdownString("");
				results.push(opcodeItemLinkText);				
				
				const opcodeItemName = new vscode.CompletionItem('ItemName', vscode.CompletionItemKind.Property);
				
				opcodeItemName.detail = "opcode.ItemName";
				opcodeItemName.insertText = new vscode.SnippetString('ItemName');
				opcodeItemName.documentation = new vscode.MarkdownString("");
				results.push(opcodeItemName);				
				
				const opcodeItemPacket = new vscode.CompletionItem('ItemPacket', vscode.CompletionItemKind.Property);
				
				opcodeItemPacket.detail = "opcode.ItemPacket";
				opcodeItemPacket.insertText = new vscode.SnippetString('ItemPacket');
				opcodeItemPacket.documentation = new vscode.MarkdownString("");
				results.push(opcodeItemPacket);				
				
				const opcodeItemPreview = new vscode.CompletionItem('ItemPreview', vscode.CompletionItemKind.Property);
				
				opcodeItemPreview.detail = "opcode.ItemPreview";
				opcodeItemPreview.insertText = new vscode.SnippetString('ItemPreview');
				opcodeItemPreview.documentation = new vscode.MarkdownString("");
				results.push(opcodeItemPreview);				
				
				const opcodeItemVerifyReply = new vscode.CompletionItem('ItemVerifyReply', vscode.CompletionItemKind.Property);
				
				opcodeItemVerifyReply.detail = "opcode.ItemVerifyReply";
				opcodeItemVerifyReply.insertText = new vscode.SnippetString('ItemVerifyReply');
				opcodeItemVerifyReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeItemVerifyReply);				
				
				const opcodeItemVerifyRequest = new vscode.CompletionItem('ItemVerifyRequest', vscode.CompletionItemKind.Property);
				
				opcodeItemVerifyRequest.detail = "opcode.ItemVerifyRequest";
				opcodeItemVerifyRequest.insertText = new vscode.SnippetString('ItemVerifyRequest');
				opcodeItemVerifyRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeItemVerifyRequest);				
				
				const opcodeItemViewUnknown = new vscode.CompletionItem('ItemViewUnknown', vscode.CompletionItemKind.Property);
				
				opcodeItemViewUnknown.detail = "opcode.ItemViewUnknown";
				opcodeItemViewUnknown.insertText = new vscode.SnippetString('ItemViewUnknown');
				opcodeItemViewUnknown.documentation = new vscode.MarkdownString("");
				results.push(opcodeItemViewUnknown);				
				
				const opcodeJump = new vscode.CompletionItem('Jump', vscode.CompletionItemKind.Property);
				
				opcodeJump.detail = "opcode.Jump";
				opcodeJump.insertText = new vscode.SnippetString('Jump');
				opcodeJump.documentation = new vscode.MarkdownString("");
				results.push(opcodeJump);				
				
				const opcodeKeyRing = new vscode.CompletionItem('KeyRing', vscode.CompletionItemKind.Property);
				
				opcodeKeyRing.detail = "opcode.KeyRing";
				opcodeKeyRing.insertText = new vscode.SnippetString('KeyRing');
				opcodeKeyRing.documentation = new vscode.MarkdownString("");
				results.push(opcodeKeyRing);				
				
				const opcodeKnowledgeBase = new vscode.CompletionItem('KnowledgeBase', vscode.CompletionItemKind.Property);
				
				opcodeKnowledgeBase.detail = "opcode.KnowledgeBase";
				opcodeKnowledgeBase.insertText = new vscode.SnippetString('KnowledgeBase');
				opcodeKnowledgeBase.documentation = new vscode.MarkdownString("");
				results.push(opcodeKnowledgeBase);				
				
				const opcodeLDoNButton = new vscode.CompletionItem('LDoNButton', vscode.CompletionItemKind.Property);
				
				opcodeLDoNButton.detail = "opcode.LDoNButton";
				opcodeLDoNButton.insertText = new vscode.SnippetString('LDoNButton');
				opcodeLDoNButton.documentation = new vscode.MarkdownString("");
				results.push(opcodeLDoNButton);				
				
				const opcodeLDoNDisarmTraps = new vscode.CompletionItem('LDoNDisarmTraps', vscode.CompletionItemKind.Property);
				
				opcodeLDoNDisarmTraps.detail = "opcode.LDoNDisarmTraps";
				opcodeLDoNDisarmTraps.insertText = new vscode.SnippetString('LDoNDisarmTraps');
				opcodeLDoNDisarmTraps.documentation = new vscode.MarkdownString("");
				results.push(opcodeLDoNDisarmTraps);				
				
				const opcodeLDoNInspect = new vscode.CompletionItem('LDoNInspect', vscode.CompletionItemKind.Property);
				
				opcodeLDoNInspect.detail = "opcode.LDoNInspect";
				opcodeLDoNInspect.insertText = new vscode.SnippetString('LDoNInspect');
				opcodeLDoNInspect.documentation = new vscode.MarkdownString("");
				results.push(opcodeLDoNInspect);				
				
				const opcodeLDoNOpen = new vscode.CompletionItem('LDoNOpen', vscode.CompletionItemKind.Property);
				
				opcodeLDoNOpen.detail = "opcode.LDoNOpen";
				opcodeLDoNOpen.insertText = new vscode.SnippetString('LDoNOpen');
				opcodeLDoNOpen.documentation = new vscode.MarkdownString("");
				results.push(opcodeLDoNOpen);				
				
				const opcodeLDoNPickLock = new vscode.CompletionItem('LDoNPickLock', vscode.CompletionItemKind.Property);
				
				opcodeLDoNPickLock.detail = "opcode.LDoNPickLock";
				opcodeLDoNPickLock.insertText = new vscode.SnippetString('LDoNPickLock');
				opcodeLDoNPickLock.documentation = new vscode.MarkdownString("");
				results.push(opcodeLDoNPickLock);				
				
				const opcodeLDoNSenseTraps = new vscode.CompletionItem('LDoNSenseTraps', vscode.CompletionItemKind.Property);
				
				opcodeLDoNSenseTraps.detail = "opcode.LDoNSenseTraps";
				opcodeLDoNSenseTraps.insertText = new vscode.SnippetString('LDoNSenseTraps');
				opcodeLDoNSenseTraps.documentation = new vscode.MarkdownString("");
				results.push(opcodeLDoNSenseTraps);				
				
				const opcodeLeadershipExpToggle = new vscode.CompletionItem('LeadershipExpToggle', vscode.CompletionItemKind.Property);
				
				opcodeLeadershipExpToggle.detail = "opcode.LeadershipExpToggle";
				opcodeLeadershipExpToggle.insertText = new vscode.SnippetString('LeadershipExpToggle');
				opcodeLeadershipExpToggle.documentation = new vscode.MarkdownString("");
				results.push(opcodeLeadershipExpToggle);				
				
				const opcodeLeadershipExpUpdate = new vscode.CompletionItem('LeadershipExpUpdate', vscode.CompletionItemKind.Property);
				
				opcodeLeadershipExpUpdate.detail = "opcode.LeadershipExpUpdate";
				opcodeLeadershipExpUpdate.insertText = new vscode.SnippetString('LeadershipExpUpdate');
				opcodeLeadershipExpUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeLeadershipExpUpdate);				
				
				const opcodeLeaveAdventure = new vscode.CompletionItem('LeaveAdventure', vscode.CompletionItemKind.Property);
				
				opcodeLeaveAdventure.detail = "opcode.LeaveAdventure";
				opcodeLeaveAdventure.insertText = new vscode.SnippetString('LeaveAdventure');
				opcodeLeaveAdventure.documentation = new vscode.MarkdownString("");
				results.push(opcodeLeaveAdventure);				
				
				const opcodeLeaveBoat = new vscode.CompletionItem('LeaveBoat', vscode.CompletionItemKind.Property);
				
				opcodeLeaveBoat.detail = "opcode.LeaveBoat";
				opcodeLeaveBoat.insertText = new vscode.SnippetString('LeaveBoat');
				opcodeLeaveBoat.documentation = new vscode.MarkdownString("");
				results.push(opcodeLeaveBoat);				
				
				const opcodeLevelAppearance = new vscode.CompletionItem('LevelAppearance', vscode.CompletionItemKind.Property);
				
				opcodeLevelAppearance.detail = "opcode.LevelAppearance";
				opcodeLevelAppearance.insertText = new vscode.SnippetString('LevelAppearance');
				opcodeLevelAppearance.documentation = new vscode.MarkdownString("");
				results.push(opcodeLevelAppearance);				
				
				const opcodeLevelUpdate = new vscode.CompletionItem('LevelUpdate', vscode.CompletionItemKind.Property);
				
				opcodeLevelUpdate.detail = "opcode.LevelUpdate";
				opcodeLevelUpdate.insertText = new vscode.SnippetString('LevelUpdate');
				opcodeLevelUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeLevelUpdate);				
				
				const opcodeLFGAppearance = new vscode.CompletionItem('LFGAppearance', vscode.CompletionItemKind.Property);
				
				opcodeLFGAppearance.detail = "opcode.LFGAppearance";
				opcodeLFGAppearance.insertText = new vscode.SnippetString('LFGAppearance');
				opcodeLFGAppearance.documentation = new vscode.MarkdownString("");
				results.push(opcodeLFGAppearance);				
				
				const opcodeLFGCommand = new vscode.CompletionItem('LFGCommand', vscode.CompletionItemKind.Property);
				
				opcodeLFGCommand.detail = "opcode.LFGCommand";
				opcodeLFGCommand.insertText = new vscode.SnippetString('LFGCommand');
				opcodeLFGCommand.documentation = new vscode.MarkdownString("");
				results.push(opcodeLFGCommand);				
				
				const opcodeLFGGetMatchesRequest = new vscode.CompletionItem('LFGGetMatchesRequest', vscode.CompletionItemKind.Property);
				
				opcodeLFGGetMatchesRequest.detail = "opcode.LFGGetMatchesRequest";
				opcodeLFGGetMatchesRequest.insertText = new vscode.SnippetString('LFGGetMatchesRequest');
				opcodeLFGGetMatchesRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeLFGGetMatchesRequest);				
				
				const opcodeLFGGetMatchesResponse = new vscode.CompletionItem('LFGGetMatchesResponse', vscode.CompletionItemKind.Property);
				
				opcodeLFGGetMatchesResponse.detail = "opcode.LFGGetMatchesResponse";
				opcodeLFGGetMatchesResponse.insertText = new vscode.SnippetString('LFGGetMatchesResponse');
				opcodeLFGGetMatchesResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeLFGGetMatchesResponse);				
				
				const opcodeLFGResponse = new vscode.CompletionItem('LFGResponse', vscode.CompletionItemKind.Property);
				
				opcodeLFGResponse.detail = "opcode.LFGResponse";
				opcodeLFGResponse.insertText = new vscode.SnippetString('LFGResponse');
				opcodeLFGResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeLFGResponse);				
				
				const opcodeLFGuild = new vscode.CompletionItem('LFGuild', vscode.CompletionItemKind.Property);
				
				opcodeLFGuild.detail = "opcode.LFGuild";
				opcodeLFGuild.insertText = new vscode.SnippetString('LFGuild');
				opcodeLFGuild.documentation = new vscode.MarkdownString("");
				results.push(opcodeLFGuild);				
				
				const opcodeLFPCommand = new vscode.CompletionItem('LFPCommand', vscode.CompletionItemKind.Property);
				
				opcodeLFPCommand.detail = "opcode.LFPCommand";
				opcodeLFPCommand.insertText = new vscode.SnippetString('LFPCommand');
				opcodeLFPCommand.documentation = new vscode.MarkdownString("");
				results.push(opcodeLFPCommand);				
				
				const opcodeLFPGetMatchesRequest = new vscode.CompletionItem('LFPGetMatchesRequest', vscode.CompletionItemKind.Property);
				
				opcodeLFPGetMatchesRequest.detail = "opcode.LFPGetMatchesRequest";
				opcodeLFPGetMatchesRequest.insertText = new vscode.SnippetString('LFPGetMatchesRequest');
				opcodeLFPGetMatchesRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeLFPGetMatchesRequest);				
				
				const opcodeLFPGetMatchesResponse = new vscode.CompletionItem('LFPGetMatchesResponse', vscode.CompletionItemKind.Property);
				
				opcodeLFPGetMatchesResponse.detail = "opcode.LFPGetMatchesResponse";
				opcodeLFPGetMatchesResponse.insertText = new vscode.SnippetString('LFPGetMatchesResponse');
				opcodeLFPGetMatchesResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeLFPGetMatchesResponse);				
				
				const opcodeLoadSpellSet = new vscode.CompletionItem('LoadSpellSet', vscode.CompletionItemKind.Property);
				
				opcodeLoadSpellSet.detail = "opcode.LoadSpellSet";
				opcodeLoadSpellSet.insertText = new vscode.SnippetString('LoadSpellSet');
				opcodeLoadSpellSet.documentation = new vscode.MarkdownString("");
				results.push(opcodeLoadSpellSet);				
				
				const opcodeLocInfo = new vscode.CompletionItem('LocInfo', vscode.CompletionItemKind.Property);
				
				opcodeLocInfo.detail = "opcode.LocInfo";
				opcodeLocInfo.insertText = new vscode.SnippetString('LocInfo');
				opcodeLocInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeLocInfo);				
				
				const opcodeLockoutTimerInfo = new vscode.CompletionItem('LockoutTimerInfo', vscode.CompletionItemKind.Property);
				
				opcodeLockoutTimerInfo.detail = "opcode.LockoutTimerInfo";
				opcodeLockoutTimerInfo.insertText = new vscode.SnippetString('LockoutTimerInfo');
				opcodeLockoutTimerInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeLockoutTimerInfo);				
				
				const opcodeLogin = new vscode.CompletionItem('Login', vscode.CompletionItemKind.Property);
				
				opcodeLogin.detail = "opcode.Login";
				opcodeLogin.insertText = new vscode.SnippetString('Login');
				opcodeLogin.documentation = new vscode.MarkdownString("");
				results.push(opcodeLogin);				
				
				const opcodeLoginAccepted = new vscode.CompletionItem('LoginAccepted', vscode.CompletionItemKind.Property);
				
				opcodeLoginAccepted.detail = "opcode.LoginAccepted";
				opcodeLoginAccepted.insertText = new vscode.SnippetString('LoginAccepted');
				opcodeLoginAccepted.documentation = new vscode.MarkdownString("");
				results.push(opcodeLoginAccepted);				
				
				const opcodeLoginComplete = new vscode.CompletionItem('LoginComplete', vscode.CompletionItemKind.Property);
				
				opcodeLoginComplete.detail = "opcode.LoginComplete";
				opcodeLoginComplete.insertText = new vscode.SnippetString('LoginComplete');
				opcodeLoginComplete.documentation = new vscode.MarkdownString("");
				results.push(opcodeLoginComplete);				
				
				const opcodeLoginUnknown1 = new vscode.CompletionItem('LoginUnknown1', vscode.CompletionItemKind.Property);
				
				opcodeLoginUnknown1.detail = "opcode.LoginUnknown1";
				opcodeLoginUnknown1.insertText = new vscode.SnippetString('LoginUnknown1');
				opcodeLoginUnknown1.documentation = new vscode.MarkdownString("");
				results.push(opcodeLoginUnknown1);				
				
				const opcodeLoginUnknown2 = new vscode.CompletionItem('LoginUnknown2', vscode.CompletionItemKind.Property);
				
				opcodeLoginUnknown2.detail = "opcode.LoginUnknown2";
				opcodeLoginUnknown2.insertText = new vscode.SnippetString('LoginUnknown2');
				opcodeLoginUnknown2.documentation = new vscode.MarkdownString("");
				results.push(opcodeLoginUnknown2);				
				
				const opcodeLogout = new vscode.CompletionItem('Logout', vscode.CompletionItemKind.Property);
				
				opcodeLogout.detail = "opcode.Logout";
				opcodeLogout.insertText = new vscode.SnippetString('Logout');
				opcodeLogout.documentation = new vscode.MarkdownString("");
				results.push(opcodeLogout);				
				
				const opcodeLogoutReply = new vscode.CompletionItem('LogoutReply', vscode.CompletionItemKind.Property);
				
				opcodeLogoutReply.detail = "opcode.LogoutReply";
				opcodeLogoutReply.insertText = new vscode.SnippetString('LogoutReply');
				opcodeLogoutReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeLogoutReply);				
				
				const opcodeLogServer = new vscode.CompletionItem('LogServer', vscode.CompletionItemKind.Property);
				
				opcodeLogServer.detail = "opcode.LogServer";
				opcodeLogServer.insertText = new vscode.SnippetString('LogServer');
				opcodeLogServer.documentation = new vscode.MarkdownString("");
				results.push(opcodeLogServer);				
				
				const opcodeLootComplete = new vscode.CompletionItem('LootComplete', vscode.CompletionItemKind.Property);
				
				opcodeLootComplete.detail = "opcode.LootComplete";
				opcodeLootComplete.insertText = new vscode.SnippetString('LootComplete');
				opcodeLootComplete.documentation = new vscode.MarkdownString("");
				results.push(opcodeLootComplete);				
				
				const opcodeLootItem = new vscode.CompletionItem('LootItem', vscode.CompletionItemKind.Property);
				
				opcodeLootItem.detail = "opcode.LootItem";
				opcodeLootItem.insertText = new vscode.SnippetString('LootItem');
				opcodeLootItem.documentation = new vscode.MarkdownString("");
				results.push(opcodeLootItem);				
				
				const opcodeLootRequest = new vscode.CompletionItem('LootRequest', vscode.CompletionItemKind.Property);
				
				opcodeLootRequest.detail = "opcode.LootRequest";
				opcodeLootRequest.insertText = new vscode.SnippetString('LootRequest');
				opcodeLootRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeLootRequest);				
				
				const opcodeManaChange = new vscode.CompletionItem('ManaChange', vscode.CompletionItemKind.Property);
				
				opcodeManaChange.detail = "opcode.ManaChange";
				opcodeManaChange.insertText = new vscode.SnippetString('ManaChange');
				opcodeManaChange.documentation = new vscode.MarkdownString("");
				results.push(opcodeManaChange);				
				
				const opcodeManaUpdate = new vscode.CompletionItem('ManaUpdate', vscode.CompletionItemKind.Property);
				
				opcodeManaUpdate.detail = "opcode.ManaUpdate";
				opcodeManaUpdate.insertText = new vscode.SnippetString('ManaUpdate');
				opcodeManaUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeManaUpdate);				
				
				const opcodeMarkNPC = new vscode.CompletionItem('MarkNPC', vscode.CompletionItemKind.Property);
				
				opcodeMarkNPC.detail = "opcode.MarkNPC";
				opcodeMarkNPC.insertText = new vscode.SnippetString('MarkNPC');
				opcodeMarkNPC.documentation = new vscode.MarkdownString("");
				results.push(opcodeMarkNPC);				
				
				const opcodeMarquee = new vscode.CompletionItem('Marquee', vscode.CompletionItemKind.Property);
				
				opcodeMarquee.detail = "opcode.Marquee";
				opcodeMarquee.insertText = new vscode.SnippetString('Marquee');
				opcodeMarquee.documentation = new vscode.MarkdownString("");
				results.push(opcodeMarquee);				
				
				const opcodeMemorizeSpell = new vscode.CompletionItem('MemorizeSpell', vscode.CompletionItemKind.Property);
				
				opcodeMemorizeSpell.detail = "opcode.MemorizeSpell";
				opcodeMemorizeSpell.insertText = new vscode.SnippetString('MemorizeSpell');
				opcodeMemorizeSpell.documentation = new vscode.MarkdownString("");
				results.push(opcodeMemorizeSpell);				
				
				const opcodeMend = new vscode.CompletionItem('Mend', vscode.CompletionItemKind.Property);
				
				opcodeMend.detail = "opcode.Mend";
				opcodeMend.insertText = new vscode.SnippetString('Mend');
				opcodeMend.documentation = new vscode.MarkdownString("");
				results.push(opcodeMend);				
				
				const opcodeMendHPUpdate = new vscode.CompletionItem('MendHPUpdate', vscode.CompletionItemKind.Property);
				
				opcodeMendHPUpdate.detail = "opcode.MendHPUpdate";
				opcodeMendHPUpdate.insertText = new vscode.SnippetString('MendHPUpdate');
				opcodeMendHPUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeMendHPUpdate);				
				
				const opcodeMercenaryAssign = new vscode.CompletionItem('MercenaryAssign', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryAssign.detail = "opcode.MercenaryAssign";
				opcodeMercenaryAssign.insertText = new vscode.SnippetString('MercenaryAssign');
				opcodeMercenaryAssign.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryAssign);				
				
				const opcodeMercenaryCommand = new vscode.CompletionItem('MercenaryCommand', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryCommand.detail = "opcode.MercenaryCommand";
				opcodeMercenaryCommand.insertText = new vscode.SnippetString('MercenaryCommand');
				opcodeMercenaryCommand.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryCommand);				
				
				const opcodeMercenaryDataRequest = new vscode.CompletionItem('MercenaryDataRequest', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryDataRequest.detail = "opcode.MercenaryDataRequest";
				opcodeMercenaryDataRequest.insertText = new vscode.SnippetString('MercenaryDataRequest');
				opcodeMercenaryDataRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryDataRequest);				
				
				const opcodeMercenaryDataResponse = new vscode.CompletionItem('MercenaryDataResponse', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryDataResponse.detail = "opcode.MercenaryDataResponse";
				opcodeMercenaryDataResponse.insertText = new vscode.SnippetString('MercenaryDataResponse');
				opcodeMercenaryDataResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryDataResponse);				
				
				const opcodeMercenaryDataUpdate = new vscode.CompletionItem('MercenaryDataUpdate', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryDataUpdate.detail = "opcode.MercenaryDataUpdate";
				opcodeMercenaryDataUpdate.insertText = new vscode.SnippetString('MercenaryDataUpdate');
				opcodeMercenaryDataUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryDataUpdate);				
				
				const opcodeMercenaryDataUpdateRequest = new vscode.CompletionItem('MercenaryDataUpdateRequest', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryDataUpdateRequest.detail = "opcode.MercenaryDataUpdateRequest";
				opcodeMercenaryDataUpdateRequest.insertText = new vscode.SnippetString('MercenaryDataUpdateRequest');
				opcodeMercenaryDataUpdateRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryDataUpdateRequest);				
				
				const opcodeMercenaryDismiss = new vscode.CompletionItem('MercenaryDismiss', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryDismiss.detail = "opcode.MercenaryDismiss";
				opcodeMercenaryDismiss.insertText = new vscode.SnippetString('MercenaryDismiss');
				opcodeMercenaryDismiss.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryDismiss);				
				
				const opcodeMercenaryHire = new vscode.CompletionItem('MercenaryHire', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryHire.detail = "opcode.MercenaryHire";
				opcodeMercenaryHire.insertText = new vscode.SnippetString('MercenaryHire');
				opcodeMercenaryHire.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryHire);				
				
				const opcodeMercenarySuspendRequest = new vscode.CompletionItem('MercenarySuspendRequest', vscode.CompletionItemKind.Property);
				
				opcodeMercenarySuspendRequest.detail = "opcode.MercenarySuspendRequest";
				opcodeMercenarySuspendRequest.insertText = new vscode.SnippetString('MercenarySuspendRequest');
				opcodeMercenarySuspendRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenarySuspendRequest);				
				
				const opcodeMercenarySuspendResponse = new vscode.CompletionItem('MercenarySuspendResponse', vscode.CompletionItemKind.Property);
				
				opcodeMercenarySuspendResponse.detail = "opcode.MercenarySuspendResponse";
				opcodeMercenarySuspendResponse.insertText = new vscode.SnippetString('MercenarySuspendResponse');
				opcodeMercenarySuspendResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenarySuspendResponse);				
				
				const opcodeMercenaryTimer = new vscode.CompletionItem('MercenaryTimer', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryTimer.detail = "opcode.MercenaryTimer";
				opcodeMercenaryTimer.insertText = new vscode.SnippetString('MercenaryTimer');
				opcodeMercenaryTimer.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryTimer);				
				
				const opcodeMercenaryTimerRequest = new vscode.CompletionItem('MercenaryTimerRequest', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryTimerRequest.detail = "opcode.MercenaryTimerRequest";
				opcodeMercenaryTimerRequest.insertText = new vscode.SnippetString('MercenaryTimerRequest');
				opcodeMercenaryTimerRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryTimerRequest);				
				
				const opcodeMercenaryUnknown1 = new vscode.CompletionItem('MercenaryUnknown1', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryUnknown1.detail = "opcode.MercenaryUnknown1";
				opcodeMercenaryUnknown1.insertText = new vscode.SnippetString('MercenaryUnknown1');
				opcodeMercenaryUnknown1.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryUnknown1);				
				
				const opcodeMercenaryUnsuspendResponse = new vscode.CompletionItem('MercenaryUnsuspendResponse', vscode.CompletionItemKind.Property);
				
				opcodeMercenaryUnsuspendResponse.detail = "opcode.MercenaryUnsuspendResponse";
				opcodeMercenaryUnsuspendResponse.insertText = new vscode.SnippetString('MercenaryUnsuspendResponse');
				opcodeMercenaryUnsuspendResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeMercenaryUnsuspendResponse);				
				
				const opcodeMobEnduranceUpdate = new vscode.CompletionItem('MobEnduranceUpdate', vscode.CompletionItemKind.Property);
				
				opcodeMobEnduranceUpdate.detail = "opcode.MobEnduranceUpdate";
				opcodeMobEnduranceUpdate.insertText = new vscode.SnippetString('MobEnduranceUpdate');
				opcodeMobEnduranceUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeMobEnduranceUpdate);				
				
				const opcodeMobHealth = new vscode.CompletionItem('MobHealth', vscode.CompletionItemKind.Property);
				
				opcodeMobHealth.detail = "opcode.MobHealth";
				opcodeMobHealth.insertText = new vscode.SnippetString('MobHealth');
				opcodeMobHealth.documentation = new vscode.MarkdownString("");
				results.push(opcodeMobHealth);				
				
				const opcodeMobManaUpdate = new vscode.CompletionItem('MobManaUpdate', vscode.CompletionItemKind.Property);
				
				opcodeMobManaUpdate.detail = "opcode.MobManaUpdate";
				opcodeMobManaUpdate.insertText = new vscode.SnippetString('MobManaUpdate');
				opcodeMobManaUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeMobManaUpdate);				
				
				const opcodeMobRename = new vscode.CompletionItem('MobRename', vscode.CompletionItemKind.Property);
				
				opcodeMobRename.detail = "opcode.MobRename";
				opcodeMobRename.insertText = new vscode.SnippetString('MobRename');
				opcodeMobRename.documentation = new vscode.MarkdownString("");
				results.push(opcodeMobRename);				
				
				const opcodeMobUpdate = new vscode.CompletionItem('MobUpdate', vscode.CompletionItemKind.Property);
				
				opcodeMobUpdate.detail = "opcode.MobUpdate";
				opcodeMobUpdate.insertText = new vscode.SnippetString('MobUpdate');
				opcodeMobUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeMobUpdate);				
				
				const opcodeMoneyOnCorpse = new vscode.CompletionItem('MoneyOnCorpse', vscode.CompletionItemKind.Property);
				
				opcodeMoneyOnCorpse.detail = "opcode.MoneyOnCorpse";
				opcodeMoneyOnCorpse.insertText = new vscode.SnippetString('MoneyOnCorpse');
				opcodeMoneyOnCorpse.documentation = new vscode.MarkdownString("");
				results.push(opcodeMoneyOnCorpse);				
				
				const opcodeMoneyUpdate = new vscode.CompletionItem('MoneyUpdate', vscode.CompletionItemKind.Property);
				
				opcodeMoneyUpdate.detail = "opcode.MoneyUpdate";
				opcodeMoneyUpdate.insertText = new vscode.SnippetString('MoneyUpdate');
				opcodeMoneyUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeMoneyUpdate);				
				
				const opcodeMOTD = new vscode.CompletionItem('MOTD', vscode.CompletionItemKind.Property);
				
				opcodeMOTD.detail = "opcode.MOTD";
				opcodeMOTD.insertText = new vscode.SnippetString('MOTD');
				opcodeMOTD.documentation = new vscode.MarkdownString("");
				results.push(opcodeMOTD);				
				
				const opcodeMoveCoin = new vscode.CompletionItem('MoveCoin', vscode.CompletionItemKind.Property);
				
				opcodeMoveCoin.detail = "opcode.MoveCoin";
				opcodeMoveCoin.insertText = new vscode.SnippetString('MoveCoin');
				opcodeMoveCoin.documentation = new vscode.MarkdownString("");
				results.push(opcodeMoveCoin);				
				
				const opcodeMoveDoor = new vscode.CompletionItem('MoveDoor', vscode.CompletionItemKind.Property);
				
				opcodeMoveDoor.detail = "opcode.MoveDoor";
				opcodeMoveDoor.insertText = new vscode.SnippetString('MoveDoor');
				opcodeMoveDoor.documentation = new vscode.MarkdownString("");
				results.push(opcodeMoveDoor);				
				
				const opcodeMoveItem = new vscode.CompletionItem('MoveItem', vscode.CompletionItemKind.Property);
				
				opcodeMoveItem.detail = "opcode.MoveItem";
				opcodeMoveItem.insertText = new vscode.SnippetString('MoveItem');
				opcodeMoveItem.documentation = new vscode.MarkdownString("");
				results.push(opcodeMoveItem);				
				
				const opcodeMoveLogDisregard = new vscode.CompletionItem('MoveLogDisregard', vscode.CompletionItemKind.Property);
				
				opcodeMoveLogDisregard.detail = "opcode.MoveLogDisregard";
				opcodeMoveLogDisregard.insertText = new vscode.SnippetString('MoveLogDisregard');
				opcodeMoveLogDisregard.documentation = new vscode.MarkdownString("");
				results.push(opcodeMoveLogDisregard);				
				
				const opcodeMoveLogRequest = new vscode.CompletionItem('MoveLogRequest', vscode.CompletionItemKind.Property);
				
				opcodeMoveLogRequest.detail = "opcode.MoveLogRequest";
				opcodeMoveLogRequest.insertText = new vscode.SnippetString('MoveLogRequest');
				opcodeMoveLogRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeMoveLogRequest);				
				
				const opcodeMultiLineMsg = new vscode.CompletionItem('MultiLineMsg', vscode.CompletionItemKind.Property);
				
				opcodeMultiLineMsg.detail = "opcode.MultiLineMsg";
				opcodeMultiLineMsg.insertText = new vscode.SnippetString('MultiLineMsg');
				opcodeMultiLineMsg.documentation = new vscode.MarkdownString("");
				results.push(opcodeMultiLineMsg);				
				
				const opcodeNewSpawn = new vscode.CompletionItem('NewSpawn', vscode.CompletionItemKind.Property);
				
				opcodeNewSpawn.detail = "opcode.NewSpawn";
				opcodeNewSpawn.insertText = new vscode.SnippetString('NewSpawn');
				opcodeNewSpawn.documentation = new vscode.MarkdownString("");
				results.push(opcodeNewSpawn);				
				
				const opcodeNewTitlesAvailable = new vscode.CompletionItem('NewTitlesAvailable', vscode.CompletionItemKind.Property);
				
				opcodeNewTitlesAvailable.detail = "opcode.NewTitlesAvailable";
				opcodeNewTitlesAvailable.insertText = new vscode.SnippetString('NewTitlesAvailable');
				opcodeNewTitlesAvailable.documentation = new vscode.MarkdownString("");
				results.push(opcodeNewTitlesAvailable);				
				
				const opcodeNewZone = new vscode.CompletionItem('NewZone', vscode.CompletionItemKind.Property);
				
				opcodeNewZone.detail = "opcode.NewZone";
				opcodeNewZone.insertText = new vscode.SnippetString('NewZone');
				opcodeNewZone.documentation = new vscode.MarkdownString("");
				results.push(opcodeNewZone);				
				
				const opcodeOnLevelMessage = new vscode.CompletionItem('OnLevelMessage', vscode.CompletionItemKind.Property);
				
				opcodeOnLevelMessage.detail = "opcode.OnLevelMessage";
				opcodeOnLevelMessage.insertText = new vscode.SnippetString('OnLevelMessage');
				opcodeOnLevelMessage.documentation = new vscode.MarkdownString("");
				results.push(opcodeOnLevelMessage);				
				
				const opcodeOpenContainer = new vscode.CompletionItem('OpenContainer', vscode.CompletionItemKind.Property);
				
				opcodeOpenContainer.detail = "opcode.OpenContainer";
				opcodeOpenContainer.insertText = new vscode.SnippetString('OpenContainer');
				opcodeOpenContainer.documentation = new vscode.MarkdownString("");
				results.push(opcodeOpenContainer);				
				
				const opcodeOpenDiscordMerchant = new vscode.CompletionItem('OpenDiscordMerchant', vscode.CompletionItemKind.Property);
				
				opcodeOpenDiscordMerchant.detail = "opcode.OpenDiscordMerchant";
				opcodeOpenDiscordMerchant.insertText = new vscode.SnippetString('OpenDiscordMerchant');
				opcodeOpenDiscordMerchant.documentation = new vscode.MarkdownString("");
				results.push(opcodeOpenDiscordMerchant);				
				
				const opcodeOpenGuildTributeMaster = new vscode.CompletionItem('OpenGuildTributeMaster', vscode.CompletionItemKind.Property);
				
				opcodeOpenGuildTributeMaster.detail = "opcode.OpenGuildTributeMaster";
				opcodeOpenGuildTributeMaster.insertText = new vscode.SnippetString('OpenGuildTributeMaster');
				opcodeOpenGuildTributeMaster.documentation = new vscode.MarkdownString("");
				results.push(opcodeOpenGuildTributeMaster);				
				
				const opcodeOpenInventory = new vscode.CompletionItem('OpenInventory', vscode.CompletionItemKind.Property);
				
				opcodeOpenInventory.detail = "opcode.OpenInventory";
				opcodeOpenInventory.insertText = new vscode.SnippetString('OpenInventory');
				opcodeOpenInventory.documentation = new vscode.MarkdownString("");
				results.push(opcodeOpenInventory);				
				
				const opcodeOpenNewTasksWindow = new vscode.CompletionItem('OpenNewTasksWindow', vscode.CompletionItemKind.Property);
				
				opcodeOpenNewTasksWindow.detail = "opcode.OpenNewTasksWindow";
				opcodeOpenNewTasksWindow.insertText = new vscode.SnippetString('OpenNewTasksWindow');
				opcodeOpenNewTasksWindow.documentation = new vscode.MarkdownString("");
				results.push(opcodeOpenNewTasksWindow);				
				
				const opcodeOpenTributeMaster = new vscode.CompletionItem('OpenTributeMaster', vscode.CompletionItemKind.Property);
				
				opcodeOpenTributeMaster.detail = "opcode.OpenTributeMaster";
				opcodeOpenTributeMaster.insertText = new vscode.SnippetString('OpenTributeMaster');
				opcodeOpenTributeMaster.documentation = new vscode.MarkdownString("");
				results.push(opcodeOpenTributeMaster);				
				
				const opcodePDeletePetition = new vscode.CompletionItem('PDeletePetition', vscode.CompletionItemKind.Property);
				
				opcodePDeletePetition.detail = "opcode.PDeletePetition";
				opcodePDeletePetition.insertText = new vscode.SnippetString('PDeletePetition');
				opcodePDeletePetition.documentation = new vscode.MarkdownString("");
				results.push(opcodePDeletePetition);				
				
				const opcodePetBuffWindow = new vscode.CompletionItem('PetBuffWindow', vscode.CompletionItemKind.Property);
				
				opcodePetBuffWindow.detail = "opcode.PetBuffWindow";
				opcodePetBuffWindow.insertText = new vscode.SnippetString('PetBuffWindow');
				opcodePetBuffWindow.documentation = new vscode.MarkdownString("");
				results.push(opcodePetBuffWindow);				
				
				const opcodePetCommands = new vscode.CompletionItem('PetCommands', vscode.CompletionItemKind.Property);
				
				opcodePetCommands.detail = "opcode.PetCommands";
				opcodePetCommands.insertText = new vscode.SnippetString('PetCommands');
				opcodePetCommands.documentation = new vscode.MarkdownString("");
				results.push(opcodePetCommands);				
				
				const opcodePetition = new vscode.CompletionItem('Petition', vscode.CompletionItemKind.Property);
				
				opcodePetition.detail = "opcode.Petition";
				opcodePetition.insertText = new vscode.SnippetString('Petition');
				opcodePetition.documentation = new vscode.MarkdownString("");
				results.push(opcodePetition);				
				
				const opcodePetitionBug = new vscode.CompletionItem('PetitionBug', vscode.CompletionItemKind.Property);
				
				opcodePetitionBug.detail = "opcode.PetitionBug";
				opcodePetitionBug.insertText = new vscode.SnippetString('PetitionBug');
				opcodePetitionBug.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionBug);				
				
				const opcodePetitionCheckIn = new vscode.CompletionItem('PetitionCheckIn', vscode.CompletionItemKind.Property);
				
				opcodePetitionCheckIn.detail = "opcode.PetitionCheckIn";
				opcodePetitionCheckIn.insertText = new vscode.SnippetString('PetitionCheckIn');
				opcodePetitionCheckIn.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionCheckIn);				
				
				const opcodePetitionCheckout = new vscode.CompletionItem('PetitionCheckout', vscode.CompletionItemKind.Property);
				
				opcodePetitionCheckout.detail = "opcode.PetitionCheckout";
				opcodePetitionCheckout.insertText = new vscode.SnippetString('PetitionCheckout');
				opcodePetitionCheckout.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionCheckout);				
				
				const opcodePetitionCheckout2 = new vscode.CompletionItem('PetitionCheckout2', vscode.CompletionItemKind.Property);
				
				opcodePetitionCheckout2.detail = "opcode.PetitionCheckout2";
				opcodePetitionCheckout2.insertText = new vscode.SnippetString('PetitionCheckout2');
				opcodePetitionCheckout2.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionCheckout2);				
				
				const opcodePetitionDelete = new vscode.CompletionItem('PetitionDelete', vscode.CompletionItemKind.Property);
				
				opcodePetitionDelete.detail = "opcode.PetitionDelete";
				opcodePetitionDelete.insertText = new vscode.SnippetString('PetitionDelete');
				opcodePetitionDelete.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionDelete);				
				
				const opcodePetitionQue = new vscode.CompletionItem('PetitionQue', vscode.CompletionItemKind.Property);
				
				opcodePetitionQue.detail = "opcode.PetitionQue";
				opcodePetitionQue.insertText = new vscode.SnippetString('PetitionQue');
				opcodePetitionQue.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionQue);				
				
				const opcodePetitionRefresh = new vscode.CompletionItem('PetitionRefresh', vscode.CompletionItemKind.Property);
				
				opcodePetitionRefresh.detail = "opcode.PetitionRefresh";
				opcodePetitionRefresh.insertText = new vscode.SnippetString('PetitionRefresh');
				opcodePetitionRefresh.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionRefresh);				
				
				const opcodePetitionResolve = new vscode.CompletionItem('PetitionResolve', vscode.CompletionItemKind.Property);
				
				opcodePetitionResolve.detail = "opcode.PetitionResolve";
				opcodePetitionResolve.insertText = new vscode.SnippetString('PetitionResolve');
				opcodePetitionResolve.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionResolve);				
				
				const opcodePetitionSearch = new vscode.CompletionItem('PetitionSearch', vscode.CompletionItemKind.Property);
				
				opcodePetitionSearch.detail = "opcode.PetitionSearch";
				opcodePetitionSearch.insertText = new vscode.SnippetString('PetitionSearch');
				opcodePetitionSearch.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionSearch);				
				
				const opcodePetitionSearchResults = new vscode.CompletionItem('PetitionSearchResults', vscode.CompletionItemKind.Property);
				
				opcodePetitionSearchResults.detail = "opcode.PetitionSearchResults";
				opcodePetitionSearchResults.insertText = new vscode.SnippetString('PetitionSearchResults');
				opcodePetitionSearchResults.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionSearchResults);				
				
				const opcodePetitionSearchText = new vscode.CompletionItem('PetitionSearchText', vscode.CompletionItemKind.Property);
				
				opcodePetitionSearchText.detail = "opcode.PetitionSearchText";
				opcodePetitionSearchText.insertText = new vscode.SnippetString('PetitionSearchText');
				opcodePetitionSearchText.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionSearchText);				
				
				const opcodePetitionUnCheckout = new vscode.CompletionItem('PetitionUnCheckout', vscode.CompletionItemKind.Property);
				
				opcodePetitionUnCheckout.detail = "opcode.PetitionUnCheckout";
				opcodePetitionUnCheckout.insertText = new vscode.SnippetString('PetitionUnCheckout');
				opcodePetitionUnCheckout.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionUnCheckout);				
				
				const opcodePetitionUpdate = new vscode.CompletionItem('PetitionUpdate', vscode.CompletionItemKind.Property);
				
				opcodePetitionUpdate.detail = "opcode.PetitionUpdate";
				opcodePetitionUpdate.insertText = new vscode.SnippetString('PetitionUpdate');
				opcodePetitionUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodePetitionUpdate);				
				
				const opcodePickPocket = new vscode.CompletionItem('PickPocket', vscode.CompletionItemKind.Property);
				
				opcodePickPocket.detail = "opcode.PickPocket";
				opcodePickPocket.insertText = new vscode.SnippetString('PickPocket');
				opcodePickPocket.documentation = new vscode.MarkdownString("");
				results.push(opcodePickPocket);				
				
				const opcodePlayerProfile = new vscode.CompletionItem('PlayerProfile', vscode.CompletionItemKind.Property);
				
				opcodePlayerProfile.detail = "opcode.PlayerProfile";
				opcodePlayerProfile.insertText = new vscode.SnippetString('PlayerProfile');
				opcodePlayerProfile.documentation = new vscode.MarkdownString("");
				results.push(opcodePlayerProfile);				
				
				const opcodePlayerStateAdd = new vscode.CompletionItem('PlayerStateAdd', vscode.CompletionItemKind.Property);
				
				opcodePlayerStateAdd.detail = "opcode.PlayerStateAdd";
				opcodePlayerStateAdd.insertText = new vscode.SnippetString('PlayerStateAdd');
				opcodePlayerStateAdd.documentation = new vscode.MarkdownString("");
				results.push(opcodePlayerStateAdd);				
				
				const opcodePlayerStateRemove = new vscode.CompletionItem('PlayerStateRemove', vscode.CompletionItemKind.Property);
				
				opcodePlayerStateRemove.detail = "opcode.PlayerStateRemove";
				opcodePlayerStateRemove.insertText = new vscode.SnippetString('PlayerStateRemove');
				opcodePlayerStateRemove.documentation = new vscode.MarkdownString("");
				results.push(opcodePlayerStateRemove);				
				
				const opcodePlayEverquestRequest = new vscode.CompletionItem('PlayEverquestRequest', vscode.CompletionItemKind.Property);
				
				opcodePlayEverquestRequest.detail = "opcode.PlayEverquestRequest";
				opcodePlayEverquestRequest.insertText = new vscode.SnippetString('PlayEverquestRequest');
				opcodePlayEverquestRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodePlayEverquestRequest);				
				
				const opcodePlayEverquestResponse = new vscode.CompletionItem('PlayEverquestResponse', vscode.CompletionItemKind.Property);
				
				opcodePlayEverquestResponse.detail = "opcode.PlayEverquestResponse";
				opcodePlayEverquestResponse.insertText = new vscode.SnippetString('PlayEverquestResponse');
				opcodePlayEverquestResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodePlayEverquestResponse);				
				
				const opcodePlayMP3 = new vscode.CompletionItem('PlayMP3', vscode.CompletionItemKind.Property);
				
				opcodePlayMP3.detail = "opcode.PlayMP3";
				opcodePlayMP3.insertText = new vscode.SnippetString('PlayMP3');
				opcodePlayMP3.documentation = new vscode.MarkdownString("");
				results.push(opcodePlayMP3);				
				
				const opcodePoll = new vscode.CompletionItem('Poll', vscode.CompletionItemKind.Property);
				
				opcodePoll.detail = "opcode.Poll";
				opcodePoll.insertText = new vscode.SnippetString('Poll');
				opcodePoll.documentation = new vscode.MarkdownString("");
				results.push(opcodePoll);				
				
				const opcodePollResponse = new vscode.CompletionItem('PollResponse', vscode.CompletionItemKind.Property);
				
				opcodePollResponse.detail = "opcode.PollResponse";
				opcodePollResponse.insertText = new vscode.SnippetString('PollResponse');
				opcodePollResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodePollResponse);				
				
				const opcodePopupResponse = new vscode.CompletionItem('PopupResponse', vscode.CompletionItemKind.Property);
				
				opcodePopupResponse.detail = "opcode.PopupResponse";
				opcodePopupResponse.insertText = new vscode.SnippetString('PopupResponse');
				opcodePopupResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodePopupResponse);				
				
				const opcodePostEnterWorld = new vscode.CompletionItem('PostEnterWorld', vscode.CompletionItemKind.Property);
				
				opcodePostEnterWorld.detail = "opcode.PostEnterWorld";
				opcodePostEnterWorld.insertText = new vscode.SnippetString('PostEnterWorld');
				opcodePostEnterWorld.documentation = new vscode.MarkdownString("");
				results.push(opcodePostEnterWorld);				
				
				const opcodePotionBelt = new vscode.CompletionItem('PotionBelt', vscode.CompletionItemKind.Property);
				
				opcodePotionBelt.detail = "opcode.PotionBelt";
				opcodePotionBelt.insertText = new vscode.SnippetString('PotionBelt');
				opcodePotionBelt.documentation = new vscode.MarkdownString("");
				results.push(opcodePotionBelt);				
				
				const opcodePreLogoutReply = new vscode.CompletionItem('PreLogoutReply', vscode.CompletionItemKind.Property);
				
				opcodePreLogoutReply.detail = "opcode.PreLogoutReply";
				opcodePreLogoutReply.insertText = new vscode.SnippetString('PreLogoutReply');
				opcodePreLogoutReply.documentation = new vscode.MarkdownString("");
				results.push(opcodePreLogoutReply);				
				
				const opcodePurchaseLeadershipAA = new vscode.CompletionItem('PurchaseLeadershipAA', vscode.CompletionItemKind.Property);
				
				opcodePurchaseLeadershipAA.detail = "opcode.PurchaseLeadershipAA";
				opcodePurchaseLeadershipAA.insertText = new vscode.SnippetString('PurchaseLeadershipAA');
				opcodePurchaseLeadershipAA.documentation = new vscode.MarkdownString("");
				results.push(opcodePurchaseLeadershipAA);				
				
				const opcodePVPLeaderBoardDetailsReply = new vscode.CompletionItem('PVPLeaderBoardDetailsReply', vscode.CompletionItemKind.Property);
				
				opcodePVPLeaderBoardDetailsReply.detail = "opcode.PVPLeaderBoardDetailsReply";
				opcodePVPLeaderBoardDetailsReply.insertText = new vscode.SnippetString('PVPLeaderBoardDetailsReply');
				opcodePVPLeaderBoardDetailsReply.documentation = new vscode.MarkdownString("");
				results.push(opcodePVPLeaderBoardDetailsReply);				
				
				const opcodePVPLeaderBoardDetailsRequest = new vscode.CompletionItem('PVPLeaderBoardDetailsRequest', vscode.CompletionItemKind.Property);
				
				opcodePVPLeaderBoardDetailsRequest.detail = "opcode.PVPLeaderBoardDetailsRequest";
				opcodePVPLeaderBoardDetailsRequest.insertText = new vscode.SnippetString('PVPLeaderBoardDetailsRequest');
				opcodePVPLeaderBoardDetailsRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodePVPLeaderBoardDetailsRequest);				
				
				const opcodePVPLeaderBoardReply = new vscode.CompletionItem('PVPLeaderBoardReply', vscode.CompletionItemKind.Property);
				
				opcodePVPLeaderBoardReply.detail = "opcode.PVPLeaderBoardReply";
				opcodePVPLeaderBoardReply.insertText = new vscode.SnippetString('PVPLeaderBoardReply');
				opcodePVPLeaderBoardReply.documentation = new vscode.MarkdownString("");
				results.push(opcodePVPLeaderBoardReply);				
				
				const opcodePVPLeaderBoardRequest = new vscode.CompletionItem('PVPLeaderBoardRequest', vscode.CompletionItemKind.Property);
				
				opcodePVPLeaderBoardRequest.detail = "opcode.PVPLeaderBoardRequest";
				opcodePVPLeaderBoardRequest.insertText = new vscode.SnippetString('PVPLeaderBoardRequest');
				opcodePVPLeaderBoardRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodePVPLeaderBoardRequest);				
				
				const opcodePVPStats = new vscode.CompletionItem('PVPStats', vscode.CompletionItemKind.Property);
				
				opcodePVPStats.detail = "opcode.PVPStats";
				opcodePVPStats.insertText = new vscode.SnippetString('PVPStats');
				opcodePVPStats.documentation = new vscode.MarkdownString("");
				results.push(opcodePVPStats);				
				
				const opcodeQueryResponseThing = new vscode.CompletionItem('QueryResponseThing', vscode.CompletionItemKind.Property);
				
				opcodeQueryResponseThing.detail = "opcode.QueryResponseThing";
				opcodeQueryResponseThing.insertText = new vscode.SnippetString('QueryResponseThing');
				opcodeQueryResponseThing.documentation = new vscode.MarkdownString("");
				results.push(opcodeQueryResponseThing);				
				
				const opcodeRaidInvite = new vscode.CompletionItem('RaidInvite', vscode.CompletionItemKind.Property);
				
				opcodeRaidInvite.detail = "opcode.RaidInvite";
				opcodeRaidInvite.insertText = new vscode.SnippetString('RaidInvite');
				opcodeRaidInvite.documentation = new vscode.MarkdownString("");
				results.push(opcodeRaidInvite);				
				
				const opcodeRaidJoin = new vscode.CompletionItem('RaidJoin', vscode.CompletionItemKind.Property);
				
				opcodeRaidJoin.detail = "opcode.RaidJoin";
				opcodeRaidJoin.insertText = new vscode.SnippetString('RaidJoin');
				opcodeRaidJoin.documentation = new vscode.MarkdownString("");
				results.push(opcodeRaidJoin);				
				
				const opcodeRaidUpdate = new vscode.CompletionItem('RaidUpdate', vscode.CompletionItemKind.Property);
				
				opcodeRaidUpdate.detail = "opcode.RaidUpdate";
				opcodeRaidUpdate.insertText = new vscode.SnippetString('RaidUpdate');
				opcodeRaidUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeRaidUpdate);				
				
				const opcodeRandomNameGenerator = new vscode.CompletionItem('RandomNameGenerator', vscode.CompletionItemKind.Property);
				
				opcodeRandomNameGenerator.detail = "opcode.RandomNameGenerator";
				opcodeRandomNameGenerator.insertText = new vscode.SnippetString('RandomNameGenerator');
				opcodeRandomNameGenerator.documentation = new vscode.MarkdownString("");
				results.push(opcodeRandomNameGenerator);				
				
				const opcodeRandomReply = new vscode.CompletionItem('RandomReply', vscode.CompletionItemKind.Property);
				
				opcodeRandomReply.detail = "opcode.RandomReply";
				opcodeRandomReply.insertText = new vscode.SnippetString('RandomReply');
				opcodeRandomReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeRandomReply);				
				
				const opcodeRandomReq = new vscode.CompletionItem('RandomReq', vscode.CompletionItemKind.Property);
				
				opcodeRandomReq.detail = "opcode.RandomReq";
				opcodeRandomReq.insertText = new vscode.SnippetString('RandomReq');
				opcodeRandomReq.documentation = new vscode.MarkdownString("");
				results.push(opcodeRandomReq);				
				
				const opcodeReadBook = new vscode.CompletionItem('ReadBook', vscode.CompletionItemKind.Property);
				
				opcodeReadBook.detail = "opcode.ReadBook";
				opcodeReadBook.insertText = new vscode.SnippetString('ReadBook');
				opcodeReadBook.documentation = new vscode.MarkdownString("");
				results.push(opcodeReadBook);				
				
				const opcodeRecipeAutoCombine = new vscode.CompletionItem('RecipeAutoCombine', vscode.CompletionItemKind.Property);
				
				opcodeRecipeAutoCombine.detail = "opcode.RecipeAutoCombine";
				opcodeRecipeAutoCombine.insertText = new vscode.SnippetString('RecipeAutoCombine');
				opcodeRecipeAutoCombine.documentation = new vscode.MarkdownString("");
				results.push(opcodeRecipeAutoCombine);				
				
				const opcodeRecipeDetails = new vscode.CompletionItem('RecipeDetails', vscode.CompletionItemKind.Property);
				
				opcodeRecipeDetails.detail = "opcode.RecipeDetails";
				opcodeRecipeDetails.insertText = new vscode.SnippetString('RecipeDetails');
				opcodeRecipeDetails.documentation = new vscode.MarkdownString("");
				results.push(opcodeRecipeDetails);				
				
				const opcodeRecipeReply = new vscode.CompletionItem('RecipeReply', vscode.CompletionItemKind.Property);
				
				opcodeRecipeReply.detail = "opcode.RecipeReply";
				opcodeRecipeReply.insertText = new vscode.SnippetString('RecipeReply');
				opcodeRecipeReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeRecipeReply);				
				
				const opcodeRecipesFavorite = new vscode.CompletionItem('RecipesFavorite', vscode.CompletionItemKind.Property);
				
				opcodeRecipesFavorite.detail = "opcode.RecipesFavorite";
				opcodeRecipesFavorite.insertText = new vscode.SnippetString('RecipesFavorite');
				opcodeRecipesFavorite.documentation = new vscode.MarkdownString("");
				results.push(opcodeRecipesFavorite);				
				
				const opcodeRecipesSearch = new vscode.CompletionItem('RecipesSearch', vscode.CompletionItemKind.Property);
				
				opcodeRecipesSearch.detail = "opcode.RecipesSearch";
				opcodeRecipesSearch.insertText = new vscode.SnippetString('RecipesSearch');
				opcodeRecipesSearch.documentation = new vscode.MarkdownString("");
				results.push(opcodeRecipesSearch);				
				
				const opcodeReclaimCrystals = new vscode.CompletionItem('ReclaimCrystals', vscode.CompletionItemKind.Property);
				
				opcodeReclaimCrystals.detail = "opcode.ReclaimCrystals";
				opcodeReclaimCrystals.insertText = new vscode.SnippetString('ReclaimCrystals');
				opcodeReclaimCrystals.documentation = new vscode.MarkdownString("");
				results.push(opcodeReclaimCrystals);				
				
				const opcodeReloadUI = new vscode.CompletionItem('ReloadUI', vscode.CompletionItemKind.Property);
				
				opcodeReloadUI.detail = "opcode.ReloadUI";
				opcodeReloadUI.insertText = new vscode.SnippetString('ReloadUI');
				opcodeReloadUI.documentation = new vscode.MarkdownString("");
				results.push(opcodeReloadUI);				
				
				const opcodeRemoveAllDoors = new vscode.CompletionItem('RemoveAllDoors', vscode.CompletionItemKind.Property);
				
				opcodeRemoveAllDoors.detail = "opcode.RemoveAllDoors";
				opcodeRemoveAllDoors.insertText = new vscode.SnippetString('RemoveAllDoors');
				opcodeRemoveAllDoors.documentation = new vscode.MarkdownString("");
				results.push(opcodeRemoveAllDoors);				
				
				const opcodeRemoveBlockedBuffs = new vscode.CompletionItem('RemoveBlockedBuffs', vscode.CompletionItemKind.Property);
				
				opcodeRemoveBlockedBuffs.detail = "opcode.RemoveBlockedBuffs";
				opcodeRemoveBlockedBuffs.insertText = new vscode.SnippetString('RemoveBlockedBuffs');
				opcodeRemoveBlockedBuffs.documentation = new vscode.MarkdownString("");
				results.push(opcodeRemoveBlockedBuffs);				
				
				const opcodeRemoveNimbusEffect = new vscode.CompletionItem('RemoveNimbusEffect', vscode.CompletionItemKind.Property);
				
				opcodeRemoveNimbusEffect.detail = "opcode.RemoveNimbusEffect";
				opcodeRemoveNimbusEffect.insertText = new vscode.SnippetString('RemoveNimbusEffect');
				opcodeRemoveNimbusEffect.documentation = new vscode.MarkdownString("");
				results.push(opcodeRemoveNimbusEffect);				
				
				const opcodeReport = new vscode.CompletionItem('Report', vscode.CompletionItemKind.Property);
				
				opcodeReport.detail = "opcode.Report";
				opcodeReport.insertText = new vscode.SnippetString('Report');
				opcodeReport.documentation = new vscode.MarkdownString("");
				results.push(opcodeReport);				
				
				const opcodeReqClientSpawn = new vscode.CompletionItem('ReqClientSpawn', vscode.CompletionItemKind.Property);
				
				opcodeReqClientSpawn.detail = "opcode.ReqClientSpawn";
				opcodeReqClientSpawn.insertText = new vscode.SnippetString('ReqClientSpawn');
				opcodeReqClientSpawn.documentation = new vscode.MarkdownString("");
				results.push(opcodeReqClientSpawn);				
				
				const opcodeReqNewZone = new vscode.CompletionItem('ReqNewZone', vscode.CompletionItemKind.Property);
				
				opcodeReqNewZone.detail = "opcode.ReqNewZone";
				opcodeReqNewZone.insertText = new vscode.SnippetString('ReqNewZone');
				opcodeReqNewZone.documentation = new vscode.MarkdownString("");
				results.push(opcodeReqNewZone);				
				
				const opcodeRequestClientZoneChange = new vscode.CompletionItem('RequestClientZoneChange', vscode.CompletionItemKind.Property);
				
				opcodeRequestClientZoneChange.detail = "opcode.RequestClientZoneChange";
				opcodeRequestClientZoneChange.insertText = new vscode.SnippetString('RequestClientZoneChange');
				opcodeRequestClientZoneChange.documentation = new vscode.MarkdownString("");
				results.push(opcodeRequestClientZoneChange);				
				
				const opcodeRequestDuel = new vscode.CompletionItem('RequestDuel', vscode.CompletionItemKind.Property);
				
				opcodeRequestDuel.detail = "opcode.RequestDuel";
				opcodeRequestDuel.insertText = new vscode.SnippetString('RequestDuel');
				opcodeRequestDuel.documentation = new vscode.MarkdownString("");
				results.push(opcodeRequestDuel);				
				
				const opcodeRequestKnowledgeBase = new vscode.CompletionItem('RequestKnowledgeBase', vscode.CompletionItemKind.Property);
				
				opcodeRequestKnowledgeBase.detail = "opcode.RequestKnowledgeBase";
				opcodeRequestKnowledgeBase.insertText = new vscode.SnippetString('RequestKnowledgeBase');
				opcodeRequestKnowledgeBase.documentation = new vscode.MarkdownString("");
				results.push(opcodeRequestKnowledgeBase);				
				
				const opcodeRequestTitles = new vscode.CompletionItem('RequestTitles', vscode.CompletionItemKind.Property);
				
				opcodeRequestTitles.detail = "opcode.RequestTitles";
				opcodeRequestTitles.insertText = new vscode.SnippetString('RequestTitles');
				opcodeRequestTitles.documentation = new vscode.MarkdownString("");
				results.push(opcodeRequestTitles);				
				
				const opcodeRespawnWindow = new vscode.CompletionItem('RespawnWindow', vscode.CompletionItemKind.Property);
				
				opcodeRespawnWindow.detail = "opcode.RespawnWindow";
				opcodeRespawnWindow.insertText = new vscode.SnippetString('RespawnWindow');
				opcodeRespawnWindow.documentation = new vscode.MarkdownString("");
				results.push(opcodeRespawnWindow);				
				
				const opcodeRespondAA = new vscode.CompletionItem('RespondAA', vscode.CompletionItemKind.Property);
				
				opcodeRespondAA.detail = "opcode.RespondAA";
				opcodeRespondAA.insertText = new vscode.SnippetString('RespondAA');
				opcodeRespondAA.documentation = new vscode.MarkdownString("");
				results.push(opcodeRespondAA);				
				
				const opcodeRestState = new vscode.CompletionItem('RestState', vscode.CompletionItemKind.Property);
				
				opcodeRestState.detail = "opcode.RestState";
				opcodeRestState.insertText = new vscode.SnippetString('RestState');
				opcodeRestState.documentation = new vscode.MarkdownString("");
				results.push(opcodeRestState);				
				
				const opcodeRewind = new vscode.CompletionItem('Rewind', vscode.CompletionItemKind.Property);
				
				opcodeRewind.detail = "opcode.Rewind";
				opcodeRewind.insertText = new vscode.SnippetString('Rewind');
				opcodeRewind.documentation = new vscode.MarkdownString("");
				results.push(opcodeRewind);				
				
				const opcodeRezzAnswer = new vscode.CompletionItem('RezzAnswer', vscode.CompletionItemKind.Property);
				
				opcodeRezzAnswer.detail = "opcode.RezzAnswer";
				opcodeRezzAnswer.insertText = new vscode.SnippetString('RezzAnswer');
				opcodeRezzAnswer.documentation = new vscode.MarkdownString("");
				results.push(opcodeRezzAnswer);				
				
				const opcodeRezzComplete = new vscode.CompletionItem('RezzComplete', vscode.CompletionItemKind.Property);
				
				opcodeRezzComplete.detail = "opcode.RezzComplete";
				opcodeRezzComplete.insertText = new vscode.SnippetString('RezzComplete');
				opcodeRezzComplete.documentation = new vscode.MarkdownString("");
				results.push(opcodeRezzComplete);				
				
				const opcodeRezzRequest = new vscode.CompletionItem('RezzRequest', vscode.CompletionItemKind.Property);
				
				opcodeRezzRequest.detail = "opcode.RezzRequest";
				opcodeRezzRequest.insertText = new vscode.SnippetString('RezzRequest');
				opcodeRezzRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeRezzRequest);				
				
				const opcodeSacrifice = new vscode.CompletionItem('Sacrifice', vscode.CompletionItemKind.Property);
				
				opcodeSacrifice.detail = "opcode.Sacrifice";
				opcodeSacrifice.insertText = new vscode.SnippetString('Sacrifice');
				opcodeSacrifice.documentation = new vscode.MarkdownString("");
				results.push(opcodeSacrifice);				
				
				const opcodeSafeFallSuccess = new vscode.CompletionItem('SafeFallSuccess', vscode.CompletionItemKind.Property);
				
				opcodeSafeFallSuccess.detail = "opcode.SafeFallSuccess";
				opcodeSafeFallSuccess.insertText = new vscode.SnippetString('SafeFallSuccess');
				opcodeSafeFallSuccess.documentation = new vscode.MarkdownString("");
				results.push(opcodeSafeFallSuccess);				
				
				const opcodeSafePoint = new vscode.CompletionItem('SafePoint', vscode.CompletionItemKind.Property);
				
				opcodeSafePoint.detail = "opcode.SafePoint";
				opcodeSafePoint.insertText = new vscode.SnippetString('SafePoint');
				opcodeSafePoint.documentation = new vscode.MarkdownString("");
				results.push(opcodeSafePoint);				
				
				const opcodeSave = new vscode.CompletionItem('Save', vscode.CompletionItemKind.Property);
				
				opcodeSave.detail = "opcode.Save";
				opcodeSave.insertText = new vscode.SnippetString('Save');
				opcodeSave.documentation = new vscode.MarkdownString("");
				results.push(opcodeSave);				
				
				const opcodeSaveOnZoneReq = new vscode.CompletionItem('SaveOnZoneReq', vscode.CompletionItemKind.Property);
				
				opcodeSaveOnZoneReq.detail = "opcode.SaveOnZoneReq";
				opcodeSaveOnZoneReq.insertText = new vscode.SnippetString('SaveOnZoneReq');
				opcodeSaveOnZoneReq.documentation = new vscode.MarkdownString("");
				results.push(opcodeSaveOnZoneReq);				
				
				const opcodeSelectTribute = new vscode.CompletionItem('SelectTribute', vscode.CompletionItemKind.Property);
				
				opcodeSelectTribute.detail = "opcode.SelectTribute";
				opcodeSelectTribute.insertText = new vscode.SnippetString('SelectTribute');
				opcodeSelectTribute.documentation = new vscode.MarkdownString("");
				results.push(opcodeSelectTribute);				
				
				const opcodeSendAAStats = new vscode.CompletionItem('SendAAStats', vscode.CompletionItemKind.Property);
				
				opcodeSendAAStats.detail = "opcode.SendAAStats";
				opcodeSendAAStats.insertText = new vscode.SnippetString('SendAAStats');
				opcodeSendAAStats.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendAAStats);				
				
				const opcodeSendAATable = new vscode.CompletionItem('SendAATable', vscode.CompletionItemKind.Property);
				
				opcodeSendAATable.detail = "opcode.SendAATable";
				opcodeSendAATable.insertText = new vscode.SnippetString('SendAATable');
				opcodeSendAATable.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendAATable);				
				
				const opcodeSendCharInfo = new vscode.CompletionItem('SendCharInfo', vscode.CompletionItemKind.Property);
				
				opcodeSendCharInfo.detail = "opcode.SendCharInfo";
				opcodeSendCharInfo.insertText = new vscode.SnippetString('SendCharInfo');
				opcodeSendCharInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendCharInfo);				
				
				const opcodeSendExpZonein = new vscode.CompletionItem('SendExpZonein', vscode.CompletionItemKind.Property);
				
				opcodeSendExpZonein.detail = "opcode.SendExpZonein";
				opcodeSendExpZonein.insertText = new vscode.SnippetString('SendExpZonein');
				opcodeSendExpZonein.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendExpZonein);				
				
				const opcodeSendFindableNPCs = new vscode.CompletionItem('SendFindableNPCs', vscode.CompletionItemKind.Property);
				
				opcodeSendFindableNPCs.detail = "opcode.SendFindableNPCs";
				opcodeSendFindableNPCs.insertText = new vscode.SnippetString('SendFindableNPCs');
				opcodeSendFindableNPCs.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendFindableNPCs);				
				
				const opcodeSendGuildTributes = new vscode.CompletionItem('SendGuildTributes', vscode.CompletionItemKind.Property);
				
				opcodeSendGuildTributes.detail = "opcode.SendGuildTributes";
				opcodeSendGuildTributes.insertText = new vscode.SnippetString('SendGuildTributes');
				opcodeSendGuildTributes.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendGuildTributes);				
				
				const opcodeSendLoginInfo = new vscode.CompletionItem('SendLoginInfo', vscode.CompletionItemKind.Property);
				
				opcodeSendLoginInfo.detail = "opcode.SendLoginInfo";
				opcodeSendLoginInfo.insertText = new vscode.SnippetString('SendLoginInfo');
				opcodeSendLoginInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendLoginInfo);				
				
				const opcodeSendMaxCharacters = new vscode.CompletionItem('SendMaxCharacters', vscode.CompletionItemKind.Property);
				
				opcodeSendMaxCharacters.detail = "opcode.SendMaxCharacters";
				opcodeSendMaxCharacters.insertText = new vscode.SnippetString('SendMaxCharacters');
				opcodeSendMaxCharacters.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendMaxCharacters);				
				
				const opcodeSendMembership = new vscode.CompletionItem('SendMembership', vscode.CompletionItemKind.Property);
				
				opcodeSendMembership.detail = "opcode.SendMembership";
				opcodeSendMembership.insertText = new vscode.SnippetString('SendMembership');
				opcodeSendMembership.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendMembership);				
				
				const opcodeSendMembershipDetails = new vscode.CompletionItem('SendMembershipDetails', vscode.CompletionItemKind.Property);
				
				opcodeSendMembershipDetails.detail = "opcode.SendMembershipDetails";
				opcodeSendMembershipDetails.insertText = new vscode.SnippetString('SendMembershipDetails');
				opcodeSendMembershipDetails.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendMembershipDetails);				
				
				const opcodeSendSystemStats = new vscode.CompletionItem('SendSystemStats', vscode.CompletionItemKind.Property);
				
				opcodeSendSystemStats.detail = "opcode.SendSystemStats";
				opcodeSendSystemStats.insertText = new vscode.SnippetString('SendSystemStats');
				opcodeSendSystemStats.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendSystemStats);				
				
				const opcodeSendTitleList = new vscode.CompletionItem('SendTitleList', vscode.CompletionItemKind.Property);
				
				opcodeSendTitleList.detail = "opcode.SendTitleList";
				opcodeSendTitleList.insertText = new vscode.SnippetString('SendTitleList');
				opcodeSendTitleList.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendTitleList);				
				
				const opcodeSendTributes = new vscode.CompletionItem('SendTributes', vscode.CompletionItemKind.Property);
				
				opcodeSendTributes.detail = "opcode.SendTributes";
				opcodeSendTributes.insertText = new vscode.SnippetString('SendTributes');
				opcodeSendTributes.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendTributes);				
				
				const opcodeSendZonepoints = new vscode.CompletionItem('SendZonepoints', vscode.CompletionItemKind.Property);
				
				opcodeSendZonepoints.detail = "opcode.SendZonepoints";
				opcodeSendZonepoints.insertText = new vscode.SnippetString('SendZonepoints');
				opcodeSendZonepoints.documentation = new vscode.MarkdownString("");
				results.push(opcodeSendZonepoints);				
				
				const opcodeSenseHeading = new vscode.CompletionItem('SenseHeading', vscode.CompletionItemKind.Property);
				
				opcodeSenseHeading.detail = "opcode.SenseHeading";
				opcodeSenseHeading.insertText = new vscode.SnippetString('SenseHeading');
				opcodeSenseHeading.documentation = new vscode.MarkdownString("");
				results.push(opcodeSenseHeading);				
				
				const opcodeSenseTraps = new vscode.CompletionItem('SenseTraps', vscode.CompletionItemKind.Property);
				
				opcodeSenseTraps.detail = "opcode.SenseTraps";
				opcodeSenseTraps.insertText = new vscode.SnippetString('SenseTraps');
				opcodeSenseTraps.documentation = new vscode.MarkdownString("");
				results.push(opcodeSenseTraps);				
				
				const opcodeServerListRequest = new vscode.CompletionItem('ServerListRequest', vscode.CompletionItemKind.Property);
				
				opcodeServerListRequest.detail = "opcode.ServerListRequest";
				opcodeServerListRequest.insertText = new vscode.SnippetString('ServerListRequest');
				opcodeServerListRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeServerListRequest);				
				
				const opcodeServerListResponse = new vscode.CompletionItem('ServerListResponse', vscode.CompletionItemKind.Property);
				
				opcodeServerListResponse.detail = "opcode.ServerListResponse";
				opcodeServerListResponse.insertText = new vscode.SnippetString('ServerListResponse');
				opcodeServerListResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeServerListResponse);				
				
				const opcodeSessionReady = new vscode.CompletionItem('SessionReady', vscode.CompletionItemKind.Property);
				
				opcodeSessionReady.detail = "opcode.SessionReady";
				opcodeSessionReady.insertText = new vscode.SnippetString('SessionReady');
				opcodeSessionReady.documentation = new vscode.MarkdownString("");
				results.push(opcodeSessionReady);				
				
				const opcodeSetChatServer = new vscode.CompletionItem('SetChatServer', vscode.CompletionItemKind.Property);
				
				opcodeSetChatServer.detail = "opcode.SetChatServer";
				opcodeSetChatServer.insertText = new vscode.SnippetString('SetChatServer');
				opcodeSetChatServer.documentation = new vscode.MarkdownString("");
				results.push(opcodeSetChatServer);				
				
				const opcodeSetChatServer2 = new vscode.CompletionItem('SetChatServer2', vscode.CompletionItemKind.Property);
				
				opcodeSetChatServer2.detail = "opcode.SetChatServer2";
				opcodeSetChatServer2.insertText = new vscode.SnippetString('SetChatServer2');
				opcodeSetChatServer2.documentation = new vscode.MarkdownString("");
				results.push(opcodeSetChatServer2);				
				
				const opcodeSetGroupTarget = new vscode.CompletionItem('SetGroupTarget', vscode.CompletionItemKind.Property);
				
				opcodeSetGroupTarget.detail = "opcode.SetGroupTarget";
				opcodeSetGroupTarget.insertText = new vscode.SnippetString('SetGroupTarget');
				opcodeSetGroupTarget.documentation = new vscode.MarkdownString("");
				results.push(opcodeSetGroupTarget);				
				
				const opcodeSetGuildMOTD = new vscode.CompletionItem('SetGuildMOTD', vscode.CompletionItemKind.Property);
				
				opcodeSetGuildMOTD.detail = "opcode.SetGuildMOTD";
				opcodeSetGuildMOTD.insertText = new vscode.SnippetString('SetGuildMOTD');
				opcodeSetGuildMOTD.documentation = new vscode.MarkdownString("");
				results.push(opcodeSetGuildMOTD);				
				
				const opcodeSetGuildRank = new vscode.CompletionItem('SetGuildRank', vscode.CompletionItemKind.Property);
				
				opcodeSetGuildRank.detail = "opcode.SetGuildRank";
				opcodeSetGuildRank.insertText = new vscode.SnippetString('SetGuildRank');
				opcodeSetGuildRank.documentation = new vscode.MarkdownString("");
				results.push(opcodeSetGuildRank);				
				
				const opcodeSetRunMode = new vscode.CompletionItem('SetRunMode', vscode.CompletionItemKind.Property);
				
				opcodeSetRunMode.detail = "opcode.SetRunMode";
				opcodeSetRunMode.insertText = new vscode.SnippetString('SetRunMode');
				opcodeSetRunMode.documentation = new vscode.MarkdownString("");
				results.push(opcodeSetRunMode);				
				
				const opcodeSetServerFilter = new vscode.CompletionItem('SetServerFilter', vscode.CompletionItemKind.Property);
				
				opcodeSetServerFilter.detail = "opcode.SetServerFilter";
				opcodeSetServerFilter.insertText = new vscode.SnippetString('SetServerFilter');
				opcodeSetServerFilter.documentation = new vscode.MarkdownString("");
				results.push(opcodeSetServerFilter);				
				
				const opcodeSetStartCity = new vscode.CompletionItem('SetStartCity', vscode.CompletionItemKind.Property);
				
				opcodeSetStartCity.detail = "opcode.SetStartCity";
				opcodeSetStartCity.insertText = new vscode.SnippetString('SetStartCity');
				opcodeSetStartCity.documentation = new vscode.MarkdownString("");
				results.push(opcodeSetStartCity);				
				
				const opcodeSetTitle = new vscode.CompletionItem('SetTitle', vscode.CompletionItemKind.Property);
				
				opcodeSetTitle.detail = "opcode.SetTitle";
				opcodeSetTitle.insertText = new vscode.SnippetString('SetTitle');
				opcodeSetTitle.documentation = new vscode.MarkdownString("");
				results.push(opcodeSetTitle);				
				
				const opcodeSetTitleReply = new vscode.CompletionItem('SetTitleReply', vscode.CompletionItemKind.Property);
				
				opcodeSetTitleReply.detail = "opcode.SetTitleReply";
				opcodeSetTitleReply.insertText = new vscode.SnippetString('SetTitleReply');
				opcodeSetTitleReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeSetTitleReply);				
				
				const opcodeShielding = new vscode.CompletionItem('Shielding', vscode.CompletionItemKind.Property);
				
				opcodeShielding.detail = "opcode.Shielding";
				opcodeShielding.insertText = new vscode.SnippetString('Shielding');
				opcodeShielding.documentation = new vscode.MarkdownString("");
				results.push(opcodeShielding);				
				
				const opcodeShopDelItem = new vscode.CompletionItem('ShopDelItem', vscode.CompletionItemKind.Property);
				
				opcodeShopDelItem.detail = "opcode.ShopDelItem";
				opcodeShopDelItem.insertText = new vscode.SnippetString('ShopDelItem');
				opcodeShopDelItem.documentation = new vscode.MarkdownString("");
				results.push(opcodeShopDelItem);				
				
				const opcodeShopEnd = new vscode.CompletionItem('ShopEnd', vscode.CompletionItemKind.Property);
				
				opcodeShopEnd.detail = "opcode.ShopEnd";
				opcodeShopEnd.insertText = new vscode.SnippetString('ShopEnd');
				opcodeShopEnd.documentation = new vscode.MarkdownString("");
				results.push(opcodeShopEnd);				
				
				const opcodeShopEndConfirm = new vscode.CompletionItem('ShopEndConfirm', vscode.CompletionItemKind.Property);
				
				opcodeShopEndConfirm.detail = "opcode.ShopEndConfirm";
				opcodeShopEndConfirm.insertText = new vscode.SnippetString('ShopEndConfirm');
				opcodeShopEndConfirm.documentation = new vscode.MarkdownString("");
				results.push(opcodeShopEndConfirm);				
				
				const opcodeShopItem = new vscode.CompletionItem('ShopItem', vscode.CompletionItemKind.Property);
				
				opcodeShopItem.detail = "opcode.ShopItem";
				opcodeShopItem.insertText = new vscode.SnippetString('ShopItem');
				opcodeShopItem.documentation = new vscode.MarkdownString("");
				results.push(opcodeShopItem);				
				
				const opcodeShopPlayerBuy = new vscode.CompletionItem('ShopPlayerBuy', vscode.CompletionItemKind.Property);
				
				opcodeShopPlayerBuy.detail = "opcode.ShopPlayerBuy";
				opcodeShopPlayerBuy.insertText = new vscode.SnippetString('ShopPlayerBuy');
				opcodeShopPlayerBuy.documentation = new vscode.MarkdownString("");
				results.push(opcodeShopPlayerBuy);				
				
				const opcodeShopPlayerSell = new vscode.CompletionItem('ShopPlayerSell', vscode.CompletionItemKind.Property);
				
				opcodeShopPlayerSell.detail = "opcode.ShopPlayerSell";
				opcodeShopPlayerSell.insertText = new vscode.SnippetString('ShopPlayerSell');
				opcodeShopPlayerSell.documentation = new vscode.MarkdownString("");
				results.push(opcodeShopPlayerSell);				
				
				const opcodeShopRequest = new vscode.CompletionItem('ShopRequest', vscode.CompletionItemKind.Property);
				
				opcodeShopRequest.detail = "opcode.ShopRequest";
				opcodeShopRequest.insertText = new vscode.SnippetString('ShopRequest');
				opcodeShopRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeShopRequest);				
				
				const opcodeSimpleMessage = new vscode.CompletionItem('SimpleMessage', vscode.CompletionItemKind.Property);
				
				opcodeSimpleMessage.detail = "opcode.SimpleMessage";
				opcodeSimpleMessage.insertText = new vscode.SnippetString('SimpleMessage');
				opcodeSimpleMessage.documentation = new vscode.MarkdownString("");
				results.push(opcodeSimpleMessage);				
				
				const opcodeSkillUpdate = new vscode.CompletionItem('SkillUpdate', vscode.CompletionItemKind.Property);
				
				opcodeSkillUpdate.detail = "opcode.SkillUpdate";
				opcodeSkillUpdate.insertText = new vscode.SnippetString('SkillUpdate');
				opcodeSkillUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeSkillUpdate);				
				
				const opcodeSneak = new vscode.CompletionItem('Sneak', vscode.CompletionItemKind.Property);
				
				opcodeSneak.detail = "opcode.Sneak";
				opcodeSneak.insertText = new vscode.SnippetString('Sneak');
				opcodeSneak.documentation = new vscode.MarkdownString("");
				results.push(opcodeSneak);				
				
				const opcodeSome3ByteHPUpdate = new vscode.CompletionItem('Some3ByteHPUpdate', vscode.CompletionItemKind.Property);
				
				opcodeSome3ByteHPUpdate.detail = "opcode.Some3ByteHPUpdate";
				opcodeSome3ByteHPUpdate.insertText = new vscode.SnippetString('Some3ByteHPUpdate');
				opcodeSome3ByteHPUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeSome3ByteHPUpdate);				
				
				const opcodeSome6ByteHPUpdate = new vscode.CompletionItem('Some6ByteHPUpdate', vscode.CompletionItemKind.Property);
				
				opcodeSome6ByteHPUpdate.detail = "opcode.Some6ByteHPUpdate";
				opcodeSome6ByteHPUpdate.insertText = new vscode.SnippetString('Some6ByteHPUpdate');
				opcodeSome6ByteHPUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeSome6ByteHPUpdate);				
				
				const opcodeSomeItemPacketMaybe = new vscode.CompletionItem('SomeItemPacketMaybe', vscode.CompletionItemKind.Property);
				
				opcodeSomeItemPacketMaybe.detail = "opcode.SomeItemPacketMaybe";
				opcodeSomeItemPacketMaybe.insertText = new vscode.SnippetString('SomeItemPacketMaybe');
				opcodeSomeItemPacketMaybe.documentation = new vscode.MarkdownString("");
				results.push(opcodeSomeItemPacketMaybe);				
				
				const opcodeSound = new vscode.CompletionItem('Sound', vscode.CompletionItemKind.Property);
				
				opcodeSound.detail = "opcode.Sound";
				opcodeSound.insertText = new vscode.SnippetString('Sound');
				opcodeSound.documentation = new vscode.MarkdownString("");
				results.push(opcodeSound);				
				
				const opcodeSpawnAppearance = new vscode.CompletionItem('SpawnAppearance', vscode.CompletionItemKind.Property);
				
				opcodeSpawnAppearance.detail = "opcode.SpawnAppearance";
				opcodeSpawnAppearance.insertText = new vscode.SnippetString('SpawnAppearance');
				opcodeSpawnAppearance.documentation = new vscode.MarkdownString("");
				results.push(opcodeSpawnAppearance);				
				
				const opcodeSpawnDoor = new vscode.CompletionItem('SpawnDoor', vscode.CompletionItemKind.Property);
				
				opcodeSpawnDoor.detail = "opcode.SpawnDoor";
				opcodeSpawnDoor.insertText = new vscode.SnippetString('SpawnDoor');
				opcodeSpawnDoor.documentation = new vscode.MarkdownString("");
				results.push(opcodeSpawnDoor);				
				
				const opcodeSpawnPositionUpdate = new vscode.CompletionItem('SpawnPositionUpdate', vscode.CompletionItemKind.Property);
				
				opcodeSpawnPositionUpdate.detail = "opcode.SpawnPositionUpdate";
				opcodeSpawnPositionUpdate.insertText = new vscode.SnippetString('SpawnPositionUpdate');
				opcodeSpawnPositionUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeSpawnPositionUpdate);				
				
				const opcodeSpecialMesg = new vscode.CompletionItem('SpecialMesg', vscode.CompletionItemKind.Property);
				
				opcodeSpecialMesg.detail = "opcode.SpecialMesg";
				opcodeSpecialMesg.insertText = new vscode.SnippetString('SpecialMesg');
				opcodeSpecialMesg.documentation = new vscode.MarkdownString("");
				results.push(opcodeSpecialMesg);				
				
				const opcodeSpellEffect = new vscode.CompletionItem('SpellEffect', vscode.CompletionItemKind.Property);
				
				opcodeSpellEffect.detail = "opcode.SpellEffect";
				opcodeSpellEffect.insertText = new vscode.SnippetString('SpellEffect');
				opcodeSpellEffect.documentation = new vscode.MarkdownString("");
				results.push(opcodeSpellEffect);				
				
				const opcodeSplit = new vscode.CompletionItem('Split', vscode.CompletionItemKind.Property);
				
				opcodeSplit.detail = "opcode.Split";
				opcodeSplit.insertText = new vscode.SnippetString('Split');
				opcodeSplit.documentation = new vscode.MarkdownString("");
				results.push(opcodeSplit);				
				
				const opcodeStamina = new vscode.CompletionItem('Stamina', vscode.CompletionItemKind.Property);
				
				opcodeStamina.detail = "opcode.Stamina";
				opcodeStamina.insertText = new vscode.SnippetString('Stamina');
				opcodeStamina.documentation = new vscode.MarkdownString("");
				results.push(opcodeStamina);				
				
				const opcodeStun = new vscode.CompletionItem('Stun', vscode.CompletionItemKind.Property);
				
				opcodeStun.detail = "opcode.Stun";
				opcodeStun.insertText = new vscode.SnippetString('Stun');
				opcodeStun.documentation = new vscode.MarkdownString("");
				results.push(opcodeStun);				
				
				const opcodeSurname = new vscode.CompletionItem('Surname', vscode.CompletionItemKind.Property);
				
				opcodeSurname.detail = "opcode.Surname";
				opcodeSurname.insertText = new vscode.SnippetString('Surname');
				opcodeSurname.documentation = new vscode.MarkdownString("");
				results.push(opcodeSurname);				
				
				const opcodeSwapSpell = new vscode.CompletionItem('SwapSpell', vscode.CompletionItemKind.Property);
				
				opcodeSwapSpell.detail = "opcode.SwapSpell";
				opcodeSwapSpell.insertText = new vscode.SnippetString('SwapSpell');
				opcodeSwapSpell.documentation = new vscode.MarkdownString("");
				results.push(opcodeSwapSpell);				
				
				const opcodeTargetBuffs = new vscode.CompletionItem('TargetBuffs', vscode.CompletionItemKind.Property);
				
				opcodeTargetBuffs.detail = "opcode.TargetBuffs";
				opcodeTargetBuffs.insertText = new vscode.SnippetString('TargetBuffs');
				opcodeTargetBuffs.documentation = new vscode.MarkdownString("");
				results.push(opcodeTargetBuffs);				
				
				const opcodeTargetCommand = new vscode.CompletionItem('TargetCommand', vscode.CompletionItemKind.Property);
				
				opcodeTargetCommand.detail = "opcode.TargetCommand";
				opcodeTargetCommand.insertText = new vscode.SnippetString('TargetCommand');
				opcodeTargetCommand.documentation = new vscode.MarkdownString("");
				results.push(opcodeTargetCommand);				
				
				const opcodeTargetHoTT = new vscode.CompletionItem('TargetHoTT', vscode.CompletionItemKind.Property);
				
				opcodeTargetHoTT.detail = "opcode.TargetHoTT";
				opcodeTargetHoTT.insertText = new vscode.SnippetString('TargetHoTT');
				opcodeTargetHoTT.documentation = new vscode.MarkdownString("");
				results.push(opcodeTargetHoTT);				
				
				const opcodeTargetMouse = new vscode.CompletionItem('TargetMouse', vscode.CompletionItemKind.Property);
				
				opcodeTargetMouse.detail = "opcode.TargetMouse";
				opcodeTargetMouse.insertText = new vscode.SnippetString('TargetMouse');
				opcodeTargetMouse.documentation = new vscode.MarkdownString("");
				results.push(opcodeTargetMouse);				
				
				const opcodeTargetReject = new vscode.CompletionItem('TargetReject', vscode.CompletionItemKind.Property);
				
				opcodeTargetReject.detail = "opcode.TargetReject";
				opcodeTargetReject.insertText = new vscode.SnippetString('TargetReject');
				opcodeTargetReject.documentation = new vscode.MarkdownString("");
				results.push(opcodeTargetReject);				
				
				const opcodeTaskActivity = new vscode.CompletionItem('TaskActivity', vscode.CompletionItemKind.Property);
				
				opcodeTaskActivity.detail = "opcode.TaskActivity";
				opcodeTaskActivity.insertText = new vscode.SnippetString('TaskActivity');
				opcodeTaskActivity.documentation = new vscode.MarkdownString("");
				results.push(opcodeTaskActivity);				
				
				const opcodeTaskActivityComplete = new vscode.CompletionItem('TaskActivityComplete', vscode.CompletionItemKind.Property);
				
				opcodeTaskActivityComplete.detail = "opcode.TaskActivityComplete";
				opcodeTaskActivityComplete.insertText = new vscode.SnippetString('TaskActivityComplete');
				opcodeTaskActivityComplete.documentation = new vscode.MarkdownString("");
				results.push(opcodeTaskActivityComplete);				
				
				const opcodeTaskDescription = new vscode.CompletionItem('TaskDescription', vscode.CompletionItemKind.Property);
				
				opcodeTaskDescription.detail = "opcode.TaskDescription";
				opcodeTaskDescription.insertText = new vscode.SnippetString('TaskDescription');
				opcodeTaskDescription.documentation = new vscode.MarkdownString("");
				results.push(opcodeTaskDescription);				
				
				const opcodeTaskHistoryReply = new vscode.CompletionItem('TaskHistoryReply', vscode.CompletionItemKind.Property);
				
				opcodeTaskHistoryReply.detail = "opcode.TaskHistoryReply";
				opcodeTaskHistoryReply.insertText = new vscode.SnippetString('TaskHistoryReply');
				opcodeTaskHistoryReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeTaskHistoryReply);				
				
				const opcodeTaskHistoryRequest = new vscode.CompletionItem('TaskHistoryRequest', vscode.CompletionItemKind.Property);
				
				opcodeTaskHistoryRequest.detail = "opcode.TaskHistoryRequest";
				opcodeTaskHistoryRequest.insertText = new vscode.SnippetString('TaskHistoryRequest');
				opcodeTaskHistoryRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeTaskHistoryRequest);				
				
				const opcodeTaskMemberList = new vscode.CompletionItem('TaskMemberList', vscode.CompletionItemKind.Property);
				
				opcodeTaskMemberList.detail = "opcode.TaskMemberList";
				opcodeTaskMemberList.insertText = new vscode.SnippetString('TaskMemberList');
				opcodeTaskMemberList.documentation = new vscode.MarkdownString("");
				results.push(opcodeTaskMemberList);				
				
				const opcodeTaunt = new vscode.CompletionItem('Taunt', vscode.CompletionItemKind.Property);
				
				opcodeTaunt.detail = "opcode.Taunt";
				opcodeTaunt.insertText = new vscode.SnippetString('Taunt');
				opcodeTaunt.documentation = new vscode.MarkdownString("");
				results.push(opcodeTaunt);				
				
				const opcodeTestBuff = new vscode.CompletionItem('TestBuff', vscode.CompletionItemKind.Property);
				
				opcodeTestBuff.detail = "opcode.TestBuff";
				opcodeTestBuff.insertText = new vscode.SnippetString('TestBuff');
				opcodeTestBuff.documentation = new vscode.MarkdownString("");
				results.push(opcodeTestBuff);				
				
				const opcodeTGB = new vscode.CompletionItem('TGB', vscode.CompletionItemKind.Property);
				
				opcodeTGB.detail = "opcode.TGB";
				opcodeTGB.insertText = new vscode.SnippetString('TGB');
				opcodeTGB.documentation = new vscode.MarkdownString("");
				results.push(opcodeTGB);				
				
				const opcodeTimeOfDay = new vscode.CompletionItem('TimeOfDay', vscode.CompletionItemKind.Property);
				
				opcodeTimeOfDay.detail = "opcode.TimeOfDay";
				opcodeTimeOfDay.insertText = new vscode.SnippetString('TimeOfDay');
				opcodeTimeOfDay.documentation = new vscode.MarkdownString("");
				results.push(opcodeTimeOfDay);				
				
				const opcodeTrack = new vscode.CompletionItem('Track', vscode.CompletionItemKind.Property);
				
				opcodeTrack.detail = "opcode.Track";
				opcodeTrack.insertText = new vscode.SnippetString('Track');
				opcodeTrack.documentation = new vscode.MarkdownString("");
				results.push(opcodeTrack);				
				
				const opcodeTrackTarget = new vscode.CompletionItem('TrackTarget', vscode.CompletionItemKind.Property);
				
				opcodeTrackTarget.detail = "opcode.TrackTarget";
				opcodeTrackTarget.insertText = new vscode.SnippetString('TrackTarget');
				opcodeTrackTarget.documentation = new vscode.MarkdownString("");
				results.push(opcodeTrackTarget);				
				
				const opcodeTrackUnknown = new vscode.CompletionItem('TrackUnknown', vscode.CompletionItemKind.Property);
				
				opcodeTrackUnknown.detail = "opcode.TrackUnknown";
				opcodeTrackUnknown.insertText = new vscode.SnippetString('TrackUnknown');
				opcodeTrackUnknown.documentation = new vscode.MarkdownString("");
				results.push(opcodeTrackUnknown);				
				
				const opcodeTradeAcceptClick = new vscode.CompletionItem('TradeAcceptClick', vscode.CompletionItemKind.Property);
				
				opcodeTradeAcceptClick.detail = "opcode.TradeAcceptClick";
				opcodeTradeAcceptClick.insertText = new vscode.SnippetString('TradeAcceptClick');
				opcodeTradeAcceptClick.documentation = new vscode.MarkdownString("");
				results.push(opcodeTradeAcceptClick);				
				
				const opcodeTradeBusy = new vscode.CompletionItem('TradeBusy', vscode.CompletionItemKind.Property);
				
				opcodeTradeBusy.detail = "opcode.TradeBusy";
				opcodeTradeBusy.insertText = new vscode.SnippetString('TradeBusy');
				opcodeTradeBusy.documentation = new vscode.MarkdownString("");
				results.push(opcodeTradeBusy);				
				
				const opcodeTradeCoins = new vscode.CompletionItem('TradeCoins', vscode.CompletionItemKind.Property);
				
				opcodeTradeCoins.detail = "opcode.TradeCoins";
				opcodeTradeCoins.insertText = new vscode.SnippetString('TradeCoins');
				opcodeTradeCoins.documentation = new vscode.MarkdownString("");
				results.push(opcodeTradeCoins);				
				
				const opcodeTradeMoneyUpdate = new vscode.CompletionItem('TradeMoneyUpdate', vscode.CompletionItemKind.Property);
				
				opcodeTradeMoneyUpdate.detail = "opcode.TradeMoneyUpdate";
				opcodeTradeMoneyUpdate.insertText = new vscode.SnippetString('TradeMoneyUpdate');
				opcodeTradeMoneyUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeTradeMoneyUpdate);				
				
				const opcodeTrader = new vscode.CompletionItem('Trader', vscode.CompletionItemKind.Property);
				
				opcodeTrader.detail = "opcode.Trader";
				opcodeTrader.insertText = new vscode.SnippetString('Trader');
				opcodeTrader.documentation = new vscode.MarkdownString("");
				results.push(opcodeTrader);				
				
				const opcodeTraderBuy = new vscode.CompletionItem('TraderBuy', vscode.CompletionItemKind.Property);
				
				opcodeTraderBuy.detail = "opcode.TraderBuy";
				opcodeTraderBuy.insertText = new vscode.SnippetString('TraderBuy');
				opcodeTraderBuy.documentation = new vscode.MarkdownString("");
				results.push(opcodeTraderBuy);				
				
				const opcodeTraderDelItem = new vscode.CompletionItem('TraderDelItem', vscode.CompletionItemKind.Property);
				
				opcodeTraderDelItem.detail = "opcode.TraderDelItem";
				opcodeTraderDelItem.insertText = new vscode.SnippetString('TraderDelItem');
				opcodeTraderDelItem.documentation = new vscode.MarkdownString("");
				results.push(opcodeTraderDelItem);				
				
				const opcodeTradeRequest = new vscode.CompletionItem('TradeRequest', vscode.CompletionItemKind.Property);
				
				opcodeTradeRequest.detail = "opcode.TradeRequest";
				opcodeTradeRequest.insertText = new vscode.SnippetString('TradeRequest');
				opcodeTradeRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeTradeRequest);				
				
				const opcodeTradeRequestAck = new vscode.CompletionItem('TradeRequestAck', vscode.CompletionItemKind.Property);
				
				opcodeTradeRequestAck.detail = "opcode.TradeRequestAck";
				opcodeTradeRequestAck.insertText = new vscode.SnippetString('TradeRequestAck');
				opcodeTradeRequestAck.documentation = new vscode.MarkdownString("");
				results.push(opcodeTradeRequestAck);				
				
				const opcodeTraderItemUpdate = new vscode.CompletionItem('TraderItemUpdate', vscode.CompletionItemKind.Property);
				
				opcodeTraderItemUpdate.detail = "opcode.TraderItemUpdate";
				opcodeTraderItemUpdate.insertText = new vscode.SnippetString('TraderItemUpdate');
				opcodeTraderItemUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeTraderItemUpdate);				
				
				const opcodeTraderShop = new vscode.CompletionItem('TraderShop', vscode.CompletionItemKind.Property);
				
				opcodeTraderShop.detail = "opcode.TraderShop";
				opcodeTraderShop.insertText = new vscode.SnippetString('TraderShop');
				opcodeTraderShop.documentation = new vscode.MarkdownString("");
				results.push(opcodeTraderShop);				
				
				const opcodeTradeSkillCombine = new vscode.CompletionItem('TradeSkillCombine', vscode.CompletionItemKind.Property);
				
				opcodeTradeSkillCombine.detail = "opcode.TradeSkillCombine";
				opcodeTradeSkillCombine.insertText = new vscode.SnippetString('TradeSkillCombine');
				opcodeTradeSkillCombine.documentation = new vscode.MarkdownString("");
				results.push(opcodeTradeSkillCombine);				
				
				const opcodeTranslocate = new vscode.CompletionItem('Translocate', vscode.CompletionItemKind.Property);
				
				opcodeTranslocate.detail = "opcode.Translocate";
				opcodeTranslocate.insertText = new vscode.SnippetString('Translocate');
				opcodeTranslocate.documentation = new vscode.MarkdownString("");
				results.push(opcodeTranslocate);				
				
				const opcodeTributeInfo = new vscode.CompletionItem('TributeInfo', vscode.CompletionItemKind.Property);
				
				opcodeTributeInfo.detail = "opcode.TributeInfo";
				opcodeTributeInfo.insertText = new vscode.SnippetString('TributeInfo');
				opcodeTributeInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeTributeInfo);				
				
				const opcodeTributeItem = new vscode.CompletionItem('TributeItem', vscode.CompletionItemKind.Property);
				
				opcodeTributeItem.detail = "opcode.TributeItem";
				opcodeTributeItem.insertText = new vscode.SnippetString('TributeItem');
				opcodeTributeItem.documentation = new vscode.MarkdownString("");
				results.push(opcodeTributeItem);				
				
				const opcodeTributeMoney = new vscode.CompletionItem('TributeMoney', vscode.CompletionItemKind.Property);
				
				opcodeTributeMoney.detail = "opcode.TributeMoney";
				opcodeTributeMoney.insertText = new vscode.SnippetString('TributeMoney');
				opcodeTributeMoney.documentation = new vscode.MarkdownString("");
				results.push(opcodeTributeMoney);				
				
				const opcodeTributeNPC = new vscode.CompletionItem('TributeNPC', vscode.CompletionItemKind.Property);
				
				opcodeTributeNPC.detail = "opcode.TributeNPC";
				opcodeTributeNPC.insertText = new vscode.SnippetString('TributeNPC');
				opcodeTributeNPC.documentation = new vscode.MarkdownString("");
				results.push(opcodeTributeNPC);				
				
				const opcodeTributePointUpdate = new vscode.CompletionItem('TributePointUpdate', vscode.CompletionItemKind.Property);
				
				opcodeTributePointUpdate.detail = "opcode.TributePointUpdate";
				opcodeTributePointUpdate.insertText = new vscode.SnippetString('TributePointUpdate');
				opcodeTributePointUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeTributePointUpdate);				
				
				const opcodeTributeTimer = new vscode.CompletionItem('TributeTimer', vscode.CompletionItemKind.Property);
				
				opcodeTributeTimer.detail = "opcode.TributeTimer";
				opcodeTributeTimer.insertText = new vscode.SnippetString('TributeTimer');
				opcodeTributeTimer.documentation = new vscode.MarkdownString("");
				results.push(opcodeTributeTimer);				
				
				const opcodeTributeToggle = new vscode.CompletionItem('TributeToggle', vscode.CompletionItemKind.Property);
				
				opcodeTributeToggle.detail = "opcode.TributeToggle";
				opcodeTributeToggle.insertText = new vscode.SnippetString('TributeToggle');
				opcodeTributeToggle.documentation = new vscode.MarkdownString("");
				results.push(opcodeTributeToggle);				
				
				const opcodeTributeUpdate = new vscode.CompletionItem('TributeUpdate', vscode.CompletionItemKind.Property);
				
				opcodeTributeUpdate.detail = "opcode.TributeUpdate";
				opcodeTributeUpdate.insertText = new vscode.SnippetString('TributeUpdate');
				opcodeTributeUpdate.documentation = new vscode.MarkdownString("");
				results.push(opcodeTributeUpdate);				
				
				const opcodeUntargetable = new vscode.CompletionItem('Untargetable', vscode.CompletionItemKind.Property);
				
				opcodeUntargetable.detail = "opcode.Untargetable";
				opcodeUntargetable.insertText = new vscode.SnippetString('Untargetable');
				opcodeUntargetable.documentation = new vscode.MarkdownString("");
				results.push(opcodeUntargetable);				
				
				const opcodeUpdateAA = new vscode.CompletionItem('UpdateAA', vscode.CompletionItemKind.Property);
				
				opcodeUpdateAA.detail = "opcode.UpdateAA";
				opcodeUpdateAA.insertText = new vscode.SnippetString('UpdateAA');
				opcodeUpdateAA.documentation = new vscode.MarkdownString("");
				results.push(opcodeUpdateAA);				
				
				const opcodeUpdateLeadershipAA = new vscode.CompletionItem('UpdateLeadershipAA', vscode.CompletionItemKind.Property);
				
				opcodeUpdateLeadershipAA.detail = "opcode.UpdateLeadershipAA";
				opcodeUpdateLeadershipAA.insertText = new vscode.SnippetString('UpdateLeadershipAA');
				opcodeUpdateLeadershipAA.documentation = new vscode.MarkdownString("");
				results.push(opcodeUpdateLeadershipAA);				
				
				const opcodeVetClaimReply = new vscode.CompletionItem('VetClaimReply', vscode.CompletionItemKind.Property);
				
				opcodeVetClaimReply.detail = "opcode.VetClaimReply";
				opcodeVetClaimReply.insertText = new vscode.SnippetString('VetClaimReply');
				opcodeVetClaimReply.documentation = new vscode.MarkdownString("");
				results.push(opcodeVetClaimReply);				
				
				const opcodeVetClaimRequest = new vscode.CompletionItem('VetClaimRequest', vscode.CompletionItemKind.Property);
				
				opcodeVetClaimRequest.detail = "opcode.VetClaimRequest";
				opcodeVetClaimRequest.insertText = new vscode.SnippetString('VetClaimRequest');
				opcodeVetClaimRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeVetClaimRequest);				
				
				const opcodeVetRewardsAvaliable = new vscode.CompletionItem('VetRewardsAvaliable', vscode.CompletionItemKind.Property);
				
				opcodeVetRewardsAvaliable.detail = "opcode.VetRewardsAvaliable";
				opcodeVetRewardsAvaliable.insertText = new vscode.SnippetString('VetRewardsAvaliable');
				opcodeVetRewardsAvaliable.documentation = new vscode.MarkdownString("");
				results.push(opcodeVetRewardsAvaliable);				
				
				const opcodeVoiceMacroIn = new vscode.CompletionItem('VoiceMacroIn', vscode.CompletionItemKind.Property);
				
				opcodeVoiceMacroIn.detail = "opcode.VoiceMacroIn";
				opcodeVoiceMacroIn.insertText = new vscode.SnippetString('VoiceMacroIn');
				opcodeVoiceMacroIn.documentation = new vscode.MarkdownString("");
				results.push(opcodeVoiceMacroIn);				
				
				const opcodeVoiceMacroOut = new vscode.CompletionItem('VoiceMacroOut', vscode.CompletionItemKind.Property);
				
				opcodeVoiceMacroOut.detail = "opcode.VoiceMacroOut";
				opcodeVoiceMacroOut.insertText = new vscode.SnippetString('VoiceMacroOut');
				opcodeVoiceMacroOut.documentation = new vscode.MarkdownString("");
				results.push(opcodeVoiceMacroOut);				
				
				const opcodeWeaponEquip1 = new vscode.CompletionItem('WeaponEquip1', vscode.CompletionItemKind.Property);
				
				opcodeWeaponEquip1.detail = "opcode.WeaponEquip1";
				opcodeWeaponEquip1.insertText = new vscode.SnippetString('WeaponEquip1');
				opcodeWeaponEquip1.documentation = new vscode.MarkdownString("");
				results.push(opcodeWeaponEquip1);				
				
				const opcodeWearChange = new vscode.CompletionItem('WearChange', vscode.CompletionItemKind.Property);
				
				opcodeWearChange.detail = "opcode.WearChange";
				opcodeWearChange.insertText = new vscode.SnippetString('WearChange');
				opcodeWearChange.documentation = new vscode.MarkdownString("");
				results.push(opcodeWearChange);				
				
				const opcodeWeather = new vscode.CompletionItem('Weather', vscode.CompletionItemKind.Property);
				
				opcodeWeather.detail = "opcode.Weather";
				opcodeWeather.insertText = new vscode.SnippetString('Weather');
				opcodeWeather.documentation = new vscode.MarkdownString("");
				results.push(opcodeWeather);				
				
				const opcodeWeblink = new vscode.CompletionItem('Weblink', vscode.CompletionItemKind.Property);
				
				opcodeWeblink.detail = "opcode.Weblink";
				opcodeWeblink.insertText = new vscode.SnippetString('Weblink');
				opcodeWeblink.documentation = new vscode.MarkdownString("");
				results.push(opcodeWeblink);				
				
				const opcodeWhoAllRequest = new vscode.CompletionItem('WhoAllRequest', vscode.CompletionItemKind.Property);
				
				opcodeWhoAllRequest.detail = "opcode.WhoAllRequest";
				opcodeWhoAllRequest.insertText = new vscode.SnippetString('WhoAllRequest');
				opcodeWhoAllRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeWhoAllRequest);				
				
				const opcodeWhoAllResponse = new vscode.CompletionItem('WhoAllResponse', vscode.CompletionItemKind.Property);
				
				opcodeWhoAllResponse.detail = "opcode.WhoAllResponse";
				opcodeWhoAllResponse.insertText = new vscode.SnippetString('WhoAllResponse');
				opcodeWhoAllResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeWhoAllResponse);				
				
				const opcodeWorldClientCRC1 = new vscode.CompletionItem('World_Client_CRC1', vscode.CompletionItemKind.Property);
				
				opcodeWorldClientCRC1.detail = "opcode.World_Client_CRC1";
				opcodeWorldClientCRC1.insertText = new vscode.SnippetString('World_Client_CRC1');
				opcodeWorldClientCRC1.documentation = new vscode.MarkdownString("");
				results.push(opcodeWorldClientCRC1);				
				
				const opcodeWorldClientCRC2 = new vscode.CompletionItem('World_Client_CRC2', vscode.CompletionItemKind.Property);
				
				opcodeWorldClientCRC2.detail = "opcode.World_Client_CRC2";
				opcodeWorldClientCRC2.insertText = new vscode.SnippetString('World_Client_CRC2');
				opcodeWorldClientCRC2.documentation = new vscode.MarkdownString("");
				results.push(opcodeWorldClientCRC2);				
				
				const opcodeWorldClientReady = new vscode.CompletionItem('WorldClientReady', vscode.CompletionItemKind.Property);
				
				opcodeWorldClientReady.detail = "opcode.WorldClientReady";
				opcodeWorldClientReady.insertText = new vscode.SnippetString('WorldClientReady');
				opcodeWorldClientReady.documentation = new vscode.MarkdownString("");
				results.push(opcodeWorldClientReady);				
				
				const opcodeWorldComplete = new vscode.CompletionItem('WorldComplete', vscode.CompletionItemKind.Property);
				
				opcodeWorldComplete.detail = "opcode.WorldComplete";
				opcodeWorldComplete.insertText = new vscode.SnippetString('WorldComplete');
				opcodeWorldComplete.documentation = new vscode.MarkdownString("");
				results.push(opcodeWorldComplete);				
				
				const opcodeWorldLogout = new vscode.CompletionItem('WorldLogout', vscode.CompletionItemKind.Property);
				
				opcodeWorldLogout.detail = "opcode.WorldLogout";
				opcodeWorldLogout.insertText = new vscode.SnippetString('WorldLogout');
				opcodeWorldLogout.documentation = new vscode.MarkdownString("");
				results.push(opcodeWorldLogout);				
				
				const opcodeWorldObjectsSent = new vscode.CompletionItem('WorldObjectsSent', vscode.CompletionItemKind.Property);
				
				opcodeWorldObjectsSent.detail = "opcode.WorldObjectsSent";
				opcodeWorldObjectsSent.insertText = new vscode.SnippetString('WorldObjectsSent');
				opcodeWorldObjectsSent.documentation = new vscode.MarkdownString("");
				results.push(opcodeWorldObjectsSent);				
				
				const opcodeWorldUnknown001 = new vscode.CompletionItem('WorldUnknown001', vscode.CompletionItemKind.Property);
				
				opcodeWorldUnknown001.detail = "opcode.WorldUnknown001";
				opcodeWorldUnknown001.insertText = new vscode.SnippetString('WorldUnknown001');
				opcodeWorldUnknown001.documentation = new vscode.MarkdownString("");
				results.push(opcodeWorldUnknown001);				
				
				const opcodeXTargetAutoAddHaters = new vscode.CompletionItem('XTargetAutoAddHaters', vscode.CompletionItemKind.Property);
				
				opcodeXTargetAutoAddHaters.detail = "opcode.XTargetAutoAddHaters";
				opcodeXTargetAutoAddHaters.insertText = new vscode.SnippetString('XTargetAutoAddHaters');
				opcodeXTargetAutoAddHaters.documentation = new vscode.MarkdownString("");
				results.push(opcodeXTargetAutoAddHaters);				
				
				const opcodeXTargetRequest = new vscode.CompletionItem('XTargetRequest', vscode.CompletionItemKind.Property);
				
				opcodeXTargetRequest.detail = "opcode.XTargetRequest";
				opcodeXTargetRequest.insertText = new vscode.SnippetString('XTargetRequest');
				opcodeXTargetRequest.documentation = new vscode.MarkdownString("");
				results.push(opcodeXTargetRequest);				
				
				const opcodeXTargetResponse = new vscode.CompletionItem('XTargetResponse', vscode.CompletionItemKind.Property);
				
				opcodeXTargetResponse.detail = "opcode.XTargetResponse";
				opcodeXTargetResponse.insertText = new vscode.SnippetString('XTargetResponse');
				opcodeXTargetResponse.documentation = new vscode.MarkdownString("");
				results.push(opcodeXTargetResponse);				
				
				const opcodeYellForHelp = new vscode.CompletionItem('YellForHelp', vscode.CompletionItemKind.Property);
				
				opcodeYellForHelp.detail = "opcode.YellForHelp";
				opcodeYellForHelp.insertText = new vscode.SnippetString('YellForHelp');
				opcodeYellForHelp.documentation = new vscode.MarkdownString("");
				results.push(opcodeYellForHelp);				
				
				const opcodeZoneChange = new vscode.CompletionItem('ZoneChange', vscode.CompletionItemKind.Property);
				
				opcodeZoneChange.detail = "opcode.ZoneChange";
				opcodeZoneChange.insertText = new vscode.SnippetString('ZoneChange');
				opcodeZoneChange.documentation = new vscode.MarkdownString("");
				results.push(opcodeZoneChange);				
				
				const opcodeZoneComplete = new vscode.CompletionItem('ZoneComplete', vscode.CompletionItemKind.Property);
				
				opcodeZoneComplete.detail = "opcode.ZoneComplete";
				opcodeZoneComplete.insertText = new vscode.SnippetString('ZoneComplete');
				opcodeZoneComplete.documentation = new vscode.MarkdownString("");
				results.push(opcodeZoneComplete);				
				
				const opcodeZoneEntry = new vscode.CompletionItem('ZoneEntry', vscode.CompletionItemKind.Property);
				
				opcodeZoneEntry.detail = "opcode.ZoneEntry";
				opcodeZoneEntry.insertText = new vscode.SnippetString('ZoneEntry');
				opcodeZoneEntry.documentation = new vscode.MarkdownString("");
				results.push(opcodeZoneEntry);				
				
				const opcodeZoneGuildList = new vscode.CompletionItem('ZoneGuildList', vscode.CompletionItemKind.Property);
				
				opcodeZoneGuildList.detail = "opcode.ZoneGuildList";
				opcodeZoneGuildList.insertText = new vscode.SnippetString('ZoneGuildList');
				opcodeZoneGuildList.documentation = new vscode.MarkdownString("");
				results.push(opcodeZoneGuildList);				
				
				const opcodeZoneInUnknown = new vscode.CompletionItem('ZoneInUnknown', vscode.CompletionItemKind.Property);
				
				opcodeZoneInUnknown.detail = "opcode.ZoneInUnknown";
				opcodeZoneInUnknown.insertText = new vscode.SnippetString('ZoneInUnknown');
				opcodeZoneInUnknown.documentation = new vscode.MarkdownString("");
				results.push(opcodeZoneInUnknown);				
				
				const opcodeZonePlayerToBind = new vscode.CompletionItem('ZonePlayerToBind', vscode.CompletionItemKind.Property);
				
				opcodeZonePlayerToBind.detail = "opcode.ZonePlayerToBind";
				opcodeZonePlayerToBind.insertText = new vscode.SnippetString('ZonePlayerToBind');
				opcodeZonePlayerToBind.documentation = new vscode.MarkdownString("");
				results.push(opcodeZonePlayerToBind);				
				
				const opcodeZoneServerInfo = new vscode.CompletionItem('ZoneServerInfo', vscode.CompletionItemKind.Property);
				
				opcodeZoneServerInfo.detail = "opcode.ZoneServerInfo";
				opcodeZoneServerInfo.insertText = new vscode.SnippetString('ZoneServerInfo');
				opcodeZoneServerInfo.documentation = new vscode.MarkdownString("");
				results.push(opcodeZoneServerInfo);				
				
				const opcodeZoneServerReady = new vscode.CompletionItem('ZoneServerReady', vscode.CompletionItemKind.Property);
				
				opcodeZoneServerReady.detail = "opcode.ZoneServerReady";
				opcodeZoneServerReady.insertText = new vscode.SnippetString('ZoneServerReady');
				opcodeZoneServerReady.documentation = new vscode.MarkdownString("");
				results.push(opcodeZoneServerReady);				
				
				const opcodeZoneSpawns = new vscode.CompletionItem('ZoneSpawns', vscode.CompletionItemKind.Property);
				
				opcodeZoneSpawns.detail = "opcode.ZoneSpawns";
				opcodeZoneSpawns.insertText = new vscode.SnippetString('ZoneSpawns');
				opcodeZoneSpawns.documentation = new vscode.MarkdownString("");
				results.push(opcodeZoneSpawns);				
				
				const opcodeZoneUnavail = new vscode.CompletionItem('ZoneUnavail', vscode.CompletionItemKind.Property);
				
				opcodeZoneUnavail.detail = "opcode.ZoneUnavail";
				opcodeZoneUnavail.insertText = new vscode.SnippetString('ZoneUnavail');
				opcodeZoneUnavail.documentation = new vscode.MarkdownString("");
				results.push(opcodeZoneUnavail);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('packet.')) {
					return undefined;
				}
				
				
				const packetGetOpcode = new vscode.CompletionItem('GetOpcode', vscode.CompletionItemKind.Method);
				
				packetGetOpcode.detail = "packet.GetOpcode()";
				packetGetOpcode.insertText = new vscode.SnippetString('GetOpcode()');
				packetGetOpcode.documentation = new vscode.MarkdownString("");
				results.push(packetGetOpcode);				
				
				const packetGetRawOpcode = new vscode.CompletionItem('GetRawOpcode', vscode.CompletionItemKind.Method);
				
				packetGetRawOpcode.detail = "packet.GetRawOpcode()";
				packetGetRawOpcode.insertText = new vscode.SnippetString('GetRawOpcode()');
				packetGetRawOpcode.documentation = new vscode.MarkdownString("");
				results.push(packetGetRawOpcode);				
				
				const packetGetSize = new vscode.CompletionItem('GetSize', vscode.CompletionItemKind.Method);
				
				packetGetSize.detail = "packet.GetSize()";
				packetGetSize.insertText = new vscode.SnippetString('GetSize()');
				packetGetSize.documentation = new vscode.MarkdownString("");
				results.push(packetGetSize);				
				
				const packetReadDouble = new vscode.CompletionItem('ReadDouble', vscode.CompletionItemKind.Method);
				
				packetReadDouble.detail = "packet.ReadDouble()";
				packetReadDouble.insertText = new vscode.SnippetString('ReadDouble()');
				packetReadDouble.documentation = new vscode.MarkdownString("");
				results.push(packetReadDouble);				
				
				const packetReadFixedLengthString = new vscode.CompletionItem('ReadFixedLengthString', vscode.CompletionItemKind.Method);
				
				packetReadFixedLengthString.detail = "packet.ReadFixedLengthString()";
				packetReadFixedLengthString.insertText = new vscode.SnippetString('ReadFixedLengthString()');
				packetReadFixedLengthString.documentation = new vscode.MarkdownString("");
				results.push(packetReadFixedLengthString);				
				
				const packetReadFloat = new vscode.CompletionItem('ReadFloat', vscode.CompletionItemKind.Method);
				
				packetReadFloat.detail = "packet.ReadFloat()";
				packetReadFloat.insertText = new vscode.SnippetString('ReadFloat()');
				packetReadFloat.documentation = new vscode.MarkdownString("");
				results.push(packetReadFloat);				
				
				const packetReadString = new vscode.CompletionItem('ReadString', vscode.CompletionItemKind.Method);
				
				packetReadString.detail = "packet.ReadString()";
				packetReadString.insertText = new vscode.SnippetString('ReadString()');
				packetReadString.documentation = new vscode.MarkdownString("");
				results.push(packetReadString);				
				
				const packetSetOpcode = new vscode.CompletionItem('SetOpcode', vscode.CompletionItemKind.Method);
				
				packetSetOpcode.detail = "packet.SetOpcode()";
				packetSetOpcode.insertText = new vscode.SnippetString('SetOpcode()');
				packetSetOpcode.documentation = new vscode.MarkdownString("");
				results.push(packetSetOpcode);				
				
				const packetSetRawOpcode = new vscode.CompletionItem('SetRawOpcode', vscode.CompletionItemKind.Method);
				
				packetSetRawOpcode.detail = "packet.SetRawOpcode()";
				packetSetRawOpcode.insertText = new vscode.SnippetString('SetRawOpcode()');
				packetSetRawOpcode.documentation = new vscode.MarkdownString("");
				results.push(packetSetRawOpcode);				
				
				const packetWriteDouble = new vscode.CompletionItem('WriteDouble', vscode.CompletionItemKind.Method);
				
				packetWriteDouble.detail = "packet.WriteDouble()";
				packetWriteDouble.insertText = new vscode.SnippetString('WriteDouble()');
				packetWriteDouble.documentation = new vscode.MarkdownString("");
				results.push(packetWriteDouble);				
				
				const packetWriteFixedLengthString = new vscode.CompletionItem('WriteFixedLengthString', vscode.CompletionItemKind.Method);
				
				packetWriteFixedLengthString.detail = "packet.WriteFixedLengthString()";
				packetWriteFixedLengthString.insertText = new vscode.SnippetString('WriteFixedLengthString()');
				packetWriteFixedLengthString.documentation = new vscode.MarkdownString("");
				results.push(packetWriteFixedLengthString);				
				
				const packetWriteFloat = new vscode.CompletionItem('WriteFloat', vscode.CompletionItemKind.Method);
				
				packetWriteFloat.detail = "packet.WriteFloat()";
				packetWriteFloat.insertText = new vscode.SnippetString('WriteFloat()');
				packetWriteFloat.documentation = new vscode.MarkdownString("");
				results.push(packetWriteFloat);				
				
				const packetWriteString = new vscode.CompletionItem('WriteString', vscode.CompletionItemKind.Method);
				
				packetWriteString.detail = "packet.WriteString()";
				packetWriteString.insertText = new vscode.SnippetString('WriteString()');
				packetWriteString.documentation = new vscode.MarkdownString("");
				results.push(packetWriteString);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('raid.')) {
					return undefined;
				}
				
				
				const raidBalanceHP = new vscode.CompletionItem('BalanceHP', vscode.CompletionItemKind.Method);
				
				raidBalanceHP.detail = "raid.BalanceHP()";
				raidBalanceHP.insertText = new vscode.SnippetString('BalanceHP()');
				raidBalanceHP.documentation = new vscode.MarkdownString("");
				results.push(raidBalanceHP);				
				
				const raidCastGroupSpell = new vscode.CompletionItem('CastGroupSpell', vscode.CompletionItemKind.Method);
				
				raidCastGroupSpell.detail = "raid.CastGroupSpell()";
				raidCastGroupSpell.insertText = new vscode.SnippetString('CastGroupSpell()');
				raidCastGroupSpell.documentation = new vscode.MarkdownString("");
				results.push(raidCastGroupSpell);				
				
				const raidGetClientByIndex = new vscode.CompletionItem('GetClientByIndex', vscode.CompletionItemKind.Method);
				
				raidGetClientByIndex.detail = "raid.GetClientByIndex()";
				raidGetClientByIndex.insertText = new vscode.SnippetString('GetClientByIndex()');
				raidGetClientByIndex.documentation = new vscode.MarkdownString("");
				results.push(raidGetClientByIndex);				
				
				const raidGetGroup = new vscode.CompletionItem('GetGroup', vscode.CompletionItemKind.Method);
				
				raidGetGroup.detail = "raid.GetGroup()";
				raidGetGroup.insertText = new vscode.SnippetString('GetGroup()');
				raidGetGroup.documentation = new vscode.MarkdownString("");
				results.push(raidGetGroup);				
				
				const raidGetGroupNumber = new vscode.CompletionItem('GetGroupNumber', vscode.CompletionItemKind.Method);
				
				raidGetGroupNumber.detail = "raid.GetGroupNumber()";
				raidGetGroupNumber.insertText = new vscode.SnippetString('GetGroupNumber()');
				raidGetGroupNumber.documentation = new vscode.MarkdownString("");
				results.push(raidGetGroupNumber);				
				
				const raidGetHighestLevel = new vscode.CompletionItem('GetHighestLevel', vscode.CompletionItemKind.Method);
				
				raidGetHighestLevel.detail = "raid.GetHighestLevel()";
				raidGetHighestLevel.insertText = new vscode.SnippetString('GetHighestLevel()');
				raidGetHighestLevel.documentation = new vscode.MarkdownString("");
				results.push(raidGetHighestLevel);				
				
				const raidGetID = new vscode.CompletionItem('GetID', vscode.CompletionItemKind.Method);
				
				raidGetID.detail = "raid.GetID()";
				raidGetID.insertText = new vscode.SnippetString('GetID()');
				raidGetID.documentation = new vscode.MarkdownString("");
				results.push(raidGetID);				
				
				const raidGetLowestLevel = new vscode.CompletionItem('GetLowestLevel', vscode.CompletionItemKind.Method);
				
				raidGetLowestLevel.detail = "raid.GetLowestLevel()";
				raidGetLowestLevel.insertText = new vscode.SnippetString('GetLowestLevel()');
				raidGetLowestLevel.documentation = new vscode.MarkdownString("");
				results.push(raidGetLowestLevel);				
				
				const raidGetMember = new vscode.CompletionItem('GetMember', vscode.CompletionItemKind.Method);
				
				raidGetMember.detail = "raid.GetMember()";
				raidGetMember.insertText = new vscode.SnippetString('GetMember()');
				raidGetMember.documentation = new vscode.MarkdownString("");
				results.push(raidGetMember);				
				
				const raidGetTotalRaidDamage = new vscode.CompletionItem('GetTotalRaidDamage', vscode.CompletionItemKind.Method);
				
				raidGetTotalRaidDamage.detail = "raid.GetTotalRaidDamage()";
				raidGetTotalRaidDamage.insertText = new vscode.SnippetString('GetTotalRaidDamage()');
				raidGetTotalRaidDamage.documentation = new vscode.MarkdownString("");
				results.push(raidGetTotalRaidDamage);				
				
				const raidGroupCount = new vscode.CompletionItem('GroupCount', vscode.CompletionItemKind.Method);
				
				raidGroupCount.detail = "raid.GroupCount()";
				raidGroupCount.insertText = new vscode.SnippetString('GroupCount()');
				raidGroupCount.documentation = new vscode.MarkdownString("");
				results.push(raidGroupCount);				
				
				const raidIsGroupLeader = new vscode.CompletionItem('IsGroupLeader', vscode.CompletionItemKind.Method);
				
				raidIsGroupLeader.detail = "raid.IsGroupLeader()";
				raidIsGroupLeader.insertText = new vscode.SnippetString('IsGroupLeader()');
				raidIsGroupLeader.documentation = new vscode.MarkdownString("");
				results.push(raidIsGroupLeader);				
				
				const raidIsLeader = new vscode.CompletionItem('IsLeader', vscode.CompletionItemKind.Method);
				
				raidIsLeader.detail = "raid.IsLeader()";
				raidIsLeader.insertText = new vscode.SnippetString('IsLeader()');
				raidIsLeader.documentation = new vscode.MarkdownString("");
				results.push(raidIsLeader);				
				
				const raidIsRaidMember = new vscode.CompletionItem('IsRaidMember', vscode.CompletionItemKind.Method);
				
				raidIsRaidMember.detail = "raid.IsRaidMember()";
				raidIsRaidMember.insertText = new vscode.SnippetString('IsRaidMember()');
				raidIsRaidMember.documentation = new vscode.MarkdownString("");
				results.push(raidIsRaidMember);				
				
				const raidRaidCount = new vscode.CompletionItem('RaidCount', vscode.CompletionItemKind.Method);
				
				raidRaidCount.detail = "raid.RaidCount()";
				raidRaidCount.insertText = new vscode.SnippetString('RaidCount()');
				raidRaidCount.documentation = new vscode.MarkdownString("");
				results.push(raidRaidCount);				
				
				const raidSplitExp = new vscode.CompletionItem('SplitExp', vscode.CompletionItemKind.Method);
				
				raidSplitExp.detail = "raid.SplitExp()";
				raidSplitExp.insertText = new vscode.SnippetString('SplitExp()');
				raidSplitExp.documentation = new vscode.MarkdownString("");
				results.push(raidSplitExp);				
				
				const raidSplitMoney = new vscode.CompletionItem('SplitMoney', vscode.CompletionItemKind.Method);
				
				raidSplitMoney.detail = "raid.SplitMoney()";
				raidSplitMoney.insertText = new vscode.SnippetString('SplitMoney()');
				raidSplitMoney.documentation = new vscode.MarkdownString("");
				results.push(raidSplitMoney);				
				
				const raidTeleportGroup = new vscode.CompletionItem('TeleportGroup', vscode.CompletionItemKind.Method);
				
				raidTeleportGroup.detail = "raid.TeleportGroup()";
				raidTeleportGroup.insertText = new vscode.SnippetString('TeleportGroup()');
				raidTeleportGroup.documentation = new vscode.MarkdownString("");
				results.push(raidTeleportGroup);				
				
				const raidTeleportRaid = new vscode.CompletionItem('TeleportRaid', vscode.CompletionItemKind.Method);
				
				raidTeleportRaid.detail = "raid.TeleportRaid()";
				raidTeleportRaid.insertText = new vscode.SnippetString('TeleportRaid()');
				raidTeleportRaid.documentation = new vscode.MarkdownString("");
				results.push(raidTeleportRaid);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('random.')) {
					return undefined;
				}
				
				
				const randomInt = new vscode.CompletionItem('Int', vscode.CompletionItemKind.Method);
				
				randomInt.detail = "random.Int()";
				randomInt.insertText = new vscode.SnippetString('Int()');
				randomInt.documentation = new vscode.MarkdownString("");
				results.push(randomInt);				
				
				const randomReal = new vscode.CompletionItem('Real', vscode.CompletionItemKind.Method);
				
				randomReal.detail = "random.Real()";
				randomReal.insertText = new vscode.SnippetString('Real()');
				randomReal.documentation = new vscode.MarkdownString("");
				results.push(randomReal);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('rule.')) {
					return undefined;
				}
				
				
				const ruleBoolRuleCount = new vscode.CompletionItem('_BoolRuleCount', vscode.CompletionItemKind.Method);
				
				ruleBoolRuleCount.detail = "rule._BoolRuleCount()";
				ruleBoolRuleCount.insertText = new vscode.SnippetString('_BoolRuleCount()');
				ruleBoolRuleCount.documentation = new vscode.MarkdownString("");
				results.push(ruleBoolRuleCount);				
				
				const ruleIntRuleCount = new vscode.CompletionItem('_IntRuleCount', vscode.CompletionItemKind.Method);
				
				ruleIntRuleCount.detail = "rule._IntRuleCount()";
				ruleIntRuleCount.insertText = new vscode.SnippetString('_IntRuleCount()');
				ruleIntRuleCount.documentation = new vscode.MarkdownString("");
				results.push(ruleIntRuleCount);				
				
				const ruleRealRuleCount = new vscode.CompletionItem('_RealRuleCount', vscode.CompletionItemKind.Method);
				
				ruleRealRuleCount.detail = "rule._RealRuleCount()";
				ruleRealRuleCount.insertText = new vscode.SnippetString('_RealRuleCount()');
				ruleRealRuleCount.documentation = new vscode.MarkdownString("");
				results.push(ruleRealRuleCount);				
				
				const ruleAAExpMultiplier = new vscode.CompletionItem('AAExpMultiplier', vscode.CompletionItemKind.Method);
				
				ruleAAExpMultiplier.detail = "rule.AAExpMultiplier()";
				ruleAAExpMultiplier.insertText = new vscode.SnippetString('AAExpMultiplier()');
				ruleAAExpMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleAAExpMultiplier);				
				
				const ruleAAMitigationACFactor = new vscode.CompletionItem('AAMitigationACFactor', vscode.CompletionItemKind.Method);
				
				ruleAAMitigationACFactor.detail = "rule.AAMitigationACFactor()";
				ruleAAMitigationACFactor.insertText = new vscode.SnippetString('AAMitigationACFactor()');
				ruleAAMitigationACFactor.documentation = new vscode.MarkdownString("");
				results.push(ruleAAMitigationACFactor);				
				
				const ruleACthac0Factor = new vscode.CompletionItem('ACthac0Factor', vscode.CompletionItemKind.Method);
				
				ruleACthac0Factor.detail = "rule.ACthac0Factor()";
				ruleACthac0Factor.insertText = new vscode.SnippetString('ACthac0Factor()');
				ruleACthac0Factor.documentation = new vscode.MarkdownString("");
				results.push(ruleACthac0Factor);				
				
				const ruleACthac20Factor = new vscode.CompletionItem('ACthac20Factor', vscode.CompletionItemKind.Method);
				
				ruleACthac20Factor.detail = "rule.ACthac20Factor()";
				ruleACthac20Factor.insertText = new vscode.SnippetString('ACthac20Factor()');
				ruleACthac20Factor.documentation = new vscode.MarkdownString("");
				results.push(ruleACthac20Factor);				
				
				const ruleActiveInvSnapshots = new vscode.CompletionItem('ActiveInvSnapshots', vscode.CompletionItemKind.Method);
				
				ruleActiveInvSnapshots.detail = "rule.ActiveInvSnapshots()";
				ruleActiveInvSnapshots.insertText = new vscode.SnippetString('ActiveInvSnapshots()');
				ruleActiveInvSnapshots.documentation = new vscode.MarkdownString("");
				results.push(ruleActiveInvSnapshots);				
				
				const ruleAdditiveBonusWornType = new vscode.CompletionItem('AdditiveBonusWornType', vscode.CompletionItemKind.Method);
				
				ruleAdditiveBonusWornType.detail = "rule.AdditiveBonusWornType()";
				ruleAdditiveBonusWornType.insertText = new vscode.SnippetString('AdditiveBonusWornType()');
				ruleAdditiveBonusWornType.documentation = new vscode.MarkdownString("");
				results.push(ruleAdditiveBonusWornType);				
				
				const ruleAddMaxClientsPerIP = new vscode.CompletionItem('AddMaxClientsPerIP', vscode.CompletionItemKind.Method);
				
				ruleAddMaxClientsPerIP.detail = "rule.AddMaxClientsPerIP()";
				ruleAddMaxClientsPerIP.insertText = new vscode.SnippetString('AddMaxClientsPerIP()');
				ruleAddMaxClientsPerIP.documentation = new vscode.MarkdownString("");
				results.push(ruleAddMaxClientsPerIP);				
				
				const ruleAddMaxClientsStatus = new vscode.CompletionItem('AddMaxClientsStatus', vscode.CompletionItemKind.Method);
				
				ruleAddMaxClientsStatus.detail = "rule.AddMaxClientsStatus()";
				ruleAddMaxClientsStatus.insertText = new vscode.SnippetString('AddMaxClientsStatus()');
				ruleAddMaxClientsStatus.documentation = new vscode.MarkdownString("");
				results.push(ruleAddMaxClientsStatus);				
				
				const ruleAdjustProcPerMinute = new vscode.CompletionItem('AdjustProcPerMinute', vscode.CompletionItemKind.Method);
				
				ruleAdjustProcPerMinute.detail = "rule.AdjustProcPerMinute()";
				ruleAdjustProcPerMinute.insertText = new vscode.SnippetString('AdjustProcPerMinute()');
				ruleAdjustProcPerMinute.documentation = new vscode.MarkdownString("");
				results.push(ruleAdjustProcPerMinute);				
				
				const ruleAdjustSpecialProcPerMinute = new vscode.CompletionItem('AdjustSpecialProcPerMinute', vscode.CompletionItemKind.Method);
				
				ruleAdjustSpecialProcPerMinute.detail = "rule.AdjustSpecialProcPerMinute()";
				ruleAdjustSpecialProcPerMinute.insertText = new vscode.SnippetString('AdjustSpecialProcPerMinute()');
				ruleAdjustSpecialProcPerMinute.documentation = new vscode.MarkdownString("");
				results.push(ruleAdjustSpecialProcPerMinute);				
				
				const ruleAERampageSafeZone = new vscode.CompletionItem('AERampageSafeZone', vscode.CompletionItemKind.Method);
				
				ruleAERampageSafeZone.detail = "rule.AERampageSafeZone()";
				ruleAERampageSafeZone.insertText = new vscode.SnippetString('AERampageSafeZone()');
				ruleAERampageSafeZone.documentation = new vscode.MarkdownString("");
				results.push(ruleAERampageSafeZone);				
				
				const ruleAggroRadius = new vscode.CompletionItem('AggroRadius', vscode.CompletionItemKind.Method);
				
				ruleAggroRadius.detail = "rule.AggroRadius()";
				ruleAggroRadius.insertText = new vscode.SnippetString('AggroRadius()');
				ruleAggroRadius.documentation = new vscode.MarkdownString("");
				results.push(ruleAggroRadius);				
				
				const ruleAggroRadiusPuller = new vscode.CompletionItem('AggroRadiusPuller', vscode.CompletionItemKind.Method);
				
				ruleAggroRadiusPuller.detail = "rule.AggroRadiusPuller()";
				ruleAggroRadiusPuller.insertText = new vscode.SnippetString('AggroRadiusPuller()');
				ruleAggroRadiusPuller.documentation = new vscode.MarkdownString("");
				results.push(ruleAggroRadiusPuller);				
				
				const ruleAgiHitFactor = new vscode.CompletionItem('AgiHitFactor', vscode.CompletionItemKind.Method);
				
				ruleAgiHitFactor.detail = "rule.AgiHitFactor()";
				ruleAgiHitFactor.insertText = new vscode.SnippetString('AgiHitFactor()');
				ruleAgiHitFactor.documentation = new vscode.MarkdownString("");
				results.push(ruleAgiHitFactor);				
				
				const ruleAIEngagedBeneficialOtherChance = new vscode.CompletionItem('AI_EngagedBeneficialOtherChance', vscode.CompletionItemKind.Method);
				
				ruleAIEngagedBeneficialOtherChance.detail = "rule.AI_EngagedBeneficialOtherChance()";
				ruleAIEngagedBeneficialOtherChance.insertText = new vscode.SnippetString('AI_EngagedBeneficialOtherChance()');
				ruleAIEngagedBeneficialOtherChance.documentation = new vscode.MarkdownString("");
				results.push(ruleAIEngagedBeneficialOtherChance);				
				
				const ruleAIEngagedBeneficialSelfChance = new vscode.CompletionItem('AI_EngagedBeneficialSelfChance', vscode.CompletionItemKind.Method);
				
				ruleAIEngagedBeneficialSelfChance.detail = "rule.AI_EngagedBeneficialSelfChance()";
				ruleAIEngagedBeneficialSelfChance.insertText = new vscode.SnippetString('AI_EngagedBeneficialSelfChance()');
				ruleAIEngagedBeneficialSelfChance.documentation = new vscode.MarkdownString("");
				results.push(ruleAIEngagedBeneficialSelfChance);				
				
				const ruleAIEngagedDetrimentalChance = new vscode.CompletionItem('AI_EngagedDetrimentalChance', vscode.CompletionItemKind.Method);
				
				ruleAIEngagedDetrimentalChance.detail = "rule.AI_EngagedDetrimentalChance()";
				ruleAIEngagedDetrimentalChance.insertText = new vscode.SnippetString('AI_EngagedDetrimentalChance()');
				ruleAIEngagedDetrimentalChance.documentation = new vscode.MarkdownString("");
				results.push(ruleAIEngagedDetrimentalChance);				
				
				const ruleAIEngagedNoSpellMaxRecast = new vscode.CompletionItem('AI_EngagedNoSpellMaxRecast', vscode.CompletionItemKind.Method);
				
				ruleAIEngagedNoSpellMaxRecast.detail = "rule.AI_EngagedNoSpellMaxRecast()";
				ruleAIEngagedNoSpellMaxRecast.insertText = new vscode.SnippetString('AI_EngagedNoSpellMaxRecast()');
				ruleAIEngagedNoSpellMaxRecast.documentation = new vscode.MarkdownString("");
				results.push(ruleAIEngagedNoSpellMaxRecast);				
				
				const ruleAIEngagedNoSpellMinRecast = new vscode.CompletionItem('AI_EngagedNoSpellMinRecast', vscode.CompletionItemKind.Method);
				
				ruleAIEngagedNoSpellMinRecast.detail = "rule.AI_EngagedNoSpellMinRecast()";
				ruleAIEngagedNoSpellMinRecast.insertText = new vscode.SnippetString('AI_EngagedNoSpellMinRecast()');
				ruleAIEngagedNoSpellMinRecast.documentation = new vscode.MarkdownString("");
				results.push(ruleAIEngagedNoSpellMinRecast);				
				
				const ruleAIHealHPPct = new vscode.CompletionItem('AI_HealHPPct', vscode.CompletionItemKind.Method);
				
				ruleAIHealHPPct.detail = "rule.AI_HealHPPct()";
				ruleAIHealHPPct.insertText = new vscode.SnippetString('AI_HealHPPct()');
				ruleAIHealHPPct.documentation = new vscode.MarkdownString("");
				results.push(ruleAIHealHPPct);				
				
				const ruleAIIdleBeneficialChance = new vscode.CompletionItem('AI_IdleBeneficialChance', vscode.CompletionItemKind.Method);
				
				ruleAIIdleBeneficialChance.detail = "rule.AI_IdleBeneficialChance()";
				ruleAIIdleBeneficialChance.insertText = new vscode.SnippetString('AI_IdleBeneficialChance()');
				ruleAIIdleBeneficialChance.documentation = new vscode.MarkdownString("");
				results.push(ruleAIIdleBeneficialChance);				
				
				const ruleAIIdleNoSpellMaxRecast = new vscode.CompletionItem('AI_IdleNoSpellMaxRecast', vscode.CompletionItemKind.Method);
				
				ruleAIIdleNoSpellMaxRecast.detail = "rule.AI_IdleNoSpellMaxRecast()";
				ruleAIIdleNoSpellMaxRecast.insertText = new vscode.SnippetString('AI_IdleNoSpellMaxRecast()');
				ruleAIIdleNoSpellMaxRecast.documentation = new vscode.MarkdownString("");
				results.push(ruleAIIdleNoSpellMaxRecast);				
				
				const ruleAIIdleNoSpellMinRecast = new vscode.CompletionItem('AI_IdleNoSpellMinRecast', vscode.CompletionItemKind.Method);
				
				ruleAIIdleNoSpellMinRecast.detail = "rule.AI_IdleNoSpellMinRecast()";
				ruleAIIdleNoSpellMinRecast.insertText = new vscode.SnippetString('AI_IdleNoSpellMinRecast()');
				ruleAIIdleNoSpellMinRecast.documentation = new vscode.MarkdownString("");
				results.push(ruleAIIdleNoSpellMinRecast);				
				
				const ruleAIPursueDetrimentalChance = new vscode.CompletionItem('AI_PursueDetrimentalChance', vscode.CompletionItemKind.Method);
				
				ruleAIPursueDetrimentalChance.detail = "rule.AI_PursueDetrimentalChance()";
				ruleAIPursueDetrimentalChance.insertText = new vscode.SnippetString('AI_PursueDetrimentalChance()');
				ruleAIPursueDetrimentalChance.documentation = new vscode.MarkdownString("");
				results.push(ruleAIPursueDetrimentalChance);				
				
				const ruleAIPursueNoSpellMaxRecast = new vscode.CompletionItem('AI_PursueNoSpellMaxRecast', vscode.CompletionItemKind.Method);
				
				ruleAIPursueNoSpellMaxRecast.detail = "rule.AI_PursueNoSpellMaxRecast()";
				ruleAIPursueNoSpellMaxRecast.insertText = new vscode.SnippetString('AI_PursueNoSpellMaxRecast()');
				ruleAIPursueNoSpellMaxRecast.documentation = new vscode.MarkdownString("");
				results.push(ruleAIPursueNoSpellMaxRecast);				
				
				const ruleAIPursueNoSpellMinRecast = new vscode.CompletionItem('AI_PursueNoSpellMinRecast', vscode.CompletionItemKind.Method);
				
				ruleAIPursueNoSpellMinRecast.detail = "rule.AI_PursueNoSpellMinRecast()";
				ruleAIPursueNoSpellMinRecast.insertText = new vscode.SnippetString('AI_PursueNoSpellMinRecast()');
				ruleAIPursueNoSpellMinRecast.documentation = new vscode.MarkdownString("");
				results.push(ruleAIPursueNoSpellMinRecast);				
				
				const ruleAISpellCastFinishedFailRecast = new vscode.CompletionItem('AI_SpellCastFinishedFailRecast', vscode.CompletionItemKind.Method);
				
				ruleAISpellCastFinishedFailRecast.detail = "rule.AI_SpellCastFinishedFailRecast()";
				ruleAISpellCastFinishedFailRecast.insertText = new vscode.SnippetString('AI_SpellCastFinishedFailRecast()');
				ruleAISpellCastFinishedFailRecast.documentation = new vscode.MarkdownString("");
				results.push(ruleAISpellCastFinishedFailRecast);				
				
				const ruleAllowAnyWeaponTransformation = new vscode.CompletionItem('AllowAnyWeaponTransformation', vscode.CompletionItemKind.Method);
				
				ruleAllowAnyWeaponTransformation.detail = "rule.AllowAnyWeaponTransformation()";
				ruleAllowAnyWeaponTransformation.insertText = new vscode.SnippetString('AllowAnyWeaponTransformation()');
				ruleAllowAnyWeaponTransformation.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowAnyWeaponTransformation);				
				
				const ruleAllowApplyPoisonCommand = new vscode.CompletionItem('AllowApplyPoisonCommand', vscode.CompletionItemKind.Method);
				
				ruleAllowApplyPoisonCommand.detail = "rule.AllowApplyPoisonCommand()";
				ruleAllowApplyPoisonCommand.insertText = new vscode.SnippetString('AllowApplyPoisonCommand()');
				ruleAllowApplyPoisonCommand.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowApplyPoisonCommand);				
				
				const ruleAllowApplyPotionCommand = new vscode.CompletionItem('AllowApplyPotionCommand', vscode.CompletionItemKind.Method);
				
				ruleAllowApplyPotionCommand.detail = "rule.AllowApplyPotionCommand()";
				ruleAllowApplyPotionCommand.insertText = new vscode.SnippetString('AllowApplyPotionCommand()');
				ruleAllowApplyPotionCommand.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowApplyPotionCommand);				
				
				const ruleAllowCamelCaseNames = new vscode.CompletionItem('AllowCamelCaseNames', vscode.CompletionItemKind.Method);
				
				ruleAllowCamelCaseNames.detail = "rule.AllowCamelCaseNames()";
				ruleAllowCamelCaseNames.insertText = new vscode.SnippetString('AllowCamelCaseNames()');
				ruleAllowCamelCaseNames.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowCamelCaseNames);				
				
				const ruleAllowCorpse = new vscode.CompletionItem('AllowCorpse', vscode.CompletionItemKind.Method);
				
				ruleAllowCorpse.detail = "rule.AllowCorpse()";
				ruleAllowCorpse.insertText = new vscode.SnippetString('AllowCorpse()');
				ruleAllowCorpse.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowCorpse);				
				
				const ruleAllowCrossClassTrainers = new vscode.CompletionItem('AllowCrossClassTrainers', vscode.CompletionItemKind.Method);
				
				ruleAllowCrossClassTrainers.detail = "rule.AllowCrossClassTrainers()";
				ruleAllowCrossClassTrainers.insertText = new vscode.SnippetString('AllowCrossClassTrainers()');
				ruleAllowCrossClassTrainers.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowCrossClassTrainers);				
				
				const ruleAllowedClasses = new vscode.CompletionItem('AllowedClasses', vscode.CompletionItemKind.Method);
				
				ruleAllowedClasses.detail = "rule.AllowedClasses()";
				ruleAllowedClasses.insertText = new vscode.SnippetString('AllowedClasses()');
				ruleAllowedClasses.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowedClasses);				
				
				const ruleAllowedGenders = new vscode.CompletionItem('AllowedGenders', vscode.CompletionItemKind.Method);
				
				ruleAllowedGenders.detail = "rule.AllowedGenders()";
				ruleAllowedGenders.insertText = new vscode.SnippetString('AllowedGenders()');
				ruleAllowedGenders.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowedGenders);				
				
				const ruleAllowedRaces = new vscode.CompletionItem('AllowedRaces', vscode.CompletionItemKind.Method);
				
				ruleAllowedRaces.detail = "rule.AllowedRaces()";
				ruleAllowedRaces.insertText = new vscode.SnippetString('AllowedRaces()');
				ruleAllowedRaces.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowedRaces);				
				
				const ruleAllowItemTGB = new vscode.CompletionItem('AllowItemTGB', vscode.CompletionItemKind.Method);
				
				ruleAllowItemTGB.detail = "rule.AllowItemTGB()";
				ruleAllowItemTGB.insertText = new vscode.SnippetString('AllowItemTGB()');
				ruleAllowItemTGB.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowItemTGB);				
				
				const ruleAllowMercs = new vscode.CompletionItem('AllowMercs', vscode.CompletionItemKind.Method);
				
				ruleAllowMercs.detail = "rule.AllowMercs()";
				ruleAllowMercs.insertText = new vscode.SnippetString('AllowMercs()');
				ruleAllowMercs.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowMercs);				
				
				const ruleAllowMercSuspendInCombat = new vscode.CompletionItem('AllowMercSuspendInCombat', vscode.CompletionItemKind.Method);
				
				ruleAllowMercSuspendInCombat.detail = "rule.AllowMercSuspendInCombat()";
				ruleAllowMercSuspendInCombat.insertText = new vscode.SnippetString('AllowMercSuspendInCombat()');
				ruleAllowMercSuspendInCombat.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowMercSuspendInCombat);				
				
				const ruleAllowMQTarget = new vscode.CompletionItem('AllowMQTarget', vscode.CompletionItemKind.Method);
				
				ruleAllowMQTarget.detail = "rule.AllowMQTarget()";
				ruleAllowMQTarget.insertText = new vscode.SnippetString('AllowMQTarget()');
				ruleAllowMQTarget.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowMQTarget);				
				
				const ruleAllowMultiplePetitions = new vscode.CompletionItem('AllowMultiplePetitions', vscode.CompletionItemKind.Method);
				
				ruleAllowMultiplePetitions.detail = "rule.AllowMultiplePetitions()";
				ruleAllowMultiplePetitions.insertText = new vscode.SnippetString('AllowMultiplePetitions()');
				ruleAllowMultiplePetitions.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowMultiplePetitions);				
				
				const ruleAllowOwnerOptionAltCombat = new vscode.CompletionItem('AllowOwnerOptionAltCombat', vscode.CompletionItemKind.Method);
				
				ruleAllowOwnerOptionAltCombat.detail = "rule.AllowOwnerOptionAltCombat()";
				ruleAllowOwnerOptionAltCombat.insertText = new vscode.SnippetString('AllowOwnerOptionAltCombat()');
				ruleAllowOwnerOptionAltCombat.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowOwnerOptionAltCombat);				
				
				const ruleAllowOwnerOptionAutoDefend = new vscode.CompletionItem('AllowOwnerOptionAutoDefend', vscode.CompletionItemKind.Method);
				
				ruleAllowOwnerOptionAutoDefend.detail = "rule.AllowOwnerOptionAutoDefend()";
				ruleAllowOwnerOptionAutoDefend.insertText = new vscode.SnippetString('AllowOwnerOptionAutoDefend()');
				ruleAllowOwnerOptionAutoDefend.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowOwnerOptionAutoDefend);				
				
				const ruleAllowTickPulling = new vscode.CompletionItem('AllowTickPulling', vscode.CompletionItemKind.Method);
				
				ruleAllowTickPulling.detail = "rule.AllowTickPulling()";
				ruleAllowTickPulling.insertText = new vscode.SnippetString('AllowTickPulling()');
				ruleAllowTickPulling.documentation = new vscode.MarkdownString("");
				results.push(ruleAllowTickPulling);				
				
				const ruleAllyFactionMinimum = new vscode.CompletionItem('AllyFactionMinimum', vscode.CompletionItemKind.Method);
				
				ruleAllyFactionMinimum.detail = "rule.AllyFactionMinimum()";
				ruleAllyFactionMinimum.insertText = new vscode.SnippetString('AllyFactionMinimum()');
				ruleAllyFactionMinimum.documentation = new vscode.MarkdownString("");
				results.push(ruleAllyFactionMinimum);				
				
				const ruleAlwaysSendTargetsBuffs = new vscode.CompletionItem('AlwaysSendTargetsBuffs', vscode.CompletionItemKind.Method);
				
				ruleAlwaysSendTargetsBuffs.detail = "rule.AlwaysSendTargetsBuffs()";
				ruleAlwaysSendTargetsBuffs.insertText = new vscode.SnippetString('AlwaysSendTargetsBuffs()');
				ruleAlwaysSendTargetsBuffs.documentation = new vscode.MarkdownString("");
				results.push(ruleAlwaysSendTargetsBuffs);				
				
				const ruleAmiablyFactionMinimum = new vscode.CompletionItem('AmiablyFactionMinimum', vscode.CompletionItemKind.Method);
				
				ruleAmiablyFactionMinimum.detail = "rule.AmiablyFactionMinimum()";
				ruleAmiablyFactionMinimum.insertText = new vscode.SnippetString('AmiablyFactionMinimum()');
				ruleAmiablyFactionMinimum.documentation = new vscode.MarkdownString("");
				results.push(ruleAmiablyFactionMinimum);				
				
				const ruleApprehensivelyFactionMinimum = new vscode.CompletionItem('ApprehensivelyFactionMinimum', vscode.CompletionItemKind.Method);
				
				ruleApprehensivelyFactionMinimum.detail = "rule.ApprehensivelyFactionMinimum()";
				ruleApprehensivelyFactionMinimum.insertText = new vscode.SnippetString('ApprehensivelyFactionMinimum()');
				ruleApprehensivelyFactionMinimum.documentation = new vscode.MarkdownString("");
				results.push(ruleApprehensivelyFactionMinimum);				
				
				const ruleArcheryBaseDamageBonus = new vscode.CompletionItem('ArcheryBaseDamageBonus', vscode.CompletionItemKind.Method);
				
				ruleArcheryBaseDamageBonus.detail = "rule.ArcheryBaseDamageBonus()";
				ruleArcheryBaseDamageBonus.insertText = new vscode.SnippetString('ArcheryBaseDamageBonus()');
				ruleArcheryBaseDamageBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleArcheryBaseDamageBonus);				
				
				const ruleArcheryBonusChance = new vscode.CompletionItem('ArcheryBonusChance', vscode.CompletionItemKind.Method);
				
				ruleArcheryBonusChance.detail = "rule.ArcheryBonusChance()";
				ruleArcheryBonusChance.insertText = new vscode.SnippetString('ArcheryBonusChance()');
				ruleArcheryBonusChance.documentation = new vscode.MarkdownString("");
				results.push(ruleArcheryBonusChance);				
				
				const ruleArcheryBonusRequiresStationary = new vscode.CompletionItem('ArcheryBonusRequiresStationary', vscode.CompletionItemKind.Method);
				
				ruleArcheryBonusRequiresStationary.detail = "rule.ArcheryBonusRequiresStationary()";
				ruleArcheryBonusRequiresStationary.insertText = new vscode.SnippetString('ArcheryBonusRequiresStationary()');
				ruleArcheryBonusRequiresStationary.documentation = new vscode.MarkdownString("");
				results.push(ruleArcheryBonusRequiresStationary);				
				
				const ruleArcheryCritDifficulty = new vscode.CompletionItem('ArcheryCritDifficulty', vscode.CompletionItemKind.Method);
				
				ruleArcheryCritDifficulty.detail = "rule.ArcheryCritDifficulty()";
				ruleArcheryCritDifficulty.insertText = new vscode.SnippetString('ArcheryCritDifficulty()');
				ruleArcheryCritDifficulty.documentation = new vscode.MarkdownString("");
				results.push(ruleArcheryCritDifficulty);				
				
				const ruleArcheryHitPenalty = new vscode.CompletionItem('ArcheryHitPenalty', vscode.CompletionItemKind.Method);
				
				ruleArcheryHitPenalty.detail = "rule.ArcheryHitPenalty()";
				ruleArcheryHitPenalty.insertText = new vscode.SnippetString('ArcheryHitPenalty()');
				ruleArcheryHitPenalty.documentation = new vscode.MarkdownString("");
				results.push(ruleArcheryHitPenalty);				
				
				const ruleArcheryNPCMultiplier = new vscode.CompletionItem('ArcheryNPCMultiplier', vscode.CompletionItemKind.Method);
				
				ruleArcheryNPCMultiplier.detail = "rule.ArcheryNPCMultiplier()";
				ruleArcheryNPCMultiplier.insertText = new vscode.SnippetString('ArcheryNPCMultiplier()');
				ruleArcheryNPCMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleArcheryNPCMultiplier);				
				
				const ruleAssistNoTargetSelf = new vscode.CompletionItem('AssistNoTargetSelf', vscode.CompletionItemKind.Method);
				
				ruleAssistNoTargetSelf.detail = "rule.AssistNoTargetSelf()";
				ruleAssistNoTargetSelf.insertText = new vscode.SnippetString('AssistNoTargetSelf()');
				ruleAssistNoTargetSelf.documentation = new vscode.MarkdownString("");
				results.push(ruleAssistNoTargetSelf);				
				
				const ruleAttackCommandRange = new vscode.CompletionItem('AttackCommandRange', vscode.CompletionItemKind.Method);
				
				ruleAttackCommandRange.detail = "rule.AttackCommandRange()";
				ruleAttackCommandRange.insertText = new vscode.SnippetString('AttackCommandRange()');
				ruleAttackCommandRange.documentation = new vscode.MarkdownString("");
				results.push(ruleAttackCommandRange);				
				
				const ruleAuditTrail = new vscode.CompletionItem('AuditTrail', vscode.CompletionItemKind.Method);
				
				ruleAuditTrail.detail = "rule.AuditTrail()";
				ruleAuditTrail.insertText = new vscode.SnippetString('AuditTrail()');
				ruleAuditTrail.documentation = new vscode.MarkdownString("");
				results.push(ruleAuditTrail);				
				
				const ruleAutosaveIntervalS = new vscode.CompletionItem('AutosaveIntervalS', vscode.CompletionItemKind.Method);
				
				ruleAutosaveIntervalS.detail = "rule.AutosaveIntervalS()";
				ruleAutosaveIntervalS.insertText = new vscode.SnippetString('AutosaveIntervalS()');
				ruleAutosaveIntervalS.documentation = new vscode.MarkdownString("");
				results.push(ruleAutosaveIntervalS);				
				
				const ruleAutoShutdownDelay = new vscode.CompletionItem('AutoShutdownDelay', vscode.CompletionItemKind.Method);
				
				ruleAutoShutdownDelay.detail = "rule.AutoShutdownDelay()";
				ruleAutoShutdownDelay.insertText = new vscode.SnippetString('AutoShutdownDelay()');
				ruleAutoShutdownDelay.documentation = new vscode.MarkdownString("");
				results.push(ruleAutoShutdownDelay);				
				
				const ruleAvgDefProcsPerMinute = new vscode.CompletionItem('AvgDefProcsPerMinute', vscode.CompletionItemKind.Method);
				
				ruleAvgDefProcsPerMinute.detail = "rule.AvgDefProcsPerMinute()";
				ruleAvgDefProcsPerMinute.insertText = new vscode.SnippetString('AvgDefProcsPerMinute()');
				ruleAvgDefProcsPerMinute.documentation = new vscode.MarkdownString("");
				results.push(ruleAvgDefProcsPerMinute);				
				
				const ruleAvgProcsPerMinute = new vscode.CompletionItem('AvgProcsPerMinute', vscode.CompletionItemKind.Method);
				
				ruleAvgProcsPerMinute.detail = "rule.AvgProcsPerMinute()";
				ruleAvgProcsPerMinute.insertText = new vscode.SnippetString('AvgProcsPerMinute()');
				ruleAvgProcsPerMinute.documentation = new vscode.MarkdownString("");
				results.push(ruleAvgProcsPerMinute);				
				
				const ruleAvgSpecialProcsPerMinute = new vscode.CompletionItem('AvgSpecialProcsPerMinute', vscode.CompletionItemKind.Method);
				
				ruleAvgSpecialProcsPerMinute.detail = "rule.AvgSpecialProcsPerMinute()";
				ruleAvgSpecialProcsPerMinute.insertText = new vscode.SnippetString('AvgSpecialProcsPerMinute()');
				ruleAvgSpecialProcsPerMinute.documentation = new vscode.MarkdownString("");
				results.push(ruleAvgSpecialProcsPerMinute);				
				
				const ruleAvgSpellProcsPerMinute = new vscode.CompletionItem('AvgSpellProcsPerMinute', vscode.CompletionItemKind.Method);
				
				ruleAvgSpellProcsPerMinute.detail = "rule.AvgSpellProcsPerMinute()";
				ruleAvgSpellProcsPerMinute.insertText = new vscode.SnippetString('AvgSpellProcsPerMinute()');
				ruleAvgSpellProcsPerMinute.documentation = new vscode.MarkdownString("");
				results.push(ruleAvgSpellProcsPerMinute);				
				
				const ruleAvoidanceCap = new vscode.CompletionItem('AvoidanceCap', vscode.CompletionItemKind.Method);
				
				ruleAvoidanceCap.detail = "rule.AvoidanceCap()";
				ruleAvoidanceCap.insertText = new vscode.SnippetString('AvoidanceCap()');
				ruleAvoidanceCap.documentation = new vscode.MarkdownString("");
				results.push(ruleAvoidanceCap);				
				
				const ruleBackstabBonus = new vscode.CompletionItem('BackstabBonus', vscode.CompletionItemKind.Method);
				
				ruleBackstabBonus.detail = "rule.BackstabBonus()";
				ruleBackstabBonus.insertText = new vscode.SnippetString('BackstabBonus()');
				ruleBackstabBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleBackstabBonus);				
				
				const ruleBaseCritChance = new vscode.CompletionItem('BaseCritChance', vscode.CompletionItemKind.Method);
				
				ruleBaseCritChance.detail = "rule.BaseCritChance()";
				ruleBaseCritChance.insertText = new vscode.SnippetString('BaseCritChance()');
				ruleBaseCritChance.documentation = new vscode.MarkdownString("");
				results.push(ruleBaseCritChance);				
				
				const ruleBaseCritRatio = new vscode.CompletionItem('BaseCritRatio', vscode.CompletionItemKind.Method);
				
				ruleBaseCritRatio.detail = "rule.BaseCritRatio()";
				ruleBaseCritRatio.insertText = new vscode.SnippetString('BaseCritRatio()');
				ruleBaseCritRatio.documentation = new vscode.MarkdownString("");
				results.push(ruleBaseCritRatio);				
				
				const ruleBaseHitChance = new vscode.CompletionItem('BaseHitChance', vscode.CompletionItemKind.Method);
				
				ruleBaseHitChance.detail = "rule.BaseHitChance()";
				ruleBaseHitChance.insertText = new vscode.SnippetString('BaseHitChance()');
				ruleBaseHitChance.documentation = new vscode.MarkdownString("");
				results.push(ruleBaseHitChance);				
				
				const ruleBaseHPRegenBonusRaces = new vscode.CompletionItem('BaseHPRegenBonusRaces', vscode.CompletionItemKind.Method);
				
				ruleBaseHPRegenBonusRaces.detail = "rule.BaseHPRegenBonusRaces()";
				ruleBaseHPRegenBonusRaces.insertText = new vscode.SnippetString('BaseHPRegenBonusRaces()');
				ruleBaseHPRegenBonusRaces.documentation = new vscode.MarkdownString("");
				results.push(ruleBaseHPRegenBonusRaces);				
				
				const ruleBaseImmunityLevel = new vscode.CompletionItem('BaseImmunityLevel', vscode.CompletionItemKind.Method);
				
				ruleBaseImmunityLevel.detail = "rule.BaseImmunityLevel()";
				ruleBaseImmunityLevel.insertText = new vscode.SnippetString('BaseImmunityLevel()');
				ruleBaseImmunityLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleBaseImmunityLevel);				
				
				const ruleBaseInstrumentSoftCap = new vscode.CompletionItem('BaseInstrumentSoftCap', vscode.CompletionItemKind.Method);
				
				ruleBaseInstrumentSoftCap.detail = "rule.BaseInstrumentSoftCap()";
				ruleBaseInstrumentSoftCap.insertText = new vscode.SnippetString('BaseInstrumentSoftCap()');
				ruleBaseInstrumentSoftCap.documentation = new vscode.MarkdownString("");
				results.push(ruleBaseInstrumentSoftCap);				
				
				const ruleBaseProcChance = new vscode.CompletionItem('BaseProcChance', vscode.CompletionItemKind.Method);
				
				ruleBaseProcChance.detail = "rule.BaseProcChance()";
				ruleBaseProcChance.insertText = new vscode.SnippetString('BaseProcChance()');
				ruleBaseProcChance.documentation = new vscode.MarkdownString("");
				results.push(ruleBaseProcChance);				
				
				const ruleBaseRunSpeedCap = new vscode.CompletionItem('BaseRunSpeedCap', vscode.CompletionItemKind.Method);
				
				ruleBaseRunSpeedCap.detail = "rule.BaseRunSpeedCap()";
				ruleBaseRunSpeedCap.insertText = new vscode.SnippetString('BaseRunSpeedCap()');
				ruleBaseRunSpeedCap.documentation = new vscode.MarkdownString("");
				results.push(ruleBaseRunSpeedCap);				
				
				const ruleBeginCast = new vscode.CompletionItem('BeginCast', vscode.CompletionItemKind.Method);
				
				ruleBeginCast.detail = "rule.BeginCast()";
				ruleBeginCast.insertText = new vscode.SnippetString('BeginCast()');
				ruleBeginCast.documentation = new vscode.MarkdownString("");
				results.push(ruleBeginCast);				
				
				const ruleBerserkerFrenzyEnd = new vscode.CompletionItem('BerserkerFrenzyEnd', vscode.CompletionItemKind.Method);
				
				ruleBerserkerFrenzyEnd.detail = "rule.BerserkerFrenzyEnd()";
				ruleBerserkerFrenzyEnd.insertText = new vscode.SnippetString('BerserkerFrenzyEnd()');
				ruleBerserkerFrenzyEnd.documentation = new vscode.MarkdownString("");
				results.push(ruleBerserkerFrenzyEnd);				
				
				const ruleBerserkerFrenzyStart = new vscode.CompletionItem('BerserkerFrenzyStart', vscode.CompletionItemKind.Method);
				
				ruleBerserkerFrenzyStart.detail = "rule.BerserkerFrenzyStart()";
				ruleBerserkerFrenzyStart.insertText = new vscode.SnippetString('BerserkerFrenzyStart()');
				ruleBerserkerFrenzyStart.documentation = new vscode.MarkdownString("");
				results.push(ruleBerserkerFrenzyStart);				
				
				const ruleBindAnywhere = new vscode.CompletionItem('BindAnywhere', vscode.CompletionItemKind.Method);
				
				ruleBindAnywhere.detail = "rule.BindAnywhere()";
				ruleBindAnywhere.insertText = new vscode.SnippetString('BindAnywhere()');
				ruleBindAnywhere.documentation = new vscode.MarkdownString("");
				results.push(ruleBindAnywhere);				
				
				const ruleBlueModifier = new vscode.CompletionItem('BlueModifier', vscode.CompletionItemKind.Method);
				
				ruleBlueModifier.detail = "rule.BlueModifier()";
				ruleBlueModifier.insertText = new vscode.SnippetString('BlueModifier()');
				ruleBlueModifier.documentation = new vscode.MarkdownString("");
				results.push(ruleBlueModifier);				
				
				const ruleBotBardUseOutOfCombatSongs = new vscode.CompletionItem('BotBardUseOutOfCombatSongs', vscode.CompletionItemKind.Method);
				
				ruleBotBardUseOutOfCombatSongs.detail = "rule.BotBardUseOutOfCombatSongs()";
				ruleBotBardUseOutOfCombatSongs.insertText = new vscode.SnippetString('BotBardUseOutOfCombatSongs()');
				ruleBotBardUseOutOfCombatSongs.documentation = new vscode.MarkdownString("");
				results.push(ruleBotBardUseOutOfCombatSongs);				
				
				const ruleBotCharacterLevel = new vscode.CompletionItem('BotCharacterLevel', vscode.CompletionItemKind.Method);
				
				ruleBotCharacterLevel.detail = "rule.BotCharacterLevel()";
				ruleBotCharacterLevel.insertText = new vscode.SnippetString('BotCharacterLevel()');
				ruleBotCharacterLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleBotCharacterLevel);				
				
				const ruleBotCharacterLevelEnabled = new vscode.CompletionItem('BotCharacterLevelEnabled', vscode.CompletionItemKind.Method);
				
				ruleBotCharacterLevelEnabled.detail = "rule.BotCharacterLevelEnabled()";
				ruleBotCharacterLevelEnabled.insertText = new vscode.SnippetString('BotCharacterLevelEnabled()');
				ruleBotCharacterLevelEnabled.documentation = new vscode.MarkdownString("");
				results.push(ruleBotCharacterLevelEnabled);				
				
				const ruleBotExpansionSettings = new vscode.CompletionItem('BotExpansionSettings', vscode.CompletionItemKind.Method);
				
				ruleBotExpansionSettings.detail = "rule.BotExpansionSettings()";
				ruleBotExpansionSettings.insertText = new vscode.SnippetString('BotExpansionSettings()');
				ruleBotExpansionSettings.documentation = new vscode.MarkdownString("");
				results.push(ruleBotExpansionSettings);				
				
				const ruleBotGroupXP = new vscode.CompletionItem('BotGroupXP', vscode.CompletionItemKind.Method);
				
				ruleBotGroupXP.detail = "rule.BotGroupXP()";
				ruleBotGroupXP.insertText = new vscode.SnippetString('BotGroupXP()');
				ruleBotGroupXP.documentation = new vscode.MarkdownString("");
				results.push(ruleBotGroupXP);				
				
				const ruleBotLevelsWithOwner = new vscode.CompletionItem('BotLevelsWithOwner', vscode.CompletionItemKind.Method);
				
				ruleBotLevelsWithOwner.detail = "rule.BotLevelsWithOwner()";
				ruleBotLevelsWithOwner.insertText = new vscode.SnippetString('BotLevelsWithOwner()');
				ruleBotLevelsWithOwner.documentation = new vscode.MarkdownString("");
				results.push(ruleBotLevelsWithOwner);				
				
				const ruleBuffFriends = new vscode.CompletionItem('BuffFriends', vscode.CompletionItemKind.Method);
				
				ruleBuffFriends.detail = "rule.BuffFriends()";
				ruleBuffFriends.insertText = new vscode.SnippetString('BuffFriends()');
				ruleBuffFriends.documentation = new vscode.MarkdownString("");
				results.push(ruleBuffFriends);				
				
				const ruleBuffLevelRestrictions = new vscode.CompletionItem('BuffLevelRestrictions', vscode.CompletionItemKind.Method);
				
				ruleBuffLevelRestrictions.detail = "rule.BuffLevelRestrictions()";
				ruleBuffLevelRestrictions.insertText = new vscode.SnippetString('BuffLevelRestrictions()');
				ruleBuffLevelRestrictions.documentation = new vscode.MarkdownString("");
				results.push(ruleBuffLevelRestrictions);				
				
				const ruleBuyCostMod = new vscode.CompletionItem('BuyCostMod', vscode.CompletionItemKind.Method);
				
				ruleBuyCostMod.detail = "rule.BuyCostMod()";
				ruleBuyCostMod.insertText = new vscode.SnippetString('BuyCostMod()');
				ruleBuyCostMod.documentation = new vscode.MarkdownString("");
				results.push(ruleBuyCostMod);				
				
				const ruleCanTakeNoDrop = new vscode.CompletionItem('CanTakeNoDrop', vscode.CompletionItemKind.Method);
				
				ruleCanTakeNoDrop.detail = "rule.CanTakeNoDrop()";
				ruleCanTakeNoDrop.insertText = new vscode.SnippetString('CanTakeNoDrop()');
				ruleCanTakeNoDrop.documentation = new vscode.MarkdownString("");
				results.push(ruleCanTakeNoDrop);				
				
				const ruleCasterACSoftcapReturn = new vscode.CompletionItem('CasterACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				ruleCasterACSoftcapReturn.detail = "rule.CasterACSoftcapReturn()";
				ruleCasterACSoftcapReturn.insertText = new vscode.SnippetString('CasterACSoftcapReturn()');
				ruleCasterACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(ruleCasterACSoftcapReturn);				
				
				const ruleCasterStopMeleeLevel = new vscode.CompletionItem('CasterStopMeleeLevel', vscode.CompletionItemKind.Method);
				
				ruleCasterStopMeleeLevel.detail = "rule.CasterStopMeleeLevel()";
				ruleCasterStopMeleeLevel.insertText = new vscode.SnippetString('CasterStopMeleeLevel()');
				ruleCasterStopMeleeLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleCasterStopMeleeLevel);				
				
				const ruleChaBonusMod = new vscode.CompletionItem('ChaBonusMod', vscode.CompletionItemKind.Method);
				
				ruleChaBonusMod.detail = "rule.ChaBonusMod()";
				ruleChaBonusMod.insertText = new vscode.SnippetString('ChaBonusMod()');
				ruleChaBonusMod.documentation = new vscode.MarkdownString("");
				results.push(ruleChaBonusMod);				
				
				const ruleChainACSoftcap = new vscode.CompletionItem('ChainACSoftcap', vscode.CompletionItemKind.Method);
				
				ruleChainACSoftcap.detail = "rule.ChainACSoftcap()";
				ruleChainACSoftcap.insertText = new vscode.SnippetString('ChainACSoftcap()');
				ruleChainACSoftcap.documentation = new vscode.MarkdownString("");
				results.push(ruleChainACSoftcap);				
				
				const ruleChaPenaltyMod = new vscode.CompletionItem('ChaPenaltyMod', vscode.CompletionItemKind.Method);
				
				ruleChaPenaltyMod.detail = "rule.ChaPenaltyMod()";
				ruleChaPenaltyMod.insertText = new vscode.SnippetString('ChaPenaltyMod()');
				ruleChaPenaltyMod.documentation = new vscode.MarkdownString("");
				results.push(ruleChaPenaltyMod);				
				
				const ruleChargeMercPurchaseCost = new vscode.CompletionItem('ChargeMercPurchaseCost', vscode.CompletionItemKind.Method);
				
				ruleChargeMercPurchaseCost.detail = "rule.ChargeMercPurchaseCost()";
				ruleChargeMercPurchaseCost.insertText = new vscode.SnippetString('ChargeMercPurchaseCost()');
				ruleChargeMercPurchaseCost.documentation = new vscode.MarkdownString("");
				results.push(ruleChargeMercPurchaseCost);				
				
				const ruleChargeMercUpkeepCost = new vscode.CompletionItem('ChargeMercUpkeepCost', vscode.CompletionItemKind.Method);
				
				ruleChargeMercUpkeepCost.detail = "rule.ChargeMercUpkeepCost()";
				ruleChargeMercUpkeepCost.insertText = new vscode.SnippetString('ChargeMercUpkeepCost()');
				ruleChargeMercUpkeepCost.documentation = new vscode.MarkdownString("");
				results.push(ruleChargeMercUpkeepCost);				
				
				const ruleCharismaCharmDuration = new vscode.CompletionItem('CharismaCharmDuration', vscode.CompletionItemKind.Method);
				
				ruleCharismaCharmDuration.detail = "rule.CharismaCharmDuration()";
				ruleCharismaCharmDuration.insertText = new vscode.SnippetString('CharismaCharmDuration()');
				ruleCharismaCharmDuration.documentation = new vscode.MarkdownString("");
				results.push(ruleCharismaCharmDuration);				
				
				const ruleCharismaEffectiveness = new vscode.CompletionItem('CharismaEffectiveness', vscode.CompletionItemKind.Method);
				
				ruleCharismaEffectiveness.detail = "rule.CharismaEffectiveness()";
				ruleCharismaEffectiveness.insertText = new vscode.SnippetString('CharismaEffectiveness()');
				ruleCharismaEffectiveness.documentation = new vscode.MarkdownString("");
				results.push(ruleCharismaEffectiveness);				
				
				const ruleCharismaEffectivenessCap = new vscode.CompletionItem('CharismaEffectivenessCap', vscode.CompletionItemKind.Method);
				
				ruleCharismaEffectivenessCap.detail = "rule.CharismaEffectivenessCap()";
				ruleCharismaEffectivenessCap.insertText = new vscode.SnippetString('CharismaEffectivenessCap()');
				ruleCharismaEffectivenessCap.documentation = new vscode.MarkdownString("");
				results.push(ruleCharismaEffectivenessCap);				
				
				const ruleCharmBreakCheckChance = new vscode.CompletionItem('CharmBreakCheckChance', vscode.CompletionItemKind.Method);
				
				ruleCharmBreakCheckChance.detail = "rule.CharmBreakCheckChance()";
				ruleCharmBreakCheckChance.insertText = new vscode.SnippetString('CharmBreakCheckChance()');
				ruleCharmBreakCheckChance.documentation = new vscode.MarkdownString("");
				results.push(ruleCharmBreakCheckChance);				
				
				const ruleCharmDisablesSpecialAbilities = new vscode.CompletionItem('CharmDisablesSpecialAbilities', vscode.CompletionItemKind.Method);
				
				ruleCharmDisablesSpecialAbilities.detail = "rule.CharmDisablesSpecialAbilities()";
				ruleCharmDisablesSpecialAbilities.insertText = new vscode.SnippetString('CharmDisablesSpecialAbilities()');
				ruleCharmDisablesSpecialAbilities.documentation = new vscode.MarkdownString("");
				results.push(ruleCharmDisablesSpecialAbilities);				
				
				const ruleCheckCursorEmptyWhenLooting = new vscode.CompletionItem('CheckCursorEmptyWhenLooting', vscode.CompletionItemKind.Method);
				
				ruleCheckCursorEmptyWhenLooting.detail = "rule.CheckCursorEmptyWhenLooting()";
				ruleCheckCursorEmptyWhenLooting.insertText = new vscode.SnippetString('CheckCursorEmptyWhenLooting()');
				ruleCheckCursorEmptyWhenLooting.documentation = new vscode.MarkdownString("");
				results.push(ruleCheckCursorEmptyWhenLooting);				
				
				const ruleCheckForWaterAtWaypoints = new vscode.CompletionItem('CheckForWaterAtWaypoints', vscode.CompletionItemKind.Method);
				
				ruleCheckForWaterAtWaypoints.detail = "rule.CheckForWaterAtWaypoints()";
				ruleCheckForWaterAtWaypoints.insertText = new vscode.SnippetString('CheckForWaterAtWaypoints()');
				ruleCheckForWaterAtWaypoints.documentation = new vscode.MarkdownString("");
				results.push(ruleCheckForWaterAtWaypoints);				
				
				const ruleCheckForWaterOnSendTo = new vscode.CompletionItem('CheckForWaterOnSendTo', vscode.CompletionItemKind.Method);
				
				ruleCheckForWaterOnSendTo.detail = "rule.CheckForWaterOnSendTo()";
				ruleCheckForWaterOnSendTo.insertText = new vscode.SnippetString('CheckForWaterOnSendTo()');
				ruleCheckForWaterOnSendTo.documentation = new vscode.MarkdownString("");
				results.push(ruleCheckForWaterOnSendTo);				
				
				const ruleCheckForWaterWhenFishing = new vscode.CompletionItem('CheckForWaterWhenFishing', vscode.CompletionItemKind.Method);
				
				ruleCheckForWaterWhenFishing.detail = "rule.CheckForWaterWhenFishing()";
				ruleCheckForWaterWhenFishing.insertText = new vscode.SnippetString('CheckForWaterWhenFishing()');
				ruleCheckForWaterWhenFishing.documentation = new vscode.MarkdownString("");
				results.push(ruleCheckForWaterWhenFishing);				
				
				const ruleCheckForWaterWhenMoving = new vscode.CompletionItem('CheckForWaterWhenMoving', vscode.CompletionItemKind.Method);
				
				ruleCheckForWaterWhenMoving.detail = "rule.CheckForWaterWhenMoving()";
				ruleCheckForWaterWhenMoving.insertText = new vscode.SnippetString('CheckForWaterWhenMoving()');
				ruleCheckForWaterWhenMoving.documentation = new vscode.MarkdownString("");
				results.push(ruleCheckForWaterWhenMoving);				
				
				const ruleCheckWaypointsInWaterWhenLoading = new vscode.CompletionItem('CheckWaypointsInWaterWhenLoading', vscode.CompletionItemKind.Method);
				
				ruleCheckWaypointsInWaterWhenLoading.detail = "rule.CheckWaypointsInWaterWhenLoading()";
				ruleCheckWaypointsInWaterWhenLoading.insertText = new vscode.SnippetString('CheckWaypointsInWaterWhenLoading()');
				ruleCheckWaypointsInWaterWhenLoading.documentation = new vscode.MarkdownString("");
				results.push(ruleCheckWaypointsInWaterWhenLoading);				
				
				const ruleClassicMasterWu = new vscode.CompletionItem('ClassicMasterWu', vscode.CompletionItemKind.Method);
				
				ruleClassicMasterWu.detail = "rule.ClassicMasterWu()";
				ruleClassicMasterWu.insertText = new vscode.SnippetString('ClassicMasterWu()');
				ruleClassicMasterWu.documentation = new vscode.MarkdownString("");
				results.push(ruleClassicMasterWu);				
				
				const ruleClassicNPCBackstab = new vscode.CompletionItem('ClassicNPCBackstab', vscode.CompletionItemKind.Method);
				
				ruleClassicNPCBackstab.detail = "rule.ClassicNPCBackstab()";
				ruleClassicNPCBackstab.insertText = new vscode.SnippetString('ClassicNPCBackstab()');
				ruleClassicNPCBackstab.documentation = new vscode.MarkdownString("");
				results.push(ruleClassicNPCBackstab);				
				
				const ruleClearTempMerchantlist = new vscode.CompletionItem('ClearTempMerchantlist', vscode.CompletionItemKind.Method);
				
				ruleClearTempMerchantlist.detail = "rule.ClearTempMerchantlist()";
				ruleClearTempMerchantlist.insertText = new vscode.SnippetString('ClearTempMerchantlist()');
				ruleClearTempMerchantlist.documentation = new vscode.MarkdownString("");
				results.push(ruleClearTempMerchantlist);				
				
				const ruleClientAggroCheckInterval = new vscode.CompletionItem('ClientAggroCheckInterval', vscode.CompletionItemKind.Method);
				
				ruleClientAggroCheckInterval.detail = "rule.ClientAggroCheckInterval()";
				ruleClientAggroCheckInterval.insertText = new vscode.SnippetString('ClientAggroCheckInterval()');
				ruleClientAggroCheckInterval.documentation = new vscode.MarkdownString("");
				results.push(ruleClientAggroCheckInterval);				
				
				const ruleClientDataRate = new vscode.CompletionItem('ClientDataRate', vscode.CompletionItemKind.Method);
				
				ruleClientDataRate.detail = "rule.ClientDataRate()";
				ruleClientDataRate.insertText = new vscode.SnippetString('ClientDataRate()');
				ruleClientDataRate.documentation = new vscode.MarkdownString("");
				results.push(ruleClientDataRate);				
				
				const ruleClientLinkdeadMS = new vscode.CompletionItem('ClientLinkdeadMS', vscode.CompletionItemKind.Method);
				
				ruleClientLinkdeadMS.detail = "rule.ClientLinkdeadMS()";
				ruleClientLinkdeadMS.insertText = new vscode.SnippetString('ClientLinkdeadMS()');
				ruleClientLinkdeadMS.documentation = new vscode.MarkdownString("");
				results.push(ruleClientLinkdeadMS);				
				
				const ruleClientPositionUpdates = new vscode.CompletionItem('ClientPositionUpdates', vscode.CompletionItemKind.Method);
				
				ruleClientPositionUpdates.detail = "rule.ClientPositionUpdates()";
				ruleClientPositionUpdates.insertText = new vscode.SnippetString('ClientPositionUpdates()');
				ruleClientPositionUpdates.documentation = new vscode.MarkdownString("");
				results.push(ruleClientPositionUpdates);				
				
				const ruleClientStunLevel = new vscode.CompletionItem('ClientStunLevel', vscode.CompletionItemKind.Method);
				
				ruleClientStunLevel.detail = "rule.ClientStunLevel()";
				ruleClientStunLevel.insertText = new vscode.SnippetString('ClientStunLevel()');
				ruleClientStunLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleClientStunLevel);				
				
				const ruleClothACSoftcap = new vscode.CompletionItem('ClothACSoftcap', vscode.CompletionItemKind.Method);
				
				ruleClothACSoftcap.detail = "rule.ClothACSoftcap()";
				ruleClothACSoftcap.insertText = new vscode.SnippetString('ClothACSoftcap()');
				ruleClothACSoftcap.documentation = new vscode.MarkdownString("");
				results.push(ruleClothACSoftcap);				
				
				const ruleClrRngMnkBrdACSoftcapReturn = new vscode.CompletionItem('ClrRngMnkBrdACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				ruleClrRngMnkBrdACSoftcapReturn.detail = "rule.ClrRngMnkBrdACSoftcapReturn()";
				ruleClrRngMnkBrdACSoftcapReturn.insertText = new vscode.SnippetString('ClrRngMnkBrdACSoftcapReturn()');
				ruleClrRngMnkBrdACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(ruleClrRngMnkBrdACSoftcapReturn);				
				
				const ruleCommandSpellRank = new vscode.CompletionItem('CommandSpellRank', vscode.CompletionItemKind.Method);
				
				ruleCommandSpellRank.detail = "rule.CommandSpellRank()";
				ruleCommandSpellRank.insertText = new vscode.SnippetString('CommandSpellRank()');
				ruleCommandSpellRank.documentation = new vscode.MarkdownString("");
				results.push(ruleCommandSpellRank);				
				
				const ruleCompressZoneStream = new vscode.CompletionItem('CompressZoneStream', vscode.CompletionItemKind.Method);
				
				ruleCompressZoneStream.detail = "rule.CompressZoneStream()";
				ruleCompressZoneStream.insertText = new vscode.SnippetString('CompressZoneStream()');
				ruleCompressZoneStream.documentation = new vscode.MarkdownString("");
				results.push(ruleCompressZoneStream);				
				
				const ruleConsumptionMultiplier = new vscode.CompletionItem('ConsumptionMultiplier', vscode.CompletionItemKind.Method);
				
				ruleConsumptionMultiplier.detail = "rule.ConsumptionMultiplier()";
				ruleConsumptionMultiplier.insertText = new vscode.SnippetString('ConsumptionMultiplier()');
				ruleConsumptionMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleConsumptionMultiplier);				
				
				const ruleCorpseDecayTimeMS = new vscode.CompletionItem('CorpseDecayTimeMS', vscode.CompletionItemKind.Method);
				
				ruleCorpseDecayTimeMS.detail = "rule.CorpseDecayTimeMS()";
				ruleCorpseDecayTimeMS.insertText = new vscode.SnippetString('CorpseDecayTimeMS()');
				ruleCorpseDecayTimeMS.documentation = new vscode.MarkdownString("");
				results.push(ruleCorpseDecayTimeMS);				
				
				const ruleCorpseResTimeMS = new vscode.CompletionItem('CorpseResTimeMS', vscode.CompletionItemKind.Method);
				
				ruleCorpseResTimeMS.detail = "rule.CorpseResTimeMS()";
				ruleCorpseResTimeMS.insertText = new vscode.SnippetString('CorpseResTimeMS()');
				ruleCorpseResTimeMS.documentation = new vscode.MarkdownString("");
				results.push(ruleCorpseResTimeMS);				
				
				const ruleCorpseUnlockTimer = new vscode.CompletionItem('CorpseUnlockTimer', vscode.CompletionItemKind.Method);
				
				ruleCorpseUnlockTimer.detail = "rule.CorpseUnlockTimer()";
				ruleCorpseUnlockTimer.insertText = new vscode.SnippetString('CorpseUnlockTimer()');
				ruleCorpseUnlockTimer.documentation = new vscode.MarkdownString("");
				results.push(ruleCorpseUnlockTimer);				
				
				const ruleCreationLimit = new vscode.CompletionItem('CreationLimit', vscode.CompletionItemKind.Method);
				
				ruleCreationLimit.detail = "rule.CreationLimit()";
				ruleCreationLimit.insertText = new vscode.SnippetString('CreationLimit()');
				ruleCreationLimit.documentation = new vscode.MarkdownString("");
				results.push(ruleCreationLimit);				
				
				const ruleCriticalDamage = new vscode.CompletionItem('CriticalDamage', vscode.CompletionItemKind.Method);
				
				ruleCriticalDamage.detail = "rule.CriticalDamage()";
				ruleCriticalDamage.insertText = new vscode.SnippetString('CriticalDamage()');
				ruleCriticalDamage.documentation = new vscode.MarkdownString("");
				results.push(ruleCriticalDamage);				
				
				const ruleCriticallyWoundedAggroMod = new vscode.CompletionItem('CriticallyWoundedAggroMod', vscode.CompletionItemKind.Method);
				
				ruleCriticallyWoundedAggroMod.detail = "rule.CriticallyWoundedAggroMod()";
				ruleCriticallyWoundedAggroMod.insertText = new vscode.SnippetString('CriticallyWoundedAggroMod()');
				ruleCriticallyWoundedAggroMod.documentation = new vscode.MarkdownString("");
				results.push(ruleCriticallyWoundedAggroMod);				
				
				const ruleCurrentExpansion = new vscode.CompletionItem('CurrentExpansion', vscode.CompletionItemKind.Method);
				
				ruleCurrentExpansion.detail = "rule.CurrentExpansion()";
				ruleCurrentExpansion.insertText = new vscode.SnippetString('CurrentExpansion()');
				ruleCurrentExpansion.documentation = new vscode.MarkdownString("");
				results.push(ruleCurrentExpansion);				
				
				const ruleCurrentTargetAggroMod = new vscode.CompletionItem('CurrentTargetAggroMod', vscode.CompletionItemKind.Method);
				
				ruleCurrentTargetAggroMod.detail = "rule.CurrentTargetAggroMod()";
				ruleCurrentTargetAggroMod.insertText = new vscode.SnippetString('CurrentTargetAggroMod()');
				ruleCurrentTargetAggroMod.documentation = new vscode.MarkdownString("");
				results.push(ruleCurrentTargetAggroMod);				
				
				const ruleDamageMessages = new vscode.CompletionItem('DamageMessages', vscode.CompletionItemKind.Method);
				
				ruleDamageMessages.detail = "rule.DamageMessages()";
				ruleDamageMessages.insertText = new vscode.SnippetString('DamageMessages()');
				ruleDamageMessages.documentation = new vscode.MarkdownString("");
				results.push(ruleDamageMessages);				
				
				const ruleDeathExpLossLevel = new vscode.CompletionItem('DeathExpLossLevel', vscode.CompletionItemKind.Method);
				
				ruleDeathExpLossLevel.detail = "rule.DeathExpLossLevel()";
				ruleDeathExpLossLevel.insertText = new vscode.SnippetString('DeathExpLossLevel()');
				ruleDeathExpLossLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleDeathExpLossLevel);				
				
				const ruleDeathExpLossMaxLevel = new vscode.CompletionItem('DeathExpLossMaxLevel', vscode.CompletionItemKind.Method);
				
				ruleDeathExpLossMaxLevel.detail = "rule.DeathExpLossMaxLevel()";
				ruleDeathExpLossMaxLevel.insertText = new vscode.SnippetString('DeathExpLossMaxLevel()');
				ruleDeathExpLossMaxLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleDeathExpLossMaxLevel);				
				
				const ruleDeathExpLossMultiplier = new vscode.CompletionItem('DeathExpLossMultiplier', vscode.CompletionItemKind.Method);
				
				ruleDeathExpLossMultiplier.detail = "rule.DeathExpLossMultiplier()";
				ruleDeathExpLossMultiplier.insertText = new vscode.SnippetString('DeathExpLossMultiplier()');
				ruleDeathExpLossMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleDeathExpLossMultiplier);				
				
				const ruleDeathItemLossLevel = new vscode.CompletionItem('DeathItemLossLevel', vscode.CompletionItemKind.Method);
				
				ruleDeathItemLossLevel.detail = "rule.DeathItemLossLevel()";
				ruleDeathItemLossLevel.insertText = new vscode.SnippetString('DeathItemLossLevel()');
				ruleDeathItemLossLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleDeathItemLossLevel);				
				
				const ruleDeathSaveCharismaMod = new vscode.CompletionItem('DeathSaveCharismaMod', vscode.CompletionItemKind.Method);
				
				ruleDeathSaveCharismaMod.detail = "rule.DeathSaveCharismaMod()";
				ruleDeathSaveCharismaMod.insertText = new vscode.SnippetString('DeathSaveCharismaMod()');
				ruleDeathSaveCharismaMod.documentation = new vscode.MarkdownString("");
				results.push(ruleDeathSaveCharismaMod);				
				
				const ruleDefaultGuild = new vscode.CompletionItem('DefaultGuild', vscode.CompletionItemKind.Method);
				
				ruleDefaultGuild.detail = "rule.DefaultGuild()";
				ruleDefaultGuild.insertText = new vscode.SnippetString('DefaultGuild()');
				ruleDefaultGuild.documentation = new vscode.MarkdownString("");
				results.push(ruleDefaultGuild);				
				
				const ruleDefaultRampageTargets = new vscode.CompletionItem('DefaultRampageTargets', vscode.CompletionItemKind.Method);
				
				ruleDefaultRampageTargets.detail = "rule.DefaultRampageTargets()";
				ruleDefaultRampageTargets.insertText = new vscode.SnippetString('DefaultRampageTargets()');
				ruleDefaultRampageTargets.documentation = new vscode.MarkdownString("");
				results.push(ruleDefaultRampageTargets);				
				
				const ruleDefProcPerMinAgiContrib = new vscode.CompletionItem('DefProcPerMinAgiContrib', vscode.CompletionItemKind.Method);
				
				ruleDefProcPerMinAgiContrib.detail = "rule.DefProcPerMinAgiContrib()";
				ruleDefProcPerMinAgiContrib.insertText = new vscode.SnippetString('DefProcPerMinAgiContrib()');
				ruleDefProcPerMinAgiContrib.documentation = new vscode.MarkdownString("");
				results.push(ruleDefProcPerMinAgiContrib);				
				
				const ruleDeleteStaleCorpeBackups = new vscode.CompletionItem('DeleteStaleCorpeBackups', vscode.CompletionItemKind.Method);
				
				ruleDeleteStaleCorpeBackups.detail = "rule.DeleteStaleCorpeBackups()";
				ruleDeleteStaleCorpeBackups.insertText = new vscode.SnippetString('DeleteStaleCorpeBackups()');
				ruleDeleteStaleCorpeBackups.documentation = new vscode.MarkdownString("");
				results.push(ruleDeleteStaleCorpeBackups);				
				
				const ruleDeleteTimer = new vscode.CompletionItem('DeleteTimer', vscode.CompletionItemKind.Method);
				
				ruleDeleteTimer.detail = "rule.DeleteTimer()";
				ruleDeleteTimer.insertText = new vscode.SnippetString('DeleteTimer()');
				ruleDeleteTimer.documentation = new vscode.MarkdownString("");
				results.push(ruleDeleteTimer);				
				
				const ruleDeleteTransformationMold = new vscode.CompletionItem('DeleteTransformationMold', vscode.CompletionItemKind.Method);
				
				ruleDeleteTransformationMold.detail = "rule.DeleteTransformationMold()";
				ruleDeleteTransformationMold.insertText = new vscode.SnippetString('DeleteTransformationMold()');
				ruleDeleteTransformationMold.documentation = new vscode.MarkdownString("");
				results.push(ruleDeleteTransformationMold);				
				
				const ruleDismountWater = new vscode.CompletionItem('DismountWater', vscode.CompletionItemKind.Method);
				
				ruleDismountWater.detail = "rule.DismountWater()";
				ruleDismountWater.insertText = new vscode.SnippetString('DismountWater()');
				ruleDismountWater.documentation = new vscode.MarkdownString("");
				results.push(ruleDismountWater);				
				
				const ruleDistanceCanTravelBeforeAdjustment = new vscode.CompletionItem('DistanceCanTravelBeforeAdjustment', vscode.CompletionItemKind.Method);
				
				ruleDistanceCanTravelBeforeAdjustment.detail = "rule.DistanceCanTravelBeforeAdjustment()";
				ruleDistanceCanTravelBeforeAdjustment.insertText = new vscode.SnippetString('DistanceCanTravelBeforeAdjustment()');
				ruleDistanceCanTravelBeforeAdjustment.documentation = new vscode.MarkdownString("");
				results.push(ruleDistanceCanTravelBeforeAdjustment);				
				
				const ruleDistanceForRescueAccept = new vscode.CompletionItem('DistanceForRescueAccept', vscode.CompletionItemKind.Method);
				
				ruleDistanceForRescueAccept.detail = "rule.DistanceForRescueAccept()";
				ruleDistanceForRescueAccept.insertText = new vscode.SnippetString('DistanceForRescueAccept()');
				ruleDistanceForRescueAccept.documentation = new vscode.MarkdownString("");
				results.push(ruleDistanceForRescueAccept);				
				
				const ruleDistanceForRescueComplete = new vscode.CompletionItem('DistanceForRescueComplete', vscode.CompletionItemKind.Method);
				
				ruleDistanceForRescueComplete.detail = "rule.DistanceForRescueComplete()";
				ruleDistanceForRescueComplete.insertText = new vscode.SnippetString('DistanceForRescueComplete()');
				ruleDistanceForRescueComplete.documentation = new vscode.MarkdownString("");
				results.push(ruleDistanceForRescueComplete);				
				
				const ruleDivineInterventionHeal = new vscode.CompletionItem('DivineInterventionHeal', vscode.CompletionItemKind.Method);
				
				ruleDivineInterventionHeal.detail = "rule.DivineInterventionHeal()";
				ruleDivineInterventionHeal.insertText = new vscode.SnippetString('DivineInterventionHeal()');
				ruleDivineInterventionHeal.documentation = new vscode.MarkdownString("");
				results.push(ruleDivineInterventionHeal);				
				
				const ruleDragCorpseDistance = new vscode.CompletionItem('DragCorpseDistance', vscode.CompletionItemKind.Method);
				
				ruleDragCorpseDistance.detail = "rule.DragCorpseDistance()";
				ruleDragCorpseDistance.insertText = new vscode.SnippetString('DragCorpseDistance()');
				ruleDragCorpseDistance.documentation = new vscode.MarkdownString("");
				results.push(ruleDragCorpseDistance);				
				
				const ruleDragonPunchBonus = new vscode.CompletionItem('DragonPunchBonus', vscode.CompletionItemKind.Method);
				
				ruleDragonPunchBonus.detail = "rule.DragonPunchBonus()";
				ruleDragonPunchBonus.insertText = new vscode.SnippetString('DragonPunchBonus()');
				ruleDragonPunchBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleDragonPunchBonus);				
				
				const ruleDruNecWizEncMagACSoftcapReturn = new vscode.CompletionItem('DruNecWizEncMagACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				ruleDruNecWizEncMagACSoftcapReturn.detail = "rule.DruNecWizEncMagACSoftcapReturn()";
				ruleDruNecWizEncMagACSoftcapReturn.insertText = new vscode.SnippetString('DruNecWizEncMagACSoftcapReturn()');
				ruleDruNecWizEncMagACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(ruleDruNecWizEncMagACSoftcapReturn);				
				
				const ruleDubiouslyFactionMinimum = new vscode.CompletionItem('DubiouslyFactionMinimum', vscode.CompletionItemKind.Method);
				
				ruleDubiouslyFactionMinimum.detail = "rule.DubiouslyFactionMinimum()";
				ruleDubiouslyFactionMinimum.insertText = new vscode.SnippetString('DubiouslyFactionMinimum()');
				ruleDubiouslyFactionMinimum.documentation = new vscode.MarkdownString("");
				results.push(ruleDubiouslyFactionMinimum);				
				
				const ruleDumpTargetEntity = new vscode.CompletionItem('DumpTargetEntity', vscode.CompletionItemKind.Method);
				
				ruleDumpTargetEntity.detail = "rule.DumpTargetEntity()";
				ruleDumpTargetEntity.insertText = new vscode.SnippetString('DumpTargetEntity()');
				ruleDumpTargetEntity.documentation = new vscode.MarkdownString("");
				results.push(ruleDumpTargetEntity);				
				
				const ruleEagleStrikeBonus = new vscode.CompletionItem('EagleStrikeBonus', vscode.CompletionItemKind.Method);
				
				ruleEagleStrikeBonus.detail = "rule.EagleStrikeBonus()";
				ruleEagleStrikeBonus.insertText = new vscode.SnippetString('EagleStrikeBonus()');
				ruleEagleStrikeBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleEagleStrikeBonus);				
				
				const ruleEbonCrystalItemID = new vscode.CompletionItem('EbonCrystalItemID', vscode.CompletionItemKind.Method);
				
				ruleEbonCrystalItemID.detail = "rule.EbonCrystalItemID()";
				ruleEbonCrystalItemID.insertText = new vscode.SnippetString('EbonCrystalItemID()');
				ruleEbonCrystalItemID.documentation = new vscode.MarkdownString("");
				results.push(ruleEbonCrystalItemID);				
				
				const ruleEmote = new vscode.CompletionItem('Emote', vscode.CompletionItemKind.Method);
				
				ruleEmote.detail = "rule.Emote()";
				ruleEmote.insertText = new vscode.SnippetString('Emote()');
				ruleEmote.documentation = new vscode.MarkdownString("");
				results.push(ruleEmote);				
				
				const ruleEmptyNPCCorpseDecayTimeMS = new vscode.CompletionItem('EmptyNPCCorpseDecayTimeMS', vscode.CompletionItemKind.Method);
				
				ruleEmptyNPCCorpseDecayTimeMS.detail = "rule.EmptyNPCCorpseDecayTimeMS()";
				ruleEmptyNPCCorpseDecayTimeMS.insertText = new vscode.SnippetString('EmptyNPCCorpseDecayTimeMS()');
				ruleEmptyNPCCorpseDecayTimeMS.documentation = new vscode.MarkdownString("");
				results.push(ruleEmptyNPCCorpseDecayTimeMS);				
				
				const ruleEnableAggroMeter = new vscode.CompletionItem('EnableAggroMeter', vscode.CompletionItemKind.Method);
				
				ruleEnableAggroMeter.detail = "rule.EnableAggroMeter()";
				ruleEnableAggroMeter.insertText = new vscode.SnippetString('EnableAggroMeter()');
				ruleEnableAggroMeter.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableAggroMeter);				
				
				const ruleEnableAltCurrencySell = new vscode.CompletionItem('EnableAltCurrencySell', vscode.CompletionItemKind.Method);
				
				ruleEnableAltCurrencySell.detail = "rule.EnableAltCurrencySell()";
				ruleEnableAltCurrencySell.insertText = new vscode.SnippetString('EnableAltCurrencySell()');
				ruleEnableAltCurrencySell.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableAltCurrencySell);				
				
				const ruleEnableAntiSpam = new vscode.CompletionItem('EnableAntiSpam', vscode.CompletionItemKind.Method);
				
				ruleEnableAntiSpam.detail = "rule.EnableAntiSpam()";
				ruleEnableAntiSpam.insertText = new vscode.SnippetString('EnableAntiSpam()');
				ruleEnableAntiSpam.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableAntiSpam);				
				
				const ruleEnableAvoidanceCap = new vscode.CompletionItem('EnableAvoidanceCap', vscode.CompletionItemKind.Method);
				
				ruleEnableAvoidanceCap.detail = "rule.EnableAvoidanceCap()";
				ruleEnableAvoidanceCap.insertText = new vscode.SnippetString('EnableAvoidanceCap()');
				ruleEnableAvoidanceCap.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableAvoidanceCap);				
				
				const ruleEnableBlockedBuffs = new vscode.CompletionItem('EnableBlockedBuffs', vscode.CompletionItemKind.Method);
				
				ruleEnableBlockedBuffs.detail = "rule.EnableBlockedBuffs()";
				ruleEnableBlockedBuffs.insertText = new vscode.SnippetString('EnableBlockedBuffs()');
				ruleEnableBlockedBuffs.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableBlockedBuffs);				
				
				const ruleEnableDiscoveredItems = new vscode.CompletionItem('EnableDiscoveredItems', vscode.CompletionItemKind.Method);
				
				ruleEnableDiscoveredItems.detail = "rule.EnableDiscoveredItems()";
				ruleEnableDiscoveredItems.insertText = new vscode.SnippetString('EnableDiscoveredItems()');
				ruleEnableDiscoveredItems.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableDiscoveredItems);				
				
				const ruleEnableFearPathing = new vscode.CompletionItem('EnableFearPathing', vscode.CompletionItemKind.Method);
				
				ruleEnableFearPathing.detail = "rule.EnableFearPathing()";
				ruleEnableFearPathing.insertText = new vscode.SnippetString('EnableFearPathing()');
				ruleEnableFearPathing.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableFearPathing);				
				
				const ruleEnableFoodRequirement = new vscode.CompletionItem('EnableFoodRequirement', vscode.CompletionItemKind.Method);
				
				ruleEnableFoodRequirement.detail = "rule.EnableFoodRequirement()";
				ruleEnableFoodRequirement.insertText = new vscode.SnippetString('EnableFoodRequirement()');
				ruleEnableFoodRequirement.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableFoodRequirement);				
				
				const ruleEnableHungerPenalties = new vscode.CompletionItem('EnableHungerPenalties', vscode.CompletionItemKind.Method);
				
				ruleEnableHungerPenalties.detail = "rule.EnableHungerPenalties()";
				ruleEnableHungerPenalties.insertText = new vscode.SnippetString('EnableHungerPenalties()');
				ruleEnableHungerPenalties.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableHungerPenalties);				
				
				const ruleEnableIPExemptions = new vscode.CompletionItem('EnableIPExemptions', vscode.CompletionItemKind.Method);
				
				ruleEnableIPExemptions.detail = "rule.EnableIPExemptions()";
				ruleEnableIPExemptions.insertText = new vscode.SnippetString('EnableIPExemptions()');
				ruleEnableIPExemptions.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableIPExemptions);				
				
				const ruleEnableLoggedOffReplenishments = new vscode.CompletionItem('EnableLoggedOffReplenishments', vscode.CompletionItemKind.Method);
				
				ruleEnableLoggedOffReplenishments.detail = "rule.EnableLoggedOffReplenishments()";
				ruleEnableLoggedOffReplenishments.insertText = new vscode.SnippetString('EnableLoggedOffReplenishments()');
				ruleEnableLoggedOffReplenishments.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableLoggedOffReplenishments);				
				
				const ruleEnableMailKeyIPVerification = new vscode.CompletionItem('EnableMailKeyIPVerification', vscode.CompletionItemKind.Method);
				
				ruleEnableMailKeyIPVerification.detail = "rule.EnableMailKeyIPVerification()";
				ruleEnableMailKeyIPVerification.insertText = new vscode.SnippetString('EnableMailKeyIPVerification()');
				ruleEnableMailKeyIPVerification.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableMailKeyIPVerification);				
				
				const ruleEnableMailSystem = new vscode.CompletionItem('EnableMailSystem', vscode.CompletionItemKind.Method);
				
				ruleEnableMailSystem.detail = "rule.EnableMailSystem()";
				ruleEnableMailSystem.insertText = new vscode.SnippetString('EnableMailSystem()');
				ruleEnableMailSystem.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableMailSystem);				
				
				const ruleEnableMeritBasedFaction = new vscode.CompletionItem('EnableMeritBasedFaction', vscode.CompletionItemKind.Method);
				
				ruleEnableMeritBasedFaction.detail = "rule.EnableMeritBasedFaction()";
				ruleEnableMeritBasedFaction.insertText = new vscode.SnippetString('EnableMeritBasedFaction()');
				ruleEnableMeritBasedFaction.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableMeritBasedFaction);				
				
				const ruleEnableMQGateDetector = new vscode.CompletionItem('EnableMQGateDetector', vscode.CompletionItemKind.Method);
				
				ruleEnableMQGateDetector.detail = "rule.EnableMQGateDetector()";
				ruleEnableMQGateDetector.insertText = new vscode.SnippetString('EnableMQGateDetector()');
				ruleEnableMQGateDetector.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableMQGateDetector);				
				
				const ruleEnableMQGhostDetector = new vscode.CompletionItem('EnableMQGhostDetector', vscode.CompletionItemKind.Method);
				
				ruleEnableMQGhostDetector.detail = "rule.EnableMQGhostDetector()";
				ruleEnableMQGhostDetector.insertText = new vscode.SnippetString('EnableMQGhostDetector()');
				ruleEnableMQGhostDetector.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableMQGhostDetector);				
				
				const ruleEnableMQWarpDetector = new vscode.CompletionItem('EnableMQWarpDetector', vscode.CompletionItemKind.Method);
				
				ruleEnableMQWarpDetector.detail = "rule.EnableMQWarpDetector()";
				ruleEnableMQWarpDetector.insertText = new vscode.SnippetString('EnableMQWarpDetector()');
				ruleEnableMQWarpDetector.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableMQWarpDetector);				
				
				const ruleEnableMQZoneDetector = new vscode.CompletionItem('EnableMQZoneDetector', vscode.CompletionItemKind.Method);
				
				ruleEnableMQZoneDetector.detail = "rule.EnableMQZoneDetector()";
				ruleEnableMQZoneDetector.insertText = new vscode.SnippetString('EnableMQZoneDetector()');
				ruleEnableMQZoneDetector.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableMQZoneDetector);				
				
				const ruleEnableNPCQuestJournal = new vscode.CompletionItem('EnableNPCQuestJournal', vscode.CompletionItemKind.Method);
				
				ruleEnableNPCQuestJournal.detail = "rule.EnableNPCQuestJournal()";
				ruleEnableNPCQuestJournal.insertText = new vscode.SnippetString('EnableNPCQuestJournal()');
				ruleEnableNPCQuestJournal.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableNPCQuestJournal);				
				
				const ruleEnableReturnHomeButton = new vscode.CompletionItem('EnableReturnHomeButton', vscode.CompletionItemKind.Method);
				
				ruleEnableReturnHomeButton.detail = "rule.EnableReturnHomeButton()";
				ruleEnableReturnHomeButton.insertText = new vscode.SnippetString('EnableReturnHomeButton()');
				ruleEnableReturnHomeButton.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableReturnHomeButton);				
				
				const ruleEnableShadowrest = new vscode.CompletionItem('EnableShadowrest', vscode.CompletionItemKind.Method);
				
				ruleEnableShadowrest.detail = "rule.EnableShadowrest()";
				ruleEnableShadowrest.insertText = new vscode.SnippetString('EnableShadowrest()');
				ruleEnableShadowrest.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableShadowrest);				
				
				const ruleEnableSpellBuckets = new vscode.CompletionItem('EnableSpellBuckets', vscode.CompletionItemKind.Method);
				
				ruleEnableSpellBuckets.detail = "rule.EnableSpellBuckets()";
				ruleEnableSpellBuckets.insertText = new vscode.SnippetString('EnableSpellBuckets()');
				ruleEnableSpellBuckets.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableSpellBuckets);				
				
				const ruleEnableSpellGlobals = new vscode.CompletionItem('EnableSpellGlobals', vscode.CompletionItemKind.Method);
				
				ruleEnableSpellGlobals.detail = "rule.EnableSpellGlobals()";
				ruleEnableSpellGlobals.insertText = new vscode.SnippetString('EnableSpellGlobals()');
				ruleEnableSpellGlobals.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableSpellGlobals);				
				
				const ruleEnableTaskProximity = new vscode.CompletionItem('EnableTaskProximity', vscode.CompletionItemKind.Method);
				
				ruleEnableTaskProximity.detail = "rule.EnableTaskProximity()";
				ruleEnableTaskProximity.insertText = new vscode.SnippetString('EnableTaskProximity()');
				ruleEnableTaskProximity.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableTaskProximity);				
				
				const ruleEnableTaskSystem = new vscode.CompletionItem('EnableTaskSystem', vscode.CompletionItemKind.Method);
				
				ruleEnableTaskSystem.detail = "rule.EnableTaskSystem()";
				ruleEnableTaskSystem.insertText = new vscode.SnippetString('EnableTaskSystem()');
				ruleEnableTaskSystem.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableTaskSystem);				
				
				const ruleEnableTutorialButton = new vscode.CompletionItem('EnableTutorialButton', vscode.CompletionItemKind.Method);
				
				ruleEnableTutorialButton.detail = "rule.EnableTutorialButton()";
				ruleEnableTutorialButton.insertText = new vscode.SnippetString('EnableTutorialButton()');
				ruleEnableTutorialButton.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableTutorialButton);				
				
				const ruleEnableVoiceMacros = new vscode.CompletionItem('EnableVoiceMacros', vscode.CompletionItemKind.Method);
				
				ruleEnableVoiceMacros.detail = "rule.EnableVoiceMacros()";
				ruleEnableVoiceMacros.insertText = new vscode.SnippetString('EnableVoiceMacros()');
				ruleEnableVoiceMacros.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableVoiceMacros);				
				
				const ruleEnableWarpToTrader = new vscode.CompletionItem('EnableWarpToTrader', vscode.CompletionItemKind.Method);
				
				ruleEnableWarpToTrader.detail = "rule.EnableWarpToTrader()";
				ruleEnableWarpToTrader.insertText = new vscode.SnippetString('EnableWarpToTrader()');
				ruleEnableWarpToTrader.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableWarpToTrader);				
				
				const ruleEnableXTargetting = new vscode.CompletionItem('EnableXTargetting', vscode.CompletionItemKind.Method);
				
				ruleEnableXTargetting.detail = "rule.EnableXTargetting()";
				ruleEnableXTargetting.insertText = new vscode.SnippetString('EnableXTargetting()');
				ruleEnableXTargetting.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableXTargetting);				
				
				const ruleEnableZoneControllerGlobals = new vscode.CompletionItem('EnableZoneControllerGlobals', vscode.CompletionItemKind.Method);
				
				ruleEnableZoneControllerGlobals.detail = "rule.EnableZoneControllerGlobals()";
				ruleEnableZoneControllerGlobals.insertText = new vscode.SnippetString('EnableZoneControllerGlobals()');
				ruleEnableZoneControllerGlobals.documentation = new vscode.MarkdownString("");
				results.push(ruleEnableZoneControllerGlobals);				
				
				const ruleEnduranceRegenMultiplier = new vscode.CompletionItem('EnduranceRegenMultiplier', vscode.CompletionItemKind.Method);
				
				ruleEnduranceRegenMultiplier.detail = "rule.EnduranceRegenMultiplier()";
				ruleEnduranceRegenMultiplier.insertText = new vscode.SnippetString('EnduranceRegenMultiplier()');
				ruleEnduranceRegenMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleEnduranceRegenMultiplier);				
				
				const ruleEnforceAugmentRestriction = new vscode.CompletionItem('EnforceAugmentRestriction', vscode.CompletionItemKind.Method);
				
				ruleEnforceAugmentRestriction.detail = "rule.EnforceAugmentRestriction()";
				ruleEnforceAugmentRestriction.insertText = new vscode.SnippetString('EnforceAugmentRestriction()');
				ruleEnforceAugmentRestriction.documentation = new vscode.MarkdownString("");
				results.push(ruleEnforceAugmentRestriction);				
				
				const ruleEnforceAugmentUsability = new vscode.CompletionItem('EnforceAugmentUsability', vscode.CompletionItemKind.Method);
				
				ruleEnforceAugmentUsability.detail = "rule.EnforceAugmentUsability()";
				ruleEnforceAugmentUsability.insertText = new vscode.SnippetString('EnforceAugmentUsability()');
				ruleEnforceAugmentUsability.documentation = new vscode.MarkdownString("");
				results.push(ruleEnforceAugmentUsability);				
				
				const ruleEnforceAugmentWear = new vscode.CompletionItem('EnforceAugmentWear', vscode.CompletionItemKind.Method);
				
				ruleEnforceAugmentWear.detail = "rule.EnforceAugmentWear()";
				ruleEnforceAugmentWear.insertText = new vscode.SnippetString('EnforceAugmentWear()');
				ruleEnforceAugmentWear.documentation = new vscode.MarkdownString("");
				results.push(ruleEnforceAugmentWear);				
				
				const ruleEnforceCharacterLimitAtLogin = new vscode.CompletionItem('EnforceCharacterLimitAtLogin', vscode.CompletionItemKind.Method);
				
				ruleEnforceCharacterLimitAtLogin.detail = "rule.EnforceCharacterLimitAtLogin()";
				ruleEnforceCharacterLimitAtLogin.insertText = new vscode.SnippetString('EnforceCharacterLimitAtLogin()');
				ruleEnforceCharacterLimitAtLogin.documentation = new vscode.MarkdownString("");
				results.push(ruleEnforceCharacterLimitAtLogin);				
				
				const ruleEnvironmentDamageMulipliter = new vscode.CompletionItem('EnvironmentDamageMulipliter', vscode.CompletionItemKind.Method);
				
				ruleEnvironmentDamageMulipliter.detail = "rule.EnvironmentDamageMulipliter()";
				ruleEnvironmentDamageMulipliter.insertText = new vscode.SnippetString('EnvironmentDamageMulipliter()');
				ruleEnvironmentDamageMulipliter.documentation = new vscode.MarkdownString("");
				results.push(ruleEnvironmentDamageMulipliter);				
				
				const ruleExemptMaxClientsStatus = new vscode.CompletionItem('ExemptMaxClientsStatus', vscode.CompletionItemKind.Method);
				
				ruleExemptMaxClientsStatus.detail = "rule.ExemptMaxClientsStatus()";
				ruleExemptMaxClientsStatus.insertText = new vscode.SnippetString('ExemptMaxClientsStatus()');
				ruleExemptMaxClientsStatus.documentation = new vscode.MarkdownString("");
				results.push(ruleExemptMaxClientsStatus);				
				
				const ruleExpansionSettings = new vscode.CompletionItem('ExpansionSettings', vscode.CompletionItemKind.Method);
				
				ruleExpansionSettings.detail = "rule.ExpansionSettings()";
				ruleExpansionSettings.insertText = new vscode.SnippetString('ExpansionSettings()');
				ruleExpansionSettings.documentation = new vscode.MarkdownString("");
				results.push(ruleExpansionSettings);				
				
				const ruleExpireRead = new vscode.CompletionItem('ExpireRead', vscode.CompletionItemKind.Method);
				
				ruleExpireRead.detail = "rule.ExpireRead()";
				ruleExpireRead.insertText = new vscode.SnippetString('ExpireRead()');
				ruleExpireRead.documentation = new vscode.MarkdownString("");
				results.push(ruleExpireRead);				
				
				const ruleExpireTrash = new vscode.CompletionItem('ExpireTrash', vscode.CompletionItemKind.Method);
				
				ruleExpireTrash.detail = "rule.ExpireTrash()";
				ruleExpireTrash.insertText = new vscode.SnippetString('ExpireTrash()');
				ruleExpireTrash.documentation = new vscode.MarkdownString("");
				results.push(ruleExpireTrash);				
				
				const ruleExpireUnread = new vscode.CompletionItem('ExpireUnread', vscode.CompletionItemKind.Method);
				
				ruleExpireUnread.detail = "rule.ExpireUnread()";
				ruleExpireUnread.insertText = new vscode.SnippetString('ExpireUnread()');
				ruleExpireUnread.documentation = new vscode.MarkdownString("");
				results.push(ruleExpireUnread);				
				
				const ruleExpMultiplier = new vscode.CompletionItem('ExpMultiplier', vscode.CompletionItemKind.Method);
				
				ruleExpMultiplier.detail = "rule.ExpMultiplier()";
				ruleExpMultiplier.insertText = new vscode.SnippetString('ExpMultiplier()');
				ruleExpMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleExpMultiplier);				
				
				const ruleExpPerPoint = new vscode.CompletionItem('ExpPerPoint', vscode.CompletionItemKind.Method);
				
				ruleExpPerPoint.detail = "rule.ExpPerPoint()";
				ruleExpPerPoint.insertText = new vscode.SnippetString('ExpPerPoint()');
				ruleExpPerPoint.documentation = new vscode.MarkdownString("");
				results.push(ruleExpPerPoint);				
				
				const ruleFear = new vscode.CompletionItem('Fear', vscode.CompletionItemKind.Method);
				
				ruleFear.detail = "rule.Fear()";
				ruleFear.insertText = new vscode.SnippetString('Fear()');
				ruleFear.documentation = new vscode.MarkdownString("");
				results.push(ruleFear);				
				
				const ruleFearBreakCheckChance = new vscode.CompletionItem('FearBreakCheckChance', vscode.CompletionItemKind.Method);
				
				ruleFearBreakCheckChance.detail = "rule.FearBreakCheckChance()";
				ruleFearBreakCheckChance.insertText = new vscode.SnippetString('FearBreakCheckChance()');
				ruleFearBreakCheckChance.documentation = new vscode.MarkdownString("");
				results.push(ruleFearBreakCheckChance);				
				
				const ruleFeignKillsPet = new vscode.CompletionItem('FeignKillsPet', vscode.CompletionItemKind.Method);
				
				ruleFeignKillsPet.detail = "rule.FeignKillsPet()";
				ruleFeignKillsPet.insertText = new vscode.SnippetString('FeignKillsPet()');
				ruleFeignKillsPet.documentation = new vscode.MarkdownString("");
				results.push(ruleFeignKillsPet);				
				
				const ruleFinalExpMultiplier = new vscode.CompletionItem('FinalExpMultiplier', vscode.CompletionItemKind.Method);
				
				ruleFinalExpMultiplier.detail = "rule.FinalExpMultiplier()";
				ruleFinalExpMultiplier.insertText = new vscode.SnippetString('FinalExpMultiplier()');
				ruleFinalExpMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleFinalExpMultiplier);				
				
				const ruleFind = new vscode.CompletionItem('Find', vscode.CompletionItemKind.Method);
				
				ruleFind.detail = "rule.Find()";
				ruleFind.insertText = new vscode.SnippetString('Find()');
				ruleFind.documentation = new vscode.MarkdownString("");
				results.push(ruleFind);				
				
				const ruleFindBestZHeightAdjust = new vscode.CompletionItem('FindBestZHeightAdjust', vscode.CompletionItemKind.Method);
				
				ruleFindBestZHeightAdjust.detail = "rule.FindBestZHeightAdjust()";
				ruleFindBestZHeightAdjust.insertText = new vscode.SnippetString('FindBestZHeightAdjust()');
				ruleFindBestZHeightAdjust.documentation = new vscode.MarkdownString("");
				results.push(ruleFindBestZHeightAdjust);				
				
				const ruleFinishBuffing = new vscode.CompletionItem('FinishBuffing', vscode.CompletionItemKind.Method);
				
				ruleFinishBuffing.detail = "rule.FinishBuffing()";
				ruleFinishBuffing.insertText = new vscode.SnippetString('FinishBuffing()');
				ruleFinishBuffing.documentation = new vscode.MarkdownString("");
				results.push(ruleFinishBuffing);				
				
				const ruleFishingLineLength = new vscode.CompletionItem('FishingLineLength', vscode.CompletionItemKind.Method);
				
				ruleFishingLineLength.detail = "rule.FishingLineLength()";
				ruleFishingLineLength.insertText = new vscode.SnippetString('FishingLineLength()');
				ruleFishingLineLength.documentation = new vscode.MarkdownString("");
				results.push(ruleFishingLineLength);				
				
				const ruleFishingLineStepSize = new vscode.CompletionItem('FishingLineStepSize', vscode.CompletionItemKind.Method);
				
				ruleFishingLineStepSize.detail = "rule.FishingLineStepSize()";
				ruleFishingLineStepSize.insertText = new vscode.SnippetString('FishingLineStepSize()');
				ruleFishingLineStepSize.documentation = new vscode.MarkdownString("");
				results.push(ruleFishingLineStepSize);				
				
				const ruleFishingRodLength = new vscode.CompletionItem('FishingRodLength', vscode.CompletionItemKind.Method);
				
				ruleFishingRodLength.detail = "rule.FishingRodLength()";
				ruleFishingRodLength.insertText = new vscode.SnippetString('FishingRodLength()');
				ruleFishingRodLength.documentation = new vscode.MarkdownString("");
				results.push(ruleFishingRodLength);				
				
				const ruleFixPathingZMaxDeltaSendTo = new vscode.CompletionItem('FixPathingZMaxDeltaSendTo', vscode.CompletionItemKind.Method);
				
				ruleFixPathingZMaxDeltaSendTo.detail = "rule.FixPathingZMaxDeltaSendTo()";
				ruleFixPathingZMaxDeltaSendTo.insertText = new vscode.SnippetString('FixPathingZMaxDeltaSendTo()');
				ruleFixPathingZMaxDeltaSendTo.documentation = new vscode.MarkdownString("");
				results.push(ruleFixPathingZMaxDeltaSendTo);				
				
				const ruleFixPathingZOnSendTo = new vscode.CompletionItem('FixPathingZOnSendTo', vscode.CompletionItemKind.Method);
				
				ruleFixPathingZOnSendTo.detail = "rule.FixPathingZOnSendTo()";
				ruleFixPathingZOnSendTo.insertText = new vscode.SnippetString('FixPathingZOnSendTo()');
				ruleFixPathingZOnSendTo.documentation = new vscode.MarkdownString("");
				results.push(ruleFixPathingZOnSendTo);				
				
				const ruleFixZWhenPathing = new vscode.CompletionItem('FixZWhenPathing', vscode.CompletionItemKind.Method);
				
				ruleFixZWhenPathing.detail = "rule.FixZWhenPathing()";
				ruleFixZWhenPathing.insertText = new vscode.SnippetString('FixZWhenPathing()');
				ruleFixZWhenPathing.documentation = new vscode.MarkdownString("");
				results.push(ruleFixZWhenPathing);				
				
				const ruleFlatItemExtraSpellAmt = new vscode.CompletionItem('FlatItemExtraSpellAmt', vscode.CompletionItemKind.Method);
				
				ruleFlatItemExtraSpellAmt.detail = "rule.FlatItemExtraSpellAmt()";
				ruleFlatItemExtraSpellAmt.insertText = new vscode.SnippetString('FlatItemExtraSpellAmt()');
				ruleFlatItemExtraSpellAmt.documentation = new vscode.MarkdownString("");
				results.push(ruleFlatItemExtraSpellAmt);				
				
				const ruleFleeGray = new vscode.CompletionItem('FleeGray', vscode.CompletionItemKind.Method);
				
				ruleFleeGray.detail = "rule.FleeGray()";
				ruleFleeGray.insertText = new vscode.SnippetString('FleeGray()');
				ruleFleeGray.documentation = new vscode.MarkdownString("");
				results.push(ruleFleeGray);				
				
				const ruleFleeGrayHPRatio = new vscode.CompletionItem('FleeGrayHPRatio', vscode.CompletionItemKind.Method);
				
				ruleFleeGrayHPRatio.detail = "rule.FleeGrayHPRatio()";
				ruleFleeGrayHPRatio.insertText = new vscode.SnippetString('FleeGrayHPRatio()');
				ruleFleeGrayHPRatio.documentation = new vscode.MarkdownString("");
				results.push(ruleFleeGrayHPRatio);				
				
				const ruleFleeGrayMaxLevel = new vscode.CompletionItem('FleeGrayMaxLevel', vscode.CompletionItemKind.Method);
				
				ruleFleeGrayMaxLevel.detail = "rule.FleeGrayMaxLevel()";
				ruleFleeGrayMaxLevel.insertText = new vscode.SnippetString('FleeGrayMaxLevel()');
				ruleFleeGrayMaxLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleFleeGrayMaxLevel);				
				
				const ruleFleeHPRatio = new vscode.CompletionItem('FleeHPRatio', vscode.CompletionItemKind.Method);
				
				ruleFleeHPRatio.detail = "rule.FleeHPRatio()";
				ruleFleeHPRatio.insertText = new vscode.SnippetString('FleeHPRatio()');
				ruleFleeHPRatio.documentation = new vscode.MarkdownString("");
				results.push(ruleFleeHPRatio);				
				
				const ruleFleeIfNotAlone = new vscode.CompletionItem('FleeIfNotAlone', vscode.CompletionItemKind.Method);
				
				ruleFleeIfNotAlone.detail = "rule.FleeIfNotAlone()";
				ruleFleeIfNotAlone.insertText = new vscode.SnippetString('FleeIfNotAlone()');
				ruleFleeIfNotAlone.documentation = new vscode.MarkdownString("");
				results.push(ruleFleeIfNotAlone);				
				
				const ruleFleeMultiplier = new vscode.CompletionItem('FleeMultiplier', vscode.CompletionItemKind.Method);
				
				ruleFleeMultiplier.detail = "rule.FleeMultiplier()";
				ruleFleeMultiplier.insertText = new vscode.SnippetString('FleeMultiplier()');
				ruleFleeMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleFleeMultiplier);				
				
				const ruleFlyingKickBonus = new vscode.CompletionItem('FlyingKickBonus', vscode.CompletionItemKind.Method);
				
				ruleFlyingKickBonus.detail = "rule.FlyingKickBonus()";
				ruleFlyingKickBonus.insertText = new vscode.SnippetString('FlyingKickBonus()');
				ruleFlyingKickBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleFlyingKickBonus);				
				
				const ruleFocusCombatProcs = new vscode.CompletionItem('FocusCombatProcs', vscode.CompletionItemKind.Method);
				
				ruleFocusCombatProcs.detail = "rule.FocusCombatProcs()";
				ruleFocusCombatProcs.insertText = new vscode.SnippetString('FocusCombatProcs()');
				ruleFocusCombatProcs.documentation = new vscode.MarkdownString("");
				results.push(ruleFocusCombatProcs);				
				
				const ruleFoodLossPerUpdate = new vscode.CompletionItem('FoodLossPerUpdate', vscode.CompletionItemKind.Method);
				
				ruleFoodLossPerUpdate.detail = "rule.FoodLossPerUpdate()";
				ruleFoodLossPerUpdate.insertText = new vscode.SnippetString('FoodLossPerUpdate()');
				ruleFoodLossPerUpdate.documentation = new vscode.MarkdownString("");
				results.push(ruleFoodLossPerUpdate);				
				
				const ruleFrenzyBonus = new vscode.CompletionItem('FrenzyBonus', vscode.CompletionItemKind.Method);
				
				ruleFrenzyBonus.detail = "rule.FrenzyBonus()";
				ruleFrenzyBonus.insertText = new vscode.SnippetString('FrenzyBonus()');
				ruleFrenzyBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleFrenzyBonus);				
				
				const ruleFRProjectileItemNPC = new vscode.CompletionItem('FRProjectileItem_NPC', vscode.CompletionItemKind.Method);
				
				ruleFRProjectileItemNPC.detail = "rule.FRProjectileItem_NPC()";
				ruleFRProjectileItemNPC.insertText = new vscode.SnippetString('FRProjectileItem_NPC()');
				ruleFRProjectileItemNPC.documentation = new vscode.MarkdownString("");
				results.push(ruleFRProjectileItemNPC);				
				
				const ruleFRProjectileItemSOF = new vscode.CompletionItem('FRProjectileItem_SOF', vscode.CompletionItemKind.Method);
				
				ruleFRProjectileItemSOF.detail = "rule.FRProjectileItem_SOF()";
				ruleFRProjectileItemSOF.insertText = new vscode.SnippetString('FRProjectileItem_SOF()');
				ruleFRProjectileItemSOF.documentation = new vscode.MarkdownString("");
				results.push(ruleFRProjectileItemSOF);				
				
				const ruleFRProjectileItemTitanium = new vscode.CompletionItem('FRProjectileItem_Titanium', vscode.CompletionItemKind.Method);
				
				ruleFRProjectileItemTitanium.detail = "rule.FRProjectileItem_Titanium()";
				ruleFRProjectileItemTitanium.insertText = new vscode.SnippetString('FRProjectileItem_Titanium()');
				ruleFRProjectileItemTitanium.documentation = new vscode.MarkdownString("");
				results.push(ruleFRProjectileItemTitanium);				
				
				const ruleFVNoDropFlag = new vscode.CompletionItem('FVNoDropFlag', vscode.CompletionItemKind.Method);
				
				ruleFVNoDropFlag.detail = "rule.FVNoDropFlag()";
				ruleFVNoDropFlag.insertText = new vscode.SnippetString('FVNoDropFlag()');
				ruleFVNoDropFlag.documentation = new vscode.MarkdownString("");
				results.push(ruleFVNoDropFlag);				
				
				const ruleGlobalChatLevelLimit = new vscode.CompletionItem('GlobalChatLevelLimit', vscode.CompletionItemKind.Method);
				
				ruleGlobalChatLevelLimit.detail = "rule.GlobalChatLevelLimit()";
				ruleGlobalChatLevelLimit.insertText = new vscode.SnippetString('GlobalChatLevelLimit()');
				ruleGlobalChatLevelLimit.documentation = new vscode.MarkdownString("");
				results.push(ruleGlobalChatLevelLimit);				
				
				const ruleGlobalLootMultiplier = new vscode.CompletionItem('GlobalLootMultiplier', vscode.CompletionItemKind.Method);
				
				ruleGlobalLootMultiplier.detail = "rule.GlobalLootMultiplier()";
				ruleGlobalLootMultiplier.insertText = new vscode.SnippetString('GlobalLootMultiplier()');
				ruleGlobalLootMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleGlobalLootMultiplier);				
				
				const ruleGMAccountIPList = new vscode.CompletionItem('GMAccountIPList', vscode.CompletionItemKind.Method);
				
				ruleGMAccountIPList.detail = "rule.GMAccountIPList()";
				ruleGMAccountIPList.insertText = new vscode.SnippetString('GMAccountIPList()');
				ruleGMAccountIPList.documentation = new vscode.MarkdownString("");
				results.push(ruleGMAccountIPList);				
				
				const ruleGrantHoTTOnCreate = new vscode.CompletionItem('GrantHoTTOnCreate', vscode.CompletionItemKind.Method);
				
				ruleGrantHoTTOnCreate.detail = "rule.GrantHoTTOnCreate()";
				ruleGrantHoTTOnCreate.insertText = new vscode.SnippetString('GrantHoTTOnCreate()');
				ruleGrantHoTTOnCreate.documentation = new vscode.MarkdownString("");
				results.push(ruleGrantHoTTOnCreate);				
				
				const ruleGraveyardTimeMS = new vscode.CompletionItem('GraveyardTimeMS', vscode.CompletionItemKind.Method);
				
				ruleGraveyardTimeMS.detail = "rule.GraveyardTimeMS()";
				ruleGraveyardTimeMS.insertText = new vscode.SnippetString('GraveyardTimeMS()');
				ruleGraveyardTimeMS.documentation = new vscode.MarkdownString("");
				results.push(ruleGraveyardTimeMS);				
				
				const ruleGreenModifier = new vscode.CompletionItem('GreenModifier', vscode.CompletionItemKind.Method);
				
				ruleGreenModifier.detail = "rule.GreenModifier()";
				ruleGreenModifier.insertText = new vscode.SnippetString('GreenModifier()');
				ruleGreenModifier.documentation = new vscode.MarkdownString("");
				results.push(ruleGreenModifier);				
				
				const ruleGroupBuffing = new vscode.CompletionItem('GroupBuffing', vscode.CompletionItemKind.Method);
				
				ruleGroupBuffing.detail = "rule.GroupBuffing()";
				ruleGroupBuffing.insertText = new vscode.SnippetString('GroupBuffing()');
				ruleGroupBuffing.documentation = new vscode.MarkdownString("");
				results.push(ruleGroupBuffing);				
				
				const ruleGroupExpMultiplier = new vscode.CompletionItem('GroupExpMultiplier', vscode.CompletionItemKind.Method);
				
				ruleGroupExpMultiplier.detail = "rule.GroupExpMultiplier()";
				ruleGroupExpMultiplier.insertText = new vscode.SnippetString('GroupExpMultiplier()');
				ruleGroupExpMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleGroupExpMultiplier);				
				
				const ruleGuard = new vscode.CompletionItem('Guard', vscode.CompletionItemKind.Method);
				
				ruleGuard.detail = "rule.Guard()";
				ruleGuard.insertText = new vscode.SnippetString('Guard()');
				ruleGuard.documentation = new vscode.MarkdownString("");
				results.push(ruleGuard);				
				
				const ruleGuildBankZoneID = new vscode.CompletionItem('GuildBankZoneID', vscode.CompletionItemKind.Method);
				
				ruleGuildBankZoneID.detail = "rule.GuildBankZoneID()";
				ruleGuildBankZoneID.insertText = new vscode.SnippetString('GuildBankZoneID()');
				ruleGuildBankZoneID.documentation = new vscode.MarkdownString("");
				results.push(ruleGuildBankZoneID);				
				
				const ruleGuildHallExpirationDays = new vscode.CompletionItem('GuildHallExpirationDays', vscode.CompletionItemKind.Method);
				
				ruleGuildHallExpirationDays.detail = "rule.GuildHallExpirationDays()";
				ruleGuildHallExpirationDays.insertText = new vscode.SnippetString('GuildHallExpirationDays()');
				ruleGuildHallExpirationDays.documentation = new vscode.MarkdownString("");
				results.push(ruleGuildHallExpirationDays);				
				
				const ruleHasteCap = new vscode.CompletionItem('HasteCap', vscode.CompletionItemKind.Method);
				
				ruleHasteCap.detail = "rule.HasteCap()";
				ruleHasteCap.insertText = new vscode.SnippetString('HasteCap()');
				ruleHasteCap.documentation = new vscode.MarkdownString("");
				results.push(ruleHasteCap);				
				
				const ruleHealOnLevel = new vscode.CompletionItem('HealOnLevel', vscode.CompletionItemKind.Method);
				
				ruleHealOnLevel.detail = "rule.HealOnLevel()";
				ruleHealOnLevel.insertText = new vscode.SnippetString('HealOnLevel()');
				ruleHealOnLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleHealOnLevel);				
				
				const ruleHealRotationMaxMembers = new vscode.CompletionItem('HealRotationMaxMembers', vscode.CompletionItemKind.Method);
				
				ruleHealRotationMaxMembers.detail = "rule.HealRotationMaxMembers()";
				ruleHealRotationMaxMembers.insertText = new vscode.SnippetString('HealRotationMaxMembers()');
				ruleHealRotationMaxMembers.documentation = new vscode.MarkdownString("");
				results.push(ruleHealRotationMaxMembers);				
				
				const ruleHealRotationMaxTargets = new vscode.CompletionItem('HealRotationMaxTargets', vscode.CompletionItemKind.Method);
				
				ruleHealRotationMaxTargets.detail = "rule.HealRotationMaxTargets()";
				ruleHealRotationMaxTargets.insertText = new vscode.SnippetString('HealRotationMaxTargets()');
				ruleHealRotationMaxTargets.documentation = new vscode.MarkdownString("");
				results.push(ruleHealRotationMaxTargets);				
				
				const ruleHitBonusPerLevel = new vscode.CompletionItem('HitBonusPerLevel', vscode.CompletionItemKind.Method);
				
				ruleHitBonusPerLevel.detail = "rule.HitBonusPerLevel()";
				ruleHitBonusPerLevel.insertText = new vscode.SnippetString('HitBonusPerLevel()');
				ruleHitBonusPerLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleHitBonusPerLevel);				
				
				const ruleHitBoxMod = new vscode.CompletionItem('HitBoxMod', vscode.CompletionItemKind.Method);
				
				ruleHitBoxMod.detail = "rule.HitBoxMod()";
				ruleHitBoxMod.insertText = new vscode.SnippetString('HitBoxMod()');
				ruleHitBoxMod.documentation = new vscode.MarkdownString("");
				results.push(ruleHitBoxMod);				
				
				const ruleHitCapPre10 = new vscode.CompletionItem('HitCapPre10', vscode.CompletionItemKind.Method);
				
				ruleHitCapPre10.detail = "rule.HitCapPre10()";
				ruleHitCapPre10.insertText = new vscode.SnippetString('HitCapPre10()');
				ruleHitCapPre10.documentation = new vscode.MarkdownString("");
				results.push(ruleHitCapPre10);				
				
				const ruleHitCapPre20 = new vscode.CompletionItem('HitCapPre20', vscode.CompletionItemKind.Method);
				
				ruleHitCapPre20.detail = "rule.HitCapPre20()";
				ruleHitCapPre20.insertText = new vscode.SnippetString('HitCapPre20()');
				ruleHitCapPre20.documentation = new vscode.MarkdownString("");
				results.push(ruleHitCapPre20);				
				
				const ruleHitFalloffMajor = new vscode.CompletionItem('HitFalloffMajor', vscode.CompletionItemKind.Method);
				
				ruleHitFalloffMajor.detail = "rule.HitFalloffMajor()";
				ruleHitFalloffMajor.insertText = new vscode.SnippetString('HitFalloffMajor()');
				ruleHitFalloffMajor.documentation = new vscode.MarkdownString("");
				results.push(ruleHitFalloffMajor);				
				
				const ruleHitFalloffMinor = new vscode.CompletionItem('HitFalloffMinor', vscode.CompletionItemKind.Method);
				
				ruleHitFalloffMinor.detail = "rule.HitFalloffMinor()";
				ruleHitFalloffMinor.insertText = new vscode.SnippetString('HitFalloffMinor()');
				ruleHitFalloffMinor.documentation = new vscode.MarkdownString("");
				results.push(ruleHitFalloffMinor);				
				
				const ruleHitFalloffModerate = new vscode.CompletionItem('HitFalloffModerate', vscode.CompletionItemKind.Method);
				
				ruleHitFalloffModerate.detail = "rule.HitFalloffModerate()";
				ruleHitFalloffModerate.insertText = new vscode.SnippetString('HitFalloffModerate()');
				ruleHitFalloffModerate.documentation = new vscode.MarkdownString("");
				results.push(ruleHitFalloffModerate);				
				
				const ruleHotZoneBonus = new vscode.CompletionItem('HotZoneBonus', vscode.CompletionItemKind.Method);
				
				ruleHotZoneBonus.detail = "rule.HotZoneBonus()";
				ruleHotZoneBonus.insertText = new vscode.SnippetString('HotZoneBonus()');
				ruleHotZoneBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleHotZoneBonus);				
				
				const ruleHPRegenMultiplier = new vscode.CompletionItem('HPRegenMultiplier', vscode.CompletionItemKind.Method);
				
				ruleHPRegenMultiplier.detail = "rule.HPRegenMultiplier()";
				ruleHPRegenMultiplier.insertText = new vscode.SnippetString('HPRegenMultiplier()');
				ruleHPRegenMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleHPRegenMultiplier);				
				
				const ruleIgnoreSpellDmgLvlRestriction = new vscode.CompletionItem('IgnoreSpellDmgLvlRestriction', vscode.CompletionItemKind.Method);
				
				ruleIgnoreSpellDmgLvlRestriction.detail = "rule.IgnoreSpellDmgLvlRestriction()";
				ruleIgnoreSpellDmgLvlRestriction.insertText = new vscode.SnippetString('IgnoreSpellDmgLvlRestriction()');
				ruleIgnoreSpellDmgLvlRestriction.documentation = new vscode.MarkdownString("");
				results.push(ruleIgnoreSpellDmgLvlRestriction);				
				
				const ruleIksarCommonTongue = new vscode.CompletionItem('IksarCommonTongue', vscode.CompletionItemKind.Method);
				
				ruleIksarCommonTongue.detail = "rule.IksarCommonTongue()";
				ruleIksarCommonTongue.insertText = new vscode.SnippetString('IksarCommonTongue()');
				ruleIksarCommonTongue.documentation = new vscode.MarkdownString("");
				results.push(ruleIksarCommonTongue);				
				
				const ruleIndifferentlyFactionMinimum = new vscode.CompletionItem('IndifferentlyFactionMinimum', vscode.CompletionItemKind.Method);
				
				ruleIndifferentlyFactionMinimum.detail = "rule.IndifferentlyFactionMinimum()";
				ruleIndifferentlyFactionMinimum.insertText = new vscode.SnippetString('IndifferentlyFactionMinimum()');
				ruleIndifferentlyFactionMinimum.documentation = new vscode.MarkdownString("");
				results.push(ruleIndifferentlyFactionMinimum);				
				
				const ruleIntAggroThreshold = new vscode.CompletionItem('IntAggroThreshold', vscode.CompletionItemKind.Method);
				
				ruleIntAggroThreshold.detail = "rule.IntAggroThreshold()";
				ruleIntAggroThreshold.insertText = new vscode.SnippetString('IntAggroThreshold()');
				ruleIntAggroThreshold.documentation = new vscode.MarkdownString("");
				results.push(ruleIntAggroThreshold);				
				
				const ruleIntervalDurationMS = new vscode.CompletionItem('IntervalDurationMS', vscode.CompletionItemKind.Method);
				
				ruleIntervalDurationMS.detail = "rule.IntervalDurationMS()";
				ruleIntervalDurationMS.insertText = new vscode.SnippetString('IntervalDurationMS()');
				ruleIntervalDurationMS.documentation = new vscode.MarkdownString("");
				results.push(ruleIntervalDurationMS);				
				
				const ruleInvSnapshotHistoryD = new vscode.CompletionItem('InvSnapshotHistoryD', vscode.CompletionItemKind.Method);
				
				ruleInvSnapshotHistoryD.detail = "rule.InvSnapshotHistoryD()";
				ruleInvSnapshotHistoryD.insertText = new vscode.SnippetString('InvSnapshotHistoryD()');
				ruleInvSnapshotHistoryD.documentation = new vscode.MarkdownString("");
				results.push(ruleInvSnapshotHistoryD);				
				
				const ruleInvSnapshotMinIntervalM = new vscode.CompletionItem('InvSnapshotMinIntervalM', vscode.CompletionItemKind.Method);
				
				ruleInvSnapshotMinIntervalM.detail = "rule.InvSnapshotMinIntervalM()";
				ruleInvSnapshotMinIntervalM.insertText = new vscode.SnippetString('InvSnapshotMinIntervalM()');
				ruleInvSnapshotMinIntervalM.documentation = new vscode.MarkdownString("");
				results.push(ruleInvSnapshotMinIntervalM);				
				
				const ruleInvSnapshotMinRetryM = new vscode.CompletionItem('InvSnapshotMinRetryM', vscode.CompletionItemKind.Method);
				
				ruleInvSnapshotMinRetryM.detail = "rule.InvSnapshotMinRetryM()";
				ruleInvSnapshotMinRetryM.insertText = new vscode.SnippetString('InvSnapshotMinRetryM()');
				ruleInvSnapshotMinRetryM.documentation = new vscode.MarkdownString("");
				results.push(ruleInvSnapshotMinRetryM);				
				
				const ruleIPLimitDisconnectAll = new vscode.CompletionItem('IPLimitDisconnectAll', vscode.CompletionItemKind.Method);
				
				ruleIPLimitDisconnectAll.detail = "rule.IPLimitDisconnectAll()";
				ruleIPLimitDisconnectAll.insertText = new vscode.SnippetString('IPLimitDisconnectAll()');
				ruleIPLimitDisconnectAll.documentation = new vscode.MarkdownString("");
				results.push(ruleIPLimitDisconnectAll);				
				
				const ruleIsGMPetitionWindowEnabled = new vscode.CompletionItem('IsGMPetitionWindowEnabled', vscode.CompletionItemKind.Method);
				
				ruleIsGMPetitionWindowEnabled.detail = "rule.IsGMPetitionWindowEnabled()";
				ruleIsGMPetitionWindowEnabled.insertText = new vscode.SnippetString('IsGMPetitionWindowEnabled()');
				ruleIsGMPetitionWindowEnabled.documentation = new vscode.MarkdownString("");
				results.push(ruleIsGMPetitionWindowEnabled);				
				
				const ruleItemAccuracyCap = new vscode.CompletionItem('ItemAccuracyCap', vscode.CompletionItemKind.Method);
				
				ruleItemAccuracyCap.detail = "rule.ItemAccuracyCap()";
				ruleItemAccuracyCap.insertText = new vscode.SnippetString('ItemAccuracyCap()');
				ruleItemAccuracyCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemAccuracyCap);				
				
				const ruleItemATKCap = new vscode.CompletionItem('ItemATKCap', vscode.CompletionItemKind.Method);
				
				ruleItemATKCap.detail = "rule.ItemATKCap()";
				ruleItemATKCap.insertText = new vscode.SnippetString('ItemATKCap()');
				ruleItemATKCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemATKCap);				
				
				const ruleItemAvoidanceCap = new vscode.CompletionItem('ItemAvoidanceCap', vscode.CompletionItemKind.Method);
				
				ruleItemAvoidanceCap.detail = "rule.ItemAvoidanceCap()";
				ruleItemAvoidanceCap.insertText = new vscode.SnippetString('ItemAvoidanceCap()');
				ruleItemAvoidanceCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemAvoidanceCap);				
				
				const ruleItemCastsUseFocus = new vscode.CompletionItem('ItemCastsUseFocus', vscode.CompletionItemKind.Method);
				
				ruleItemCastsUseFocus.detail = "rule.ItemCastsUseFocus()";
				ruleItemCastsUseFocus.insertText = new vscode.SnippetString('ItemCastsUseFocus()');
				ruleItemCastsUseFocus.documentation = new vscode.MarkdownString("");
				results.push(ruleItemCastsUseFocus);				
				
				const ruleItemClairvoyanceCap = new vscode.CompletionItem('ItemClairvoyanceCap', vscode.CompletionItemKind.Method);
				
				ruleItemClairvoyanceCap.detail = "rule.ItemClairvoyanceCap()";
				ruleItemClairvoyanceCap.insertText = new vscode.SnippetString('ItemClairvoyanceCap()');
				ruleItemClairvoyanceCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemClairvoyanceCap);				
				
				const ruleItemCombatEffectsCap = new vscode.CompletionItem('ItemCombatEffectsCap', vscode.CompletionItemKind.Method);
				
				ruleItemCombatEffectsCap.detail = "rule.ItemCombatEffectsCap()";
				ruleItemCombatEffectsCap.insertText = new vscode.SnippetString('ItemCombatEffectsCap()');
				ruleItemCombatEffectsCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemCombatEffectsCap);				
				
				const ruleItemDamageShieldCap = new vscode.CompletionItem('ItemDamageShieldCap', vscode.CompletionItemKind.Method);
				
				ruleItemDamageShieldCap.detail = "rule.ItemDamageShieldCap()";
				ruleItemDamageShieldCap.insertText = new vscode.SnippetString('ItemDamageShieldCap()');
				ruleItemDamageShieldCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemDamageShieldCap);				
				
				const ruleItemDoTShieldingCap = new vscode.CompletionItem('ItemDoTShieldingCap', vscode.CompletionItemKind.Method);
				
				ruleItemDoTShieldingCap.detail = "rule.ItemDoTShieldingCap()";
				ruleItemDoTShieldingCap.insertText = new vscode.SnippetString('ItemDoTShieldingCap()');
				ruleItemDoTShieldingCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemDoTShieldingCap);				
				
				const ruleItemDSMitigationCap = new vscode.CompletionItem('ItemDSMitigationCap', vscode.CompletionItemKind.Method);
				
				ruleItemDSMitigationCap.detail = "rule.ItemDSMitigationCap()";
				ruleItemDSMitigationCap.insertText = new vscode.SnippetString('ItemDSMitigationCap()');
				ruleItemDSMitigationCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemDSMitigationCap);				
				
				const ruleItemEnduranceRegenCap = new vscode.CompletionItem('ItemEnduranceRegenCap', vscode.CompletionItemKind.Method);
				
				ruleItemEnduranceRegenCap.detail = "rule.ItemEnduranceRegenCap()";
				ruleItemEnduranceRegenCap.insertText = new vscode.SnippetString('ItemEnduranceRegenCap()');
				ruleItemEnduranceRegenCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemEnduranceRegenCap);				
				
				const ruleItemExtraDmgCap = new vscode.CompletionItem('ItemExtraDmgCap', vscode.CompletionItemKind.Method);
				
				ruleItemExtraDmgCap.detail = "rule.ItemExtraDmgCap()";
				ruleItemExtraDmgCap.insertText = new vscode.SnippetString('ItemExtraDmgCap()');
				ruleItemExtraDmgCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemExtraDmgCap);				
				
				const ruleItemHealAmtCap = new vscode.CompletionItem('ItemHealAmtCap', vscode.CompletionItemKind.Method);
				
				ruleItemHealAmtCap.detail = "rule.ItemHealAmtCap()";
				ruleItemHealAmtCap.insertText = new vscode.SnippetString('ItemHealAmtCap()');
				ruleItemHealAmtCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemHealAmtCap);				
				
				const ruleItemHealthRegenCap = new vscode.CompletionItem('ItemHealthRegenCap', vscode.CompletionItemKind.Method);
				
				ruleItemHealthRegenCap.detail = "rule.ItemHealthRegenCap()";
				ruleItemHealthRegenCap.insertText = new vscode.SnippetString('ItemHealthRegenCap()');
				ruleItemHealthRegenCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemHealthRegenCap);				
				
				const ruleItemIDToEnablePorts = new vscode.CompletionItem('ItemIDToEnablePorts', vscode.CompletionItemKind.Method);
				
				ruleItemIDToEnablePorts.detail = "rule.ItemIDToEnablePorts()";
				ruleItemIDToEnablePorts.insertText = new vscode.SnippetString('ItemIDToEnablePorts()');
				ruleItemIDToEnablePorts.documentation = new vscode.MarkdownString("");
				results.push(ruleItemIDToEnablePorts);				
				
				const ruleItemManaRegenCap = new vscode.CompletionItem('ItemManaRegenCap', vscode.CompletionItemKind.Method);
				
				ruleItemManaRegenCap.detail = "rule.ItemManaRegenCap()";
				ruleItemManaRegenCap.insertText = new vscode.SnippetString('ItemManaRegenCap()');
				ruleItemManaRegenCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemManaRegenCap);				
				
				const ruleItemShieldingCap = new vscode.CompletionItem('ItemShieldingCap', vscode.CompletionItemKind.Method);
				
				ruleItemShieldingCap.detail = "rule.ItemShieldingCap()";
				ruleItemShieldingCap.insertText = new vscode.SnippetString('ItemShieldingCap()');
				ruleItemShieldingCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemShieldingCap);				
				
				const ruleItemSpellDmgCap = new vscode.CompletionItem('ItemSpellDmgCap', vscode.CompletionItemKind.Method);
				
				ruleItemSpellDmgCap.detail = "rule.ItemSpellDmgCap()";
				ruleItemSpellDmgCap.insertText = new vscode.SnippetString('ItemSpellDmgCap()');
				ruleItemSpellDmgCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemSpellDmgCap);				
				
				const ruleItemSpellShieldingCap = new vscode.CompletionItem('ItemSpellShieldingCap', vscode.CompletionItemKind.Method);
				
				ruleItemSpellShieldingCap.detail = "rule.ItemSpellShieldingCap()";
				ruleItemSpellShieldingCap.insertText = new vscode.SnippetString('ItemSpellShieldingCap()');
				ruleItemSpellShieldingCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemSpellShieldingCap);				
				
				const ruleItemStrikethroughCap = new vscode.CompletionItem('ItemStrikethroughCap', vscode.CompletionItemKind.Method);
				
				ruleItemStrikethroughCap.detail = "rule.ItemStrikethroughCap()";
				ruleItemStrikethroughCap.insertText = new vscode.SnippetString('ItemStrikethroughCap()');
				ruleItemStrikethroughCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemStrikethroughCap);				
				
				const ruleItemStunResistCap = new vscode.CompletionItem('ItemStunResistCap', vscode.CompletionItemKind.Method);
				
				ruleItemStunResistCap.detail = "rule.ItemStunResistCap()";
				ruleItemStunResistCap.insertText = new vscode.SnippetString('ItemStunResistCap()');
				ruleItemStunResistCap.documentation = new vscode.MarkdownString("");
				results.push(ruleItemStunResistCap);				
				
				const ruleJun182014HundredHandsRevamp = new vscode.CompletionItem('Jun182014HundredHandsRevamp', vscode.CompletionItemKind.Method);
				
				ruleJun182014HundredHandsRevamp.detail = "rule.Jun182014HundredHandsRevamp()";
				ruleJun182014HundredHandsRevamp.insertText = new vscode.SnippetString('Jun182014HundredHandsRevamp()');
				ruleJun182014HundredHandsRevamp.documentation = new vscode.MarkdownString("");
				results.push(ruleJun182014HundredHandsRevamp);				
				
				const ruleKarmaGlobalChatLimit = new vscode.CompletionItem('KarmaGlobalChatLimit', vscode.CompletionItemKind.Method);
				
				ruleKarmaGlobalChatLimit.detail = "rule.KarmaGlobalChatLimit()";
				ruleKarmaGlobalChatLimit.insertText = new vscode.SnippetString('KarmaGlobalChatLimit()');
				ruleKarmaGlobalChatLimit.documentation = new vscode.MarkdownString("");
				results.push(ruleKarmaGlobalChatLimit);				
				
				const ruleKarmaUpdateIntervalMS = new vscode.CompletionItem('KarmaUpdateIntervalMS', vscode.CompletionItemKind.Method);
				
				ruleKarmaUpdateIntervalMS.detail = "rule.KarmaUpdateIntervalMS()";
				ruleKarmaUpdateIntervalMS.insertText = new vscode.SnippetString('KarmaUpdateIntervalMS()');
				ruleKarmaUpdateIntervalMS.documentation = new vscode.MarkdownString("");
				results.push(ruleKarmaUpdateIntervalMS);				
				
				const ruleKeepLevelOverMax = new vscode.CompletionItem('KeepLevelOverMax', vscode.CompletionItemKind.Method);
				
				ruleKeepLevelOverMax.detail = "rule.KeepLevelOverMax()";
				ruleKeepLevelOverMax.insertText = new vscode.SnippetString('KeepLevelOverMax()');
				ruleKeepLevelOverMax.documentation = new vscode.MarkdownString("");
				results.push(ruleKeepLevelOverMax);				
				
				const ruleKeepOneRecordPerCompletedTask = new vscode.CompletionItem('KeepOneRecordPerCompletedTask', vscode.CompletionItemKind.Method);
				
				ruleKeepOneRecordPerCompletedTask.detail = "rule.KeepOneRecordPerCompletedTask()";
				ruleKeepOneRecordPerCompletedTask.insertText = new vscode.SnippetString('KeepOneRecordPerCompletedTask()');
				ruleKeepOneRecordPerCompletedTask.documentation = new vscode.MarkdownString("");
				results.push(ruleKeepOneRecordPerCompletedTask);				
				
				const ruleKillProcessOnDynamicShutdown = new vscode.CompletionItem('KillProcessOnDynamicShutdown', vscode.CompletionItemKind.Method);
				
				ruleKillProcessOnDynamicShutdown.detail = "rule.KillProcessOnDynamicShutdown()";
				ruleKillProcessOnDynamicShutdown.insertText = new vscode.SnippetString('KillProcessOnDynamicShutdown()');
				ruleKillProcessOnDynamicShutdown.documentation = new vscode.MarkdownString("");
				results.push(ruleKillProcessOnDynamicShutdown);				
				
				const ruleKillsPerGroupLeadershipAA = new vscode.CompletionItem('KillsPerGroupLeadershipAA', vscode.CompletionItemKind.Method);
				
				ruleKillsPerGroupLeadershipAA.detail = "rule.KillsPerGroupLeadershipAA()";
				ruleKillsPerGroupLeadershipAA.insertText = new vscode.SnippetString('KillsPerGroupLeadershipAA()');
				ruleKillsPerGroupLeadershipAA.documentation = new vscode.MarkdownString("");
				results.push(ruleKillsPerGroupLeadershipAA);				
				
				const ruleKillsPerRaidLeadershipAA = new vscode.CompletionItem('KillsPerRaidLeadershipAA', vscode.CompletionItemKind.Method);
				
				ruleKillsPerRaidLeadershipAA.detail = "rule.KillsPerRaidLeadershipAA()";
				ruleKillsPerRaidLeadershipAA.insertText = new vscode.SnippetString('KillsPerRaidLeadershipAA()');
				ruleKillsPerRaidLeadershipAA.documentation = new vscode.MarkdownString("");
				results.push(ruleKillsPerRaidLeadershipAA);				
				
				const ruleKindlyFactionMinimum = new vscode.CompletionItem('KindlyFactionMinimum', vscode.CompletionItemKind.Method);
				
				ruleKindlyFactionMinimum.detail = "rule.KindlyFactionMinimum()";
				ruleKindlyFactionMinimum.insertText = new vscode.SnippetString('KindlyFactionMinimum()');
				ruleKindlyFactionMinimum.documentation = new vscode.MarkdownString("");
				results.push(ruleKindlyFactionMinimum);				
				
				const ruleKnightACSoftcapReturn = new vscode.CompletionItem('KnightACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				ruleKnightACSoftcapReturn.detail = "rule.KnightACSoftcapReturn()";
				ruleKnightACSoftcapReturn.insertText = new vscode.SnippetString('KnightACSoftcapReturn()');
				ruleKnightACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(ruleKnightACSoftcapReturn);				
				
				const ruleLastFightingDelayMovingMax = new vscode.CompletionItem('LastFightingDelayMovingMax', vscode.CompletionItemKind.Method);
				
				ruleLastFightingDelayMovingMax.detail = "rule.LastFightingDelayMovingMax()";
				ruleLastFightingDelayMovingMax.insertText = new vscode.SnippetString('LastFightingDelayMovingMax()');
				ruleLastFightingDelayMovingMax.documentation = new vscode.MarkdownString("");
				results.push(ruleLastFightingDelayMovingMax);				
				
				const ruleLastFightingDelayMovingMin = new vscode.CompletionItem('LastFightingDelayMovingMin', vscode.CompletionItemKind.Method);
				
				ruleLastFightingDelayMovingMin.detail = "rule.LastFightingDelayMovingMin()";
				ruleLastFightingDelayMovingMin.insertText = new vscode.SnippetString('LastFightingDelayMovingMin()');
				ruleLastFightingDelayMovingMin.documentation = new vscode.MarkdownString("");
				results.push(ruleLastFightingDelayMovingMin);				
				
				const ruleLDoNAdventureExpireTime = new vscode.CompletionItem('LDoNAdventureExpireTime', vscode.CompletionItemKind.Method);
				
				ruleLDoNAdventureExpireTime.detail = "rule.LDoNAdventureExpireTime()";
				ruleLDoNAdventureExpireTime.insertText = new vscode.SnippetString('LDoNAdventureExpireTime()');
				ruleLDoNAdventureExpireTime.documentation = new vscode.MarkdownString("");
				results.push(ruleLDoNAdventureExpireTime);				
				
				const ruleLDoNBaseTrapDifficulty = new vscode.CompletionItem('LDoNBaseTrapDifficulty', vscode.CompletionItemKind.Method);
				
				ruleLDoNBaseTrapDifficulty.detail = "rule.LDoNBaseTrapDifficulty()";
				ruleLDoNBaseTrapDifficulty.insertText = new vscode.SnippetString('LDoNBaseTrapDifficulty()');
				ruleLDoNBaseTrapDifficulty.documentation = new vscode.MarkdownString("");
				results.push(ruleLDoNBaseTrapDifficulty);				
				
				const ruleLDoNCriticalFailTrapThreshold = new vscode.CompletionItem('LDoNCriticalFailTrapThreshold', vscode.CompletionItemKind.Method);
				
				ruleLDoNCriticalFailTrapThreshold.detail = "rule.LDoNCriticalFailTrapThreshold()";
				ruleLDoNCriticalFailTrapThreshold.insertText = new vscode.SnippetString('LDoNCriticalFailTrapThreshold()');
				ruleLDoNCriticalFailTrapThreshold.documentation = new vscode.MarkdownString("");
				results.push(ruleLDoNCriticalFailTrapThreshold);				
				
				const ruleLDoNTrapDistanceUse = new vscode.CompletionItem('LDoNTrapDistanceUse', vscode.CompletionItemKind.Method);
				
				ruleLDoNTrapDistanceUse.detail = "rule.LDoNTrapDistanceUse()";
				ruleLDoNTrapDistanceUse.insertText = new vscode.SnippetString('LDoNTrapDistanceUse()');
				ruleLDoNTrapDistanceUse.documentation = new vscode.MarkdownString("");
				results.push(ruleLDoNTrapDistanceUse);				
				
				const ruleLeashDistance = new vscode.CompletionItem('LeashDistance', vscode.CompletionItemKind.Method);
				
				ruleLeashDistance.detail = "rule.LeashDistance()";
				ruleLeashDistance.insertText = new vscode.SnippetString('LeashDistance()');
				ruleLeashDistance.documentation = new vscode.MarkdownString("");
				results.push(ruleLeashDistance);				
				
				const ruleLeatherACSoftcap = new vscode.CompletionItem('LeatherACSoftcap', vscode.CompletionItemKind.Method);
				
				ruleLeatherACSoftcap.detail = "rule.LeatherACSoftcap()";
				ruleLeatherACSoftcap.insertText = new vscode.SnippetString('LeatherACSoftcap()');
				ruleLeatherACSoftcap.documentation = new vscode.MarkdownString("");
				results.push(ruleLeatherACSoftcap);				
				
				const ruleLeaveCorpses = new vscode.CompletionItem('LeaveCorpses', vscode.CompletionItemKind.Method);
				
				ruleLeaveCorpses.detail = "rule.LeaveCorpses()";
				ruleLeaveCorpses.insertText = new vscode.SnippetString('LeaveCorpses()');
				ruleLeaveCorpses.documentation = new vscode.MarkdownString("");
				results.push(ruleLeaveCorpses);				
				
				const ruleLeaveNakedCorpses = new vscode.CompletionItem('LeaveNakedCorpses', vscode.CompletionItemKind.Method);
				
				ruleLeaveNakedCorpses.detail = "rule.LeaveNakedCorpses()";
				ruleLeaveNakedCorpses.insertText = new vscode.SnippetString('LeaveNakedCorpses()');
				ruleLeaveNakedCorpses.documentation = new vscode.MarkdownString("");
				results.push(ruleLeaveNakedCorpses);				
				
				const ruleLevelBasedEXPMods = new vscode.CompletionItem('LevelBasedEXPMods', vscode.CompletionItemKind.Method);
				
				ruleLevelBasedEXPMods.detail = "rule.LevelBasedEXPMods()";
				ruleLevelBasedEXPMods.insertText = new vscode.SnippetString('LevelBasedEXPMods()');
				ruleLevelBasedEXPMods.documentation = new vscode.MarkdownString("");
				results.push(ruleLevelBasedEXPMods);				
				
				const ruleLevelToStopACTwinkControl = new vscode.CompletionItem('LevelToStopACTwinkControl', vscode.CompletionItemKind.Method);
				
				ruleLevelToStopACTwinkControl.detail = "rule.LevelToStopACTwinkControl()";
				ruleLevelToStopACTwinkControl.insertText = new vscode.SnippetString('LevelToStopACTwinkControl()');
				ruleLevelToStopACTwinkControl.documentation = new vscode.MarkdownString("");
				results.push(ruleLevelToStopACTwinkControl);				
				
				const ruleLevelToStopDamageCaps = new vscode.CompletionItem('LevelToStopDamageCaps', vscode.CompletionItemKind.Method);
				
				ruleLevelToStopDamageCaps.detail = "rule.LevelToStopDamageCaps()";
				ruleLevelToStopDamageCaps.insertText = new vscode.SnippetString('LevelToStopDamageCaps()');
				ruleLevelToStopDamageCaps.documentation = new vscode.MarkdownString("");
				results.push(ruleLevelToStopDamageCaps);				
				
				const ruleLightBlueModifier = new vscode.CompletionItem('LightBlueModifier', vscode.CompletionItemKind.Method);
				
				ruleLightBlueModifier.detail = "rule.LightBlueModifier()";
				ruleLightBlueModifier.insertText = new vscode.SnippetString('LightBlueModifier()');
				ruleLightBlueModifier.documentation = new vscode.MarkdownString("");
				results.push(ruleLightBlueModifier);				
				
				const ruleLiveLikeEnrage = new vscode.CompletionItem('LiveLikeEnrage', vscode.CompletionItemKind.Method);
				
				ruleLiveLikeEnrage.detail = "rule.LiveLikeEnrage()";
				ruleLiveLikeEnrage.insertText = new vscode.SnippetString('LiveLikeEnrage()');
				ruleLiveLikeEnrage.documentation = new vscode.MarkdownString("");
				results.push(ruleLiveLikeEnrage);				
				
				const ruleLiveLikeFocusEffects = new vscode.CompletionItem('LiveLikeFocusEffects', vscode.CompletionItemKind.Method);
				
				ruleLiveLikeFocusEffects.detail = "rule.LiveLikeFocusEffects()";
				ruleLiveLikeFocusEffects.insertText = new vscode.SnippetString('LiveLikeFocusEffects()');
				ruleLiveLikeFocusEffects.documentation = new vscode.MarkdownString("");
				results.push(ruleLiveLikeFocusEffects);				
				
				const ruleLowChainLeatherACSoftcapReturn = new vscode.CompletionItem('LowChainLeatherACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				ruleLowChainLeatherACSoftcapReturn.detail = "rule.LowChainLeatherACSoftcapReturn()";
				ruleLowChainLeatherACSoftcapReturn.insertText = new vscode.SnippetString('LowChainLeatherACSoftcapReturn()');
				ruleLowChainLeatherACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(ruleLowChainLeatherACSoftcapReturn);				
				
				const ruleLowPlateChainACSoftcapReturn = new vscode.CompletionItem('LowPlateChainACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				ruleLowPlateChainACSoftcapReturn.detail = "rule.LowPlateChainACSoftcapReturn()";
				ruleLowPlateChainACSoftcapReturn.insertText = new vscode.SnippetString('LowPlateChainACSoftcapReturn()');
				ruleLowPlateChainACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(ruleLowPlateChainACSoftcapReturn);				
				
				const ruleMaintainIntoxicationAcrossZones = new vscode.CompletionItem('MaintainIntoxicationAcrossZones', vscode.CompletionItemKind.Method);
				
				ruleMaintainIntoxicationAcrossZones.detail = "rule.MaintainIntoxicationAcrossZones()";
				ruleMaintainIntoxicationAcrossZones.insertText = new vscode.SnippetString('MaintainIntoxicationAcrossZones()');
				ruleMaintainIntoxicationAcrossZones.documentation = new vscode.MarkdownString("");
				results.push(ruleMaintainIntoxicationAcrossZones);				
				
				const ruleMajorNPCCorpseDecayTimeMS = new vscode.CompletionItem('MajorNPCCorpseDecayTimeMS', vscode.CompletionItemKind.Method);
				
				ruleMajorNPCCorpseDecayTimeMS.detail = "rule.MajorNPCCorpseDecayTimeMS()";
				ruleMajorNPCCorpseDecayTimeMS.insertText = new vscode.SnippetString('MajorNPCCorpseDecayTimeMS()');
				ruleMajorNPCCorpseDecayTimeMS.documentation = new vscode.MarkdownString("");
				results.push(ruleMajorNPCCorpseDecayTimeMS);				
				
				const ruleManaRegen = new vscode.CompletionItem('ManaRegen', vscode.CompletionItemKind.Method);
				
				ruleManaRegen.detail = "rule.ManaRegen()";
				ruleManaRegen.insertText = new vscode.SnippetString('ManaRegen()');
				ruleManaRegen.documentation = new vscode.MarkdownString("");
				results.push(ruleManaRegen);				
				
				const ruleManaRegenMultiplier = new vscode.CompletionItem('ManaRegenMultiplier', vscode.CompletionItemKind.Method);
				
				ruleManaRegenMultiplier.detail = "rule.ManaRegenMultiplier()";
				ruleManaRegenMultiplier.insertText = new vscode.SnippetString('ManaRegenMultiplier()');
				ruleManaRegenMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleManaRegenMultiplier);				
				
				const ruleMarqueeHPUpdates = new vscode.CompletionItem('MarqueeHPUpdates', vscode.CompletionItemKind.Method);
				
				ruleMarqueeHPUpdates.detail = "rule.MarqueeHPUpdates()";
				ruleMarqueeHPUpdates.insertText = new vscode.SnippetString('MarqueeHPUpdates()');
				ruleMarqueeHPUpdates.documentation = new vscode.MarkdownString("");
				results.push(ruleMarqueeHPUpdates);				
				
				const ruleMaxBarterSearchResults = new vscode.CompletionItem('MaxBarterSearchResults', vscode.CompletionItemKind.Method);
				
				ruleMaxBarterSearchResults.detail = "rule.MaxBarterSearchResults()";
				ruleMaxBarterSearchResults.insertText = new vscode.SnippetString('MaxBarterSearchResults()');
				ruleMaxBarterSearchResults.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxBarterSearchResults);				
				
				const ruleMaxBuffRulesNPC = new vscode.CompletionItem('MaxBuffRulesNPC', vscode.CompletionItemKind.Method);
				
				ruleMaxBuffRulesNPC.detail = "rule.MaxBuffRulesNPC()";
				ruleMaxBuffRulesNPC.insertText = new vscode.SnippetString('MaxBuffRulesNPC()');
				ruleMaxBuffRulesNPC.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxBuffRulesNPC);				
				
				const ruleMaxCastTimeReduction = new vscode.CompletionItem('MaxCastTimeReduction', vscode.CompletionItemKind.Method);
				
				ruleMaxCastTimeReduction.detail = "rule.MaxCastTimeReduction()";
				ruleMaxCastTimeReduction.insertText = new vscode.SnippetString('MaxCastTimeReduction()');
				ruleMaxCastTimeReduction.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxCastTimeReduction);				
				
				const ruleMaxChancetoHit = new vscode.CompletionItem('MaxChancetoHit', vscode.CompletionItemKind.Method);
				
				ruleMaxChancetoHit.detail = "rule.MaxChancetoHit()";
				ruleMaxChancetoHit.insertText = new vscode.SnippetString('MaxChancetoHit()');
				ruleMaxChancetoHit.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxChancetoHit);				
				
				const ruleMaxCharmDurationForPlayerCharacter = new vscode.CompletionItem('MaxCharmDurationForPlayerCharacter', vscode.CompletionItemKind.Method);
				
				ruleMaxCharmDurationForPlayerCharacter.detail = "rule.MaxCharmDurationForPlayerCharacter()";
				ruleMaxCharmDurationForPlayerCharacter.insertText = new vscode.SnippetString('MaxCharmDurationForPlayerCharacter()');
				ruleMaxCharmDurationForPlayerCharacter.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxCharmDurationForPlayerCharacter);				
				
				const ruleMaxClientsPerIP = new vscode.CompletionItem('MaxClientsPerIP', vscode.CompletionItemKind.Method);
				
				ruleMaxClientsPerIP.detail = "rule.MaxClientsPerIP()";
				ruleMaxClientsPerIP.insertText = new vscode.SnippetString('MaxClientsPerIP()');
				ruleMaxClientsPerIP.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxClientsPerIP);				
				
				const ruleMaxClientsSetByStatus = new vscode.CompletionItem('MaxClientsSetByStatus', vscode.CompletionItemKind.Method);
				
				ruleMaxClientsSetByStatus.detail = "rule.MaxClientsSetByStatus()";
				ruleMaxClientsSetByStatus.insertText = new vscode.SnippetString('MaxClientsSetByStatus()');
				ruleMaxClientsSetByStatus.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxClientsSetByStatus);				
				
				const ruleMaxClientsSimplifiedLogic = new vscode.CompletionItem('MaxClientsSimplifiedLogic', vscode.CompletionItemKind.Method);
				
				ruleMaxClientsSimplifiedLogic.detail = "rule.MaxClientsSimplifiedLogic()";
				ruleMaxClientsSimplifiedLogic.insertText = new vscode.SnippetString('MaxClientsSimplifiedLogic()');
				ruleMaxClientsSimplifiedLogic.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxClientsSimplifiedLogic);				
				
				const ruleMaxDiscRulesNPC = new vscode.CompletionItem('MaxDiscRulesNPC', vscode.CompletionItemKind.Method);
				
				ruleMaxDiscRulesNPC.detail = "rule.MaxDiscRulesNPC()";
				ruleMaxDiscRulesNPC.insertText = new vscode.SnippetString('MaxDiscRulesNPC()');
				ruleMaxDiscRulesNPC.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxDiscRulesNPC);				
				
				const ruleMaxDraggedCorpses = new vscode.CompletionItem('MaxDraggedCorpses', vscode.CompletionItemKind.Method);
				
				ruleMaxDraggedCorpses.detail = "rule.MaxDraggedCorpses()";
				ruleMaxDraggedCorpses.insertText = new vscode.SnippetString('MaxDraggedCorpses()');
				ruleMaxDraggedCorpses.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxDraggedCorpses);				
				
				const ruleMaxExpLevel = new vscode.CompletionItem('MaxExpLevel', vscode.CompletionItemKind.Method);
				
				ruleMaxExpLevel.detail = "rule.MaxExpLevel()";
				ruleMaxExpLevel.insertText = new vscode.SnippetString('MaxExpLevel()');
				ruleMaxExpLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxExpLevel);				
				
				const ruleMaxFearDurationForPlayerCharacter = new vscode.CompletionItem('MaxFearDurationForPlayerCharacter', vscode.CompletionItemKind.Method);
				
				ruleMaxFearDurationForPlayerCharacter.detail = "rule.MaxFearDurationForPlayerCharacter()";
				ruleMaxFearDurationForPlayerCharacter.insertText = new vscode.SnippetString('MaxFearDurationForPlayerCharacter()');
				ruleMaxFearDurationForPlayerCharacter.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxFearDurationForPlayerCharacter);				
				
				const ruleMaxFlurryHits = new vscode.CompletionItem('MaxFlurryHits', vscode.CompletionItemKind.Method);
				
				ruleMaxFlurryHits.detail = "rule.MaxFlurryHits()";
				ruleMaxFlurryHits.insertText = new vscode.SnippetString('MaxFlurryHits()');
				ruleMaxFlurryHits.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxFlurryHits);				
				
				const ruleMaximumMessagesPerInterval = new vscode.CompletionItem('MaximumMessagesPerInterval', vscode.CompletionItemKind.Method);
				
				ruleMaximumMessagesPerInterval.detail = "rule.MaximumMessagesPerInterval()";
				ruleMaximumMessagesPerInterval.insertText = new vscode.SnippetString('MaximumMessagesPerInterval()');
				ruleMaximumMessagesPerInterval.documentation = new vscode.MarkdownString("");
				results.push(ruleMaximumMessagesPerInterval);				
				
				const ruleMaxLevel = new vscode.CompletionItem('MaxLevel', vscode.CompletionItemKind.Method);
				
				ruleMaxLevel.detail = "rule.MaxLevel()";
				ruleMaxLevel.insertText = new vscode.SnippetString('MaxLevel()');
				ruleMaxLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxLevel);				
				
				const ruleMaxLevelForTutorial = new vscode.CompletionItem('MaxLevelForTutorial', vscode.CompletionItemKind.Method);
				
				ruleMaxLevelForTutorial.detail = "rule.MaxLevelForTutorial()";
				ruleMaxLevelForTutorial.insertText = new vscode.SnippetString('MaxLevelForTutorial()');
				ruleMaxLevelForTutorial.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxLevelForTutorial);				
				
				const ruleMaxLevelRange = new vscode.CompletionItem('MaxLevelRange', vscode.CompletionItemKind.Method);
				
				ruleMaxLevelRange.detail = "rule.MaxLevelRange()";
				ruleMaxLevelRange.insertText = new vscode.SnippetString('MaxLevelRange()');
				ruleMaxLevelRange.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxLevelRange);				
				
				const ruleMaxMembers = new vscode.CompletionItem('MaxMembers', vscode.CompletionItemKind.Method);
				
				ruleMaxMembers.detail = "rule.MaxMembers()";
				ruleMaxMembers.insertText = new vscode.SnippetString('MaxMembers()');
				ruleMaxMembers.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxMembers);				
				
				const ruleMaxMessagesBeforeKick = new vscode.CompletionItem('MaxMessagesBeforeKick', vscode.CompletionItemKind.Method);
				
				ruleMaxMessagesBeforeKick.detail = "rule.MaxMessagesBeforeKick()";
				ruleMaxMessagesBeforeKick.insertText = new vscode.SnippetString('MaxMessagesBeforeKick()');
				ruleMaxMessagesBeforeKick.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxMessagesBeforeKick);				
				
				const ruleMaxNavmeshNodes = new vscode.CompletionItem('MaxNavmeshNodes', vscode.CompletionItemKind.Method);
				
				ruleMaxNavmeshNodes.detail = "rule.MaxNavmeshNodes()";
				ruleMaxNavmeshNodes.insertText = new vscode.SnippetString('MaxNavmeshNodes()');
				ruleMaxNavmeshNodes.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxNavmeshNodes);				
				
				const ruleMaxNumberForGroup = new vscode.CompletionItem('MaxNumberForGroup', vscode.CompletionItemKind.Method);
				
				ruleMaxNumberForGroup.detail = "rule.MaxNumberForGroup()";
				ruleMaxNumberForGroup.insertText = new vscode.SnippetString('MaxNumberForGroup()');
				ruleMaxNumberForGroup.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxNumberForGroup);				
				
				const ruleMaxRampageTargets = new vscode.CompletionItem('MaxRampageTargets', vscode.CompletionItemKind.Method);
				
				ruleMaxRampageTargets.detail = "rule.MaxRampageTargets()";
				ruleMaxRampageTargets.insertText = new vscode.SnippetString('MaxRampageTargets()');
				ruleMaxRampageTargets.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxRampageTargets);				
				
				const ruleMaxScalingProcAggro = new vscode.CompletionItem('MaxScalingProcAggro', vscode.CompletionItemKind.Method);
				
				ruleMaxScalingProcAggro.detail = "rule.MaxScalingProcAggro()";
				ruleMaxScalingProcAggro.insertText = new vscode.SnippetString('MaxScalingProcAggro()');
				ruleMaxScalingProcAggro.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxScalingProcAggro);				
				
				const ruleMaxSearchResults = new vscode.CompletionItem('MaxSearchResults', vscode.CompletionItemKind.Method);
				
				ruleMaxSearchResults.detail = "rule.MaxSearchResults()";
				ruleMaxSearchResults.insertText = new vscode.SnippetString('MaxSearchResults()');
				ruleMaxSearchResults.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxSearchResults);				
				
				const ruleMaxSongRulesNPC = new vscode.CompletionItem('MaxSongRulesNPC', vscode.CompletionItemKind.Method);
				
				ruleMaxSongRulesNPC.detail = "rule.MaxSongRulesNPC()";
				ruleMaxSongRulesNPC.insertText = new vscode.SnippetString('MaxSongRulesNPC()');
				ruleMaxSongRulesNPC.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxSongRulesNPC);				
				
				const ruleMaxTotalRulesNPC = new vscode.CompletionItem('MaxTotalRulesNPC', vscode.CompletionItemKind.Method);
				
				ruleMaxTotalRulesNPC.detail = "rule.MaxTotalRulesNPC()";
				ruleMaxTotalRulesNPC.insertText = new vscode.SnippetString('MaxTotalRulesNPC()');
				ruleMaxTotalRulesNPC.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxTotalRulesNPC);				
				
				const ruleMaxTotalRulesPET = new vscode.CompletionItem('MaxTotalRulesPET', vscode.CompletionItemKind.Method);
				
				ruleMaxTotalRulesPET.detail = "rule.MaxTotalRulesPET()";
				ruleMaxTotalRulesPET.insertText = new vscode.SnippetString('MaxTotalRulesPET()');
				ruleMaxTotalRulesPET.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxTotalRulesPET);				
				
				const ruleMaxTradeskillSearchSkillDiff = new vscode.CompletionItem('MaxTradeskillSearchSkillDiff', vscode.CompletionItemKind.Method);
				
				ruleMaxTradeskillSearchSkillDiff.detail = "rule.MaxTradeskillSearchSkillDiff()";
				ruleMaxTradeskillSearchSkillDiff.insertText = new vscode.SnippetString('MaxTradeskillSearchSkillDiff()');
				ruleMaxTradeskillSearchSkillDiff.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxTradeskillSearchSkillDiff);				
				
				const ruleMaxTrainSpecializations = new vscode.CompletionItem('MaxTrainSpecializations', vscode.CompletionItemKind.Method);
				
				ruleMaxTrainSpecializations.detail = "rule.MaxTrainSpecializations()";
				ruleMaxTrainSpecializations.insertText = new vscode.SnippetString('MaxTrainSpecializations()');
				ruleMaxTrainSpecializations.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxTrainSpecializations);				
				
				const ruleMaxTrainTradeskills = new vscode.CompletionItem('MaxTrainTradeskills', vscode.CompletionItemKind.Method);
				
				ruleMaxTrainTradeskills.detail = "rule.MaxTrainTradeskills()";
				ruleMaxTrainTradeskills.insertText = new vscode.SnippetString('MaxTrainTradeskills()');
				ruleMaxTrainTradeskills.documentation = new vscode.MarkdownString("");
				results.push(ruleMaxTrainTradeskills);				
				
				const ruleMeleeCritDifficulty = new vscode.CompletionItem('MeleeCritDifficulty', vscode.CompletionItemKind.Method);
				
				ruleMeleeCritDifficulty.detail = "rule.MeleeCritDifficulty()";
				ruleMeleeCritDifficulty.insertText = new vscode.SnippetString('MeleeCritDifficulty()');
				ruleMeleeCritDifficulty.documentation = new vscode.MarkdownString("");
				results.push(ruleMeleeCritDifficulty);				
				
				const ruleMeleePush = new vscode.CompletionItem('MeleePush', vscode.CompletionItemKind.Method);
				
				ruleMeleePush.detail = "rule.MeleePush()";
				ruleMeleePush.insertText = new vscode.SnippetString('MeleePush()');
				ruleMeleePush.documentation = new vscode.MarkdownString("");
				results.push(ruleMeleePush);				
				
				const ruleMeleePushChance = new vscode.CompletionItem('MeleePushChance', vscode.CompletionItemKind.Method);
				
				ruleMeleePushChance.detail = "rule.MeleePushChance()";
				ruleMeleePushChance.insertText = new vscode.SnippetString('MeleePushChance()');
				ruleMeleePushChance.documentation = new vscode.MarkdownString("");
				results.push(ruleMeleePushChance);				
				
				const ruleMeleeRangeAggroMod = new vscode.CompletionItem('MeleeRangeAggroMod', vscode.CompletionItemKind.Method);
				
				ruleMeleeRangeAggroMod.detail = "rule.MeleeRangeAggroMod()";
				ruleMeleeRangeAggroMod.insertText = new vscode.SnippetString('MeleeRangeAggroMod()');
				ruleMeleeRangeAggroMod.documentation = new vscode.MarkdownString("");
				results.push(ruleMeleeRangeAggroMod);				
				
				const ruleMercsUsePathing = new vscode.CompletionItem('MercsUsePathing', vscode.CompletionItemKind.Method);
				
				ruleMercsUsePathing.detail = "rule.MercsUsePathing()";
				ruleMercsUsePathing.insertText = new vscode.SnippetString('MercsUsePathing()');
				ruleMercsUsePathing.documentation = new vscode.MarkdownString("");
				results.push(ruleMercsUsePathing);				
				
				const ruleMinAggroLevel = new vscode.CompletionItem('MinAggroLevel', vscode.CompletionItemKind.Method);
				
				ruleMinAggroLevel.detail = "rule.MinAggroLevel()";
				ruleMinAggroLevel.insertText = new vscode.SnippetString('MinAggroLevel()');
				ruleMinAggroLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleMinAggroLevel);				
				
				const ruleMinChancetoHit = new vscode.CompletionItem('MinChancetoHit', vscode.CompletionItemKind.Method);
				
				ruleMinChancetoHit.detail = "rule.MinChancetoHit()";
				ruleMinChancetoHit.insertText = new vscode.SnippetString('MinChancetoHit()');
				ruleMinChancetoHit.documentation = new vscode.MarkdownString("");
				results.push(ruleMinChancetoHit);				
				
				const ruleMinGMAntiHackStatus = new vscode.CompletionItem('MinGMAntiHackStatus', vscode.CompletionItemKind.Method);
				
				ruleMinGMAntiHackStatus.detail = "rule.MinGMAntiHackStatus()";
				ruleMinGMAntiHackStatus.insertText = new vscode.SnippetString('MinGMAntiHackStatus()');
				ruleMinGMAntiHackStatus.documentation = new vscode.MarkdownString("");
				results.push(ruleMinGMAntiHackStatus);				
				
				const ruleMinHastedDelay = new vscode.CompletionItem('MinHastedDelay', vscode.CompletionItemKind.Method);
				
				ruleMinHastedDelay.detail = "rule.MinHastedDelay()";
				ruleMinHastedDelay.insertText = new vscode.SnippetString('MinHastedDelay()');
				ruleMinHastedDelay.documentation = new vscode.MarkdownString("");
				results.push(ruleMinHastedDelay);				
				
				const ruleMinimumMessagesPerInterval = new vscode.CompletionItem('MinimumMessagesPerInterval', vscode.CompletionItemKind.Method);
				
				ruleMinimumMessagesPerInterval.detail = "rule.MinimumMessagesPerInterval()";
				ruleMinimumMessagesPerInterval.insertText = new vscode.SnippetString('MinimumMessagesPerInterval()');
				ruleMinimumMessagesPerInterval.documentation = new vscode.MarkdownString("");
				results.push(ruleMinimumMessagesPerInterval);				
				
				const ruleMinNumberForGroup = new vscode.CompletionItem('MinNumberForGroup', vscode.CompletionItemKind.Method);
				
				ruleMinNumberForGroup.detail = "rule.MinNumberForGroup()";
				ruleMinNumberForGroup.insertText = new vscode.SnippetString('MinNumberForGroup()');
				ruleMinNumberForGroup.documentation = new vscode.MarkdownString("");
				results.push(ruleMinNumberForGroup);				
				
				const ruleMinOfflineTimeToReplenishments = new vscode.CompletionItem('MinOfflineTimeToReplenishments', vscode.CompletionItemKind.Method);
				
				ruleMinOfflineTimeToReplenishments.detail = "rule.MinOfflineTimeToReplenishments()";
				ruleMinOfflineTimeToReplenishments.insertText = new vscode.SnippetString('MinOfflineTimeToReplenishments()');
				ruleMinOfflineTimeToReplenishments.documentation = new vscode.MarkdownString("");
				results.push(ruleMinOfflineTimeToReplenishments);				
				
				const ruleMinOfflineTimeToReturnHome = new vscode.CompletionItem('MinOfflineTimeToReturnHome', vscode.CompletionItemKind.Method);
				
				ruleMinOfflineTimeToReturnHome.detail = "rule.MinOfflineTimeToReturnHome()";
				ruleMinOfflineTimeToReturnHome.insertText = new vscode.SnippetString('MinOfflineTimeToReturnHome()');
				ruleMinOfflineTimeToReturnHome.documentation = new vscode.MarkdownString("");
				results.push(ruleMinOfflineTimeToReturnHome);				
				
				const ruleMinorNPCCorpseDecayTimeMS = new vscode.CompletionItem('MinorNPCCorpseDecayTimeMS', vscode.CompletionItemKind.Method);
				
				ruleMinorNPCCorpseDecayTimeMS.detail = "rule.MinorNPCCorpseDecayTimeMS()";
				ruleMinorNPCCorpseDecayTimeMS.insertText = new vscode.SnippetString('MinorNPCCorpseDecayTimeMS()');
				ruleMinorNPCCorpseDecayTimeMS.documentation = new vscode.MarkdownString("");
				results.push(ruleMinorNPCCorpseDecayTimeMS);				
				
				const ruleMinRangedAttackDist = new vscode.CompletionItem('MinRangedAttackDist', vscode.CompletionItemKind.Method);
				
				ruleMinRangedAttackDist.detail = "rule.MinRangedAttackDist()";
				ruleMinRangedAttackDist.insertText = new vscode.SnippetString('MinRangedAttackDist()');
				ruleMinRangedAttackDist.documentation = new vscode.MarkdownString("");
				results.push(ruleMinRangedAttackDist);				
				
				const ruleMinStatusForNoDropExemptions = new vscode.CompletionItem('MinStatusForNoDropExemptions', vscode.CompletionItemKind.Method);
				
				ruleMinStatusForNoDropExemptions.detail = "rule.MinStatusForNoDropExemptions()";
				ruleMinStatusForNoDropExemptions.insertText = new vscode.SnippetString('MinStatusForNoDropExemptions()');
				ruleMinStatusForNoDropExemptions.documentation = new vscode.MarkdownString("");
				results.push(ruleMinStatusForNoDropExemptions);				
				
				const ruleMinStatusToBypassAntiSpam = new vscode.CompletionItem('MinStatusToBypassAntiSpam', vscode.CompletionItemKind.Method);
				
				ruleMinStatusToBypassAntiSpam.detail = "rule.MinStatusToBypassAntiSpam()";
				ruleMinStatusToBypassAntiSpam.insertText = new vscode.SnippetString('MinStatusToBypassAntiSpam()');
				ruleMinStatusToBypassAntiSpam.documentation = new vscode.MarkdownString("");
				results.push(ruleMinStatusToBypassAntiSpam);				
				
				const ruleMinStatusToLevelTarget = new vscode.CompletionItem('MinStatusToLevelTarget', vscode.CompletionItemKind.Method);
				
				ruleMinStatusToLevelTarget.detail = "rule.MinStatusToLevelTarget()";
				ruleMinStatusToLevelTarget.insertText = new vscode.SnippetString('MinStatusToLevelTarget()');
				ruleMinStatusToLevelTarget.documentation = new vscode.MarkdownString("");
				results.push(ruleMinStatusToLevelTarget);				
				
				const ruleMinStatusToSummonItem = new vscode.CompletionItem('MinStatusToSummonItem', vscode.CompletionItemKind.Method);
				
				ruleMinStatusToSummonItem.detail = "rule.MinStatusToSummonItem()";
				ruleMinStatusToSummonItem.insertText = new vscode.SnippetString('MinStatusToSummonItem()');
				ruleMinStatusToSummonItem.documentation = new vscode.MarkdownString("");
				results.push(ruleMinStatusToSummonItem);				
				
				const ruleMinStatusToZoneAnywhere = new vscode.CompletionItem('MinStatusToZoneAnywhere', vscode.CompletionItemKind.Method);
				
				ruleMinStatusToZoneAnywhere.detail = "rule.MinStatusToZoneAnywhere()";
				ruleMinStatusToZoneAnywhere.insertText = new vscode.SnippetString('MinStatusToZoneAnywhere()');
				ruleMinStatusToZoneAnywhere.documentation = new vscode.MarkdownString("");
				results.push(ruleMinStatusToZoneAnywhere);				
				
				const ruleMiscACSoftcapReturn = new vscode.CompletionItem('MiscACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				ruleMiscACSoftcapReturn.detail = "rule.MiscACSoftcapReturn()";
				ruleMiscACSoftcapReturn.insertText = new vscode.SnippetString('MiscACSoftcapReturn()');
				ruleMiscACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(ruleMiscACSoftcapReturn);				
				
				const ruleMobCloseScanDistance = new vscode.CompletionItem('MobCloseScanDistance', vscode.CompletionItemKind.Method);
				
				ruleMobCloseScanDistance.detail = "rule.MobCloseScanDistance()";
				ruleMobCloseScanDistance.insertText = new vscode.SnippetString('MobCloseScanDistance()');
				ruleMobCloseScanDistance.documentation = new vscode.MarkdownString("");
				results.push(ruleMobCloseScanDistance);				
				
				const ruleMobPositionUpdates = new vscode.CompletionItem('MobPositionUpdates', vscode.CompletionItemKind.Method);
				
				ruleMobPositionUpdates.detail = "rule.MobPositionUpdates()";
				ruleMobPositionUpdates.insertText = new vscode.SnippetString('MobPositionUpdates()');
				ruleMobPositionUpdates.documentation = new vscode.MarkdownString("");
				results.push(ruleMobPositionUpdates);				
				
				const ruleMobZVisualDebug = new vscode.CompletionItem('MobZVisualDebug', vscode.CompletionItemKind.Method);
				
				ruleMobZVisualDebug.detail = "rule.MobZVisualDebug()";
				ruleMobZVisualDebug.insertText = new vscode.SnippetString('MobZVisualDebug()');
				ruleMobZVisualDebug.documentation = new vscode.MarkdownString("");
				results.push(ruleMobZVisualDebug);				
				
				const ruleModernAAScalingAALimit = new vscode.CompletionItem('ModernAAScalingAALimit', vscode.CompletionItemKind.Method);
				
				ruleModernAAScalingAALimit.detail = "rule.ModernAAScalingAALimit()";
				ruleModernAAScalingAALimit.insertText = new vscode.SnippetString('ModernAAScalingAALimit()');
				ruleModernAAScalingAALimit.documentation = new vscode.MarkdownString("");
				results.push(ruleModernAAScalingAALimit);				
				
				const ruleModernAAScalingAAMinimum = new vscode.CompletionItem('ModernAAScalingAAMinimum', vscode.CompletionItemKind.Method);
				
				ruleModernAAScalingAAMinimum.detail = "rule.ModernAAScalingAAMinimum()";
				ruleModernAAScalingAAMinimum.insertText = new vscode.SnippetString('ModernAAScalingAAMinimum()');
				ruleModernAAScalingAAMinimum.documentation = new vscode.MarkdownString("");
				results.push(ruleModernAAScalingAAMinimum);				
				
				const ruleModernAAScalingEnabled = new vscode.CompletionItem('ModernAAScalingEnabled', vscode.CompletionItemKind.Method);
				
				ruleModernAAScalingEnabled.detail = "rule.ModernAAScalingEnabled()";
				ruleModernAAScalingEnabled.insertText = new vscode.SnippetString('ModernAAScalingEnabled()');
				ruleModernAAScalingEnabled.documentation = new vscode.MarkdownString("");
				results.push(ruleModernAAScalingEnabled);				
				
				const ruleModernAAScalingStartPercent = new vscode.CompletionItem('ModernAAScalingStartPercent', vscode.CompletionItemKind.Method);
				
				ruleModernAAScalingStartPercent.detail = "rule.ModernAAScalingStartPercent()";
				ruleModernAAScalingStartPercent.insertText = new vscode.SnippetString('ModernAAScalingStartPercent()');
				ruleModernAAScalingStartPercent.documentation = new vscode.MarkdownString("");
				results.push(ruleModernAAScalingStartPercent);				
				
				const ruleMonkACBonusWeight = new vscode.CompletionItem('MonkACBonusWeight', vscode.CompletionItemKind.Method);
				
				ruleMonkACBonusWeight.detail = "rule.MonkACBonusWeight()";
				ruleMonkACBonusWeight.insertText = new vscode.SnippetString('MonkACBonusWeight()');
				ruleMonkACBonusWeight.documentation = new vscode.MarkdownString("");
				results.push(ruleMonkACBonusWeight);				
				
				const ruleMonkACSoftcap = new vscode.CompletionItem('MonkACSoftcap', vscode.CompletionItemKind.Method);
				
				ruleMonkACSoftcap.detail = "rule.MonkACSoftcap()";
				ruleMonkACSoftcap.insertText = new vscode.SnippetString('MonkACSoftcap()');
				ruleMonkACSoftcap.documentation = new vscode.MarkdownString("");
				results.push(ruleMonkACSoftcap);				
				
				const ruleMonkDamageTableBonus = new vscode.CompletionItem('MonkDamageTableBonus', vscode.CompletionItemKind.Method);
				
				ruleMonkDamageTableBonus.detail = "rule.MonkDamageTableBonus()";
				ruleMonkDamageTableBonus.insertText = new vscode.SnippetString('MonkDamageTableBonus()');
				ruleMonkDamageTableBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleMonkDamageTableBonus);				
				
				const ruleMQGateExemptStatus = new vscode.CompletionItem('MQGateExemptStatus', vscode.CompletionItemKind.Method);
				
				ruleMQGateExemptStatus.detail = "rule.MQGateExemptStatus()";
				ruleMQGateExemptStatus.insertText = new vscode.SnippetString('MQGateExemptStatus()');
				ruleMQGateExemptStatus.documentation = new vscode.MarkdownString("");
				results.push(ruleMQGateExemptStatus);				
				
				const ruleMQGhostExemptStatus = new vscode.CompletionItem('MQGhostExemptStatus', vscode.CompletionItemKind.Method);
				
				ruleMQGhostExemptStatus.detail = "rule.MQGhostExemptStatus()";
				ruleMQGhostExemptStatus.insertText = new vscode.SnippetString('MQGhostExemptStatus()');
				ruleMQGhostExemptStatus.documentation = new vscode.MarkdownString("");
				results.push(ruleMQGhostExemptStatus);				
				
				const ruleMQWarpDetectionDistanceFactor = new vscode.CompletionItem('MQWarpDetectionDistanceFactor', vscode.CompletionItemKind.Method);
				
				ruleMQWarpDetectionDistanceFactor.detail = "rule.MQWarpDetectionDistanceFactor()";
				ruleMQWarpDetectionDistanceFactor.insertText = new vscode.SnippetString('MQWarpDetectionDistanceFactor()');
				ruleMQWarpDetectionDistanceFactor.documentation = new vscode.MarkdownString("");
				results.push(ruleMQWarpDetectionDistanceFactor);				
				
				const ruleMQWarpExemptStatus = new vscode.CompletionItem('MQWarpExemptStatus', vscode.CompletionItemKind.Method);
				
				ruleMQWarpExemptStatus.detail = "rule.MQWarpExemptStatus()";
				ruleMQWarpExemptStatus.insertText = new vscode.SnippetString('MQWarpExemptStatus()');
				ruleMQWarpExemptStatus.documentation = new vscode.MarkdownString("");
				results.push(ruleMQWarpExemptStatus);				
				
				const ruleMQZoneExemptStatus = new vscode.CompletionItem('MQZoneExemptStatus', vscode.CompletionItemKind.Method);
				
				ruleMQZoneExemptStatus.detail = "rule.MQZoneExemptStatus()";
				ruleMQZoneExemptStatus.insertText = new vscode.SnippetString('MQZoneExemptStatus()');
				ruleMQZoneExemptStatus.documentation = new vscode.MarkdownString("");
				results.push(ruleMQZoneExemptStatus);				
				
				const ruleNavmeshStepSize = new vscode.CompletionItem('NavmeshStepSize', vscode.CompletionItemKind.Method);
				
				ruleNavmeshStepSize.detail = "rule.NavmeshStepSize()";
				ruleNavmeshStepSize.insertText = new vscode.SnippetString('NavmeshStepSize()');
				ruleNavmeshStepSize.documentation = new vscode.MarkdownString("");
				results.push(ruleNavmeshStepSize);				
				
				const ruleNewLevelScaling = new vscode.CompletionItem('NewLevelScaling', vscode.CompletionItemKind.Method);
				
				ruleNewLevelScaling.detail = "rule.NewLevelScaling()";
				ruleNewLevelScaling.insertText = new vscode.SnippetString('NewLevelScaling()');
				ruleNewLevelScaling.documentation = new vscode.MarkdownString("");
				results.push(ruleNewLevelScaling);				
				
				const ruleNormalizedAAEnabled = new vscode.CompletionItem('NormalizedAAEnabled', vscode.CompletionItemKind.Method);
				
				ruleNormalizedAAEnabled.detail = "rule.NormalizedAAEnabled()";
				ruleNormalizedAAEnabled.insertText = new vscode.SnippetString('NormalizedAAEnabled()');
				ruleNormalizedAAEnabled.documentation = new vscode.MarkdownString("");
				results.push(ruleNormalizedAAEnabled);				
				
				const ruleNormalizedAANumberOfWhiteConPerAA = new vscode.CompletionItem('NormalizedAANumberOfWhiteConPerAA', vscode.CompletionItemKind.Method);
				
				ruleNormalizedAANumberOfWhiteConPerAA.detail = "rule.NormalizedAANumberOfWhiteConPerAA()";
				ruleNormalizedAANumberOfWhiteConPerAA.insertText = new vscode.SnippetString('NormalizedAANumberOfWhiteConPerAA()');
				ruleNormalizedAANumberOfWhiteConPerAA.documentation = new vscode.MarkdownString("");
				results.push(ruleNormalizedAANumberOfWhiteConPerAA);				
				
				const ruleNPCUseFocusFromItems = new vscode.CompletionItem('NPC_UseFocusFromItems', vscode.CompletionItemKind.Method);
				
				ruleNPCUseFocusFromItems.detail = "rule.NPC_UseFocusFromItems()";
				ruleNPCUseFocusFromItems.insertText = new vscode.SnippetString('NPC_UseFocusFromItems()');
				ruleNPCUseFocusFromItems.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCUseFocusFromItems);				
				
				const ruleNPCUseFocusFromSpells = new vscode.CompletionItem('NPC_UseFocusFromSpells', vscode.CompletionItemKind.Method);
				
				ruleNPCUseFocusFromSpells.detail = "rule.NPC_UseFocusFromSpells()";
				ruleNPCUseFocusFromSpells.insertText = new vscode.SnippetString('NPC_UseFocusFromSpells()');
				ruleNPCUseFocusFromSpells.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCUseFocusFromSpells);				
				
				const ruleNPCACFactor = new vscode.CompletionItem('NPCACFactor', vscode.CompletionItemKind.Method);
				
				ruleNPCACFactor.detail = "rule.NPCACFactor()";
				ruleNPCACFactor.insertText = new vscode.SnippetString('NPCACFactor()');
				ruleNPCACFactor.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCACFactor);				
				
				const ruleNPCAggroMaxDistanceEnabled = new vscode.CompletionItem('NPCAggroMaxDistanceEnabled', vscode.CompletionItemKind.Method);
				
				ruleNPCAggroMaxDistanceEnabled.detail = "rule.NPCAggroMaxDistanceEnabled()";
				ruleNPCAggroMaxDistanceEnabled.insertText = new vscode.SnippetString('NPCAggroMaxDistanceEnabled()');
				ruleNPCAggroMaxDistanceEnabled.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCAggroMaxDistanceEnabled);				
				
				const ruleNPCAssistCap = new vscode.CompletionItem('NPCAssistCap', vscode.CompletionItemKind.Method);
				
				ruleNPCAssistCap.detail = "rule.NPCAssistCap()";
				ruleNPCAssistCap.insertText = new vscode.SnippetString('NPCAssistCap()');
				ruleNPCAssistCap.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCAssistCap);				
				
				const ruleNPCAssistCapTimer = new vscode.CompletionItem('NPCAssistCapTimer', vscode.CompletionItemKind.Method);
				
				ruleNPCAssistCapTimer.detail = "rule.NPCAssistCapTimer()";
				ruleNPCAssistCapTimer.insertText = new vscode.SnippetString('NPCAssistCapTimer()');
				ruleNPCAssistCapTimer.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCAssistCapTimer);				
				
				const ruleNPCBashKickLevel = new vscode.CompletionItem('NPCBashKickLevel', vscode.CompletionItemKind.Method);
				
				ruleNPCBashKickLevel.detail = "rule.NPCBashKickLevel()";
				ruleNPCBashKickLevel.insertText = new vscode.SnippetString('NPCBashKickLevel()');
				ruleNPCBashKickLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCBashKickLevel);				
				
				const ruleNPCBashKickStunChance = new vscode.CompletionItem('NPCBashKickStunChance', vscode.CompletionItemKind.Method);
				
				ruleNPCBashKickStunChance.detail = "rule.NPCBashKickStunChance()";
				ruleNPCBashKickStunChance.insertText = new vscode.SnippetString('NPCBashKickStunChance()');
				ruleNPCBashKickStunChance.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCBashKickStunChance);				
				
				const ruleNPCBonusHitChance = new vscode.CompletionItem('NPCBonusHitChance', vscode.CompletionItemKind.Method);
				
				ruleNPCBonusHitChance.detail = "rule.NPCBonusHitChance()";
				ruleNPCBonusHitChance.insertText = new vscode.SnippetString('NPCBonusHitChance()');
				ruleNPCBonusHitChance.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCBonusHitChance);				
				
				const ruleNPCCanCrit = new vscode.CompletionItem('NPCCanCrit', vscode.CompletionItemKind.Method);
				
				ruleNPCCanCrit.detail = "rule.NPCCanCrit()";
				ruleNPCCanCrit.insertText = new vscode.SnippetString('NPCCanCrit()');
				ruleNPCCanCrit.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCCanCrit);				
				
				const ruleNPCFlurryChance = new vscode.CompletionItem('NPCFlurryChance', vscode.CompletionItemKind.Method);
				
				ruleNPCFlurryChance.detail = "rule.NPCFlurryChance()";
				ruleNPCFlurryChance.insertText = new vscode.SnippetString('NPCFlurryChance()');
				ruleNPCFlurryChance.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCFlurryChance);				
				
				const ruleNPCGateDistanceBind = new vscode.CompletionItem('NPCGateDistanceBind', vscode.CompletionItemKind.Method);
				
				ruleNPCGateDistanceBind.detail = "rule.NPCGateDistanceBind()";
				ruleNPCGateDistanceBind.insertText = new vscode.SnippetString('NPCGateDistanceBind()');
				ruleNPCGateDistanceBind.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCGateDistanceBind);				
				
				const ruleNPCGateNearBind = new vscode.CompletionItem('NPCGateNearBind', vscode.CompletionItemKind.Method);
				
				ruleNPCGateNearBind.detail = "rule.NPCGateNearBind()";
				ruleNPCGateNearBind.insertText = new vscode.SnippetString('NPCGateNearBind()');
				ruleNPCGateNearBind.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCGateNearBind);				
				
				const ruleNPCGatePercent = new vscode.CompletionItem('NPCGatePercent', vscode.CompletionItemKind.Method);
				
				ruleNPCGatePercent.detail = "rule.NPCGatePercent()";
				ruleNPCGatePercent.insertText = new vscode.SnippetString('NPCGatePercent()');
				ruleNPCGatePercent.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCGatePercent);				
				
				const ruleNPCHealOnGate = new vscode.CompletionItem('NPCHealOnGate', vscode.CompletionItemKind.Method);
				
				ruleNPCHealOnGate.detail = "rule.NPCHealOnGate()";
				ruleNPCHealOnGate.insertText = new vscode.SnippetString('NPCHealOnGate()');
				ruleNPCHealOnGate.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCHealOnGate);				
				
				const ruleNPCHealOnGateAmount = new vscode.CompletionItem('NPCHealOnGateAmount', vscode.CompletionItemKind.Method);
				
				ruleNPCHealOnGateAmount.detail = "rule.NPCHealOnGateAmount()";
				ruleNPCHealOnGateAmount.insertText = new vscode.SnippetString('NPCHealOnGateAmount()');
				ruleNPCHealOnGateAmount.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCHealOnGateAmount);				
				
				const ruleNPCIgnoreBaseImmunity = new vscode.CompletionItem('NPCIgnoreBaseImmunity', vscode.CompletionItemKind.Method);
				
				ruleNPCIgnoreBaseImmunity.detail = "rule.NPCIgnoreBaseImmunity()";
				ruleNPCIgnoreBaseImmunity.insertText = new vscode.SnippetString('NPCIgnoreBaseImmunity()');
				ruleNPCIgnoreBaseImmunity.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCIgnoreBaseImmunity);				
				
				const ruleNPCInnateProcOverride = new vscode.CompletionItem('NPCInnateProcOverride', vscode.CompletionItemKind.Method);
				
				ruleNPCInnateProcOverride.detail = "rule.NPCInnateProcOverride()";
				ruleNPCInnateProcOverride.insertText = new vscode.SnippetString('NPCInnateProcOverride()');
				ruleNPCInnateProcOverride.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCInnateProcOverride);				
				
				const ruleNPCSpellPush = new vscode.CompletionItem('NPCSpellPush', vscode.CompletionItemKind.Method);
				
				ruleNPCSpellPush.detail = "rule.NPCSpellPush()";
				ruleNPCSpellPush.insertText = new vscode.SnippetString('NPCSpellPush()');
				ruleNPCSpellPush.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCSpellPush);				
				
				const ruleNPCToNPCAggroTimerMax = new vscode.CompletionItem('NPCToNPCAggroTimerMax', vscode.CompletionItemKind.Method);
				
				ruleNPCToNPCAggroTimerMax.detail = "rule.NPCToNPCAggroTimerMax()";
				ruleNPCToNPCAggroTimerMax.insertText = new vscode.SnippetString('NPCToNPCAggroTimerMax()');
				ruleNPCToNPCAggroTimerMax.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCToNPCAggroTimerMax);				
				
				const ruleNPCToNPCAggroTimerMin = new vscode.CompletionItem('NPCToNPCAggroTimerMin', vscode.CompletionItemKind.Method);
				
				ruleNPCToNPCAggroTimerMin.detail = "rule.NPCToNPCAggroTimerMin()";
				ruleNPCToNPCAggroTimerMin.insertText = new vscode.SnippetString('NPCToNPCAggroTimerMin()');
				ruleNPCToNPCAggroTimerMin.documentation = new vscode.MarkdownString("");
				results.push(ruleNPCToNPCAggroTimerMin);				
				
				const ruleNumberKillsForBossSpawn = new vscode.CompletionItem('NumberKillsForBossSpawn', vscode.CompletionItemKind.Method);
				
				ruleNumberKillsForBossSpawn.detail = "rule.NumberKillsForBossSpawn()";
				ruleNumberKillsForBossSpawn.insertText = new vscode.SnippetString('NumberKillsForBossSpawn()');
				ruleNumberKillsForBossSpawn.documentation = new vscode.MarkdownString("");
				results.push(ruleNumberKillsForBossSpawn);				
				
				const ruleOgreCommonTongue = new vscode.CompletionItem('OgreCommonTongue', vscode.CompletionItemKind.Method);
				
				ruleOgreCommonTongue.detail = "rule.OgreCommonTongue()";
				ruleOgreCommonTongue.insertText = new vscode.SnippetString('OgreCommonTongue()');
				ruleOgreCommonTongue.documentation = new vscode.MarkdownString("");
				results.push(ruleOgreCommonTongue);				
				
				const ruleOldACSoftcapRules = new vscode.CompletionItem('OldACSoftcapRules', vscode.CompletionItemKind.Method);
				
				ruleOldACSoftcapRules.detail = "rule.OldACSoftcapRules()";
				ruleOldACSoftcapRules.insertText = new vscode.SnippetString('OldACSoftcapRules()');
				ruleOldACSoftcapRules.documentation = new vscode.MarkdownString("");
				results.push(ruleOldACSoftcapRules);				
				
				const ruleOldMinMana = new vscode.CompletionItem('OldMinMana', vscode.CompletionItemKind.Method);
				
				ruleOldMinMana.detail = "rule.OldMinMana()";
				ruleOldMinMana.insertText = new vscode.SnippetString('OldMinMana()');
				ruleOldMinMana.documentation = new vscode.MarkdownString("");
				results.push(ruleOldMinMana);				
				
				const ruleOldRainTargets = new vscode.CompletionItem('OldRainTargets', vscode.CompletionItemKind.Method);
				
				ruleOldRainTargets.detail = "rule.OldRainTargets()";
				ruleOldRainTargets.insertText = new vscode.SnippetString('OldRainTargets()');
				ruleOldRainTargets.documentation = new vscode.MarkdownString("");
				results.push(ruleOldRainTargets);				
				
				const ruleOneProcPerWeapon = new vscode.CompletionItem('OneProcPerWeapon', vscode.CompletionItemKind.Method);
				
				ruleOneProcPerWeapon.detail = "rule.OneProcPerWeapon()";
				ruleOneProcPerWeapon.insertText = new vscode.SnippetString('OneProcPerWeapon()');
				ruleOneProcPerWeapon.documentation = new vscode.MarkdownString("");
				results.push(ruleOneProcPerWeapon);				
				
				const ruleOOCRegen = new vscode.CompletionItem('OOCRegen', vscode.CompletionItemKind.Method);
				
				ruleOOCRegen.detail = "rule.OOCRegen()";
				ruleOOCRegen.insertText = new vscode.SnippetString('OOCRegen()');
				ruleOOCRegen.documentation = new vscode.MarkdownString("");
				results.push(ruleOOCRegen);				
				
				const ruleOPClientUpdateVisualDebug = new vscode.CompletionItem('OPClientUpdateVisualDebug', vscode.CompletionItemKind.Method);
				
				ruleOPClientUpdateVisualDebug.detail = "rule.OPClientUpdateVisualDebug()";
				ruleOPClientUpdateVisualDebug.insertText = new vscode.SnippetString('OPClientUpdateVisualDebug()');
				ruleOPClientUpdateVisualDebug.documentation = new vscode.MarkdownString("");
				results.push(ruleOPClientUpdateVisualDebug);				
				
				const ruleOrnamentationAugmentType = new vscode.CompletionItem('OrnamentationAugmentType', vscode.CompletionItemKind.Method);
				
				ruleOrnamentationAugmentType.detail = "rule.OrnamentationAugmentType()";
				ruleOrnamentationAugmentType.insertText = new vscode.SnippetString('OrnamentationAugmentType()');
				ruleOrnamentationAugmentType.documentation = new vscode.MarkdownString("");
				results.push(ruleOrnamentationAugmentType);				
				
				const rulePalShdACSoftcapReturn = new vscode.CompletionItem('PalShdACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				rulePalShdACSoftcapReturn.detail = "rule.PalShdACSoftcapReturn()";
				rulePalShdACSoftcapReturn.insertText = new vscode.SnippetString('PalShdACSoftcapReturn()');
				rulePalShdACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(rulePalShdACSoftcapReturn);				
				
				const rulePartialHitChance = new vscode.CompletionItem('PartialHitChance', vscode.CompletionItemKind.Method);
				
				rulePartialHitChance.detail = "rule.PartialHitChance()";
				rulePartialHitChance.insertText = new vscode.SnippetString('PartialHitChance()');
				rulePartialHitChance.documentation = new vscode.MarkdownString("");
				results.push(rulePartialHitChance);				
				
				const rulePartialHitChanceFear = new vscode.CompletionItem('PartialHitChanceFear', vscode.CompletionItemKind.Method);
				
				rulePartialHitChanceFear.detail = "rule.PartialHitChanceFear()";
				rulePartialHitChanceFear.insertText = new vscode.SnippetString('PartialHitChanceFear()');
				rulePartialHitChanceFear.documentation = new vscode.MarkdownString("");
				results.push(rulePartialHitChanceFear);				
				
				const rulePEQZoneDebuff1 = new vscode.CompletionItem('PEQZoneDebuff1', vscode.CompletionItemKind.Method);
				
				rulePEQZoneDebuff1.detail = "rule.PEQZoneDebuff1()";
				rulePEQZoneDebuff1.insertText = new vscode.SnippetString('PEQZoneDebuff1()');
				rulePEQZoneDebuff1.documentation = new vscode.MarkdownString("");
				results.push(rulePEQZoneDebuff1);				
				
				const rulePEQZoneDebuff2 = new vscode.CompletionItem('PEQZoneDebuff2', vscode.CompletionItemKind.Method);
				
				rulePEQZoneDebuff2.detail = "rule.PEQZoneDebuff2()";
				rulePEQZoneDebuff2.insertText = new vscode.SnippetString('PEQZoneDebuff2()');
				rulePEQZoneDebuff2.documentation = new vscode.MarkdownString("");
				results.push(rulePEQZoneDebuff2);				
				
				const rulePEQZoneReuseTime = new vscode.CompletionItem('PEQZoneReuseTime', vscode.CompletionItemKind.Method);
				
				rulePEQZoneReuseTime.detail = "rule.PEQZoneReuseTime()";
				rulePEQZoneReuseTime.insertText = new vscode.SnippetString('PEQZoneReuseTime()');
				rulePEQZoneReuseTime.documentation = new vscode.MarkdownString("");
				results.push(rulePEQZoneReuseTime);				
				
				const rulePerCharacterBucketMaxLevel = new vscode.CompletionItem('PerCharacterBucketMaxLevel', vscode.CompletionItemKind.Method);
				
				rulePerCharacterBucketMaxLevel.detail = "rule.PerCharacterBucketMaxLevel()";
				rulePerCharacterBucketMaxLevel.insertText = new vscode.SnippetString('PerCharacterBucketMaxLevel()');
				rulePerCharacterBucketMaxLevel.documentation = new vscode.MarkdownString("");
				results.push(rulePerCharacterBucketMaxLevel);				
				
				const rulePerCharacterQglobalMaxLevel = new vscode.CompletionItem('PerCharacterQglobalMaxLevel', vscode.CompletionItemKind.Method);
				
				rulePerCharacterQglobalMaxLevel.detail = "rule.PerCharacterQglobalMaxLevel()";
				rulePerCharacterQglobalMaxLevel.insertText = new vscode.SnippetString('PerCharacterQglobalMaxLevel()');
				rulePerCharacterQglobalMaxLevel.documentation = new vscode.MarkdownString("");
				results.push(rulePerCharacterQglobalMaxLevel);				
				
				const rulePeriodicCheckTimer = new vscode.CompletionItem('PeriodicCheckTimer', vscode.CompletionItemKind.Method);
				
				rulePeriodicCheckTimer.detail = "rule.PeriodicCheckTimer()";
				rulePeriodicCheckTimer.insertText = new vscode.SnippetString('PeriodicCheckTimer()');
				rulePeriodicCheckTimer.documentation = new vscode.MarkdownString("");
				results.push(rulePeriodicCheckTimer);				
				
				const rulePetAttackMagicLevel = new vscode.CompletionItem('PetAttackMagicLevel', vscode.CompletionItemKind.Method);
				
				rulePetAttackMagicLevel.detail = "rule.PetAttackMagicLevel()";
				rulePetAttackMagicLevel.insertText = new vscode.SnippetString('PetAttackMagicLevel()');
				rulePetAttackMagicLevel.documentation = new vscode.MarkdownString("");
				results.push(rulePetAttackMagicLevel);				
				
				const rulePetAttackRange = new vscode.CompletionItem('PetAttackRange', vscode.CompletionItemKind.Method);
				
				rulePetAttackRange.detail = "rule.PetAttackRange()";
				rulePetAttackRange.insertText = new vscode.SnippetString('PetAttackRange()');
				rulePetAttackRange.documentation = new vscode.MarkdownString("");
				results.push(rulePetAttackRange);				
				
				const rulePetBaseCritChance = new vscode.CompletionItem('PetBaseCritChance', vscode.CompletionItemKind.Method);
				
				rulePetBaseCritChance.detail = "rule.PetBaseCritChance()";
				rulePetBaseCritChance.insertText = new vscode.SnippetString('PetBaseCritChance()');
				rulePetBaseCritChance.documentation = new vscode.MarkdownString("");
				results.push(rulePetBaseCritChance);				
				
				const rulePetPowerLevelCap = new vscode.CompletionItem('PetPowerLevelCap', vscode.CompletionItemKind.Method);
				
				rulePetPowerLevelCap.detail = "rule.PetPowerLevelCap()";
				rulePetPowerLevelCap.insertText = new vscode.SnippetString('PetPowerLevelCap()');
				rulePetPowerLevelCap.documentation = new vscode.MarkdownString("");
				results.push(rulePetPowerLevelCap);				
				
				const rulePetSpellAggroMod = new vscode.CompletionItem('PetSpellAggroMod', vscode.CompletionItemKind.Method);
				
				rulePetSpellAggroMod.detail = "rule.PetSpellAggroMod()";
				rulePetSpellAggroMod.insertText = new vscode.SnippetString('PetSpellAggroMod()');
				rulePetSpellAggroMod.documentation = new vscode.MarkdownString("");
				results.push(rulePetSpellAggroMod);				
				
				const rulePetsUseReagents = new vscode.CompletionItem('PetsUseReagents', vscode.CompletionItemKind.Method);
				
				rulePetsUseReagents.detail = "rule.PetsUseReagents()";
				rulePetsUseReagents.insertText = new vscode.SnippetString('PetsUseReagents()');
				rulePetsUseReagents.documentation = new vscode.MarkdownString("");
				results.push(rulePetsUseReagents);				
				
				const rulePlateACSoftcap = new vscode.CompletionItem('PlateACSoftcap', vscode.CompletionItemKind.Method);
				
				rulePlateACSoftcap.detail = "rule.PlateACSoftcap()";
				rulePlateACSoftcap.insertText = new vscode.SnippetString('PlateACSoftcap()');
				rulePlateACSoftcap.documentation = new vscode.MarkdownString("");
				results.push(rulePlateACSoftcap);				
				
				const rulePlayerCreationAllowed = new vscode.CompletionItem('PlayerCreationAllowed', vscode.CompletionItemKind.Method);
				
				rulePlayerCreationAllowed.detail = "rule.PlayerCreationAllowed()";
				rulePlayerCreationAllowed.insertText = new vscode.SnippetString('PlayerCreationAllowed()');
				rulePlayerCreationAllowed.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerCreationAllowed);				
				
				const rulePlayerCreationLimit = new vscode.CompletionItem('PlayerCreationLimit', vscode.CompletionItemKind.Method);
				
				rulePlayerCreationLimit.detail = "rule.PlayerCreationLimit()";
				rulePlayerCreationLimit.insertText = new vscode.SnippetString('PlayerCreationLimit()');
				rulePlayerCreationLimit.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerCreationLimit);				
				
				const rulePlayerCreationRequiredLevel = new vscode.CompletionItem('PlayerCreationRequiredLevel', vscode.CompletionItemKind.Method);
				
				rulePlayerCreationRequiredLevel.detail = "rule.PlayerCreationRequiredLevel()";
				rulePlayerCreationRequiredLevel.insertText = new vscode.SnippetString('PlayerCreationRequiredLevel()');
				rulePlayerCreationRequiredLevel.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerCreationRequiredLevel);				
				
				const rulePlayerCreationRequiredStatus = new vscode.CompletionItem('PlayerCreationRequiredStatus', vscode.CompletionItemKind.Method);
				
				rulePlayerCreationRequiredStatus.detail = "rule.PlayerCreationRequiredStatus()";
				rulePlayerCreationRequiredStatus.insertText = new vscode.SnippetString('PlayerCreationRequiredStatus()');
				rulePlayerCreationRequiredStatus.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerCreationRequiredStatus);				
				
				const rulePlayerCreationRequiredTime = new vscode.CompletionItem('PlayerCreationRequiredTime', vscode.CompletionItemKind.Method);
				
				rulePlayerCreationRequiredTime.detail = "rule.PlayerCreationRequiredTime()";
				rulePlayerCreationRequiredTime.insertText = new vscode.SnippetString('PlayerCreationRequiredTime()');
				rulePlayerCreationRequiredTime.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerCreationRequiredTime);				
				
				const rulePlayerDropItems = new vscode.CompletionItem('PlayerDropItems', vscode.CompletionItemKind.Method);
				
				rulePlayerDropItems.detail = "rule.PlayerDropItems()";
				rulePlayerDropItems.insertText = new vscode.SnippetString('PlayerDropItems()');
				rulePlayerDropItems.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerDropItems);				
				
				const rulePlayerLogAAPurchases = new vscode.CompletionItem('PlayerLogAAPurchases', vscode.CompletionItemKind.Method);
				
				rulePlayerLogAAPurchases.detail = "rule.PlayerLogAAPurchases()";
				rulePlayerLogAAPurchases.insertText = new vscode.SnippetString('PlayerLogAAPurchases()');
				rulePlayerLogAAPurchases.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogAAPurchases);				
				
				const rulePlayerLogAARate = new vscode.CompletionItem('PlayerLogAARate', vscode.CompletionItemKind.Method);
				
				rulePlayerLogAARate.detail = "rule.PlayerLogAARate()";
				rulePlayerLogAARate.insertText = new vscode.SnippetString('PlayerLogAARate()');
				rulePlayerLogAARate.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogAARate);				
				
				const rulePlayerLogAlternateCurrencyTransactions = new vscode.CompletionItem('PlayerLogAlternateCurrencyTransactions', vscode.CompletionItemKind.Method);
				
				rulePlayerLogAlternateCurrencyTransactions.detail = "rule.PlayerLogAlternateCurrencyTransactions()";
				rulePlayerLogAlternateCurrencyTransactions.insertText = new vscode.SnippetString('PlayerLogAlternateCurrencyTransactions()');
				rulePlayerLogAlternateCurrencyTransactions.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogAlternateCurrencyTransactions);				
				
				const rulePlayerLogChat = new vscode.CompletionItem('PlayerLogChat', vscode.CompletionItemKind.Method);
				
				rulePlayerLogChat.detail = "rule.PlayerLogChat()";
				rulePlayerLogChat.insertText = new vscode.SnippetString('PlayerLogChat()');
				rulePlayerLogChat.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogChat);				
				
				const rulePlayerLogConnectDisconnect = new vscode.CompletionItem('PlayerLogConnectDisconnect', vscode.CompletionItemKind.Method);
				
				rulePlayerLogConnectDisconnect.detail = "rule.PlayerLogConnectDisconnect()";
				rulePlayerLogConnectDisconnect.insertText = new vscode.SnippetString('PlayerLogConnectDisconnect()');
				rulePlayerLogConnectDisconnect.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogConnectDisconnect);				
				
				const rulePlayerLogDeaths = new vscode.CompletionItem('PlayerLogDeaths', vscode.CompletionItemKind.Method);
				
				rulePlayerLogDeaths.detail = "rule.PlayerLogDeaths()";
				rulePlayerLogDeaths.insertText = new vscode.SnippetString('PlayerLogDeaths()');
				rulePlayerLogDeaths.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogDeaths);				
				
				const rulePlayerLogDeletes = new vscode.CompletionItem('PlayerLogDeletes', vscode.CompletionItemKind.Method);
				
				rulePlayerLogDeletes.detail = "rule.PlayerLogDeletes()";
				rulePlayerLogDeletes.insertText = new vscode.SnippetString('PlayerLogDeletes()');
				rulePlayerLogDeletes.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogDeletes);				
				
				const rulePlayerLogDropItem = new vscode.CompletionItem('PlayerLogDropItem', vscode.CompletionItemKind.Method);
				
				rulePlayerLogDropItem.detail = "rule.PlayerLogDropItem()";
				rulePlayerLogDropItem.insertText = new vscode.SnippetString('PlayerLogDropItem()');
				rulePlayerLogDropItem.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogDropItem);				
				
				const rulePlayerLogHandins = new vscode.CompletionItem('PlayerLogHandins', vscode.CompletionItemKind.Method);
				
				rulePlayerLogHandins.detail = "rule.PlayerLogHandins()";
				rulePlayerLogHandins.insertText = new vscode.SnippetString('PlayerLogHandins()');
				rulePlayerLogHandins.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogHandins);				
				
				const rulePlayerLogIssuedCommandes = new vscode.CompletionItem('PlayerLogIssuedCommandes', vscode.CompletionItemKind.Method);
				
				rulePlayerLogIssuedCommandes.detail = "rule.PlayerLogIssuedCommandes()";
				rulePlayerLogIssuedCommandes.insertText = new vscode.SnippetString('PlayerLogIssuedCommandes()');
				rulePlayerLogIssuedCommandes.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogIssuedCommandes);				
				
				const rulePlayerLogKeyringAddition = new vscode.CompletionItem('PlayerLogKeyringAddition', vscode.CompletionItemKind.Method);
				
				rulePlayerLogKeyringAddition.detail = "rule.PlayerLogKeyringAddition()";
				rulePlayerLogKeyringAddition.insertText = new vscode.SnippetString('PlayerLogKeyringAddition()');
				rulePlayerLogKeyringAddition.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogKeyringAddition);				
				
				const rulePlayerLogLevels = new vscode.CompletionItem('PlayerLogLevels', vscode.CompletionItemKind.Method);
				
				rulePlayerLogLevels.detail = "rule.PlayerLogLevels()";
				rulePlayerLogLevels.insertText = new vscode.SnippetString('PlayerLogLevels()');
				rulePlayerLogLevels.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogLevels);				
				
				const rulePlayerLogMerchantTransactions = new vscode.CompletionItem('PlayerLogMerchantTransactions', vscode.CompletionItemKind.Method);
				
				rulePlayerLogMerchantTransactions.detail = "rule.PlayerLogMerchantTransactions()";
				rulePlayerLogMerchantTransactions.insertText = new vscode.SnippetString('PlayerLogMerchantTransactions()');
				rulePlayerLogMerchantTransactions.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogMerchantTransactions);				
				
				const rulePlayerLogMoneyTransactions = new vscode.CompletionItem('PlayerLogMoneyTransactions', vscode.CompletionItemKind.Method);
				
				rulePlayerLogMoneyTransactions.detail = "rule.PlayerLogMoneyTransactions()";
				rulePlayerLogMoneyTransactions.insertText = new vscode.SnippetString('PlayerLogMoneyTransactions()');
				rulePlayerLogMoneyTransactions.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogMoneyTransactions);				
				
				const rulePlayerLogMoves = new vscode.CompletionItem('PlayerLogMoves', vscode.CompletionItemKind.Method);
				
				rulePlayerLogMoves.detail = "rule.PlayerLogMoves()";
				rulePlayerLogMoves.insertText = new vscode.SnippetString('PlayerLogMoves()');
				rulePlayerLogMoves.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogMoves);				
				
				const rulePlayerLogNPCKills = new vscode.CompletionItem('PlayerLogNPCKills', vscode.CompletionItemKind.Method);
				
				rulePlayerLogNPCKills.detail = "rule.PlayerLogNPCKills()";
				rulePlayerLogNPCKills.insertText = new vscode.SnippetString('PlayerLogNPCKills()');
				rulePlayerLogNPCKills.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogNPCKills);				
				
				const rulePlayerLogPCCoordinates = new vscode.CompletionItem('PlayerLogPCCoordinates', vscode.CompletionItemKind.Method);
				
				rulePlayerLogPCCoordinates.detail = "rule.PlayerLogPCCoordinates()";
				rulePlayerLogPCCoordinates.insertText = new vscode.SnippetString('PlayerLogPCCoordinates()');
				rulePlayerLogPCCoordinates.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogPCCoordinates);				
				
				const rulePlayerLogQGlobalUpdate = new vscode.CompletionItem('PlayerLogQGlobalUpdate', vscode.CompletionItemKind.Method);
				
				rulePlayerLogQGlobalUpdate.detail = "rule.PlayerLogQGlobalUpdate()";
				rulePlayerLogQGlobalUpdate.insertText = new vscode.SnippetString('PlayerLogQGlobalUpdate()');
				rulePlayerLogQGlobalUpdate.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogQGlobalUpdate);				
				
				const rulePlayerLogTaskUpdates = new vscode.CompletionItem('PlayerLogTaskUpdates', vscode.CompletionItemKind.Method);
				
				rulePlayerLogTaskUpdates.detail = "rule.PlayerLogTaskUpdates()";
				rulePlayerLogTaskUpdates.insertText = new vscode.SnippetString('PlayerLogTaskUpdates()');
				rulePlayerLogTaskUpdates.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogTaskUpdates);				
				
				const rulePlayerLogTrades = new vscode.CompletionItem('PlayerLogTrades', vscode.CompletionItemKind.Method);
				
				rulePlayerLogTrades.detail = "rule.PlayerLogTrades()";
				rulePlayerLogTrades.insertText = new vscode.SnippetString('PlayerLogTrades()');
				rulePlayerLogTrades.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogTrades);				
				
				const rulePlayerLogTradeSkillEvents = new vscode.CompletionItem('PlayerLogTradeSkillEvents', vscode.CompletionItemKind.Method);
				
				rulePlayerLogTradeSkillEvents.detail = "rule.PlayerLogTradeSkillEvents()";
				rulePlayerLogTradeSkillEvents.insertText = new vscode.SnippetString('PlayerLogTradeSkillEvents()');
				rulePlayerLogTradeSkillEvents.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogTradeSkillEvents);				
				
				const rulePlayerLogZone = new vscode.CompletionItem('PlayerLogZone', vscode.CompletionItemKind.Method);
				
				rulePlayerLogZone.detail = "rule.PlayerLogZone()";
				rulePlayerLogZone.insertText = new vscode.SnippetString('PlayerLogZone()');
				rulePlayerLogZone.documentation = new vscode.MarkdownString("");
				results.push(rulePlayerLogZone);				
				
				const rulePreferNoManaCommandSpells = new vscode.CompletionItem('PreferNoManaCommandSpells', vscode.CompletionItemKind.Method);
				
				rulePreferNoManaCommandSpells.detail = "rule.PreferNoManaCommandSpells()";
				rulePreferNoManaCommandSpells.insertText = new vscode.SnippetString('PreferNoManaCommandSpells()');
				rulePreferNoManaCommandSpells.documentation = new vscode.MarkdownString("");
				results.push(rulePreferNoManaCommandSpells);				
				
				const rulePreNerfBardAEDoT = new vscode.CompletionItem('PreNerfBardAEDoT', vscode.CompletionItemKind.Method);
				
				rulePreNerfBardAEDoT.detail = "rule.PreNerfBardAEDoT()";
				rulePreNerfBardAEDoT.insertText = new vscode.SnippetString('PreNerfBardAEDoT()');
				rulePreNerfBardAEDoT.documentation = new vscode.MarkdownString("");
				results.push(rulePreNerfBardAEDoT);				
				
				const rulePriceBonusPct = new vscode.CompletionItem('PriceBonusPct', vscode.CompletionItemKind.Method);
				
				rulePriceBonusPct.detail = "rule.PriceBonusPct()";
				rulePriceBonusPct.insertText = new vscode.SnippetString('PriceBonusPct()');
				rulePriceBonusPct.documentation = new vscode.MarkdownString("");
				results.push(rulePriceBonusPct);				
				
				const rulePricePenaltyPct = new vscode.CompletionItem('PricePenaltyPct', vscode.CompletionItemKind.Method);
				
				rulePricePenaltyPct.detail = "rule.PricePenaltyPct()";
				rulePricePenaltyPct.insertText = new vscode.SnippetString('PricePenaltyPct()');
				rulePricePenaltyPct.documentation = new vscode.MarkdownString("");
				results.push(rulePricePenaltyPct);				
				
				const rulePrintFileFunctionAndLine = new vscode.CompletionItem('PrintFileFunctionAndLine', vscode.CompletionItemKind.Method);
				
				rulePrintFileFunctionAndLine.detail = "rule.PrintFileFunctionAndLine()";
				rulePrintFileFunctionAndLine.insertText = new vscode.SnippetString('PrintFileFunctionAndLine()');
				rulePrintFileFunctionAndLine.documentation = new vscode.MarkdownString("");
				results.push(rulePrintFileFunctionAndLine);				
				
				const ruleProcDexDivideBy = new vscode.CompletionItem('ProcDexDivideBy', vscode.CompletionItemKind.Method);
				
				ruleProcDexDivideBy.detail = "rule.ProcDexDivideBy()";
				ruleProcDexDivideBy.insertText = new vscode.SnippetString('ProcDexDivideBy()');
				ruleProcDexDivideBy.documentation = new vscode.MarkdownString("");
				results.push(ruleProcDexDivideBy);				
				
				const ruleProcessFearedProximity = new vscode.CompletionItem('ProcessFearedProximity', vscode.CompletionItemKind.Method);
				
				ruleProcessFearedProximity.detail = "rule.ProcessFearedProximity()";
				ruleProcessFearedProximity.insertText = new vscode.SnippetString('ProcessFearedProximity()');
				ruleProcessFearedProximity.documentation = new vscode.MarkdownString("");
				results.push(ruleProcessFearedProximity);				
				
				const ruleProcPerMinDexContrib = new vscode.CompletionItem('ProcPerMinDexContrib', vscode.CompletionItemKind.Method);
				
				ruleProcPerMinDexContrib.detail = "rule.ProcPerMinDexContrib()";
				ruleProcPerMinDexContrib.insertText = new vscode.SnippetString('ProcPerMinDexContrib()');
				ruleProcPerMinDexContrib.documentation = new vscode.MarkdownString("");
				results.push(ruleProcPerMinDexContrib);				
				
				const ruleProcTargetOnly = new vscode.CompletionItem('ProcTargetOnly', vscode.CompletionItemKind.Method);
				
				ruleProcTargetOnly.detail = "rule.ProcTargetOnly()";
				ruleProcTargetOnly.insertText = new vscode.SnippetString('ProcTargetOnly()');
				ruleProcTargetOnly.documentation = new vscode.MarkdownString("");
				results.push(ruleProcTargetOnly);				
				
				const ruleProjectileDmgOnImpact = new vscode.CompletionItem('ProjectileDmgOnImpact', vscode.CompletionItemKind.Method);
				
				ruleProjectileDmgOnImpact.detail = "rule.ProjectileDmgOnImpact()";
				ruleProjectileDmgOnImpact.insertText = new vscode.SnippetString('ProjectileDmgOnImpact()');
				ruleProjectileDmgOnImpact.documentation = new vscode.MarkdownString("");
				results.push(ruleProjectileDmgOnImpact);				
				
				const rulePVPMinLevel = new vscode.CompletionItem('PVPMinLevel', vscode.CompletionItemKind.Method);
				
				rulePVPMinLevel.detail = "rule.PVPMinLevel()";
				rulePVPMinLevel.insertText = new vscode.SnippetString('PVPMinLevel()');
				rulePVPMinLevel.documentation = new vscode.MarkdownString("");
				results.push(rulePVPMinLevel);				
				
				const rulePVPSettings = new vscode.CompletionItem('PVPSettings', vscode.CompletionItemKind.Method);
				
				rulePVPSettings.detail = "rule.PVPSettings()";
				rulePVPSettings.insertText = new vscode.SnippetString('PVPSettings()');
				rulePVPSettings.documentation = new vscode.MarkdownString("");
				results.push(rulePVPSettings);				
				
				const ruleQuestableSpawnLimit = new vscode.CompletionItem('QuestableSpawnLimit', vscode.CompletionItemKind.Method);
				
				ruleQuestableSpawnLimit.detail = "rule.QuestableSpawnLimit()";
				ruleQuestableSpawnLimit.insertText = new vscode.SnippetString('QuestableSpawnLimit()');
				ruleQuestableSpawnLimit.documentation = new vscode.MarkdownString("");
				results.push(ruleQuestableSpawnLimit);				
				
				const ruleQuestableSpells = new vscode.CompletionItem('QuestableSpells', vscode.CompletionItemKind.Method);
				
				ruleQuestableSpells.detail = "rule.QuestableSpells()";
				ruleQuestableSpells.insertText = new vscode.SnippetString('QuestableSpells()');
				ruleQuestableSpells.documentation = new vscode.MarkdownString("");
				results.push(ruleQuestableSpells);				
				
				const ruleQuestsAutoReloadGlobalScripts = new vscode.CompletionItem('QuestsAutoReloadGlobalScripts', vscode.CompletionItemKind.Method);
				
				ruleQuestsAutoReloadGlobalScripts.detail = "rule.QuestsAutoReloadGlobalScripts()";
				ruleQuestsAutoReloadGlobalScripts.insertText = new vscode.SnippetString('QuestsAutoReloadGlobalScripts()');
				ruleQuestsAutoReloadGlobalScripts.documentation = new vscode.MarkdownString("");
				results.push(ruleQuestsAutoReloadGlobalScripts);				
				
				const ruleQuestsRepopWhenPlayersNotInCombat = new vscode.CompletionItem('QuestsRepopWhenPlayersNotInCombat', vscode.CompletionItemKind.Method);
				
				ruleQuestsRepopWhenPlayersNotInCombat.detail = "rule.QuestsRepopWhenPlayersNotInCombat()";
				ruleQuestsRepopWhenPlayersNotInCombat.insertText = new vscode.SnippetString('QuestsRepopWhenPlayersNotInCombat()');
				ruleQuestsRepopWhenPlayersNotInCombat.documentation = new vscode.MarkdownString("");
				results.push(ruleQuestsRepopWhenPlayersNotInCombat);				
				
				const ruleQuestsRepopWithReload = new vscode.CompletionItem('QuestsRepopWithReload', vscode.CompletionItemKind.Method);
				
				ruleQuestsRepopWithReload.detail = "rule.QuestsRepopWithReload()";
				ruleQuestsRepopWithReload.insertText = new vscode.SnippetString('QuestsRepopWithReload()');
				ruleQuestsRepopWithReload.documentation = new vscode.MarkdownString("");
				results.push(ruleQuestsRepopWithReload);				
				
				const ruleQuestsResetTimersWithReload = new vscode.CompletionItem('QuestsResetTimersWithReload', vscode.CompletionItemKind.Method);
				
				ruleQuestsResetTimersWithReload.detail = "rule.QuestsResetTimersWithReload()";
				ruleQuestsResetTimersWithReload.insertText = new vscode.SnippetString('QuestsResetTimersWithReload()');
				ruleQuestsResetTimersWithReload.documentation = new vscode.MarkdownString("");
				results.push(ruleQuestsResetTimersWithReload);				
				
				const ruleQuiverHasteCap = new vscode.CompletionItem('QuiverHasteCap', vscode.CompletionItemKind.Method);
				
				ruleQuiverHasteCap.detail = "rule.QuiverHasteCap()";
				ruleQuiverHasteCap.insertText = new vscode.SnippetString('QuiverHasteCap()');
				ruleQuiverHasteCap.documentation = new vscode.MarkdownString("");
				results.push(ruleQuiverHasteCap);				
				
				const ruleRadiantCrystalItemID = new vscode.CompletionItem('RadiantCrystalItemID', vscode.CompletionItemKind.Method);
				
				ruleRadiantCrystalItemID.detail = "rule.RadiantCrystalItemID()";
				ruleRadiantCrystalItemID.insertText = new vscode.SnippetString('RadiantCrystalItemID()');
				ruleRadiantCrystalItemID.documentation = new vscode.MarkdownString("");
				results.push(ruleRadiantCrystalItemID);				
				
				const ruleRaidExpMultiplier = new vscode.CompletionItem('RaidExpMultiplier', vscode.CompletionItemKind.Method);
				
				ruleRaidExpMultiplier.detail = "rule.RaidExpMultiplier()";
				ruleRaidExpMultiplier.insertText = new vscode.SnippetString('RaidExpMultiplier()');
				ruleRaidExpMultiplier.documentation = new vscode.MarkdownString("");
				results.push(ruleRaidExpMultiplier);				
				
				const ruleRampageHitsTarget = new vscode.CompletionItem('RampageHitsTarget', vscode.CompletionItemKind.Method);
				
				ruleRampageHitsTarget.detail = "rule.RampageHitsTarget()";
				ruleRampageHitsTarget.insertText = new vscode.SnippetString('RampageHitsTarget()');
				ruleRampageHitsTarget.documentation = new vscode.MarkdownString("");
				results.push(ruleRampageHitsTarget);				
				
				const ruleRecordBuyFromMerchant = new vscode.CompletionItem('RecordBuyFromMerchant', vscode.CompletionItemKind.Method);
				
				ruleRecordBuyFromMerchant.detail = "rule.RecordBuyFromMerchant()";
				ruleRecordBuyFromMerchant.insertText = new vscode.SnippetString('RecordBuyFromMerchant()');
				ruleRecordBuyFromMerchant.documentation = new vscode.MarkdownString("");
				results.push(ruleRecordBuyFromMerchant);				
				
				const ruleRecordCompletedOptionalActivities = new vscode.CompletionItem('RecordCompletedOptionalActivities', vscode.CompletionItemKind.Method);
				
				ruleRecordCompletedOptionalActivities.detail = "rule.RecordCompletedOptionalActivities()";
				ruleRecordCompletedOptionalActivities.insertText = new vscode.SnippetString('RecordCompletedOptionalActivities()');
				ruleRecordCompletedOptionalActivities.documentation = new vscode.MarkdownString("");
				results.push(ruleRecordCompletedOptionalActivities);				
				
				const ruleRecordCompletedTasks = new vscode.CompletionItem('RecordCompletedTasks', vscode.CompletionItemKind.Method);
				
				ruleRecordCompletedTasks.detail = "rule.RecordCompletedTasks()";
				ruleRecordCompletedTasks.insertText = new vscode.SnippetString('RecordCompletedTasks()');
				ruleRecordCompletedTasks.documentation = new vscode.MarkdownString("");
				results.push(ruleRecordCompletedTasks);				
				
				const ruleRecordSellToMerchant = new vscode.CompletionItem('RecordSellToMerchant', vscode.CompletionItemKind.Method);
				
				ruleRecordSellToMerchant.detail = "rule.RecordSellToMerchant()";
				ruleRecordSellToMerchant.insertText = new vscode.SnippetString('RecordSellToMerchant()');
				ruleRecordSellToMerchant.documentation = new vscode.MarkdownString("");
				results.push(ruleRecordSellToMerchant);				
				
				const ruleRecycleInstanceIds = new vscode.CompletionItem('RecycleInstanceIds', vscode.CompletionItemKind.Method);
				
				ruleRecycleInstanceIds.detail = "rule.RecycleInstanceIds()";
				ruleRecycleInstanceIds.insertText = new vscode.SnippetString('RecycleInstanceIds()');
				ruleRecycleInstanceIds.documentation = new vscode.MarkdownString("");
				results.push(ruleRecycleInstanceIds);				
				
				const ruleRedModifier = new vscode.CompletionItem('RedModifier', vscode.CompletionItemKind.Method);
				
				ruleRedModifier.detail = "rule.RedModifier()";
				ruleRedModifier.insertText = new vscode.SnippetString('RedModifier()');
				ruleRedModifier.documentation = new vscode.MarkdownString("");
				results.push(ruleRedModifier);				
				
				const ruleReflectMessagesClose = new vscode.CompletionItem('ReflectMessagesClose', vscode.CompletionItemKind.Method);
				
				ruleReflectMessagesClose.detail = "rule.ReflectMessagesClose()";
				ruleReflectMessagesClose.insertText = new vscode.SnippetString('ReflectMessagesClose()');
				ruleReflectMessagesClose.documentation = new vscode.MarkdownString("");
				results.push(ruleReflectMessagesClose);				
				
				const ruleReflectType = new vscode.CompletionItem('ReflectType', vscode.CompletionItemKind.Method);
				
				ruleReflectType.detail = "rule.ReflectType()";
				ruleReflectType.insertText = new vscode.SnippetString('ReflectType()');
				ruleReflectType.documentation = new vscode.MarkdownString("");
				results.push(ruleReflectType);				
				
				const ruleReportingSystemActive = new vscode.CompletionItem('ReportingSystemActive', vscode.CompletionItemKind.Method);
				
				ruleReportingSystemActive.detail = "rule.ReportingSystemActive()";
				ruleReportingSystemActive.insertText = new vscode.SnippetString('ReportingSystemActive()');
				ruleReportingSystemActive.documentation = new vscode.MarkdownString("");
				results.push(ruleReportingSystemActive);				
				
				const ruleRequiredStatusAdmin = new vscode.CompletionItem('RequiredStatusAdmin', vscode.CompletionItemKind.Method);
				
				ruleRequiredStatusAdmin.detail = "rule.RequiredStatusAdmin()";
				ruleRequiredStatusAdmin.insertText = new vscode.SnippetString('RequiredStatusAdmin()');
				ruleRequiredStatusAdmin.documentation = new vscode.MarkdownString("");
				results.push(ruleRequiredStatusAdmin);				
				
				const ruleRequiredStatusListAll = new vscode.CompletionItem('RequiredStatusListAll', vscode.CompletionItemKind.Method);
				
				ruleRequiredStatusListAll.detail = "rule.RequiredStatusListAll()";
				ruleRequiredStatusListAll.insertText = new vscode.SnippetString('RequiredStatusListAll()');
				ruleRequiredStatusListAll.documentation = new vscode.MarkdownString("");
				results.push(ruleRequiredStatusListAll);				
				
				const ruleRequireTomeHandin = new vscode.CompletionItem('RequireTomeHandin', vscode.CompletionItemKind.Method);
				
				ruleRequireTomeHandin.detail = "rule.RequireTomeHandin()";
				ruleRequireTomeHandin.insertText = new vscode.SnippetString('RequireTomeHandin()');
				ruleRequireTomeHandin.documentation = new vscode.MarkdownString("");
				results.push(ruleRequireTomeHandin);				
				
				const ruleResendDelayBaseMS = new vscode.CompletionItem('ResendDelayBaseMS', vscode.CompletionItemKind.Method);
				
				ruleResendDelayBaseMS.detail = "rule.ResendDelayBaseMS()";
				ruleResendDelayBaseMS.insertText = new vscode.SnippetString('ResendDelayBaseMS()');
				ruleResendDelayBaseMS.documentation = new vscode.MarkdownString("");
				results.push(ruleResendDelayBaseMS);				
				
				const ruleResendDelayFactor = new vscode.CompletionItem('ResendDelayFactor', vscode.CompletionItemKind.Method);
				
				ruleResendDelayFactor.detail = "rule.ResendDelayFactor()";
				ruleResendDelayFactor.insertText = new vscode.SnippetString('ResendDelayFactor()');
				ruleResendDelayFactor.documentation = new vscode.MarkdownString("");
				results.push(ruleResendDelayFactor);				
				
				const ruleResendDelayMaxMS = new vscode.CompletionItem('ResendDelayMaxMS', vscode.CompletionItemKind.Method);
				
				ruleResendDelayMaxMS.detail = "rule.ResendDelayMaxMS()";
				ruleResendDelayMaxMS.insertText = new vscode.SnippetString('ResendDelayMaxMS()');
				ruleResendDelayMaxMS.documentation = new vscode.MarkdownString("");
				results.push(ruleResendDelayMaxMS);				
				
				const ruleResendDelayMinMS = new vscode.CompletionItem('ResendDelayMinMS', vscode.CompletionItemKind.Method);
				
				ruleResendDelayMinMS.detail = "rule.ResendDelayMinMS()";
				ruleResendDelayMinMS.insertText = new vscode.SnippetString('ResendDelayMinMS()');
				ruleResendDelayMinMS.documentation = new vscode.MarkdownString("");
				results.push(ruleResendDelayMinMS);				
				
				const ruleReservedInstances = new vscode.CompletionItem('ReservedInstances', vscode.CompletionItemKind.Method);
				
				ruleReservedInstances.detail = "rule.ReservedInstances()";
				ruleReservedInstances.insertText = new vscode.SnippetString('ReservedInstances()');
				ruleReservedInstances.documentation = new vscode.MarkdownString("");
				results.push(ruleReservedInstances);				
				
				const ruleResistChance = new vscode.CompletionItem('ResistChance', vscode.CompletionItemKind.Method);
				
				ruleResistChance.detail = "rule.ResistChance()";
				ruleResistChance.insertText = new vscode.SnippetString('ResistChance()');
				ruleResistChance.documentation = new vscode.MarkdownString("");
				results.push(ruleResistChance);				
				
				const ruleResistFalloff = new vscode.CompletionItem('ResistFalloff', vscode.CompletionItemKind.Method);
				
				ruleResistFalloff.detail = "rule.ResistFalloff()";
				ruleResistFalloff.insertText = new vscode.SnippetString('ResistFalloff()');
				ruleResistFalloff.documentation = new vscode.MarkdownString("");
				results.push(ruleResistFalloff);				
				
				const ruleResistMod = new vscode.CompletionItem('ResistMod', vscode.CompletionItemKind.Method);
				
				ruleResistMod.detail = "rule.ResistMod()";
				ruleResistMod.insertText = new vscode.SnippetString('ResistMod()');
				ruleResistMod.documentation = new vscode.MarkdownString("");
				results.push(ruleResistMod);				
				
				const ruleResistPerLevelDiff = new vscode.CompletionItem('ResistPerLevelDiff', vscode.CompletionItemKind.Method);
				
				ruleResistPerLevelDiff.detail = "rule.ResistPerLevelDiff()";
				ruleResistPerLevelDiff.insertText = new vscode.SnippetString('ResistPerLevelDiff()');
				ruleResistPerLevelDiff.documentation = new vscode.MarkdownString("");
				results.push(ruleResistPerLevelDiff);				
				
				const ruleRespawnFromHover = new vscode.CompletionItem('RespawnFromHover', vscode.CompletionItemKind.Method);
				
				ruleRespawnFromHover.detail = "rule.RespawnFromHover()";
				ruleRespawnFromHover.insertText = new vscode.SnippetString('RespawnFromHover()');
				ruleRespawnFromHover.documentation = new vscode.MarkdownString("");
				results.push(ruleRespawnFromHover);				
				
				const ruleRespawnFromHoverTimer = new vscode.CompletionItem('RespawnFromHoverTimer', vscode.CompletionItemKind.Method);
				
				ruleRespawnFromHoverTimer.detail = "rule.RespawnFromHoverTimer()";
				ruleRespawnFromHoverTimer.insertText = new vscode.SnippetString('RespawnFromHoverTimer()');
				ruleRespawnFromHoverTimer.documentation = new vscode.MarkdownString("");
				results.push(ruleRespawnFromHoverTimer);				
				
				const ruleRestRegenEnabled = new vscode.CompletionItem('RestRegenEnabled', vscode.CompletionItemKind.Method);
				
				ruleRestRegenEnabled.detail = "rule.RestRegenEnabled()";
				ruleRestRegenEnabled.insertText = new vscode.SnippetString('RestRegenEnabled()');
				ruleRestRegenEnabled.documentation = new vscode.MarkdownString("");
				results.push(ruleRestRegenEnabled);				
				
				const ruleRestRegenRaidTimeToActivate = new vscode.CompletionItem('RestRegenRaidTimeToActivate', vscode.CompletionItemKind.Method);
				
				ruleRestRegenRaidTimeToActivate.detail = "rule.RestRegenRaidTimeToActivate()";
				ruleRestRegenRaidTimeToActivate.insertText = new vscode.SnippetString('RestRegenRaidTimeToActivate()');
				ruleRestRegenRaidTimeToActivate.documentation = new vscode.MarkdownString("");
				results.push(ruleRestRegenRaidTimeToActivate);				
				
				const ruleRestRegenTimeToActivate = new vscode.CompletionItem('RestRegenTimeToActivate', vscode.CompletionItemKind.Method);
				
				ruleRestRegenTimeToActivate.detail = "rule.RestRegenTimeToActivate()";
				ruleRestRegenTimeToActivate.insertText = new vscode.SnippetString('RestRegenTimeToActivate()');
				ruleRestRegenTimeToActivate.documentation = new vscode.MarkdownString("");
				results.push(ruleRestRegenTimeToActivate);				
				
				const ruleRestrictApplyPotionToRogue = new vscode.CompletionItem('RestrictApplyPotionToRogue', vscode.CompletionItemKind.Method);
				
				ruleRestrictApplyPotionToRogue.detail = "rule.RestrictApplyPotionToRogue()";
				ruleRestrictApplyPotionToRogue.insertText = new vscode.SnippetString('RestrictApplyPotionToRogue()');
				ruleRestrictApplyPotionToRogue.documentation = new vscode.MarkdownString("");
				results.push(ruleRestrictApplyPotionToRogue);				
				
				const ruleRestrictSpellScribing = new vscode.CompletionItem('RestrictSpellScribing', vscode.CompletionItemKind.Method);
				
				ruleRestrictSpellScribing.detail = "rule.RestrictSpellScribing()";
				ruleRestrictSpellScribing.insertText = new vscode.SnippetString('RestrictSpellScribing()');
				ruleRestrictSpellScribing.documentation = new vscode.MarkdownString("");
				results.push(ruleRestrictSpellScribing);				
				
				const ruleResurrectRadius = new vscode.CompletionItem('ResurrectRadius', vscode.CompletionItemKind.Method);
				
				ruleResurrectRadius.detail = "rule.ResurrectRadius()";
				ruleResurrectRadius.insertText = new vscode.SnippetString('ResurrectRadius()');
				ruleResurrectRadius.documentation = new vscode.MarkdownString("");
				results.push(ruleResurrectRadius);				
				
				const ruleReturnNonQuestNoDropItems = new vscode.CompletionItem('ReturnNonQuestNoDropItems', vscode.CompletionItemKind.Method);
				
				ruleReturnNonQuestNoDropItems.detail = "rule.ReturnNonQuestNoDropItems()";
				ruleReturnNonQuestNoDropItems.insertText = new vscode.SnippetString('ReturnNonQuestNoDropItems()');
				ruleReturnNonQuestNoDropItems.documentation = new vscode.MarkdownString("");
				results.push(ruleReturnNonQuestNoDropItems);				
				
				const ruleRogShmBstBerACSoftcapReturn = new vscode.CompletionItem('RogShmBstBerACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				ruleRogShmBstBerACSoftcapReturn.detail = "rule.RogShmBstBerACSoftcapReturn()";
				ruleRogShmBstBerACSoftcapReturn.insertText = new vscode.SnippetString('RogShmBstBerACSoftcapReturn()');
				ruleRogShmBstBerACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(ruleRogShmBstBerACSoftcapReturn);				
				
				const ruleRootBreakCheckChance = new vscode.CompletionItem('RootBreakCheckChance', vscode.CompletionItemKind.Method);
				
				ruleRootBreakCheckChance.detail = "rule.RootBreakCheckChance()";
				ruleRootBreakCheckChance.insertText = new vscode.SnippetString('RootBreakCheckChance()');
				ruleRootBreakCheckChance.documentation = new vscode.MarkdownString("");
				results.push(ruleRootBreakCheckChance);				
				
				const ruleRootBreakFromSpells = new vscode.CompletionItem('RootBreakFromSpells', vscode.CompletionItemKind.Method);
				
				ruleRootBreakFromSpells.detail = "rule.RootBreakFromSpells()";
				ruleRootBreakFromSpells.insertText = new vscode.SnippetString('RootBreakFromSpells()');
				ruleRootBreakFromSpells.documentation = new vscode.MarkdownString("");
				results.push(ruleRootBreakFromSpells);				
				
				const ruleRoundKickBonus = new vscode.CompletionItem('RoundKickBonus', vscode.CompletionItemKind.Method);
				
				ruleRoundKickBonus.detail = "rule.RoundKickBonus()";
				ruleRoundKickBonus.insertText = new vscode.SnippetString('RoundKickBonus()');
				ruleRoundKickBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleRoundKickBonus);				
				
				const ruleSacrificeItemID = new vscode.CompletionItem('SacrificeItemID', vscode.CompletionItemKind.Method);
				
				ruleSacrificeItemID.detail = "rule.SacrificeItemID()";
				ruleSacrificeItemID.insertText = new vscode.SnippetString('SacrificeItemID()');
				ruleSacrificeItemID.documentation = new vscode.MarkdownString("");
				results.push(ruleSacrificeItemID);				
				
				const ruleSacrificeMaxLevel = new vscode.CompletionItem('SacrificeMaxLevel', vscode.CompletionItemKind.Method);
				
				ruleSacrificeMaxLevel.detail = "rule.SacrificeMaxLevel()";
				ruleSacrificeMaxLevel.insertText = new vscode.SnippetString('SacrificeMaxLevel()');
				ruleSacrificeMaxLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleSacrificeMaxLevel);				
				
				const ruleSacrificeMinLevel = new vscode.CompletionItem('SacrificeMinLevel', vscode.CompletionItemKind.Method);
				
				ruleSacrificeMinLevel.detail = "rule.SacrificeMinLevel()";
				ruleSacrificeMinLevel.insertText = new vscode.SnippetString('SacrificeMinLevel()');
				ruleSacrificeMinLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleSacrificeMinLevel);				
				
				const ruleSayPauseTimeInSec = new vscode.CompletionItem('SayPauseTimeInSec', vscode.CompletionItemKind.Method);
				
				ruleSayPauseTimeInSec.detail = "rule.SayPauseTimeInSec()";
				ruleSayPauseTimeInSec.insertText = new vscode.SnippetString('SayPauseTimeInSec()');
				ruleSayPauseTimeInSec.documentation = new vscode.MarkdownString("");
				results.push(ruleSayPauseTimeInSec);				
				
				const ruleScaleRate = new vscode.CompletionItem('ScaleRate', vscode.CompletionItemKind.Method);
				
				ruleScaleRate.detail = "rule.ScaleRate()";
				ruleScaleRate.insertText = new vscode.SnippetString('ScaleRate()');
				ruleScaleRate.documentation = new vscode.MarkdownString("");
				results.push(ruleScaleRate);				
				
				const ruleSecondsBeforeIdle = new vscode.CompletionItem('SecondsBeforeIdle', vscode.CompletionItemKind.Method);
				
				ruleSecondsBeforeIdle.detail = "rule.SecondsBeforeIdle()";
				ruleSecondsBeforeIdle.insertText = new vscode.SnippetString('SecondsBeforeIdle()');
				ruleSecondsBeforeIdle.documentation = new vscode.MarkdownString("");
				results.push(ruleSecondsBeforeIdle);				
				
				const ruleSelfLanguageLearning = new vscode.CompletionItem('SelfLanguageLearning', vscode.CompletionItemKind.Method);
				
				ruleSelfLanguageLearning.detail = "rule.SelfLanguageLearning()";
				ruleSelfLanguageLearning.insertText = new vscode.SnippetString('SelfLanguageLearning()');
				ruleSelfLanguageLearning.documentation = new vscode.MarkdownString("");
				results.push(ruleSelfLanguageLearning);				
				
				const ruleSellCostMod = new vscode.CompletionItem('SellCostMod', vscode.CompletionItemKind.Method);
				
				ruleSellCostMod.detail = "rule.SellCostMod()";
				ruleSellCostMod.insertText = new vscode.SnippetString('SellCostMod()');
				ruleSellCostMod.documentation = new vscode.MarkdownString("");
				results.push(ruleSellCostMod);				
				
				const ruleSenseHeadingStartValue = new vscode.CompletionItem('SenseHeadingStartValue', vscode.CompletionItemKind.Method);
				
				ruleSenseHeadingStartValue.detail = "rule.SenseHeadingStartValue()";
				ruleSenseHeadingStartValue.insertText = new vscode.SnippetString('SenseHeadingStartValue()');
				ruleSenseHeadingStartValue.documentation = new vscode.MarkdownString("");
				results.push(ruleSenseHeadingStartValue);				
				
				const ruleServerWideAuction = new vscode.CompletionItem('ServerWideAuction', vscode.CompletionItemKind.Method);
				
				ruleServerWideAuction.detail = "rule.ServerWideAuction()";
				ruleServerWideAuction.insertText = new vscode.SnippetString('ServerWideAuction()');
				ruleServerWideAuction.documentation = new vscode.MarkdownString("");
				results.push(ruleServerWideAuction);				
				
				const ruleServerWideOOC = new vscode.CompletionItem('ServerWideOOC', vscode.CompletionItemKind.Method);
				
				ruleServerWideOOC.detail = "rule.ServerWideOOC()";
				ruleServerWideOOC.insertText = new vscode.SnippetString('ServerWideOOC()');
				ruleServerWideOOC.documentation = new vscode.MarkdownString("");
				results.push(ruleServerWideOOC);				
				
				const ruleSessionTimeOut = new vscode.CompletionItem('SessionTimeOut', vscode.CompletionItemKind.Method);
				
				ruleSessionTimeOut.detail = "rule.SessionTimeOut()";
				ruleSessionTimeOut.insertText = new vscode.SnippetString('SessionTimeOut()');
				ruleSessionTimeOut.documentation = new vscode.MarkdownString("");
				results.push(ruleSessionTimeOut);				
				
				const ruleSharedBankPlat = new vscode.CompletionItem('SharedBankPlat', vscode.CompletionItemKind.Method);
				
				ruleSharedBankPlat.detail = "rule.SharedBankPlat()";
				ruleSharedBankPlat.insertText = new vscode.SnippetString('SharedBankPlat()');
				ruleSharedBankPlat.documentation = new vscode.MarkdownString("");
				results.push(ruleSharedBankPlat);				
				
				const ruleSHDProcIDOffByOne = new vscode.CompletionItem('SHDProcIDOffByOne', vscode.CompletionItemKind.Method);
				
				ruleSHDProcIDOffByOne.detail = "rule.SHDProcIDOffByOne()";
				ruleSHDProcIDOffByOne.insertText = new vscode.SnippetString('SHDProcIDOffByOne()');
				ruleSHDProcIDOffByOne.documentation = new vscode.MarkdownString("");
				results.push(ruleSHDProcIDOffByOne);				
				
				const ruleShortMovementUpdateRange = new vscode.CompletionItem('ShortMovementUpdateRange', vscode.CompletionItemKind.Method);
				
				ruleShortMovementUpdateRange.detail = "rule.ShortMovementUpdateRange()";
				ruleShortMovementUpdateRange.insertText = new vscode.SnippetString('ShortMovementUpdateRange()');
				ruleShortMovementUpdateRange.documentation = new vscode.MarkdownString("");
				results.push(ruleShortMovementUpdateRange);				
				
				const ruleShowExpValues = new vscode.CompletionItem('ShowExpValues', vscode.CompletionItemKind.Method);
				
				ruleShowExpValues.detail = "rule.ShowExpValues()";
				ruleShowExpValues.insertText = new vscode.SnippetString('ShowExpValues()');
				ruleShowExpValues.documentation = new vscode.MarkdownString("");
				results.push(ruleShowExpValues);				
				
				const ruleSittingAggroMod = new vscode.CompletionItem('SittingAggroMod', vscode.CompletionItemKind.Method);
				
				ruleSittingAggroMod.detail = "rule.SittingAggroMod()";
				ruleSittingAggroMod.insertText = new vscode.SnippetString('SittingAggroMod()');
				ruleSittingAggroMod.documentation = new vscode.MarkdownString("");
				results.push(ruleSittingAggroMod);				
				
				const ruleSkillCapMaxLevel = new vscode.CompletionItem('SkillCapMaxLevel', vscode.CompletionItemKind.Method);
				
				ruleSkillCapMaxLevel.detail = "rule.SkillCapMaxLevel()";
				ruleSkillCapMaxLevel.insertText = new vscode.SnippetString('SkillCapMaxLevel()');
				ruleSkillCapMaxLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleSkillCapMaxLevel);				
				
				const ruleSkillUpModifier = new vscode.CompletionItem('SkillUpModifier', vscode.CompletionItemKind.Method);
				
				ruleSkillUpModifier.detail = "rule.SkillUpModifier()";
				ruleSkillUpModifier.insertText = new vscode.SnippetString('SkillUpModifier()');
				ruleSkillUpModifier.documentation = new vscode.MarkdownString("");
				results.push(ruleSkillUpModifier);				
				
				const ruleSmartAggroList = new vscode.CompletionItem('SmartAggroList', vscode.CompletionItemKind.Method);
				
				ruleSmartAggroList.detail = "rule.SmartAggroList()";
				ruleSmartAggroList.insertText = new vscode.SnippetString('SmartAggroList()');
				ruleSmartAggroList.documentation = new vscode.MarkdownString("");
				results.push(ruleSmartAggroList);				
				
				const ruleSmartLastFightingDelayMoving = new vscode.CompletionItem('SmartLastFightingDelayMoving', vscode.CompletionItemKind.Method);
				
				ruleSmartLastFightingDelayMoving.detail = "rule.SmartLastFightingDelayMoving()";
				ruleSmartLastFightingDelayMoving.insertText = new vscode.SnippetString('SmartLastFightingDelayMoving()');
				ruleSmartLastFightingDelayMoving.documentation = new vscode.MarkdownString("");
				results.push(ruleSmartLastFightingDelayMoving);				
				
				const ruleSoDClientUseSoDHPManaEnd = new vscode.CompletionItem('SoDClientUseSoDHPManaEnd', vscode.CompletionItemKind.Method);
				
				ruleSoDClientUseSoDHPManaEnd.detail = "rule.SoDClientUseSoDHPManaEnd()";
				ruleSoDClientUseSoDHPManaEnd.insertText = new vscode.SnippetString('SoDClientUseSoDHPManaEnd()');
				ruleSoDClientUseSoDHPManaEnd.documentation = new vscode.MarkdownString("");
				results.push(ruleSoDClientUseSoDHPManaEnd);				
				
				const ruleSoFStartZoneID = new vscode.CompletionItem('SoFStartZoneID', vscode.CompletionItemKind.Method);
				
				ruleSoFStartZoneID.detail = "rule.SoFStartZoneID()";
				ruleSoFStartZoneID.insertText = new vscode.SnippetString('SoFStartZoneID()');
				ruleSoFStartZoneID.documentation = new vscode.MarkdownString("");
				results.push(ruleSoFStartZoneID);				
				
				const ruleSoftcapFactor = new vscode.CompletionItem('SoftcapFactor', vscode.CompletionItemKind.Method);
				
				ruleSoftcapFactor.detail = "rule.SoftcapFactor()";
				ruleSoftcapFactor.insertText = new vscode.SnippetString('SoftcapFactor()');
				ruleSoftcapFactor.documentation = new vscode.MarkdownString("");
				results.push(ruleSoftcapFactor);				
				
				const ruleSoftDeletes = new vscode.CompletionItem('SoftDeletes', vscode.CompletionItemKind.Method);
				
				ruleSoftDeletes.detail = "rule.SoftDeletes()";
				ruleSoftDeletes.insertText = new vscode.SnippetString('SoftDeletes()');
				ruleSoftDeletes.documentation = new vscode.MarkdownString("");
				results.push(ruleSoftDeletes);				
				
				const ruleSongAggroMod = new vscode.CompletionItem('SongAggroMod', vscode.CompletionItemKind.Method);
				
				ruleSongAggroMod.detail = "rule.SongAggroMod()";
				ruleSongAggroMod.insertText = new vscode.SnippetString('SongAggroMod()');
				ruleSongAggroMod.documentation = new vscode.MarkdownString("");
				results.push(ruleSongAggroMod);				
				
				const ruleSongMessages = new vscode.CompletionItem('SongMessages', vscode.CompletionItemKind.Method);
				
				ruleSongMessages.detail = "rule.SongMessages()";
				ruleSongMessages.insertText = new vscode.SnippetString('SongMessages()');
				ruleSongMessages.documentation = new vscode.MarkdownString("");
				results.push(ruleSongMessages);				
				
				const ruleSoundForAAEarned = new vscode.CompletionItem('SoundForAAEarned', vscode.CompletionItemKind.Method);
				
				ruleSoundForAAEarned.detail = "rule.SoundForAAEarned()";
				ruleSoundForAAEarned.insertText = new vscode.SnippetString('SoundForAAEarned()');
				ruleSoundForAAEarned.documentation = new vscode.MarkdownString("");
				results.push(ruleSoundForAAEarned);				
				
				const ruleSpawnLimit = new vscode.CompletionItem('SpawnLimit', vscode.CompletionItemKind.Method);
				
				ruleSpawnLimit.detail = "rule.SpawnLimit()";
				ruleSpawnLimit.insertText = new vscode.SnippetString('SpawnLimit()');
				ruleSpawnLimit.documentation = new vscode.MarkdownString("");
				results.push(ruleSpawnLimit);				
				
				const ruleSpecialAttackACBonus = new vscode.CompletionItem('SpecialAttackACBonus', vscode.CompletionItemKind.Method);
				
				ruleSpecialAttackACBonus.detail = "rule.SpecialAttackACBonus()";
				ruleSpecialAttackACBonus.insertText = new vscode.SnippetString('SpecialAttackACBonus()');
				ruleSpecialAttackACBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleSpecialAttackACBonus);				
				
				const ruleSpellAggroMod = new vscode.CompletionItem('SpellAggroMod', vscode.CompletionItemKind.Method);
				
				ruleSpellAggroMod.detail = "rule.SpellAggroMod()";
				ruleSpellAggroMod.insertText = new vscode.SnippetString('SpellAggroMod()');
				ruleSpellAggroMod.documentation = new vscode.MarkdownString("");
				results.push(ruleSpellAggroMod);				
				
				const ruleSpellMessages = new vscode.CompletionItem('SpellMessages', vscode.CompletionItemKind.Method);
				
				ruleSpellMessages.detail = "rule.SpellMessages()";
				ruleSpellMessages.insertText = new vscode.SnippetString('SpellMessages()');
				ruleSpellMessages.documentation = new vscode.MarkdownString("");
				results.push(ruleSpellMessages);				
				
				const ruleSpellParticles = new vscode.CompletionItem('SpellParticles', vscode.CompletionItemKind.Method);
				
				ruleSpellParticles.detail = "rule.SpellParticles()";
				ruleSpellParticles.insertText = new vscode.SnippetString('SpellParticles()');
				ruleSpellParticles.documentation = new vscode.MarkdownString("");
				results.push(ruleSpellParticles);				
				
				const ruleStacking = new vscode.CompletionItem('Stacking', vscode.CompletionItemKind.Method);
				
				ruleStacking.detail = "rule.Stacking()";
				ruleStacking.insertText = new vscode.SnippetString('Stacking()');
				ruleStacking.documentation = new vscode.MarkdownString("");
				results.push(ruleStacking);				
				
				const ruleStartEnrageValue = new vscode.CompletionItem('StartEnrageValue', vscode.CompletionItemKind.Method);
				
				ruleStartEnrageValue.detail = "rule.StartEnrageValue()";
				ruleStartEnrageValue.insertText = new vscode.SnippetString('StartEnrageValue()');
				ruleStartEnrageValue.documentation = new vscode.MarkdownString("");
				results.push(ruleStartEnrageValue);				
				
				const ruleStartZoneSameAsBindOnCreation = new vscode.CompletionItem('StartZoneSameAsBindOnCreation', vscode.CompletionItemKind.Method);
				
				ruleStartZoneSameAsBindOnCreation.detail = "rule.StartZoneSameAsBindOnCreation()";
				ruleStartZoneSameAsBindOnCreation.insertText = new vscode.SnippetString('StartZoneSameAsBindOnCreation()');
				ruleStartZoneSameAsBindOnCreation.documentation = new vscode.MarkdownString("");
				results.push(ruleStartZoneSameAsBindOnCreation);				
				
				const ruleStatCap = new vscode.CompletionItem('StatCap', vscode.CompletionItemKind.Method);
				
				ruleStatCap.detail = "rule.StatCap()";
				ruleStatCap.insertText = new vscode.SnippetString('StatCap()');
				ruleStatCap.documentation = new vscode.MarkdownString("");
				results.push(ruleStatCap);				
				
				const ruleSuccorFailChance = new vscode.CompletionItem('SuccorFailChance', vscode.CompletionItemKind.Method);
				
				ruleSuccorFailChance.detail = "rule.SuccorFailChance()";
				ruleSuccorFailChance.insertText = new vscode.SnippetString('SuccorFailChance()');
				ruleSuccorFailChance.documentation = new vscode.MarkdownString("");
				results.push(ruleSuccorFailChance);				
				
				const ruleSuppressCommandErrors = new vscode.CompletionItem('SuppressCommandErrors', vscode.CompletionItemKind.Method);
				
				ruleSuppressCommandErrors.detail = "rule.SuppressCommandErrors()";
				ruleSuppressCommandErrors.insertText = new vscode.SnippetString('SuppressCommandErrors()');
				ruleSuppressCommandErrors.documentation = new vscode.MarkdownString("");
				results.push(ruleSuppressCommandErrors);				
				
				const ruleSuspendIntervalMS = new vscode.CompletionItem('SuspendIntervalMS', vscode.CompletionItemKind.Method);
				
				ruleSuspendIntervalMS.detail = "rule.SuspendIntervalMS()";
				ruleSuspendIntervalMS.insertText = new vscode.SnippetString('SuspendIntervalMS()');
				ruleSuspendIntervalMS.documentation = new vscode.MarkdownString("");
				results.push(ruleSuspendIntervalMS);				
				
				const ruleSuspendIntervalS = new vscode.CompletionItem('SuspendIntervalS', vscode.CompletionItemKind.Method);
				
				ruleSuspendIntervalS.detail = "rule.SuspendIntervalS()";
				ruleSuspendIntervalS.insertText = new vscode.SnippetString('SuspendIntervalS()');
				ruleSuspendIntervalS.documentation = new vscode.MarkdownString("");
				results.push(ruleSuspendIntervalS);				
				
				const ruleSwarmPetTargetLock = new vscode.CompletionItem('SwarmPetTargetLock', vscode.CompletionItemKind.Method);
				
				ruleSwarmPetTargetLock.detail = "rule.SwarmPetTargetLock()";
				ruleSwarmPetTargetLock.insertText = new vscode.SnippetString('SwarmPetTargetLock()');
				ruleSwarmPetTargetLock.documentation = new vscode.MarkdownString("");
				results.push(ruleSwarmPetTargetLock);				
				
				const ruleSwimmingStartValue = new vscode.CompletionItem('SwimmingStartValue', vscode.CompletionItemKind.Method);
				
				ruleSwimmingStartValue.detail = "rule.SwimmingStartValue()";
				ruleSwimmingStartValue.insertText = new vscode.SnippetString('SwimmingStartValue()');
				ruleSwimmingStartValue.documentation = new vscode.MarkdownString("");
				results.push(ruleSwimmingStartValue);				
				
				const ruleTellQueueSize = new vscode.CompletionItem('TellQueueSize', vscode.CompletionItemKind.Method);
				
				ruleTellQueueSize.detail = "rule.TellQueueSize()";
				ruleTellQueueSize.insertText = new vscode.SnippetString('TellQueueSize()');
				ruleTellQueueSize.documentation = new vscode.MarkdownString("");
				results.push(ruleTellQueueSize);				
				
				const ruleThreateninglyFactionMinimum = new vscode.CompletionItem('ThreateninglyFactionMinimum', vscode.CompletionItemKind.Method);
				
				ruleThreateninglyFactionMinimum.detail = "rule.ThreateninglyFactionMinimum()";
				ruleThreateninglyFactionMinimum.insertText = new vscode.SnippetString('ThreateninglyFactionMinimum()');
				ruleThreateninglyFactionMinimum.documentation = new vscode.MarkdownString("");
				results.push(ruleThreateninglyFactionMinimum);				
				
				const ruleThrowingCritDifficulty = new vscode.CompletionItem('ThrowingCritDifficulty', vscode.CompletionItemKind.Method);
				
				ruleThrowingCritDifficulty.detail = "rule.ThrowingCritDifficulty()";
				ruleThrowingCritDifficulty.insertText = new vscode.SnippetString('ThrowingCritDifficulty()');
				ruleThrowingCritDifficulty.documentation = new vscode.MarkdownString("");
				results.push(ruleThrowingCritDifficulty);				
				
				const ruleTigerClawBonus = new vscode.CompletionItem('TigerClawBonus', vscode.CompletionItemKind.Method);
				
				ruleTigerClawBonus.detail = "rule.TigerClawBonus()";
				ruleTigerClawBonus.insertText = new vscode.SnippetString('TigerClawBonus()');
				ruleTigerClawBonus.documentation = new vscode.MarkdownString("");
				results.push(ruleTigerClawBonus);				
				
				const ruleTitaniumStartZoneID = new vscode.CompletionItem('TitaniumStartZoneID', vscode.CompletionItemKind.Method);
				
				ruleTitaniumStartZoneID.detail = "rule.TitaniumStartZoneID()";
				ruleTitaniumStartZoneID.insertText = new vscode.SnippetString('TitaniumStartZoneID()');
				ruleTitaniumStartZoneID.documentation = new vscode.MarkdownString("");
				results.push(ruleTitaniumStartZoneID);				
				
				const ruleTradeskillUpAlchemy = new vscode.CompletionItem('TradeskillUpAlchemy', vscode.CompletionItemKind.Method);
				
				ruleTradeskillUpAlchemy.detail = "rule.TradeskillUpAlchemy()";
				ruleTradeskillUpAlchemy.insertText = new vscode.SnippetString('TradeskillUpAlchemy()');
				ruleTradeskillUpAlchemy.documentation = new vscode.MarkdownString("");
				results.push(ruleTradeskillUpAlchemy);				
				
				const ruleTradeskillUpBaking = new vscode.CompletionItem('TradeskillUpBaking', vscode.CompletionItemKind.Method);
				
				ruleTradeskillUpBaking.detail = "rule.TradeskillUpBaking()";
				ruleTradeskillUpBaking.insertText = new vscode.SnippetString('TradeskillUpBaking()');
				ruleTradeskillUpBaking.documentation = new vscode.MarkdownString("");
				results.push(ruleTradeskillUpBaking);				
				
				const ruleTradeskillUpBlacksmithing = new vscode.CompletionItem('TradeskillUpBlacksmithing', vscode.CompletionItemKind.Method);
				
				ruleTradeskillUpBlacksmithing.detail = "rule.TradeskillUpBlacksmithing()";
				ruleTradeskillUpBlacksmithing.insertText = new vscode.SnippetString('TradeskillUpBlacksmithing()');
				ruleTradeskillUpBlacksmithing.documentation = new vscode.MarkdownString("");
				results.push(ruleTradeskillUpBlacksmithing);				
				
				const ruleTradeskillUpBrewing = new vscode.CompletionItem('TradeskillUpBrewing', vscode.CompletionItemKind.Method);
				
				ruleTradeskillUpBrewing.detail = "rule.TradeskillUpBrewing()";
				ruleTradeskillUpBrewing.insertText = new vscode.SnippetString('TradeskillUpBrewing()');
				ruleTradeskillUpBrewing.documentation = new vscode.MarkdownString("");
				results.push(ruleTradeskillUpBrewing);				
				
				const ruleTradeskillUpFletching = new vscode.CompletionItem('TradeskillUpFletching', vscode.CompletionItemKind.Method);
				
				ruleTradeskillUpFletching.detail = "rule.TradeskillUpFletching()";
				ruleTradeskillUpFletching.insertText = new vscode.SnippetString('TradeskillUpFletching()');
				ruleTradeskillUpFletching.documentation = new vscode.MarkdownString("");
				results.push(ruleTradeskillUpFletching);				
				
				const ruleTradeskillUpJewelcrafting = new vscode.CompletionItem('TradeskillUpJewelcrafting', vscode.CompletionItemKind.Method);
				
				ruleTradeskillUpJewelcrafting.detail = "rule.TradeskillUpJewelcrafting()";
				ruleTradeskillUpJewelcrafting.insertText = new vscode.SnippetString('TradeskillUpJewelcrafting()');
				ruleTradeskillUpJewelcrafting.documentation = new vscode.MarkdownString("");
				results.push(ruleTradeskillUpJewelcrafting);				
				
				const ruleTradeskillUpMakePoison = new vscode.CompletionItem('TradeskillUpMakePoison', vscode.CompletionItemKind.Method);
				
				ruleTradeskillUpMakePoison.detail = "rule.TradeskillUpMakePoison()";
				ruleTradeskillUpMakePoison.insertText = new vscode.SnippetString('TradeskillUpMakePoison()');
				ruleTradeskillUpMakePoison.documentation = new vscode.MarkdownString("");
				results.push(ruleTradeskillUpMakePoison);				
				
				const ruleTradeskillUpPottery = new vscode.CompletionItem('TradeskillUpPottery', vscode.CompletionItemKind.Method);
				
				ruleTradeskillUpPottery.detail = "rule.TradeskillUpPottery()";
				ruleTradeskillUpPottery.insertText = new vscode.SnippetString('TradeskillUpPottery()');
				ruleTradeskillUpPottery.documentation = new vscode.MarkdownString("");
				results.push(ruleTradeskillUpPottery);				
				
				const ruleTradeskillUpResearch = new vscode.CompletionItem('TradeskillUpResearch', vscode.CompletionItemKind.Method);
				
				ruleTradeskillUpResearch.detail = "rule.TradeskillUpResearch()";
				ruleTradeskillUpResearch.insertText = new vscode.SnippetString('TradeskillUpResearch()');
				ruleTradeskillUpResearch.documentation = new vscode.MarkdownString("");
				results.push(ruleTradeskillUpResearch);				
				
				const ruleTradeskillUpTinkering = new vscode.CompletionItem('TradeskillUpTinkering', vscode.CompletionItemKind.Method);
				
				ruleTradeskillUpTinkering.detail = "rule.TradeskillUpTinkering()";
				ruleTradeskillUpTinkering.insertText = new vscode.SnippetString('TradeskillUpTinkering()');
				ruleTradeskillUpTinkering.documentation = new vscode.MarkdownString("");
				results.push(ruleTradeskillUpTinkering);				
				
				const ruleTrainSenseHeading = new vscode.CompletionItem('TrainSenseHeading', vscode.CompletionItemKind.Method);
				
				ruleTrainSenseHeading.detail = "rule.TrainSenseHeading()";
				ruleTrainSenseHeading.insertText = new vscode.SnippetString('TrainSenseHeading()');
				ruleTrainSenseHeading.documentation = new vscode.MarkdownString("");
				results.push(ruleTrainSenseHeading);				
				
				const ruleTransformSummonedBags = new vscode.CompletionItem('TransformSummonedBags', vscode.CompletionItemKind.Method);
				
				ruleTransformSummonedBags.detail = "rule.TransformSummonedBags()";
				ruleTransformSummonedBags.insertText = new vscode.SnippetString('TransformSummonedBags()');
				ruleTransformSummonedBags.documentation = new vscode.MarkdownString("");
				results.push(ruleTransformSummonedBags);				
				
				const ruleTranslocateTimeLimit = new vscode.CompletionItem('TranslocateTimeLimit', vscode.CompletionItemKind.Method);
				
				ruleTranslocateTimeLimit.detail = "rule.TranslocateTimeLimit()";
				ruleTranslocateTimeLimit.insertText = new vscode.SnippetString('TranslocateTimeLimit()');
				ruleTranslocateTimeLimit.documentation = new vscode.MarkdownString("");
				results.push(ruleTranslocateTimeLimit);				
				
				const ruleTrollCommonTongue = new vscode.CompletionItem('TrollCommonTongue', vscode.CompletionItemKind.Method);
				
				ruleTrollCommonTongue.detail = "rule.TrollCommonTongue()";
				ruleTrollCommonTongue.insertText = new vscode.SnippetString('TrollCommonTongue()');
				ruleTrollCommonTongue.documentation = new vscode.MarkdownString("");
				results.push(ruleTrollCommonTongue);				
				
				const ruleTunnelVisionAggroMod = new vscode.CompletionItem('TunnelVisionAggroMod', vscode.CompletionItemKind.Method);
				
				ruleTunnelVisionAggroMod.detail = "rule.TunnelVisionAggroMod()";
				ruleTunnelVisionAggroMod.insertText = new vscode.SnippetString('TunnelVisionAggroMod()');
				ruleTunnelVisionAggroMod.documentation = new vscode.MarkdownString("");
				results.push(ruleTunnelVisionAggroMod);				
				
				const ruleTutorialZoneID = new vscode.CompletionItem('TutorialZoneID', vscode.CompletionItemKind.Method);
				
				ruleTutorialZoneID.detail = "rule.TutorialZoneID()";
				ruleTutorialZoneID.insertText = new vscode.SnippetString('TutorialZoneID()');
				ruleTutorialZoneID.documentation = new vscode.MarkdownString("");
				results.push(ruleTutorialZoneID);				
				
				const ruleUnmemSpellsOnDeath = new vscode.CompletionItem('UnmemSpellsOnDeath', vscode.CompletionItemKind.Method);
				
				ruleUnmemSpellsOnDeath.detail = "rule.UnmemSpellsOnDeath()";
				ruleUnmemSpellsOnDeath.insertText = new vscode.SnippetString('UnmemSpellsOnDeath()');
				ruleUnmemSpellsOnDeath.documentation = new vscode.MarkdownString("");
				results.push(ruleUnmemSpellsOnDeath);				
				
				const ruleUnTargetableSwarmPet = new vscode.CompletionItem('UnTargetableSwarmPet', vscode.CompletionItemKind.Method);
				
				ruleUnTargetableSwarmPet.detail = "rule.UnTargetableSwarmPet()";
				ruleUnTargetableSwarmPet.insertText = new vscode.SnippetString('UnTargetableSwarmPet()');
				ruleUnTargetableSwarmPet.documentation = new vscode.MarkdownString("");
				results.push(ruleUnTargetableSwarmPet);				
				
				const ruleUpdatePositionWithTimer = new vscode.CompletionItem('UpdatePositionWithTimer', vscode.CompletionItemKind.Method);
				
				ruleUpdatePositionWithTimer.detail = "rule.UpdatePositionWithTimer()";
				ruleUpdatePositionWithTimer.insertText = new vscode.SnippetString('UpdatePositionWithTimer()');
				ruleUpdatePositionWithTimer.documentation = new vscode.MarkdownString("");
				results.push(ruleUpdatePositionWithTimer);				
				
				const ruleUpkeepIntervalMS = new vscode.CompletionItem('UpkeepIntervalMS', vscode.CompletionItemKind.Method);
				
				ruleUpkeepIntervalMS.detail = "rule.UpkeepIntervalMS()";
				ruleUpkeepIntervalMS.insertText = new vscode.SnippetString('UpkeepIntervalMS()');
				ruleUpkeepIntervalMS.documentation = new vscode.MarkdownString("");
				results.push(ruleUpkeepIntervalMS);				
				
				const ruleUseAdditiveFocusFromWornRule = new vscode.CompletionItem('UseAdditiveFocusFromWornRule', vscode.CompletionItemKind.Method);
				
				ruleUseAdditiveFocusFromWornRule.detail = "rule.UseAdditiveFocusFromWornRule()";
				ruleUseAdditiveFocusFromWornRule.insertText = new vscode.SnippetString('UseAdditiveFocusFromWornRule()');
				ruleUseAdditiveFocusFromWornRule.documentation = new vscode.MarkdownString("");
				results.push(ruleUseAdditiveFocusFromWornRule);				
				
				const ruleUseArcheryBonusRoll = new vscode.CompletionItem('UseArcheryBonusRoll', vscode.CompletionItemKind.Method);
				
				ruleUseArcheryBonusRoll.detail = "rule.UseArcheryBonusRoll()";
				ruleUseArcheryBonusRoll.insertText = new vscode.SnippetString('UseArcheryBonusRoll()');
				ruleUseArcheryBonusRoll.documentation = new vscode.MarkdownString("");
				results.push(ruleUseArcheryBonusRoll);				
				
				const ruleUseBaneDamage = new vscode.CompletionItem('UseBaneDamage', vscode.CompletionItemKind.Method);
				
				ruleUseBaneDamage.detail = "rule.UseBaneDamage()";
				ruleUseBaneDamage.insertText = new vscode.SnippetString('UseBaneDamage()');
				ruleUseBaneDamage.documentation = new vscode.MarkdownString("");
				results.push(ruleUseBaneDamage);				
				
				const ruleUseBannedIPsTable = new vscode.CompletionItem('UseBannedIPsTable', vscode.CompletionItemKind.Method);
				
				ruleUseBannedIPsTable.detail = "rule.UseBannedIPsTable()";
				ruleUseBannedIPsTable.insertText = new vscode.SnippetString('UseBannedIPsTable()');
				ruleUseBannedIPsTable.documentation = new vscode.MarkdownString("");
				results.push(ruleUseBannedIPsTable);				
				
				const ruleUseCHAScribeHack = new vscode.CompletionItem('UseCHAScribeHack', vscode.CompletionItemKind.Method);
				
				ruleUseCHAScribeHack.detail = "rule.UseCHAScribeHack()";
				ruleUseCHAScribeHack.insertText = new vscode.SnippetString('UseCHAScribeHack()');
				ruleUseCHAScribeHack.documentation = new vscode.MarkdownString("");
				results.push(ruleUseCHAScribeHack);				
				
				const ruleUseClassAsLastName = new vscode.CompletionItem('UseClassAsLastName', vscode.CompletionItemKind.Method);
				
				ruleUseClassAsLastName.detail = "rule.UseClassAsLastName()";
				ruleUseClassAsLastName.insertText = new vscode.SnippetString('UseClassAsLastName()');
				ruleUseClassAsLastName.documentation = new vscode.MarkdownString("");
				results.push(ruleUseClassAsLastName);				
				
				const ruleUseClientBasedExpansionSettings = new vscode.CompletionItem('UseClientBasedExpansionSettings', vscode.CompletionItemKind.Method);
				
				ruleUseClientBasedExpansionSettings.detail = "rule.UseClientBasedExpansionSettings()";
				ruleUseClientBasedExpansionSettings.insertText = new vscode.SnippetString('UseClientBasedExpansionSettings()');
				ruleUseClientBasedExpansionSettings.documentation = new vscode.MarkdownString("");
				results.push(ruleUseClientBasedExpansionSettings);				
				
				const ruleUseDeathExpLossMult = new vscode.CompletionItem('UseDeathExpLossMult', vscode.CompletionItemKind.Method);
				
				ruleUseDeathExpLossMult.detail = "rule.UseDeathExpLossMult()";
				ruleUseDeathExpLossMult.insertText = new vscode.SnippetString('UseDeathExpLossMult()');
				ruleUseDeathExpLossMult.documentation = new vscode.MarkdownString("");
				results.push(ruleUseDeathExpLossMult);				
				
				const ruleUseExtendedPoisonProcs = new vscode.CompletionItem('UseExtendedPoisonProcs', vscode.CompletionItemKind.Method);
				
				ruleUseExtendedPoisonProcs.detail = "rule.UseExtendedPoisonProcs()";
				ruleUseExtendedPoisonProcs.insertText = new vscode.SnippetString('UseExtendedPoisonProcs()');
				ruleUseExtendedPoisonProcs.documentation = new vscode.MarkdownString("");
				results.push(ruleUseExtendedPoisonProcs);				
				
				const ruleUseIntervalAC = new vscode.CompletionItem('UseIntervalAC', vscode.CompletionItemKind.Method);
				
				ruleUseIntervalAC.detail = "rule.UseIntervalAC()";
				ruleUseIntervalAC.insertText = new vscode.SnippetString('UseIntervalAC()');
				ruleUseIntervalAC.documentation = new vscode.MarkdownString("");
				results.push(ruleUseIntervalAC);				
				
				const ruleUseItemBonusesForNonPets = new vscode.CompletionItem('UseItemBonusesForNonPets', vscode.CompletionItemKind.Method);
				
				ruleUseItemBonusesForNonPets.detail = "rule.UseItemBonusesForNonPets()";
				ruleUseItemBonusesForNonPets.insertText = new vscode.SnippetString('UseItemBonusesForNonPets()');
				ruleUseItemBonusesForNonPets.documentation = new vscode.MarkdownString("");
				results.push(ruleUseItemBonusesForNonPets);				
				
				const ruleUseLevelAggro = new vscode.CompletionItem('UseLevelAggro', vscode.CompletionItemKind.Method);
				
				ruleUseLevelAggro.detail = "rule.UseLevelAggro()";
				ruleUseLevelAggro.insertText = new vscode.SnippetString('UseLevelAggro()');
				ruleUseLevelAggro.documentation = new vscode.MarkdownString("");
				results.push(ruleUseLevelAggro);				
				
				const ruleUseLimitTradeskillSearchSkillDiff = new vscode.CompletionItem('UseLimitTradeskillSearchSkillDiff', vscode.CompletionItemKind.Method);
				
				ruleUseLimitTradeskillSearchSkillDiff.detail = "rule.UseLimitTradeskillSearchSkillDiff()";
				ruleUseLimitTradeskillSearchSkillDiff.insertText = new vscode.SnippetString('UseLimitTradeskillSearchSkillDiff()');
				ruleUseLimitTradeskillSearchSkillDiff.documentation = new vscode.MarkdownString("");
				results.push(ruleUseLimitTradeskillSearchSkillDiff);				
				
				const ruleUseLiveBlockedMessage = new vscode.CompletionItem('UseLiveBlockedMessage', vscode.CompletionItemKind.Method);
				
				ruleUseLiveBlockedMessage.detail = "rule.UseLiveBlockedMessage()";
				ruleUseLiveBlockedMessage.insertText = new vscode.SnippetString('UseLiveBlockedMessage()');
				ruleUseLiveBlockedMessage.documentation = new vscode.MarkdownString("");
				results.push(ruleUseLiveBlockedMessage);				
				
				const ruleUseLiveCombatRounds = new vscode.CompletionItem('UseLiveCombatRounds', vscode.CompletionItemKind.Method);
				
				ruleUseLiveCombatRounds.detail = "rule.UseLiveCombatRounds()";
				ruleUseLiveCombatRounds.insertText = new vscode.SnippetString('UseLiveCombatRounds()');
				ruleUseLiveCombatRounds.documentation = new vscode.MarkdownString("");
				results.push(ruleUseLiveCombatRounds);				
				
				const ruleUseLiveFactionMessage = new vscode.CompletionItem('UseLiveFactionMessage', vscode.CompletionItemKind.Method);
				
				ruleUseLiveFactionMessage.detail = "rule.UseLiveFactionMessage()";
				ruleUseLiveFactionMessage.insertText = new vscode.SnippetString('UseLiveFactionMessage()');
				ruleUseLiveFactionMessage.documentation = new vscode.MarkdownString("");
				results.push(ruleUseLiveFactionMessage);				
				
				const ruleUseLiveSpellProjectileGFX = new vscode.CompletionItem('UseLiveSpellProjectileGFX', vscode.CompletionItemKind.Method);
				
				ruleUseLiveSpellProjectileGFX.detail = "rule.UseLiveSpellProjectileGFX()";
				ruleUseLiveSpellProjectileGFX.insertText = new vscode.SnippetString('UseLiveSpellProjectileGFX()');
				ruleUseLiveSpellProjectileGFX.documentation = new vscode.MarkdownString("");
				results.push(ruleUseLiveSpellProjectileGFX);				
				
				const ruleUseMeditateBasedManaRegen = new vscode.CompletionItem('UseMeditateBasedManaRegen', vscode.CompletionItemKind.Method);
				
				ruleUseMeditateBasedManaRegen.detail = "rule.UseMeditateBasedManaRegen()";
				ruleUseMeditateBasedManaRegen.insertText = new vscode.SnippetString('UseMeditateBasedManaRegen()');
				ruleUseMeditateBasedManaRegen.documentation = new vscode.MarkdownString("");
				results.push(ruleUseMeditateBasedManaRegen);				
				
				const ruleUseNewStatsWindow = new vscode.CompletionItem('UseNewStatsWindow', vscode.CompletionItemKind.Method);
				
				ruleUseNewStatsWindow.detail = "rule.UseNewStatsWindow()";
				ruleUseNewStatsWindow.insertText = new vscode.SnippetString('UseNewStatsWindow()');
				ruleUseNewStatsWindow.documentation = new vscode.MarkdownString("");
				results.push(ruleUseNewStatsWindow);				
				
				const ruleUseNoJunkFishing = new vscode.CompletionItem('UseNoJunkFishing', vscode.CompletionItemKind.Method);
				
				ruleUseNoJunkFishing.detail = "rule.UseNoJunkFishing()";
				ruleUseNoJunkFishing.insertText = new vscode.SnippetString('UseNoJunkFishing()');
				ruleUseNoJunkFishing.documentation = new vscode.MarkdownString("");
				results.push(ruleUseNoJunkFishing);				
				
				const ruleUseNPCDamageClassLevelMods = new vscode.CompletionItem('UseNPCDamageClassLevelMods', vscode.CompletionItemKind.Method);
				
				ruleUseNPCDamageClassLevelMods.detail = "rule.UseNPCDamageClassLevelMods()";
				ruleUseNPCDamageClassLevelMods.insertText = new vscode.SnippetString('UseNPCDamageClassLevelMods()');
				ruleUseNPCDamageClassLevelMods.documentation = new vscode.MarkdownString("");
				results.push(ruleUseNPCDamageClassLevelMods);				
				
				const ruleUseOldBindWound = new vscode.CompletionItem('UseOldBindWound', vscode.CompletionItemKind.Method);
				
				ruleUseOldBindWound.detail = "rule.UseOldBindWound()";
				ruleUseOldBindWound.insertText = new vscode.SnippetString('UseOldBindWound()');
				ruleUseOldBindWound.documentation = new vscode.MarkdownString("");
				results.push(ruleUseOldBindWound);				
				
				const ruleUseOldClassExpPenalties = new vscode.CompletionItem('UseOldClassExpPenalties', vscode.CompletionItemKind.Method);
				
				ruleUseOldClassExpPenalties.detail = "rule.UseOldClassExpPenalties()";
				ruleUseOldClassExpPenalties.insertText = new vscode.SnippetString('UseOldClassExpPenalties()');
				ruleUseOldClassExpPenalties.documentation = new vscode.MarkdownString("");
				results.push(ruleUseOldClassExpPenalties);				
				
				const ruleUseOldConSystem = new vscode.CompletionItem('UseOldConSystem', vscode.CompletionItemKind.Method);
				
				ruleUseOldConSystem.detail = "rule.UseOldConSystem()";
				ruleUseOldConSystem.insertText = new vscode.SnippetString('UseOldConSystem()');
				ruleUseOldConSystem.documentation = new vscode.MarkdownString("");
				results.push(ruleUseOldConSystem);				
				
				const ruleUseOldDamageIntervalRules = new vscode.CompletionItem('UseOldDamageIntervalRules', vscode.CompletionItemKind.Method);
				
				ruleUseOldDamageIntervalRules.detail = "rule.UseOldDamageIntervalRules()";
				ruleUseOldDamageIntervalRules.insertText = new vscode.SnippetString('UseOldDamageIntervalRules()');
				ruleUseOldDamageIntervalRules.documentation = new vscode.MarkdownString("");
				results.push(ruleUseOldDamageIntervalRules);				
				
				const ruleUseOldRaceExpPenalties = new vscode.CompletionItem('UseOldRaceExpPenalties', vscode.CompletionItemKind.Method);
				
				ruleUseOldRaceExpPenalties.detail = "rule.UseOldRaceExpPenalties()";
				ruleUseOldRaceExpPenalties.insertText = new vscode.SnippetString('UseOldRaceExpPenalties()');
				ruleUseOldRaceExpPenalties.documentation = new vscode.MarkdownString("");
				results.push(ruleUseOldRaceExpPenalties);				
				
				const ruleUseOldRaceRezEffects = new vscode.CompletionItem('UseOldRaceRezEffects', vscode.CompletionItemKind.Method);
				
				ruleUseOldRaceRezEffects.detail = "rule.UseOldRaceRezEffects()";
				ruleUseOldRaceRezEffects.insertText = new vscode.SnippetString('UseOldRaceRezEffects()');
				ruleUseOldRaceRezEffects.documentation = new vscode.MarkdownString("");
				results.push(ruleUseOldRaceRezEffects);				
				
				const ruleUseOldReportingMethod = new vscode.CompletionItem('UseOldReportingMethod', vscode.CompletionItemKind.Method);
				
				ruleUseOldReportingMethod.detail = "rule.UseOldReportingMethod()";
				ruleUseOldReportingMethod.insertText = new vscode.SnippetString('UseOldReportingMethod()');
				ruleUseOldReportingMethod.documentation = new vscode.MarkdownString("");
				results.push(ruleUseOldReportingMethod);				
				
				const ruleUsePathing = new vscode.CompletionItem('UsePathing', vscode.CompletionItemKind.Method);
				
				ruleUsePathing.detail = "rule.UsePathing()";
				ruleUsePathing.insertText = new vscode.SnippetString('UsePathing()');
				ruleUsePathing.documentation = new vscode.MarkdownString("");
				results.push(ruleUsePathing);				
				
				const ruleUsePEQZoneDebuffs = new vscode.CompletionItem('UsePEQZoneDebuffs', vscode.CompletionItemKind.Method);
				
				ruleUsePEQZoneDebuffs.detail = "rule.UsePEQZoneDebuffs()";
				ruleUsePEQZoneDebuffs.insertText = new vscode.SnippetString('UsePEQZoneDebuffs()');
				ruleUsePEQZoneDebuffs.documentation = new vscode.MarkdownString("");
				results.push(ruleUsePEQZoneDebuffs);				
				
				const ruleUsePlayerCorpseBackups = new vscode.CompletionItem('UsePlayerCorpseBackups', vscode.CompletionItemKind.Method);
				
				ruleUsePlayerCorpseBackups.detail = "rule.UsePlayerCorpseBackups()";
				ruleUsePlayerCorpseBackups.insertText = new vscode.SnippetString('UsePlayerCorpseBackups()');
				ruleUsePlayerCorpseBackups.documentation = new vscode.MarkdownString("");
				results.push(ruleUsePlayerCorpseBackups);				
				
				const ruleUsePriceMod = new vscode.CompletionItem('UsePriceMod', vscode.CompletionItemKind.Method);
				
				ruleUsePriceMod.detail = "rule.UsePriceMod()";
				ruleUsePriceMod.insertText = new vscode.SnippetString('UsePriceMod()');
				ruleUsePriceMod.documentation = new vscode.MarkdownString("");
				results.push(ruleUsePriceMod);				
				
				const ruleUseRaceClassExpBonuses = new vscode.CompletionItem('UseRaceClassExpBonuses', vscode.CompletionItemKind.Method);
				
				ruleUseRaceClassExpBonuses.detail = "rule.UseRaceClassExpBonuses()";
				ruleUseRaceClassExpBonuses.insertText = new vscode.SnippetString('UseRaceClassExpBonuses()');
				ruleUseRaceClassExpBonuses.documentation = new vscode.MarkdownString("");
				results.push(ruleUseRaceClassExpBonuses);				
				
				const ruleUseRevampHandToHand = new vscode.CompletionItem('UseRevampHandToHand', vscode.CompletionItemKind.Method);
				
				ruleUseRevampHandToHand.detail = "rule.UseRevampHandToHand()";
				ruleUseRevampHandToHand.insertText = new vscode.SnippetString('UseRevampHandToHand()');
				ruleUseRevampHandToHand.documentation = new vscode.MarkdownString("");
				results.push(ruleUseRevampHandToHand);				
				
				const ruleUseSpellFileSongCap = new vscode.CompletionItem('UseSpellFileSongCap', vscode.CompletionItemKind.Method);
				
				ruleUseSpellFileSongCap.detail = "rule.UseSpellFileSongCap()";
				ruleUseSpellFileSongCap.insertText = new vscode.SnippetString('UseSpellFileSongCap()');
				ruleUseSpellFileSongCap.documentation = new vscode.MarkdownString("");
				results.push(ruleUseSpellFileSongCap);				
				
				const ruleUseStackablePickPocketing = new vscode.CompletionItem('UseStackablePickPocketing', vscode.CompletionItemKind.Method);
				
				ruleUseStackablePickPocketing.detail = "rule.UseStackablePickPocketing()";
				ruleUseStackablePickPocketing.insertText = new vscode.SnippetString('UseStackablePickPocketing()');
				ruleUseStackablePickPocketing.documentation = new vscode.MarkdownString("");
				results.push(ruleUseStackablePickPocketing);				
				
				const ruleUseXPConScaling = new vscode.CompletionItem('UseXPConScaling', vscode.CompletionItemKind.Method);
				
				ruleUseXPConScaling.detail = "rule.UseXPConScaling()";
				ruleUseXPConScaling.insertText = new vscode.SnippetString('UseXPConScaling()');
				ruleUseXPConScaling.documentation = new vscode.MarkdownString("");
				results.push(ruleUseXPConScaling);				
				
				const ruleUseZoneController = new vscode.CompletionItem('UseZoneController', vscode.CompletionItemKind.Method);
				
				ruleUseZoneController.detail = "rule.UseZoneController()";
				ruleUseZoneController.insertText = new vscode.SnippetString('UseZoneController()');
				ruleUseZoneController.documentation = new vscode.MarkdownString("");
				results.push(ruleUseZoneController);				
				
				const ruleVirusSpreadDistance = new vscode.CompletionItem('VirusSpreadDistance', vscode.CompletionItemKind.Method);
				
				ruleVirusSpreadDistance.detail = "rule.VirusSpreadDistance()";
				ruleVirusSpreadDistance.insertText = new vscode.SnippetString('VirusSpreadDistance()');
				ruleVirusSpreadDistance.documentation = new vscode.MarkdownString("");
				results.push(ruleVirusSpreadDistance);				
				
				const ruleWarACSoftcapReturn = new vscode.CompletionItem('WarACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				ruleWarACSoftcapReturn.detail = "rule.WarACSoftcapReturn()";
				ruleWarACSoftcapReturn.insertText = new vscode.SnippetString('WarACSoftcapReturn()');
				ruleWarACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(ruleWarACSoftcapReturn);				
				
				const ruleWarmlyFactionMinimum = new vscode.CompletionItem('WarmlyFactionMinimum', vscode.CompletionItemKind.Method);
				
				ruleWarmlyFactionMinimum.detail = "rule.WarmlyFactionMinimum()";
				ruleWarmlyFactionMinimum.insertText = new vscode.SnippetString('WarmlyFactionMinimum()');
				ruleWarmlyFactionMinimum.documentation = new vscode.MarkdownString("");
				results.push(ruleWarmlyFactionMinimum);				
				
				const ruleWarriorACSoftcapReturn = new vscode.CompletionItem('WarriorACSoftcapReturn', vscode.CompletionItemKind.Method);
				
				ruleWarriorACSoftcapReturn.detail = "rule.WarriorACSoftcapReturn()";
				ruleWarriorACSoftcapReturn.insertText = new vscode.SnippetString('WarriorACSoftcapReturn()');
				ruleWarriorACSoftcapReturn.documentation = new vscode.MarkdownString("");
				results.push(ruleWarriorACSoftcapReturn);				
				
				const ruleWeaponSkillFalloff = new vscode.CompletionItem('WeaponSkillFalloff', vscode.CompletionItemKind.Method);
				
				ruleWeaponSkillFalloff.detail = "rule.WeaponSkillFalloff()";
				ruleWeaponSkillFalloff.insertText = new vscode.SnippetString('WeaponSkillFalloff()');
				ruleWeaponSkillFalloff.documentation = new vscode.MarkdownString("");
				results.push(ruleWeaponSkillFalloff);				
				
				const ruleWeatherTimer = new vscode.CompletionItem('WeatherTimer', vscode.CompletionItemKind.Method);
				
				ruleWeatherTimer.detail = "rule.WeatherTimer()";
				ruleWeatherTimer.insertText = new vscode.SnippetString('WeatherTimer()');
				ruleWeatherTimer.documentation = new vscode.MarkdownString("");
				results.push(ruleWeatherTimer);				
				
				const ruleWhiteModifier = new vscode.CompletionItem('WhiteModifier', vscode.CompletionItemKind.Method);
				
				ruleWhiteModifier.detail = "rule.WhiteModifier()";
				ruleWhiteModifier.insertText = new vscode.SnippetString('WhiteModifier()');
				ruleWhiteModifier.documentation = new vscode.MarkdownString("");
				results.push(ruleWhiteModifier);				
				
				const ruleWizCritChance = new vscode.CompletionItem('WizCritChance', vscode.CompletionItemKind.Method);
				
				ruleWizCritChance.detail = "rule.WizCritChance()";
				ruleWizCritChance.insertText = new vscode.SnippetString('WizCritChance()');
				ruleWizCritChance.documentation = new vscode.MarkdownString("");
				results.push(ruleWizCritChance);				
				
				const ruleWizCritLevel = new vscode.CompletionItem('WizCritLevel', vscode.CompletionItemKind.Method);
				
				ruleWizCritLevel.detail = "rule.WizCritLevel()";
				ruleWizCritLevel.insertText = new vscode.SnippetString('WizCritLevel()');
				ruleWizCritLevel.documentation = new vscode.MarkdownString("");
				results.push(ruleWizCritLevel);				
				
				const ruleWizCritRatio = new vscode.CompletionItem('WizCritRatio', vscode.CompletionItemKind.Method);
				
				ruleWizCritRatio.detail = "rule.WizCritRatio()";
				ruleWizCritRatio.insertText = new vscode.SnippetString('WizCritRatio()');
				ruleWizCritRatio.documentation = new vscode.MarkdownString("");
				results.push(ruleWizCritRatio);				
				
				const ruleYellowModifier = new vscode.CompletionItem('YellowModifier', vscode.CompletionItemKind.Method);
				
				ruleYellowModifier.detail = "rule.YellowModifier()";
				ruleYellowModifier.insertText = new vscode.SnippetString('YellowModifier()');
				ruleYellowModifier.documentation = new vscode.MarkdownString("");
				results.push(ruleYellowModifier);				
				
				const ruleZoneAutobootTimeoutMS = new vscode.CompletionItem('ZoneAutobootTimeoutMS', vscode.CompletionItemKind.Method);
				
				ruleZoneAutobootTimeoutMS.detail = "rule.ZoneAutobootTimeoutMS()";
				ruleZoneAutobootTimeoutMS.insertText = new vscode.SnippetString('ZoneAutobootTimeoutMS()');
				ruleZoneAutobootTimeoutMS.documentation = new vscode.MarkdownString("");
				results.push(ruleZoneAutobootTimeoutMS);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('rule_b.')) {
					return undefined;
				}
				
				
				const rulebGet = new vscode.CompletionItem('Get', vscode.CompletionItemKind.Method);
				
				rulebGet.detail = "rule_b.Get()";
				rulebGet.insertText = new vscode.SnippetString('Get()');
				rulebGet.documentation = new vscode.MarkdownString("");
				results.push(rulebGet);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('rule_i.')) {
					return undefined;
				}
				
				
				const ruleiGet = new vscode.CompletionItem('Get', vscode.CompletionItemKind.Method);
				
				ruleiGet.detail = "rule_i.Get()";
				ruleiGet.insertText = new vscode.SnippetString('Get()');
				ruleiGet.documentation = new vscode.MarkdownString("");
				results.push(ruleiGet);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('rule_r.')) {
					return undefined;
				}
				
				
				const rulerGet = new vscode.CompletionItem('Get', vscode.CompletionItemKind.Method);
				
				rulerGet.detail = "rule_r.Get()";
				rulerGet.insertText = new vscode.SnippetString('Get()');
				rulerGet.documentation = new vscode.MarkdownString("");
				results.push(rulerGet);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('skill.')) {
					return undefined;
				}
				
				
				const skill1HBlunt = new vscode.CompletionItem('1HBlunt', vscode.CompletionItemKind.Method);
				
				skill1HBlunt.detail = "skill.1HBlunt()";
				skill1HBlunt.insertText = new vscode.SnippetString('1HBlunt()');
				skill1HBlunt.documentation = new vscode.MarkdownString("");
				results.push(skill1HBlunt);				
				
				const skill1HPiercing = new vscode.CompletionItem('1HPiercing', vscode.CompletionItemKind.Method);
				
				skill1HPiercing.detail = "skill.1HPiercing()";
				skill1HPiercing.insertText = new vscode.SnippetString('1HPiercing()');
				skill1HPiercing.documentation = new vscode.MarkdownString("");
				results.push(skill1HPiercing);				
				
				const skill1HSlashing = new vscode.CompletionItem('1HSlashing', vscode.CompletionItemKind.Method);
				
				skill1HSlashing.detail = "skill.1HSlashing()";
				skill1HSlashing.insertText = new vscode.SnippetString('1HSlashing()');
				skill1HSlashing.documentation = new vscode.MarkdownString("");
				results.push(skill1HSlashing);				
				
				const skill2HBlunt = new vscode.CompletionItem('2HBlunt', vscode.CompletionItemKind.Method);
				
				skill2HBlunt.detail = "skill.2HBlunt()";
				skill2HBlunt.insertText = new vscode.SnippetString('2HBlunt()');
				skill2HBlunt.documentation = new vscode.MarkdownString("");
				results.push(skill2HBlunt);				
				
				const skill2HPiercing = new vscode.CompletionItem('2HPiercing', vscode.CompletionItemKind.Method);
				
				skill2HPiercing.detail = "skill.2HPiercing()";
				skill2HPiercing.insertText = new vscode.SnippetString('2HPiercing()');
				skill2HPiercing.documentation = new vscode.MarkdownString("");
				results.push(skill2HPiercing);				
				
				const skill2HSlashing = new vscode.CompletionItem('2HSlashing', vscode.CompletionItemKind.Method);
				
				skill2HSlashing.detail = "skill.2HSlashing()";
				skill2HSlashing.insertText = new vscode.SnippetString('2HSlashing()');
				skill2HSlashing.documentation = new vscode.MarkdownString("");
				results.push(skill2HSlashing);				
				
				const skillAbjuration = new vscode.CompletionItem('Abjuration', vscode.CompletionItemKind.Property);
				
				skillAbjuration.detail = "skill.Abjuration";
				skillAbjuration.insertText = new vscode.SnippetString('Abjuration');
				skillAbjuration.documentation = new vscode.MarkdownString("");
				results.push(skillAbjuration);				
				
				const skillAlchemy = new vscode.CompletionItem('Alchemy', vscode.CompletionItemKind.Property);
				
				skillAlchemy.detail = "skill.Alchemy";
				skillAlchemy.insertText = new vscode.SnippetString('Alchemy');
				skillAlchemy.documentation = new vscode.MarkdownString("");
				results.push(skillAlchemy);				
				
				const skillAlcoholTolerance = new vscode.CompletionItem('AlcoholTolerance', vscode.CompletionItemKind.Property);
				
				skillAlcoholTolerance.detail = "skill.AlcoholTolerance";
				skillAlcoholTolerance.insertText = new vscode.SnippetString('AlcoholTolerance');
				skillAlcoholTolerance.documentation = new vscode.MarkdownString("");
				results.push(skillAlcoholTolerance);				
				
				const skillAlteration = new vscode.CompletionItem('Alteration', vscode.CompletionItemKind.Property);
				
				skillAlteration.detail = "skill.Alteration";
				skillAlteration.insertText = new vscode.SnippetString('Alteration');
				skillAlteration.documentation = new vscode.MarkdownString("");
				results.push(skillAlteration);				
				
				const skillApplyPoison = new vscode.CompletionItem('ApplyPoison', vscode.CompletionItemKind.Property);
				
				skillApplyPoison.detail = "skill.ApplyPoison";
				skillApplyPoison.insertText = new vscode.SnippetString('ApplyPoison');
				skillApplyPoison.documentation = new vscode.MarkdownString("");
				results.push(skillApplyPoison);				
				
				const skillArchery = new vscode.CompletionItem('Archery', vscode.CompletionItemKind.Property);
				
				skillArchery.detail = "skill.Archery";
				skillArchery.insertText = new vscode.SnippetString('Archery');
				skillArchery.documentation = new vscode.MarkdownString("");
				results.push(skillArchery);				
				
				const skillBackstab = new vscode.CompletionItem('Backstab', vscode.CompletionItemKind.Property);
				
				skillBackstab.detail = "skill.Backstab";
				skillBackstab.insertText = new vscode.SnippetString('Backstab');
				skillBackstab.documentation = new vscode.MarkdownString("");
				results.push(skillBackstab);				
				
				const skillBaking = new vscode.CompletionItem('Baking', vscode.CompletionItemKind.Property);
				
				skillBaking.detail = "skill.Baking";
				skillBaking.insertText = new vscode.SnippetString('Baking');
				skillBaking.documentation = new vscode.MarkdownString("");
				results.push(skillBaking);				
				
				const skillBash = new vscode.CompletionItem('Bash', vscode.CompletionItemKind.Property);
				
				skillBash.detail = "skill.Bash";
				skillBash.insertText = new vscode.SnippetString('Bash');
				skillBash.documentation = new vscode.MarkdownString("");
				results.push(skillBash);				
				
				const skillBegging = new vscode.CompletionItem('Begging', vscode.CompletionItemKind.Property);
				
				skillBegging.detail = "skill.Begging";
				skillBegging.insertText = new vscode.SnippetString('Begging');
				skillBegging.documentation = new vscode.MarkdownString("");
				results.push(skillBegging);				
				
				const skillBerserking = new vscode.CompletionItem('Berserking', vscode.CompletionItemKind.Property);
				
				skillBerserking.detail = "skill.Berserking";
				skillBerserking.insertText = new vscode.SnippetString('Berserking');
				skillBerserking.documentation = new vscode.MarkdownString("");
				results.push(skillBerserking);				
				
				const skillBindWound = new vscode.CompletionItem('BindWound', vscode.CompletionItemKind.Property);
				
				skillBindWound.detail = "skill.BindWound";
				skillBindWound.insertText = new vscode.SnippetString('BindWound');
				skillBindWound.documentation = new vscode.MarkdownString("");
				results.push(skillBindWound);				
				
				const skillBlacksmithing = new vscode.CompletionItem('Blacksmithing', vscode.CompletionItemKind.Property);
				
				skillBlacksmithing.detail = "skill.Blacksmithing";
				skillBlacksmithing.insertText = new vscode.SnippetString('Blacksmithing');
				skillBlacksmithing.documentation = new vscode.MarkdownString("");
				results.push(skillBlacksmithing);				
				
				const skillBlock = new vscode.CompletionItem('Block', vscode.CompletionItemKind.Property);
				
				skillBlock.detail = "skill.Block";
				skillBlock.insertText = new vscode.SnippetString('Block');
				skillBlock.documentation = new vscode.MarkdownString("");
				results.push(skillBlock);				
				
				const skillBrassInstruments = new vscode.CompletionItem('BrassInstruments', vscode.CompletionItemKind.Property);
				
				skillBrassInstruments.detail = "skill.BrassInstruments";
				skillBrassInstruments.insertText = new vscode.SnippetString('BrassInstruments');
				skillBrassInstruments.documentation = new vscode.MarkdownString("");
				results.push(skillBrassInstruments);				
				
				const skillBrewing = new vscode.CompletionItem('Brewing', vscode.CompletionItemKind.Property);
				
				skillBrewing.detail = "skill.Brewing";
				skillBrewing.insertText = new vscode.SnippetString('Brewing');
				skillBrewing.documentation = new vscode.MarkdownString("");
				results.push(skillBrewing);				
				
				const skillChanneling = new vscode.CompletionItem('Channeling', vscode.CompletionItemKind.Property);
				
				skillChanneling.detail = "skill.Channeling";
				skillChanneling.insertText = new vscode.SnippetString('Channeling');
				skillChanneling.documentation = new vscode.MarkdownString("");
				results.push(skillChanneling);				
				
				const skillConjuration = new vscode.CompletionItem('Conjuration', vscode.CompletionItemKind.Property);
				
				skillConjuration.detail = "skill.Conjuration";
				skillConjuration.insertText = new vscode.SnippetString('Conjuration');
				skillConjuration.documentation = new vscode.MarkdownString("");
				results.push(skillConjuration);				
				
				const skillDefense = new vscode.CompletionItem('Defense', vscode.CompletionItemKind.Property);
				
				skillDefense.detail = "skill.Defense";
				skillDefense.insertText = new vscode.SnippetString('Defense');
				skillDefense.documentation = new vscode.MarkdownString("");
				results.push(skillDefense);				
				
				const skillDisarm = new vscode.CompletionItem('Disarm', vscode.CompletionItemKind.Property);
				
				skillDisarm.detail = "skill.Disarm";
				skillDisarm.insertText = new vscode.SnippetString('Disarm');
				skillDisarm.documentation = new vscode.MarkdownString("");
				results.push(skillDisarm);				
				
				const skillDisarmTraps = new vscode.CompletionItem('DisarmTraps', vscode.CompletionItemKind.Property);
				
				skillDisarmTraps.detail = "skill.DisarmTraps";
				skillDisarmTraps.insertText = new vscode.SnippetString('DisarmTraps');
				skillDisarmTraps.documentation = new vscode.MarkdownString("");
				results.push(skillDisarmTraps);				
				
				const skillDivination = new vscode.CompletionItem('Divination', vscode.CompletionItemKind.Property);
				
				skillDivination.detail = "skill.Divination";
				skillDivination.insertText = new vscode.SnippetString('Divination');
				skillDivination.documentation = new vscode.MarkdownString("");
				results.push(skillDivination);				
				
				const skillDodge = new vscode.CompletionItem('Dodge', vscode.CompletionItemKind.Property);
				
				skillDodge.detail = "skill.Dodge";
				skillDodge.insertText = new vscode.SnippetString('Dodge');
				skillDodge.documentation = new vscode.MarkdownString("");
				results.push(skillDodge);				
				
				const skillDoubleAttack = new vscode.CompletionItem('DoubleAttack', vscode.CompletionItemKind.Property);
				
				skillDoubleAttack.detail = "skill.DoubleAttack";
				skillDoubleAttack.insertText = new vscode.SnippetString('DoubleAttack');
				skillDoubleAttack.documentation = new vscode.MarkdownString("");
				results.push(skillDoubleAttack);				
				
				const skillDragonPunch = new vscode.CompletionItem('DragonPunch', vscode.CompletionItemKind.Property);
				
				skillDragonPunch.detail = "skill.DragonPunch";
				skillDragonPunch.insertText = new vscode.SnippetString('DragonPunch');
				skillDragonPunch.documentation = new vscode.MarkdownString("");
				results.push(skillDragonPunch);				
				
				const skillDualWield = new vscode.CompletionItem('DualWield', vscode.CompletionItemKind.Property);
				
				skillDualWield.detail = "skill.DualWield";
				skillDualWield.insertText = new vscode.SnippetString('DualWield');
				skillDualWield.documentation = new vscode.MarkdownString("");
				results.push(skillDualWield);				
				
				const skillEagleStrike = new vscode.CompletionItem('EagleStrike', vscode.CompletionItemKind.Property);
				
				skillEagleStrike.detail = "skill.EagleStrike";
				skillEagleStrike.insertText = new vscode.SnippetString('EagleStrike');
				skillEagleStrike.documentation = new vscode.MarkdownString("");
				results.push(skillEagleStrike);				
				
				const skillEvocation = new vscode.CompletionItem('Evocation', vscode.CompletionItemKind.Property);
				
				skillEvocation.detail = "skill.Evocation";
				skillEvocation.insertText = new vscode.SnippetString('Evocation');
				skillEvocation.documentation = new vscode.MarkdownString("");
				results.push(skillEvocation);				
				
				const skillFeignDeath = new vscode.CompletionItem('FeignDeath', vscode.CompletionItemKind.Property);
				
				skillFeignDeath.detail = "skill.FeignDeath";
				skillFeignDeath.insertText = new vscode.SnippetString('FeignDeath');
				skillFeignDeath.documentation = new vscode.MarkdownString("");
				results.push(skillFeignDeath);				
				
				const skillFishing = new vscode.CompletionItem('Fishing', vscode.CompletionItemKind.Property);
				
				skillFishing.detail = "skill.Fishing";
				skillFishing.insertText = new vscode.SnippetString('Fishing');
				skillFishing.documentation = new vscode.MarkdownString("");
				results.push(skillFishing);				
				
				const skillFletching = new vscode.CompletionItem('Fletching', vscode.CompletionItemKind.Property);
				
				skillFletching.detail = "skill.Fletching";
				skillFletching.insertText = new vscode.SnippetString('Fletching');
				skillFletching.documentation = new vscode.MarkdownString("");
				results.push(skillFletching);				
				
				const skillFlyingKick = new vscode.CompletionItem('FlyingKick', vscode.CompletionItemKind.Property);
				
				skillFlyingKick.detail = "skill.FlyingKick";
				skillFlyingKick.insertText = new vscode.SnippetString('FlyingKick');
				skillFlyingKick.documentation = new vscode.MarkdownString("");
				results.push(skillFlyingKick);				
				
				const skillForage = new vscode.CompletionItem('Forage', vscode.CompletionItemKind.Property);
				
				skillForage.detail = "skill.Forage";
				skillForage.insertText = new vscode.SnippetString('Forage');
				skillForage.documentation = new vscode.MarkdownString("");
				results.push(skillForage);				
				
				const skillFrenzy = new vscode.CompletionItem('Frenzy', vscode.CompletionItemKind.Property);
				
				skillFrenzy.detail = "skill.Frenzy";
				skillFrenzy.insertText = new vscode.SnippetString('Frenzy');
				skillFrenzy.documentation = new vscode.MarkdownString("");
				results.push(skillFrenzy);				
				
				const skillHandtoHand = new vscode.CompletionItem('HandtoHand', vscode.CompletionItemKind.Property);
				
				skillHandtoHand.detail = "skill.HandtoHand";
				skillHandtoHand.insertText = new vscode.SnippetString('HandtoHand');
				skillHandtoHand.documentation = new vscode.MarkdownString("");
				results.push(skillHandtoHand);				
				
				const skillHide = new vscode.CompletionItem('Hide', vscode.CompletionItemKind.Property);
				
				skillHide.detail = "skill.Hide";
				skillHide.insertText = new vscode.SnippetString('Hide');
				skillHide.documentation = new vscode.MarkdownString("");
				results.push(skillHide);				
				
				const skillHIGHESTSKILL = new vscode.CompletionItem('HIGHEST_SKILL', vscode.CompletionItemKind.Property);
				
				skillHIGHESTSKILL.detail = "skill.HIGHEST_SKILL";
				skillHIGHESTSKILL.insertText = new vscode.SnippetString('HIGHEST_SKILL');
				skillHIGHESTSKILL.documentation = new vscode.MarkdownString("");
				results.push(skillHIGHESTSKILL);				
				
				const skillIntimidation = new vscode.CompletionItem('Intimidation', vscode.CompletionItemKind.Property);
				
				skillIntimidation.detail = "skill.Intimidation";
				skillIntimidation.insertText = new vscode.SnippetString('Intimidation');
				skillIntimidation.documentation = new vscode.MarkdownString("");
				results.push(skillIntimidation);				
				
				const skillJewelryMaking = new vscode.CompletionItem('JewelryMaking', vscode.CompletionItemKind.Property);
				
				skillJewelryMaking.detail = "skill.JewelryMaking";
				skillJewelryMaking.insertText = new vscode.SnippetString('JewelryMaking');
				skillJewelryMaking.documentation = new vscode.MarkdownString("");
				results.push(skillJewelryMaking);				
				
				const skillKick = new vscode.CompletionItem('Kick', vscode.CompletionItemKind.Property);
				
				skillKick.detail = "skill.Kick";
				skillKick.insertText = new vscode.SnippetString('Kick');
				skillKick.documentation = new vscode.MarkdownString("");
				results.push(skillKick);				
				
				const skillMakePoison = new vscode.CompletionItem('MakePoison', vscode.CompletionItemKind.Property);
				
				skillMakePoison.detail = "skill.MakePoison";
				skillMakePoison.insertText = new vscode.SnippetString('MakePoison');
				skillMakePoison.documentation = new vscode.MarkdownString("");
				results.push(skillMakePoison);				
				
				const skillMeditate = new vscode.CompletionItem('Meditate', vscode.CompletionItemKind.Property);
				
				skillMeditate.detail = "skill.Meditate";
				skillMeditate.insertText = new vscode.SnippetString('Meditate');
				skillMeditate.documentation = new vscode.MarkdownString("");
				results.push(skillMeditate);				
				
				const skillMend = new vscode.CompletionItem('Mend', vscode.CompletionItemKind.Property);
				
				skillMend.detail = "skill.Mend";
				skillMend.insertText = new vscode.SnippetString('Mend');
				skillMend.documentation = new vscode.MarkdownString("");
				results.push(skillMend);				
				
				const skillOffense = new vscode.CompletionItem('Offense', vscode.CompletionItemKind.Property);
				
				skillOffense.detail = "skill.Offense";
				skillOffense.insertText = new vscode.SnippetString('Offense');
				skillOffense.documentation = new vscode.MarkdownString("");
				results.push(skillOffense);				
				
				const skillParry = new vscode.CompletionItem('Parry', vscode.CompletionItemKind.Property);
				
				skillParry.detail = "skill.Parry";
				skillParry.insertText = new vscode.SnippetString('Parry');
				skillParry.documentation = new vscode.MarkdownString("");
				results.push(skillParry);				
				
				const skillPercussionInstruments = new vscode.CompletionItem('PercussionInstruments', vscode.CompletionItemKind.Property);
				
				skillPercussionInstruments.detail = "skill.PercussionInstruments";
				skillPercussionInstruments.insertText = new vscode.SnippetString('PercussionInstruments');
				skillPercussionInstruments.documentation = new vscode.MarkdownString("");
				results.push(skillPercussionInstruments);				
				
				const skillPickLock = new vscode.CompletionItem('PickLock', vscode.CompletionItemKind.Property);
				
				skillPickLock.detail = "skill.PickLock";
				skillPickLock.insertText = new vscode.SnippetString('PickLock');
				skillPickLock.documentation = new vscode.MarkdownString("");
				results.push(skillPickLock);				
				
				const skillPickPockets = new vscode.CompletionItem('PickPockets', vscode.CompletionItemKind.Property);
				
				skillPickPockets.detail = "skill.PickPockets";
				skillPickPockets.insertText = new vscode.SnippetString('PickPockets');
				skillPickPockets.documentation = new vscode.MarkdownString("");
				results.push(skillPickPockets);				
				
				const skillPottery = new vscode.CompletionItem('Pottery', vscode.CompletionItemKind.Property);
				
				skillPottery.detail = "skill.Pottery";
				skillPottery.insertText = new vscode.SnippetString('Pottery');
				skillPottery.documentation = new vscode.MarkdownString("");
				results.push(skillPottery);				
				
				const skillRemoveTraps = new vscode.CompletionItem('RemoveTraps', vscode.CompletionItemKind.Property);
				
				skillRemoveTraps.detail = "skill.RemoveTraps";
				skillRemoveTraps.insertText = new vscode.SnippetString('RemoveTraps');
				skillRemoveTraps.documentation = new vscode.MarkdownString("");
				results.push(skillRemoveTraps);				
				
				const skillResearch = new vscode.CompletionItem('Research', vscode.CompletionItemKind.Property);
				
				skillResearch.detail = "skill.Research";
				skillResearch.insertText = new vscode.SnippetString('Research');
				skillResearch.documentation = new vscode.MarkdownString("");
				results.push(skillResearch);				
				
				const skillRiposte = new vscode.CompletionItem('Riposte', vscode.CompletionItemKind.Property);
				
				skillRiposte.detail = "skill.Riposte";
				skillRiposte.insertText = new vscode.SnippetString('Riposte');
				skillRiposte.documentation = new vscode.MarkdownString("");
				results.push(skillRiposte);				
				
				const skillRoundKick = new vscode.CompletionItem('RoundKick', vscode.CompletionItemKind.Property);
				
				skillRoundKick.detail = "skill.RoundKick";
				skillRoundKick.insertText = new vscode.SnippetString('RoundKick');
				skillRoundKick.documentation = new vscode.MarkdownString("");
				results.push(skillRoundKick);				
				
				const skillSafeFall = new vscode.CompletionItem('SafeFall', vscode.CompletionItemKind.Property);
				
				skillSafeFall.detail = "skill.SafeFall";
				skillSafeFall.insertText = new vscode.SnippetString('SafeFall');
				skillSafeFall.documentation = new vscode.MarkdownString("");
				results.push(skillSafeFall);				
				
				const skillSenseHeading = new vscode.CompletionItem('SenseHeading', vscode.CompletionItemKind.Property);
				
				skillSenseHeading.detail = "skill.SenseHeading";
				skillSenseHeading.insertText = new vscode.SnippetString('SenseHeading');
				skillSenseHeading.documentation = new vscode.MarkdownString("");
				results.push(skillSenseHeading);				
				
				const skillSenseTraps = new vscode.CompletionItem('SenseTraps', vscode.CompletionItemKind.Property);
				
				skillSenseTraps.detail = "skill.SenseTraps";
				skillSenseTraps.insertText = new vscode.SnippetString('SenseTraps');
				skillSenseTraps.documentation = new vscode.MarkdownString("");
				results.push(skillSenseTraps);				
				
				const skillSinging = new vscode.CompletionItem('Singing', vscode.CompletionItemKind.Property);
				
				skillSinging.detail = "skill.Singing";
				skillSinging.insertText = new vscode.SnippetString('Singing');
				skillSinging.documentation = new vscode.MarkdownString("");
				results.push(skillSinging);				
				
				const skillSneak = new vscode.CompletionItem('Sneak', vscode.CompletionItemKind.Property);
				
				skillSneak.detail = "skill.Sneak";
				skillSneak.insertText = new vscode.SnippetString('Sneak');
				skillSneak.documentation = new vscode.MarkdownString("");
				results.push(skillSneak);				
				
				const skillSpecializeAbjure = new vscode.CompletionItem('SpecializeAbjure', vscode.CompletionItemKind.Property);
				
				skillSpecializeAbjure.detail = "skill.SpecializeAbjure";
				skillSpecializeAbjure.insertText = new vscode.SnippetString('SpecializeAbjure');
				skillSpecializeAbjure.documentation = new vscode.MarkdownString("");
				results.push(skillSpecializeAbjure);				
				
				const skillSpecializeAlteration = new vscode.CompletionItem('SpecializeAlteration', vscode.CompletionItemKind.Property);
				
				skillSpecializeAlteration.detail = "skill.SpecializeAlteration";
				skillSpecializeAlteration.insertText = new vscode.SnippetString('SpecializeAlteration');
				skillSpecializeAlteration.documentation = new vscode.MarkdownString("");
				results.push(skillSpecializeAlteration);				
				
				const skillSpecializeConjuration = new vscode.CompletionItem('SpecializeConjuration', vscode.CompletionItemKind.Property);
				
				skillSpecializeConjuration.detail = "skill.SpecializeConjuration";
				skillSpecializeConjuration.insertText = new vscode.SnippetString('SpecializeConjuration');
				skillSpecializeConjuration.documentation = new vscode.MarkdownString("");
				results.push(skillSpecializeConjuration);				
				
				const skillSpecializeDivination = new vscode.CompletionItem('SpecializeDivination', vscode.CompletionItemKind.Property);
				
				skillSpecializeDivination.detail = "skill.SpecializeDivination";
				skillSpecializeDivination.insertText = new vscode.SnippetString('SpecializeDivination');
				skillSpecializeDivination.documentation = new vscode.MarkdownString("");
				results.push(skillSpecializeDivination);				
				
				const skillSpecializeEvocation = new vscode.CompletionItem('SpecializeEvocation', vscode.CompletionItemKind.Property);
				
				skillSpecializeEvocation.detail = "skill.SpecializeEvocation";
				skillSpecializeEvocation.insertText = new vscode.SnippetString('SpecializeEvocation');
				skillSpecializeEvocation.documentation = new vscode.MarkdownString("");
				results.push(skillSpecializeEvocation);				
				
				const skillStringedInstruments = new vscode.CompletionItem('StringedInstruments', vscode.CompletionItemKind.Property);
				
				skillStringedInstruments.detail = "skill.StringedInstruments";
				skillStringedInstruments.insertText = new vscode.SnippetString('StringedInstruments');
				skillStringedInstruments.documentation = new vscode.MarkdownString("");
				results.push(skillStringedInstruments);				
				
				const skillSwimming = new vscode.CompletionItem('Swimming', vscode.CompletionItemKind.Property);
				
				skillSwimming.detail = "skill.Swimming";
				skillSwimming.insertText = new vscode.SnippetString('Swimming');
				skillSwimming.documentation = new vscode.MarkdownString("");
				results.push(skillSwimming);				
				
				const skillTailoring = new vscode.CompletionItem('Tailoring', vscode.CompletionItemKind.Property);
				
				skillTailoring.detail = "skill.Tailoring";
				skillTailoring.insertText = new vscode.SnippetString('Tailoring');
				skillTailoring.documentation = new vscode.MarkdownString("");
				results.push(skillTailoring);				
				
				const skillTailRake = new vscode.CompletionItem('TailRake', vscode.CompletionItemKind.Property);
				
				skillTailRake.detail = "skill.TailRake";
				skillTailRake.insertText = new vscode.SnippetString('TailRake');
				skillTailRake.documentation = new vscode.MarkdownString("");
				results.push(skillTailRake);				
				
				const skillTaunt = new vscode.CompletionItem('Taunt', vscode.CompletionItemKind.Property);
				
				skillTaunt.detail = "skill.Taunt";
				skillTaunt.insertText = new vscode.SnippetString('Taunt');
				skillTaunt.documentation = new vscode.MarkdownString("");
				results.push(skillTaunt);				
				
				const skillThrowing = new vscode.CompletionItem('Throwing', vscode.CompletionItemKind.Property);
				
				skillThrowing.detail = "skill.Throwing";
				skillThrowing.insertText = new vscode.SnippetString('Throwing');
				skillThrowing.documentation = new vscode.MarkdownString("");
				results.push(skillThrowing);				
				
				const skillTigerClaw = new vscode.CompletionItem('TigerClaw', vscode.CompletionItemKind.Property);
				
				skillTigerClaw.detail = "skill.TigerClaw";
				skillTigerClaw.insertText = new vscode.SnippetString('TigerClaw');
				skillTigerClaw.documentation = new vscode.MarkdownString("");
				results.push(skillTigerClaw);				
				
				const skillTinkering = new vscode.CompletionItem('Tinkering', vscode.CompletionItemKind.Property);
				
				skillTinkering.detail = "skill.Tinkering";
				skillTinkering.insertText = new vscode.SnippetString('Tinkering');
				skillTinkering.documentation = new vscode.MarkdownString("");
				results.push(skillTinkering);				
				
				const skillTracking = new vscode.CompletionItem('Tracking', vscode.CompletionItemKind.Property);
				
				skillTracking.detail = "skill.Tracking";
				skillTracking.insertText = new vscode.SnippetString('Tracking');
				skillTracking.documentation = new vscode.MarkdownString("");
				results.push(skillTracking);				
				
				const skillTripleAttack = new vscode.CompletionItem('TripleAttack', vscode.CompletionItemKind.Property);
				
				skillTripleAttack.detail = "skill.TripleAttack";
				skillTripleAttack.insertText = new vscode.SnippetString('TripleAttack');
				skillTripleAttack.documentation = new vscode.MarkdownString("");
				results.push(skillTripleAttack);				
				
				const skillWindInstruments = new vscode.CompletionItem('WindInstruments', vscode.CompletionItemKind.Property);
				
				skillWindInstruments.detail = "skill.WindInstruments";
				skillWindInstruments.insertText = new vscode.SnippetString('WindInstruments');
				skillWindInstruments.documentation = new vscode.MarkdownString("");
				results.push(skillWindInstruments);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('slot.')) {
					return undefined;
				}
				
				
				const slotAmmo = new vscode.CompletionItem('Ammo', vscode.CompletionItemKind.Property);
				
				slotAmmo.detail = "slot.Ammo";
				slotAmmo.insertText = new vscode.SnippetString('Ammo');
				slotAmmo.documentation = new vscode.MarkdownString("");
				results.push(slotAmmo);				
				
				const slotArms = new vscode.CompletionItem('Arms', vscode.CompletionItemKind.Property);
				
				slotArms.detail = "slot.Arms";
				slotArms.insertText = new vscode.SnippetString('Arms');
				slotArms.documentation = new vscode.MarkdownString("");
				results.push(slotArms);				
				
				const slotAugment = new vscode.CompletionItem('Augment', vscode.CompletionItemKind.Property);
				
				slotAugment.detail = "slot.Augment";
				slotAugment.insertText = new vscode.SnippetString('Augment');
				slotAugment.documentation = new vscode.MarkdownString("");
				results.push(slotAugment);				
				
				const slotAugSocketBegin = new vscode.CompletionItem('AugSocketBegin', vscode.CompletionItemKind.Property);
				
				slotAugSocketBegin.detail = "slot.AugSocketBegin";
				slotAugSocketBegin.insertText = new vscode.SnippetString('AugSocketBegin');
				slotAugSocketBegin.documentation = new vscode.MarkdownString("");
				results.push(slotAugSocketBegin);				
				
				const slotAugSocketEnd = new vscode.CompletionItem('AugSocketEnd', vscode.CompletionItemKind.Property);
				
				slotAugSocketEnd.detail = "slot.AugSocketEnd";
				slotAugSocketEnd.insertText = new vscode.SnippetString('AugSocketEnd');
				slotAugSocketEnd.documentation = new vscode.MarkdownString("");
				results.push(slotAugSocketEnd);				
				
				const slotBagSlotBegin = new vscode.CompletionItem('BagSlotBegin', vscode.CompletionItemKind.Property);
				
				slotBagSlotBegin.detail = "slot.BagSlotBegin";
				slotBagSlotBegin.insertText = new vscode.SnippetString('BagSlotBegin');
				slotBagSlotBegin.documentation = new vscode.MarkdownString("");
				results.push(slotBagSlotBegin);				
				
				const slotBankBagsBegin = new vscode.CompletionItem('BankBagsBegin', vscode.CompletionItemKind.Property);
				
				slotBankBagsBegin.detail = "slot.BankBagsBegin";
				slotBankBagsBegin.insertText = new vscode.SnippetString('BankBagsBegin');
				slotBankBagsBegin.documentation = new vscode.MarkdownString("");
				results.push(slotBankBagsBegin);				
				
				const slotBankBagsEnd = new vscode.CompletionItem('BankBagsEnd', vscode.CompletionItemKind.Property);
				
				slotBankBagsEnd.detail = "slot.BankBagsEnd";
				slotBankBagsEnd.insertText = new vscode.SnippetString('BankBagsEnd');
				slotBankBagsEnd.documentation = new vscode.MarkdownString("");
				results.push(slotBankBagsEnd);				
				
				const slotBankBegin = new vscode.CompletionItem('BankBegin', vscode.CompletionItemKind.Property);
				
				slotBankBegin.detail = "slot.BankBegin";
				slotBankBegin.insertText = new vscode.SnippetString('BankBegin');
				slotBankBegin.documentation = new vscode.MarkdownString("");
				results.push(slotBankBegin);				
				
				const slotBankEnd = new vscode.CompletionItem('BankEnd', vscode.CompletionItemKind.Property);
				
				slotBankEnd.detail = "slot.BankEnd";
				slotBankEnd.insertText = new vscode.SnippetString('BankEnd');
				slotBankEnd.documentation = new vscode.MarkdownString("");
				results.push(slotBankEnd);				
				
				const slotBracer1 = new vscode.CompletionItem('Bracer1', vscode.CompletionItemKind.Property);
				
				slotBracer1.detail = "slot.Bracer1";
				slotBracer1.insertText = new vscode.SnippetString('Bracer1');
				slotBracer1.documentation = new vscode.MarkdownString("");
				results.push(slotBracer1);				
				
				const slotBracer2 = new vscode.CompletionItem('Bracer2', vscode.CompletionItemKind.Property);
				
				slotBracer2.detail = "slot.Bracer2";
				slotBracer2.insertText = new vscode.SnippetString('Bracer2');
				slotBracer2.documentation = new vscode.MarkdownString("");
				results.push(slotBracer2);				
				
				const slotCharm = new vscode.CompletionItem('Charm', vscode.CompletionItemKind.Property);
				
				slotCharm.detail = "slot.Charm";
				slotCharm.insertText = new vscode.SnippetString('Charm');
				slotCharm.documentation = new vscode.MarkdownString("");
				results.push(slotCharm);				
				
				const slotChest = new vscode.CompletionItem('Chest', vscode.CompletionItemKind.Property);
				
				slotChest.detail = "slot.Chest";
				slotChest.insertText = new vscode.SnippetString('Chest');
				slotChest.documentation = new vscode.MarkdownString("");
				results.push(slotChest);				
				
				const slotCursor = new vscode.CompletionItem('Cursor', vscode.CompletionItemKind.Property);
				
				slotCursor.detail = "slot.Cursor";
				slotCursor.insertText = new vscode.SnippetString('Cursor');
				slotCursor.documentation = new vscode.MarkdownString("");
				results.push(slotCursor);				
				
				const slotCursorBagBegin = new vscode.CompletionItem('CursorBagBegin', vscode.CompletionItemKind.Property);
				
				slotCursorBagBegin.detail = "slot.CursorBagBegin";
				slotCursorBagBegin.insertText = new vscode.SnippetString('CursorBagBegin');
				slotCursorBagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotCursorBagBegin);				
				
				const slotCursorBagEnd = new vscode.CompletionItem('CursorBagEnd', vscode.CompletionItemKind.Property);
				
				slotCursorBagEnd.detail = "slot.CursorBagEnd";
				slotCursorBagEnd.insertText = new vscode.SnippetString('CursorBagEnd');
				slotCursorBagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotCursorBagEnd);				
				
				const slotCursorEnd = new vscode.CompletionItem('CursorEnd', vscode.CompletionItemKind.Property);
				
				slotCursorEnd.detail = "slot.CursorEnd";
				slotCursorEnd.insertText = new vscode.SnippetString('CursorEnd');
				slotCursorEnd.documentation = new vscode.MarkdownString("");
				results.push(slotCursorEnd);				
				
				const slotEar1 = new vscode.CompletionItem('Ear1', vscode.CompletionItemKind.Property);
				
				slotEar1.detail = "slot.Ear1";
				slotEar1.insertText = new vscode.SnippetString('Ear1');
				slotEar1.documentation = new vscode.MarkdownString("");
				results.push(slotEar1);				
				
				const slotEar2 = new vscode.CompletionItem('Ear2', vscode.CompletionItemKind.Property);
				
				slotEar2.detail = "slot.Ear2";
				slotEar2.insertText = new vscode.SnippetString('Ear2');
				slotEar2.documentation = new vscode.MarkdownString("");
				results.push(slotEar2);				
				
				const slotEquipmentBegin = new vscode.CompletionItem('EquipmentBegin', vscode.CompletionItemKind.Property);
				
				slotEquipmentBegin.detail = "slot.EquipmentBegin";
				slotEquipmentBegin.insertText = new vscode.SnippetString('EquipmentBegin');
				slotEquipmentBegin.documentation = new vscode.MarkdownString("");
				results.push(slotEquipmentBegin);				
				
				const slotEquipmentEnd = new vscode.CompletionItem('EquipmentEnd', vscode.CompletionItemKind.Property);
				
				slotEquipmentEnd.detail = "slot.EquipmentEnd";
				slotEquipmentEnd.insertText = new vscode.SnippetString('EquipmentEnd');
				slotEquipmentEnd.documentation = new vscode.MarkdownString("");
				results.push(slotEquipmentEnd);				
				
				const slotFace = new vscode.CompletionItem('Face', vscode.CompletionItemKind.Property);
				
				slotFace.detail = "slot.Face";
				slotFace.insertText = new vscode.SnippetString('Face');
				slotFace.documentation = new vscode.MarkdownString("");
				results.push(slotFace);				
				
				const slotFeet = new vscode.CompletionItem('Feet', vscode.CompletionItemKind.Property);
				
				slotFeet.detail = "slot.Feet";
				slotFeet.insertText = new vscode.SnippetString('Feet');
				slotFeet.documentation = new vscode.MarkdownString("");
				results.push(slotFeet);				
				
				const slotFinger1 = new vscode.CompletionItem('Finger1', vscode.CompletionItemKind.Property);
				
				slotFinger1.detail = "slot.Finger1";
				slotFinger1.insertText = new vscode.SnippetString('Finger1');
				slotFinger1.documentation = new vscode.MarkdownString("");
				results.push(slotFinger1);				
				
				const slotFinger2 = new vscode.CompletionItem('Finger2', vscode.CompletionItemKind.Property);
				
				slotFinger2.detail = "slot.Finger2";
				slotFinger2.insertText = new vscode.SnippetString('Finger2');
				slotFinger2.documentation = new vscode.MarkdownString("");
				results.push(slotFinger2);				
				
				const slotGeneral9BagBegin = new vscode.CompletionItem('General9BagBegin', vscode.CompletionItemKind.Property);
				
				slotGeneral9BagBegin.detail = "slot.General9BagBegin";
				slotGeneral9BagBegin.insertText = new vscode.SnippetString('General9BagBegin');
				slotGeneral9BagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral9BagBegin);				
				
				const slotGeneral1 = new vscode.CompletionItem('General1', vscode.CompletionItemKind.Property);
				
				slotGeneral1.detail = "slot.General1";
				slotGeneral1.insertText = new vscode.SnippetString('General1');
				slotGeneral1.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral1);				
				
				const slotGeneral10 = new vscode.CompletionItem('General10', vscode.CompletionItemKind.Property);
				
				slotGeneral10.detail = "slot.General10";
				slotGeneral10.insertText = new vscode.SnippetString('General10');
				slotGeneral10.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral10);				
				
				const slotGeneral10BagBegin = new vscode.CompletionItem('General10BagBegin', vscode.CompletionItemKind.Property);
				
				slotGeneral10BagBegin.detail = "slot.General10BagBegin";
				slotGeneral10BagBegin.insertText = new vscode.SnippetString('General10BagBegin');
				slotGeneral10BagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral10BagBegin);				
				
				const slotGeneral10BagEnd = new vscode.CompletionItem('General10BagEnd', vscode.CompletionItemKind.Property);
				
				slotGeneral10BagEnd.detail = "slot.General10BagEnd";
				slotGeneral10BagEnd.insertText = new vscode.SnippetString('General10BagEnd');
				slotGeneral10BagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral10BagEnd);				
				
				const slotGeneral1BagBegin = new vscode.CompletionItem('General1BagBegin', vscode.CompletionItemKind.Property);
				
				slotGeneral1BagBegin.detail = "slot.General1BagBegin";
				slotGeneral1BagBegin.insertText = new vscode.SnippetString('General1BagBegin');
				slotGeneral1BagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral1BagBegin);				
				
				const slotGeneral1BagEnd = new vscode.CompletionItem('General1BagEnd', vscode.CompletionItemKind.Property);
				
				slotGeneral1BagEnd.detail = "slot.General1BagEnd";
				slotGeneral1BagEnd.insertText = new vscode.SnippetString('General1BagEnd');
				slotGeneral1BagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral1BagEnd);				
				
				const slotGeneral2BagBegin = new vscode.CompletionItem('General2BagBegin', vscode.CompletionItemKind.Property);
				
				slotGeneral2BagBegin.detail = "slot.General2BagBegin";
				slotGeneral2BagBegin.insertText = new vscode.SnippetString('General2BagBegin');
				slotGeneral2BagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral2BagBegin);				
				
				const slotGeneral2BagEnd = new vscode.CompletionItem('General2BagEnd', vscode.CompletionItemKind.Property);
				
				slotGeneral2BagEnd.detail = "slot.General2BagEnd";
				slotGeneral2BagEnd.insertText = new vscode.SnippetString('General2BagEnd');
				slotGeneral2BagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral2BagEnd);				
				
				const slotGeneral3 = new vscode.CompletionItem('General3', vscode.CompletionItemKind.Property);
				
				slotGeneral3.detail = "slot.General3";
				slotGeneral3.insertText = new vscode.SnippetString('General3');
				slotGeneral3.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral3);				
				
				const slotGeneral3BagBegin = new vscode.CompletionItem('General3BagBegin', vscode.CompletionItemKind.Property);
				
				slotGeneral3BagBegin.detail = "slot.General3BagBegin";
				slotGeneral3BagBegin.insertText = new vscode.SnippetString('General3BagBegin');
				slotGeneral3BagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral3BagBegin);				
				
				const slotGeneral3BagEnd = new vscode.CompletionItem('General3BagEnd', vscode.CompletionItemKind.Property);
				
				slotGeneral3BagEnd.detail = "slot.General3BagEnd";
				slotGeneral3BagEnd.insertText = new vscode.SnippetString('General3BagEnd');
				slotGeneral3BagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral3BagEnd);				
				
				const slotGeneral4 = new vscode.CompletionItem('General4', vscode.CompletionItemKind.Property);
				
				slotGeneral4.detail = "slot.General4";
				slotGeneral4.insertText = new vscode.SnippetString('General4');
				slotGeneral4.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral4);				
				
				const slotGeneral4BagBegin = new vscode.CompletionItem('General4BagBegin', vscode.CompletionItemKind.Property);
				
				slotGeneral4BagBegin.detail = "slot.General4BagBegin";
				slotGeneral4BagBegin.insertText = new vscode.SnippetString('General4BagBegin');
				slotGeneral4BagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral4BagBegin);				
				
				const slotGeneral4BagEnd = new vscode.CompletionItem('General4BagEnd', vscode.CompletionItemKind.Property);
				
				slotGeneral4BagEnd.detail = "slot.General4BagEnd";
				slotGeneral4BagEnd.insertText = new vscode.SnippetString('General4BagEnd');
				slotGeneral4BagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral4BagEnd);				
				
				const slotGeneral5 = new vscode.CompletionItem('General5', vscode.CompletionItemKind.Property);
				
				slotGeneral5.detail = "slot.General5";
				slotGeneral5.insertText = new vscode.SnippetString('General5');
				slotGeneral5.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral5);				
				
				const slotGeneral5BagBegin = new vscode.CompletionItem('General5BagBegin', vscode.CompletionItemKind.Property);
				
				slotGeneral5BagBegin.detail = "slot.General5BagBegin";
				slotGeneral5BagBegin.insertText = new vscode.SnippetString('General5BagBegin');
				slotGeneral5BagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral5BagBegin);				
				
				const slotGeneral5BagEnd = new vscode.CompletionItem('General5BagEnd', vscode.CompletionItemKind.Property);
				
				slotGeneral5BagEnd.detail = "slot.General5BagEnd";
				slotGeneral5BagEnd.insertText = new vscode.SnippetString('General5BagEnd');
				slotGeneral5BagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral5BagEnd);				
				
				const slotGeneral6 = new vscode.CompletionItem('General6', vscode.CompletionItemKind.Property);
				
				slotGeneral6.detail = "slot.General6";
				slotGeneral6.insertText = new vscode.SnippetString('General6');
				slotGeneral6.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral6);				
				
				const slotGeneral6BagBegin = new vscode.CompletionItem('General6BagBegin', vscode.CompletionItemKind.Property);
				
				slotGeneral6BagBegin.detail = "slot.General6BagBegin";
				slotGeneral6BagBegin.insertText = new vscode.SnippetString('General6BagBegin');
				slotGeneral6BagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral6BagBegin);				
				
				const slotGeneral6BagEnd = new vscode.CompletionItem('General6BagEnd', vscode.CompletionItemKind.Property);
				
				slotGeneral6BagEnd.detail = "slot.General6BagEnd";
				slotGeneral6BagEnd.insertText = new vscode.SnippetString('General6BagEnd');
				slotGeneral6BagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral6BagEnd);				
				
				const slotGeneral7 = new vscode.CompletionItem('General7', vscode.CompletionItemKind.Property);
				
				slotGeneral7.detail = "slot.General7";
				slotGeneral7.insertText = new vscode.SnippetString('General7');
				slotGeneral7.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral7);				
				
				const slotGeneral7BagBegin = new vscode.CompletionItem('General7BagBegin', vscode.CompletionItemKind.Property);
				
				slotGeneral7BagBegin.detail = "slot.General7BagBegin";
				slotGeneral7BagBegin.insertText = new vscode.SnippetString('General7BagBegin');
				slotGeneral7BagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral7BagBegin);				
				
				const slotGeneral7BagEnd = new vscode.CompletionItem('General7BagEnd', vscode.CompletionItemKind.Property);
				
				slotGeneral7BagEnd.detail = "slot.General7BagEnd";
				slotGeneral7BagEnd.insertText = new vscode.SnippetString('General7BagEnd');
				slotGeneral7BagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral7BagEnd);				
				
				const slotGeneral8 = new vscode.CompletionItem('General8', vscode.CompletionItemKind.Property);
				
				slotGeneral8.detail = "slot.General8";
				slotGeneral8.insertText = new vscode.SnippetString('General8');
				slotGeneral8.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral8);				
				
				const slotGeneral8BagBegin = new vscode.CompletionItem('General8BagBegin', vscode.CompletionItemKind.Property);
				
				slotGeneral8BagBegin.detail = "slot.General8BagBegin";
				slotGeneral8BagBegin.insertText = new vscode.SnippetString('General8BagBegin');
				slotGeneral8BagBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral8BagBegin);				
				
				const slotGeneral8BagEnd = new vscode.CompletionItem('General8BagEnd', vscode.CompletionItemKind.Property);
				
				slotGeneral8BagEnd.detail = "slot.General8BagEnd";
				slotGeneral8BagEnd.insertText = new vscode.SnippetString('General8BagEnd');
				slotGeneral8BagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral8BagEnd);				
				
				const slotGeneral9 = new vscode.CompletionItem('General9', vscode.CompletionItemKind.Property);
				
				slotGeneral9.detail = "slot.General9";
				slotGeneral9.insertText = new vscode.SnippetString('General9');
				slotGeneral9.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral9);				
				
				const slotGeneral9BagEnd = new vscode.CompletionItem('General9BagEnd', vscode.CompletionItemKind.Property);
				
				slotGeneral9BagEnd.detail = "slot.General9BagEnd";
				slotGeneral9BagEnd.insertText = new vscode.SnippetString('General9BagEnd');
				slotGeneral9BagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneral9BagEnd);				
				
				const slotGeneralBagsBegin = new vscode.CompletionItem('GeneralBagsBegin', vscode.CompletionItemKind.Property);
				
				slotGeneralBagsBegin.detail = "slot.GeneralBagsBegin";
				slotGeneralBagsBegin.insertText = new vscode.SnippetString('GeneralBagsBegin');
				slotGeneralBagsBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneralBagsBegin);				
				
				const slotGeneralBagsEnd = new vscode.CompletionItem('GeneralBagsEnd', vscode.CompletionItemKind.Property);
				
				slotGeneralBagsEnd.detail = "slot.GeneralBagsEnd";
				slotGeneralBagsEnd.insertText = new vscode.SnippetString('GeneralBagsEnd');
				slotGeneralBagsEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneralBagsEnd);				
				
				const slotGeneralBegin = new vscode.CompletionItem('GeneralBegin', vscode.CompletionItemKind.Property);
				
				slotGeneralBegin.detail = "slot.GeneralBegin";
				slotGeneralBegin.insertText = new vscode.SnippetString('GeneralBegin');
				slotGeneralBegin.documentation = new vscode.MarkdownString("");
				results.push(slotGeneralBegin);				
				
				const slotGeneralEnd = new vscode.CompletionItem('GeneralEnd', vscode.CompletionItemKind.Property);
				
				slotGeneralEnd.detail = "slot.GeneralEnd";
				slotGeneralEnd.insertText = new vscode.SnippetString('GeneralEnd');
				slotGeneralEnd.documentation = new vscode.MarkdownString("");
				results.push(slotGeneralEnd);				
				
				const slotHands = new vscode.CompletionItem('Hands', vscode.CompletionItemKind.Property);
				
				slotHands.detail = "slot.Hands";
				slotHands.insertText = new vscode.SnippetString('Hands');
				slotHands.documentation = new vscode.MarkdownString("");
				results.push(slotHands);				
				
				const slotHead = new vscode.CompletionItem('Head', vscode.CompletionItemKind.Property);
				
				slotHead.detail = "slot.Head";
				slotHead.insertText = new vscode.SnippetString('Head');
				slotHead.documentation = new vscode.MarkdownString("");
				results.push(slotHead);				
				
				const slotInvalid = new vscode.CompletionItem('Invalid', vscode.CompletionItemKind.Property);
				
				slotInvalid.detail = "slot.Invalid";
				slotInvalid.insertText = new vscode.SnippetString('Invalid');
				slotInvalid.documentation = new vscode.MarkdownString("");
				results.push(slotInvalid);				
				
				const slotLegs = new vscode.CompletionItem('Legs', vscode.CompletionItemKind.Property);
				
				slotLegs.detail = "slot.Legs";
				slotLegs.insertText = new vscode.SnippetString('Legs');
				slotLegs.documentation = new vscode.MarkdownString("");
				results.push(slotLegs);				
				
				const slotNeck = new vscode.CompletionItem('Neck', vscode.CompletionItemKind.Property);
				
				slotNeck.detail = "slot.Neck";
				slotNeck.insertText = new vscode.SnippetString('Neck');
				slotNeck.documentation = new vscode.MarkdownString("");
				results.push(slotNeck);				
				
				const slotPersonalBegin = new vscode.CompletionItem('PersonalBegin', vscode.CompletionItemKind.Property);
				
				slotPersonalBegin.detail = "slot.PersonalBegin";
				slotPersonalBegin.insertText = new vscode.SnippetString('PersonalBegin');
				slotPersonalBegin.documentation = new vscode.MarkdownString("");
				results.push(slotPersonalBegin);				
				
				const slotPersonalEnd = new vscode.CompletionItem('PersonalEnd', vscode.CompletionItemKind.Property);
				
				slotPersonalEnd.detail = "slot.PersonalEnd";
				slotPersonalEnd.insertText = new vscode.SnippetString('PersonalEnd');
				slotPersonalEnd.documentation = new vscode.MarkdownString("");
				results.push(slotPersonalEnd);				
				
				const slotPossessionsBagEnd = new vscode.CompletionItem('PossessionsBagEnd', vscode.CompletionItemKind.Property);
				
				slotPossessionsBagEnd.detail = "slot.PossessionsBagEnd";
				slotPossessionsBagEnd.insertText = new vscode.SnippetString('PossessionsBagEnd');
				slotPossessionsBagEnd.documentation = new vscode.MarkdownString("");
				results.push(slotPossessionsBagEnd);				
				
				const slotPossessionsBagsBegin = new vscode.CompletionItem('PossessionsBagsBegin', vscode.CompletionItemKind.Property);
				
				slotPossessionsBagsBegin.detail = "slot.PossessionsBagsBegin";
				slotPossessionsBagsBegin.insertText = new vscode.SnippetString('PossessionsBagsBegin');
				slotPossessionsBagsBegin.documentation = new vscode.MarkdownString("");
				results.push(slotPossessionsBagsBegin);				
				
				const slotPossessionsBegin = new vscode.CompletionItem('PossessionsBegin', vscode.CompletionItemKind.Property);
				
				slotPossessionsBegin.detail = "slot.PossessionsBegin";
				slotPossessionsBegin.insertText = new vscode.SnippetString('PossessionsBegin');
				slotPossessionsBegin.documentation = new vscode.MarkdownString("");
				results.push(slotPossessionsBegin);				
				
				const slotPossessionsEnd = new vscode.CompletionItem('PossessionsEnd', vscode.CompletionItemKind.Property);
				
				slotPossessionsEnd.detail = "slot.PossessionsEnd";
				slotPossessionsEnd.insertText = new vscode.SnippetString('PossessionsEnd');
				slotPossessionsEnd.documentation = new vscode.MarkdownString("");
				results.push(slotPossessionsEnd);				
				
				const slotPowersource = new vscode.CompletionItem('Powersource', vscode.CompletionItemKind.Property);
				
				slotPowersource.detail = "slot.Powersource";
				slotPowersource.insertText = new vscode.SnippetString('Powersource');
				slotPowersource.documentation = new vscode.MarkdownString("");
				results.push(slotPowersource);				
				
				const slotPrimary = new vscode.CompletionItem('Primary', vscode.CompletionItemKind.Property);
				
				slotPrimary.detail = "slot.Primary";
				slotPrimary.insertText = new vscode.SnippetString('Primary');
				slotPrimary.documentation = new vscode.MarkdownString("");
				results.push(slotPrimary);				
				
				const slotRange = new vscode.CompletionItem('Range', vscode.CompletionItemKind.Property);
				
				slotRange.detail = "slot.Range";
				slotRange.insertText = new vscode.SnippetString('Range');
				slotRange.documentation = new vscode.MarkdownString("");
				results.push(slotRange);				
				
				const slotRing1 = new vscode.CompletionItem('Ring1', vscode.CompletionItemKind.Property);
				
				slotRing1.detail = "slot.Ring1";
				slotRing1.insertText = new vscode.SnippetString('Ring1');
				slotRing1.documentation = new vscode.MarkdownString("");
				results.push(slotRing1);				
				
				const slotRing2 = new vscode.CompletionItem('Ring2', vscode.CompletionItemKind.Property);
				
				slotRing2.detail = "slot.Ring2";
				slotRing2.insertText = new vscode.SnippetString('Ring2');
				slotRing2.documentation = new vscode.MarkdownString("");
				results.push(slotRing2);				
				
				const slotSecondary = new vscode.CompletionItem('Secondary', vscode.CompletionItemKind.Property);
				
				slotSecondary.detail = "slot.Secondary";
				slotSecondary.insertText = new vscode.SnippetString('Secondary');
				slotSecondary.documentation = new vscode.MarkdownString("");
				results.push(slotSecondary);				
				
				const slotSharedBankBagsBegin = new vscode.CompletionItem('SharedBankBagsBegin', vscode.CompletionItemKind.Property);
				
				slotSharedBankBagsBegin.detail = "slot.SharedBankBagsBegin";
				slotSharedBankBagsBegin.insertText = new vscode.SnippetString('SharedBankBagsBegin');
				slotSharedBankBagsBegin.documentation = new vscode.MarkdownString("");
				results.push(slotSharedBankBagsBegin);				
				
				const slotSharedBankBagsEnd = new vscode.CompletionItem('SharedBankBagsEnd', vscode.CompletionItemKind.Property);
				
				slotSharedBankBagsEnd.detail = "slot.SharedBankBagsEnd";
				slotSharedBankBagsEnd.insertText = new vscode.SnippetString('SharedBankBagsEnd');
				slotSharedBankBagsEnd.documentation = new vscode.MarkdownString("");
				results.push(slotSharedBankBagsEnd);				
				
				const slotSharedBankBegin = new vscode.CompletionItem('SharedBankBegin', vscode.CompletionItemKind.Property);
				
				slotSharedBankBegin.detail = "slot.SharedBankBegin";
				slotSharedBankBegin.insertText = new vscode.SnippetString('SharedBankBegin');
				slotSharedBankBegin.documentation = new vscode.MarkdownString("");
				results.push(slotSharedBankBegin);				
				
				const slotSharedBankEnd = new vscode.CompletionItem('SharedBankEnd', vscode.CompletionItemKind.Property);
				
				slotSharedBankEnd.detail = "slot.SharedBankEnd";
				slotSharedBankEnd.insertText = new vscode.SnippetString('SharedBankEnd');
				slotSharedBankEnd.documentation = new vscode.MarkdownString("");
				results.push(slotSharedBankEnd);				
				
				const slotShoulder = new vscode.CompletionItem('Shoulder', vscode.CompletionItemKind.Property);
				
				slotShoulder.detail = "slot.Shoulder";
				slotShoulder.insertText = new vscode.SnippetString('Shoulder');
				slotShoulder.documentation = new vscode.MarkdownString("");
				results.push(slotShoulder);				
				
				const slotShoulders = new vscode.CompletionItem('Shoulders', vscode.CompletionItemKind.Property);
				
				slotShoulders.detail = "slot.Shoulders";
				slotShoulders.insertText = new vscode.SnippetString('Shoulders');
				slotShoulders.documentation = new vscode.MarkdownString("");
				results.push(slotShoulders);				
				
				const slotTradeskill = new vscode.CompletionItem('Tradeskill', vscode.CompletionItemKind.Property);
				
				slotTradeskill.detail = "slot.Tradeskill";
				slotTradeskill.insertText = new vscode.SnippetString('Tradeskill');
				slotTradeskill.documentation = new vscode.MarkdownString("");
				results.push(slotTradeskill);				
				
				const slotWaist = new vscode.CompletionItem('Waist', vscode.CompletionItemKind.Property);
				
				slotWaist.detail = "slot.Waist";
				slotWaist.insertText = new vscode.SnippetString('Waist');
				slotWaist.documentation = new vscode.MarkdownString("");
				results.push(slotWaist);				
				
				const slotWrist1 = new vscode.CompletionItem('Wrist1', vscode.CompletionItemKind.Property);
				
				slotWrist1.detail = "slot.Wrist1";
				slotWrist1.insertText = new vscode.SnippetString('Wrist1');
				slotWrist1.documentation = new vscode.MarkdownString("");
				results.push(slotWrist1);				
				
				const slotWrist2 = new vscode.CompletionItem('Wrist2', vscode.CompletionItemKind.Property);
				
				slotWrist2.detail = "slot.Wrist2";
				slotWrist2.insertText = new vscode.SnippetString('Wrist2');
				slotWrist2.documentation = new vscode.MarkdownString("");
				results.push(slotWrist2);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('spawn.')) {
					return undefined;
				}
				
				
				const spawnCurrentNPCID = new vscode.CompletionItem('CurrentNPCID', vscode.CompletionItemKind.Method);
				
				spawnCurrentNPCID.detail = "spawn.CurrentNPCID()";
				spawnCurrentNPCID.insertText = new vscode.SnippetString('CurrentNPCID()');
				spawnCurrentNPCID.documentation = new vscode.MarkdownString("");
				results.push(spawnCurrentNPCID);				
				
				const spawnDepop = new vscode.CompletionItem('Depop', vscode.CompletionItemKind.Method);
				
				spawnDepop.detail = "spawn.Depop()";
				spawnDepop.insertText = new vscode.SnippetString('Depop()');
				spawnDepop.documentation = new vscode.MarkdownString("");
				results.push(spawnDepop);				
				
				const spawnDisable = new vscode.CompletionItem('Disable', vscode.CompletionItemKind.Method);
				
				spawnDisable.detail = "spawn.Disable()";
				spawnDisable.insertText = new vscode.SnippetString('Disable()');
				spawnDisable.documentation = new vscode.MarkdownString("");
				results.push(spawnDisable);				
				
				const spawnEnable = new vscode.CompletionItem('Enable', vscode.CompletionItemKind.Method);
				
				spawnEnable.detail = "spawn.Enable()";
				spawnEnable.insertText = new vscode.SnippetString('Enable()');
				spawnEnable.documentation = new vscode.MarkdownString("");
				results.push(spawnEnable);				
				
				const spawnEnabled = new vscode.CompletionItem('Enabled', vscode.CompletionItemKind.Method);
				
				spawnEnabled.detail = "spawn.Enabled()";
				spawnEnabled.insertText = new vscode.SnippetString('Enabled()');
				spawnEnabled.documentation = new vscode.MarkdownString("");
				results.push(spawnEnabled);				
				
				const spawnForceDespawn = new vscode.CompletionItem('ForceDespawn', vscode.CompletionItemKind.Method);
				
				spawnForceDespawn.detail = "spawn.ForceDespawn()";
				spawnForceDespawn.insertText = new vscode.SnippetString('ForceDespawn()');
				spawnForceDespawn.documentation = new vscode.MarkdownString("");
				results.push(spawnForceDespawn);				
				
				const spawnGetHeading = new vscode.CompletionItem('GetHeading', vscode.CompletionItemKind.Method);
				
				spawnGetHeading.detail = "spawn.GetHeading()";
				spawnGetHeading.insertText = new vscode.SnippetString('GetHeading()');
				spawnGetHeading.documentation = new vscode.MarkdownString("");
				results.push(spawnGetHeading);				
				
				const spawnGetID = new vscode.CompletionItem('GetID', vscode.CompletionItemKind.Method);
				
				spawnGetID.detail = "spawn.GetID()";
				spawnGetID.insertText = new vscode.SnippetString('GetID()');
				spawnGetID.documentation = new vscode.MarkdownString("");
				results.push(spawnGetID);				
				
				const spawnGetKillCount = new vscode.CompletionItem('GetKillCount', vscode.CompletionItemKind.Method);
				
				spawnGetKillCount.detail = "spawn.GetKillCount()";
				spawnGetKillCount.insertText = new vscode.SnippetString('GetKillCount()');
				spawnGetKillCount.documentation = new vscode.MarkdownString("");
				results.push(spawnGetKillCount);				
				
				const spawnGetSpawnCondition = new vscode.CompletionItem('GetSpawnCondition', vscode.CompletionItemKind.Method);
				
				spawnGetSpawnCondition.detail = "spawn.GetSpawnCondition()";
				spawnGetSpawnCondition.insertText = new vscode.SnippetString('GetSpawnCondition()');
				spawnGetSpawnCondition.documentation = new vscode.MarkdownString("");
				results.push(spawnGetSpawnCondition);				
				
				const spawnGetVariance = new vscode.CompletionItem('GetVariance', vscode.CompletionItemKind.Method);
				
				spawnGetVariance.detail = "spawn.GetVariance()";
				spawnGetVariance.insertText = new vscode.SnippetString('GetVariance()');
				spawnGetVariance.documentation = new vscode.MarkdownString("");
				results.push(spawnGetVariance);				
				
				const spawnGetX = new vscode.CompletionItem('GetX', vscode.CompletionItemKind.Method);
				
				spawnGetX.detail = "spawn.GetX()";
				spawnGetX.insertText = new vscode.SnippetString('GetX()');
				spawnGetX.documentation = new vscode.MarkdownString("");
				results.push(spawnGetX);				
				
				const spawnGetY = new vscode.CompletionItem('GetY', vscode.CompletionItemKind.Method);
				
				spawnGetY.detail = "spawn.GetY()";
				spawnGetY.insertText = new vscode.SnippetString('GetY()');
				spawnGetY.documentation = new vscode.MarkdownString("");
				results.push(spawnGetY);				
				
				const spawnGetZ = new vscode.CompletionItem('GetZ', vscode.CompletionItemKind.Method);
				
				spawnGetZ.detail = "spawn.GetZ()";
				spawnGetZ.insertText = new vscode.SnippetString('GetZ()');
				spawnGetZ.documentation = new vscode.MarkdownString("");
				results.push(spawnGetZ);				
				
				const spawnLoadGrid = new vscode.CompletionItem('LoadGrid', vscode.CompletionItemKind.Method);
				
				spawnLoadGrid.detail = "spawn.LoadGrid()";
				spawnLoadGrid.insertText = new vscode.SnippetString('LoadGrid()');
				spawnLoadGrid.documentation = new vscode.MarkdownString("");
				results.push(spawnLoadGrid);				
				
				const spawnNPCPointerValid = new vscode.CompletionItem('NPCPointerValid', vscode.CompletionItemKind.Method);
				
				spawnNPCPointerValid.detail = "spawn.NPCPointerValid()";
				spawnNPCPointerValid.insertText = new vscode.SnippetString('NPCPointerValid()');
				spawnNPCPointerValid.documentation = new vscode.MarkdownString("");
				results.push(spawnNPCPointerValid);				
				
				const spawnRepop = new vscode.CompletionItem('Repop', vscode.CompletionItemKind.Method);
				
				spawnRepop.detail = "spawn.Repop()";
				spawnRepop.insertText = new vscode.SnippetString('Repop()');
				spawnRepop.documentation = new vscode.MarkdownString("");
				results.push(spawnRepop);				
				
				const spawnReset = new vscode.CompletionItem('Reset', vscode.CompletionItemKind.Method);
				
				spawnReset.detail = "spawn.Reset()";
				spawnReset.insertText = new vscode.SnippetString('Reset()');
				spawnReset.documentation = new vscode.MarkdownString("");
				results.push(spawnReset);				
				
				const spawnRespawnTimer = new vscode.CompletionItem('RespawnTimer', vscode.CompletionItemKind.Method);
				
				spawnRespawnTimer.detail = "spawn.RespawnTimer()";
				spawnRespawnTimer.insertText = new vscode.SnippetString('RespawnTimer()');
				spawnRespawnTimer.documentation = new vscode.MarkdownString("");
				results.push(spawnRespawnTimer);				
				
				const spawnSetCurrentNPCID = new vscode.CompletionItem('SetCurrentNPCID', vscode.CompletionItemKind.Method);
				
				spawnSetCurrentNPCID.detail = "spawn.SetCurrentNPCID()";
				spawnSetCurrentNPCID.insertText = new vscode.SnippetString('SetCurrentNPCID()');
				spawnSetCurrentNPCID.documentation = new vscode.MarkdownString("");
				results.push(spawnSetCurrentNPCID);				
				
				const spawnSetNPCPointer = new vscode.CompletionItem('SetNPCPointer', vscode.CompletionItemKind.Method);
				
				spawnSetNPCPointer.detail = "spawn.SetNPCPointer()";
				spawnSetNPCPointer.insertText = new vscode.SnippetString('SetNPCPointer()');
				spawnSetNPCPointer.documentation = new vscode.MarkdownString("");
				results.push(spawnSetNPCPointer);				
				
				const spawnSetRespawnTimer = new vscode.CompletionItem('SetRespawnTimer', vscode.CompletionItemKind.Method);
				
				spawnSetRespawnTimer.detail = "spawn.SetRespawnTimer()";
				spawnSetRespawnTimer.insertText = new vscode.SnippetString('SetRespawnTimer()');
				spawnSetRespawnTimer.documentation = new vscode.MarkdownString("");
				results.push(spawnSetRespawnTimer);				
				
				const spawnSetTimer = new vscode.CompletionItem('SetTimer', vscode.CompletionItemKind.Method);
				
				spawnSetTimer.detail = "spawn.SetTimer()";
				spawnSetTimer.insertText = new vscode.SnippetString('SetTimer()');
				spawnSetTimer.documentation = new vscode.MarkdownString("");
				results.push(spawnSetTimer);				
				
				const spawnSetVariance = new vscode.CompletionItem('SetVariance', vscode.CompletionItemKind.Method);
				
				spawnSetVariance.detail = "spawn.SetVariance()";
				spawnSetVariance.insertText = new vscode.SnippetString('SetVariance()');
				spawnSetVariance.documentation = new vscode.MarkdownString("");
				results.push(spawnSetVariance);				
				
				const spawnSpawnGroupID = new vscode.CompletionItem('SpawnGroupID', vscode.CompletionItemKind.Method);
				
				spawnSpawnGroupID.detail = "spawn.SpawnGroupID()";
				spawnSpawnGroupID.insertText = new vscode.SnippetString('SpawnGroupID()');
				spawnSpawnGroupID.documentation = new vscode.MarkdownString("");
				results.push(spawnSpawnGroupID);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('spawn_list.')) {
					return undefined;
				}
				
				
				const spawnlistEntries = new vscode.CompletionItem('Entries', vscode.CompletionItemKind.Method);
				
				spawnlistEntries.detail = "spawn_list.Entries()";
				spawnlistEntries.insertText = new vscode.SnippetString('Entries()');
				spawnlistEntries.documentation = new vscode.MarkdownString("");
				results.push(spawnlistEntries);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('speak_mode.')) {
					return undefined;
				}
				
				
				const speakmodeEmote = new vscode.CompletionItem('Emote', vscode.CompletionItemKind.Property);
				
				speakmodeEmote.detail = "speak_mode.Emote";
				speakmodeEmote.insertText = new vscode.SnippetString('Emote');
				speakmodeEmote.documentation = new vscode.MarkdownString("");
				results.push(speakmodeEmote);				
				
				const speakmodeEmoteAlt = new vscode.CompletionItem('EmoteAlt', vscode.CompletionItemKind.Property);
				
				speakmodeEmoteAlt.detail = "speak_mode.EmoteAlt";
				speakmodeEmoteAlt.insertText = new vscode.SnippetString('EmoteAlt');
				speakmodeEmoteAlt.documentation = new vscode.MarkdownString("");
				results.push(speakmodeEmoteAlt);				
				
				const speakmodeGroup = new vscode.CompletionItem('Group', vscode.CompletionItemKind.Property);
				
				speakmodeGroup.detail = "speak_mode.Group";
				speakmodeGroup.insertText = new vscode.SnippetString('Group');
				speakmodeGroup.documentation = new vscode.MarkdownString("");
				results.push(speakmodeGroup);				
				
				const speakmodeRaw = new vscode.CompletionItem('Raw', vscode.CompletionItemKind.Property);
				
				speakmodeRaw.detail = "speak_mode.Raw";
				speakmodeRaw.insertText = new vscode.SnippetString('Raw');
				speakmodeRaw.documentation = new vscode.MarkdownString("");
				results.push(speakmodeRaw);				
				
				const speakmodeSay = new vscode.CompletionItem('Say', vscode.CompletionItemKind.Property);
				
				speakmodeSay.detail = "speak_mode.Say";
				speakmodeSay.insertText = new vscode.SnippetString('Say');
				speakmodeSay.documentation = new vscode.MarkdownString("");
				results.push(speakmodeSay);				
				
				const speakmodeShout = new vscode.CompletionItem('Shout', vscode.CompletionItemKind.Property);
				
				speakmodeShout.detail = "speak_mode.Shout";
				speakmodeShout.insertText = new vscode.SnippetString('Shout');
				speakmodeShout.documentation = new vscode.MarkdownString("");
				results.push(speakmodeShout);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('special_ability.')) {
					return undefined;
				}
				
				
				const specialabilityAllowbeneficial = new vscode.CompletionItem('Allow_beneficial', vscode.CompletionItemKind.Property);
				
				specialabilityAllowbeneficial.detail = "special_ability.Allow_beneficial";
				specialabilityAllowbeneficial.insertText = new vscode.SnippetString('Allow_beneficial');
				specialabilityAllowbeneficial.documentation = new vscode.MarkdownString("");
				results.push(specialabilityAllowbeneficial);				
				
				const specialabilityAllowtotank = new vscode.CompletionItem('Allow_to_tank', vscode.CompletionItemKind.Property);
				
				specialabilityAllowtotank.detail = "special_ability.Allow_to_tank";
				specialabilityAllowtotank.insertText = new vscode.SnippetString('Allow_to_tank');
				specialabilityAllowtotank.documentation = new vscode.MarkdownString("");
				results.push(specialabilityAllowtotank);				
				
				const specialabilityAlwaysflee = new vscode.CompletionItem('Always_flee', vscode.CompletionItemKind.Property);
				
				specialabilityAlwaysflee.detail = "special_ability.Always_flee";
				specialabilityAlwaysflee.insertText = new vscode.SnippetString('Always_flee');
				specialabilityAlwaysflee.documentation = new vscode.MarkdownString("");
				results.push(specialabilityAlwaysflee);				
				
				const specialabilityArearampage = new vscode.CompletionItem('Area_rampage', vscode.CompletionItemKind.Property);
				
				specialabilityArearampage.detail = "special_ability.Area_rampage";
				specialabilityArearampage.insertText = new vscode.SnippetString('Area_rampage');
				specialabilityArearampage.documentation = new vscode.MarkdownString("");
				results.push(specialabilityArearampage);				
				
				const specialabilityBaneattack = new vscode.CompletionItem('Bane_attack', vscode.CompletionItemKind.Property);
				
				specialabilityBaneattack.detail = "special_ability.Bane_attack";
				specialabilityBaneattack.insertText = new vscode.SnippetString('Bane_attack');
				specialabilityBaneattack.documentation = new vscode.MarkdownString("");
				results.push(specialabilityBaneattack);				
				
				const specialabilityCastingresistdiff = new vscode.CompletionItem('Casting_resist_diff', vscode.CompletionItemKind.Property);
				
				specialabilityCastingresistdiff.detail = "special_ability.Casting_resist_diff";
				specialabilityCastingresistdiff.insertText = new vscode.SnippetString('Casting_resist_diff');
				specialabilityCastingresistdiff.documentation = new vscode.MarkdownString("");
				results.push(specialabilityCastingresistdiff);				
				
				const specialabilityCounteravoiddamage = new vscode.CompletionItem('Counter_avoid_damage', vscode.CompletionItemKind.Property);
				
				specialabilityCounteravoiddamage.detail = "special_ability.Counter_avoid_damage";
				specialabilityCounteravoiddamage.insertText = new vscode.SnippetString('Counter_avoid_damage');
				specialabilityCounteravoiddamage.documentation = new vscode.MarkdownString("");
				results.push(specialabilityCounteravoiddamage);				
				
				const specialabilityDestructibleobject = new vscode.CompletionItem('Destructible_object', vscode.CompletionItemKind.Property);
				
				specialabilityDestructibleobject.detail = "special_ability.Destructible_object";
				specialabilityDestructibleobject.insertText = new vscode.SnippetString('Destructible_object');
				specialabilityDestructibleobject.documentation = new vscode.MarkdownString("");
				results.push(specialabilityDestructibleobject);				
				
				const specialabilityDisablemelee = new vscode.CompletionItem('Disable_melee', vscode.CompletionItemKind.Property);
				
				specialabilityDisablemelee.detail = "special_ability.Disable_melee";
				specialabilityDisablemelee.insertText = new vscode.SnippetString('Disable_melee');
				specialabilityDisablemelee.documentation = new vscode.MarkdownString("");
				results.push(specialabilityDisablemelee);				
				
				const specialabilityDontbufffriends = new vscode.CompletionItem('Dont_buff_friends', vscode.CompletionItemKind.Property);
				
				specialabilityDontbufffriends.detail = "special_ability.Dont_buff_friends";
				specialabilityDontbufffriends.insertText = new vscode.SnippetString('Dont_buff_friends');
				specialabilityDontbufffriends.documentation = new vscode.MarkdownString("");
				results.push(specialabilityDontbufffriends);				
				
				const specialabilityEnrage = new vscode.CompletionItem('Enrage', vscode.CompletionItemKind.Property);
				
				specialabilityEnrage.detail = "special_ability.Enrage";
				specialabilityEnrage.insertText = new vscode.SnippetString('Enrage');
				specialabilityEnrage.documentation = new vscode.MarkdownString("");
				results.push(specialabilityEnrage);				
				
				const specialabilityFleepercent = new vscode.CompletionItem('Flee_percent', vscode.CompletionItemKind.Property);
				
				specialabilityFleepercent.detail = "special_ability.Flee_percent";
				specialabilityFleepercent.insertText = new vscode.SnippetString('Flee_percent');
				specialabilityFleepercent.documentation = new vscode.MarkdownString("");
				results.push(specialabilityFleepercent);				
				
				const specialabilityFlurry = new vscode.CompletionItem('Flurry', vscode.CompletionItemKind.Property);
				
				specialabilityFlurry.detail = "special_ability.Flurry";
				specialabilityFlurry.insertText = new vscode.SnippetString('Flurry');
				specialabilityFlurry.documentation = new vscode.MarkdownString("");
				results.push(specialabilityFlurry);				
				
				const specialabilityIgnorerootaggrorules = new vscode.CompletionItem('Ignore_root_aggro_rules', vscode.CompletionItemKind.Property);
				
				specialabilityIgnorerootaggrorules.detail = "special_ability.Ignore_root_aggro_rules";
				specialabilityIgnorerootaggrorules.insertText = new vscode.SnippetString('Ignore_root_aggro_rules');
				specialabilityIgnorerootaggrorules.documentation = new vscode.MarkdownString("");
				results.push(specialabilityIgnorerootaggrorules);				
				
				const specialabilityImmuneaggro = new vscode.CompletionItem('Immune_aggro', vscode.CompletionItemKind.Property);
				
				specialabilityImmuneaggro.detail = "special_ability.Immune_aggro";
				specialabilityImmuneaggro.insertText = new vscode.SnippetString('Immune_aggro');
				specialabilityImmuneaggro.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmuneaggro);				
				
				const specialabilityImmuneaggroon = new vscode.CompletionItem('Immune_aggro_on', vscode.CompletionItemKind.Property);
				
				specialabilityImmuneaggroon.detail = "special_ability.Immune_aggro_on";
				specialabilityImmuneaggroon.insertText = new vscode.SnippetString('Immune_aggro_on');
				specialabilityImmuneaggroon.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmuneaggroon);				
				
				const specialabilityImmunecastingfromrange = new vscode.CompletionItem('Immune_casting_from_range', vscode.CompletionItemKind.Property);
				
				specialabilityImmunecastingfromrange.detail = "special_ability.Immune_casting_from_range";
				specialabilityImmunecastingfromrange.insertText = new vscode.SnippetString('Immune_casting_from_range');
				specialabilityImmunecastingfromrange.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmunecastingfromrange);				
				
				const specialabilityImmunefeigndeath = new vscode.CompletionItem('Immune_feign_death', vscode.CompletionItemKind.Property);
				
				specialabilityImmunefeigndeath.detail = "special_ability.Immune_feign_death";
				specialabilityImmunefeigndeath.insertText = new vscode.SnippetString('Immune_feign_death');
				specialabilityImmunefeigndeath.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmunefeigndeath);				
				
				const specialabilityImmunefleeing = new vscode.CompletionItem('Immune_fleeing', vscode.CompletionItemKind.Property);
				
				specialabilityImmunefleeing.detail = "special_ability.Immune_fleeing";
				specialabilityImmunefleeing.insertText = new vscode.SnippetString('Immune_fleeing');
				specialabilityImmunefleeing.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmunefleeing);				
				
				const specialabilityImmunemagic = new vscode.CompletionItem('Immune_magic', vscode.CompletionItemKind.Property);
				
				specialabilityImmunemagic.detail = "special_ability.Immune_magic";
				specialabilityImmunemagic.insertText = new vscode.SnippetString('Immune_magic');
				specialabilityImmunemagic.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmunemagic);				
				
				const specialabilityImmunemelee = new vscode.CompletionItem('Immune_melee', vscode.CompletionItemKind.Property);
				
				specialabilityImmunemelee.detail = "special_ability.Immune_melee";
				specialabilityImmunemelee.insertText = new vscode.SnippetString('Immune_melee');
				specialabilityImmunemelee.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmunemelee);				
				
				const specialabilityImmunemeleeexceptbane = new vscode.CompletionItem('Immune_melee_except_bane', vscode.CompletionItemKind.Property);
				
				specialabilityImmunemeleeexceptbane.detail = "special_ability.Immune_melee_except_bane";
				specialabilityImmunemeleeexceptbane.insertText = new vscode.SnippetString('Immune_melee_except_bane');
				specialabilityImmunemeleeexceptbane.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmunemeleeexceptbane);				
				
				const specialabilityImmunemeleeexceptmagical = new vscode.CompletionItem('Immune_melee_except_magical', vscode.CompletionItemKind.Property);
				
				specialabilityImmunemeleeexceptmagical.detail = "special_ability.Immune_melee_except_magical";
				specialabilityImmunemeleeexceptmagical.insertText = new vscode.SnippetString('Immune_melee_except_magical');
				specialabilityImmunemeleeexceptmagical.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmunemeleeexceptmagical);				
				
				const specialabilityImmunepacify = new vscode.CompletionItem('Immune_pacify', vscode.CompletionItemKind.Property);
				
				specialabilityImmunepacify.detail = "special_ability.Immune_pacify";
				specialabilityImmunepacify.insertText = new vscode.SnippetString('Immune_pacify');
				specialabilityImmunepacify.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmunepacify);				
				
				const specialabilityImmunerangedattacks = new vscode.CompletionItem('Immune_ranged_attacks', vscode.CompletionItemKind.Property);
				
				specialabilityImmunerangedattacks.detail = "special_ability.Immune_ranged_attacks";
				specialabilityImmunerangedattacks.insertText = new vscode.SnippetString('Immune_ranged_attacks');
				specialabilityImmunerangedattacks.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmunerangedattacks);				
				
				const specialabilityImmunetaunt = new vscode.CompletionItem('Immune_taunt', vscode.CompletionItemKind.Property);
				
				specialabilityImmunetaunt.detail = "special_ability.Immune_taunt";
				specialabilityImmunetaunt.insertText = new vscode.SnippetString('Immune_taunt');
				specialabilityImmunetaunt.documentation = new vscode.MarkdownString("");
				results.push(specialabilityImmunetaunt);				
				
				const specialabilityInnatedualwield = new vscode.CompletionItem('Innate_dual_wield', vscode.CompletionItemKind.Property);
				
				specialabilityInnatedualwield.detail = "special_ability.Innate_dual_wield";
				specialabilityInnatedualwield.insertText = new vscode.SnippetString('Innate_dual_wield');
				specialabilityInnatedualwield.documentation = new vscode.MarkdownString("");
				results.push(specialabilityInnatedualwield);				
				
				const specialabilityLeash = new vscode.CompletionItem('Leash', vscode.CompletionItemKind.Property);
				
				specialabilityLeash.detail = "special_ability.Leash";
				specialabilityLeash.insertText = new vscode.SnippetString('Leash');
				specialabilityLeash.documentation = new vscode.MarkdownString("");
				results.push(specialabilityLeash);				
				
				const specialabilityMagicalattack = new vscode.CompletionItem('Magical_attack', vscode.CompletionItemKind.Property);
				
				specialabilityMagicalattack.detail = "special_ability.Magical_attack";
				specialabilityMagicalattack.insertText = new vscode.SnippetString('Magical_attack');
				specialabilityMagicalattack.documentation = new vscode.MarkdownString("");
				results.push(specialabilityMagicalattack);				
				
				const specialabilityNoharmfromclient = new vscode.CompletionItem('No_harm_from_client', vscode.CompletionItemKind.Property);
				
				specialabilityNoharmfromclient.detail = "special_ability.No_harm_from_client";
				specialabilityNoharmfromclient.insertText = new vscode.SnippetString('No_harm_from_client');
				specialabilityNoharmfromclient.documentation = new vscode.MarkdownString("");
				results.push(specialabilityNoharmfromclient);				
				
				const specialabilityNpcchasedistance = new vscode.CompletionItem('Npc_chase_distance', vscode.CompletionItemKind.Property);
				
				specialabilityNpcchasedistance.detail = "special_ability.Npc_chase_distance";
				specialabilityNpcchasedistance.insertText = new vscode.SnippetString('Npc_chase_distance');
				specialabilityNpcchasedistance.documentation = new vscode.MarkdownString("");
				results.push(specialabilityNpcchasedistance);				
				
				const specialabilityQuadattack = new vscode.CompletionItem('Quad_attack', vscode.CompletionItemKind.Property);
				
				specialabilityQuadattack.detail = "special_ability.Quad_attack";
				specialabilityQuadattack.insertText = new vscode.SnippetString('Quad_attack');
				specialabilityQuadattack.documentation = new vscode.MarkdownString("");
				results.push(specialabilityQuadattack);				
				
				const specialabilityRampage = new vscode.CompletionItem('Rampage', vscode.CompletionItemKind.Property);
				
				specialabilityRampage.detail = "special_ability.Rampage";
				specialabilityRampage.insertText = new vscode.SnippetString('Rampage');
				specialabilityRampage.documentation = new vscode.MarkdownString("");
				results.push(specialabilityRampage);				
				
				const specialabilityRangedattack = new vscode.CompletionItem('Ranged_attack', vscode.CompletionItemKind.Property);
				
				specialabilityRangedattack.detail = "special_ability.Ranged_attack";
				specialabilityRangedattack.insertText = new vscode.SnippetString('Ranged_attack');
				specialabilityRangedattack.documentation = new vscode.MarkdownString("");
				results.push(specialabilityRangedattack);				
				
				const specialabilitySummon = new vscode.CompletionItem('Summon', vscode.CompletionItemKind.Property);
				
				specialabilitySummon.detail = "special_ability.Summon";
				specialabilitySummon.insertText = new vscode.SnippetString('Summon');
				specialabilitySummon.documentation = new vscode.MarkdownString("");
				results.push(specialabilitySummon);				
				
				const specialabilityTether = new vscode.CompletionItem('Tether', vscode.CompletionItemKind.Property);
				
				specialabilityTether.detail = "special_ability.Tether";
				specialabilityTether.insertText = new vscode.SnippetString('Tether');
				specialabilityTether.documentation = new vscode.MarkdownString("");
				results.push(specialabilityTether);				
				
				const specialabilityTripleattack = new vscode.CompletionItem('Triple_attack', vscode.CompletionItemKind.Property);
				
				specialabilityTripleattack.detail = "special_ability.Triple_attack";
				specialabilityTripleattack.insertText = new vscode.SnippetString('Triple_attack');
				specialabilityTripleattack.documentation = new vscode.MarkdownString("");
				results.push(specialabilityTripleattack);				
				
				const specialabilityTunnelvision = new vscode.CompletionItem('Tunnelvision', vscode.CompletionItemKind.Property);
				
				specialabilityTunnelvision.detail = "special_ability.Tunnelvision";
				specialabilityTunnelvision.insertText = new vscode.SnippetString('Tunnelvision');
				specialabilityTunnelvision.documentation = new vscode.MarkdownString("");
				results.push(specialabilityTunnelvision);				
				
				const specialabilityUncharmable = new vscode.CompletionItem('Uncharmable', vscode.CompletionItemKind.Property);
				
				specialabilityUncharmable.detail = "special_ability.Uncharmable";
				specialabilityUncharmable.insertText = new vscode.SnippetString('Uncharmable');
				specialabilityUncharmable.documentation = new vscode.MarkdownString("");
				results.push(specialabilityUncharmable);				
				
				const specialabilityUndispellable = new vscode.CompletionItem('Undispellable', vscode.CompletionItemKind.Property);
				
				specialabilityUndispellable.detail = "special_ability.Undispellable";
				specialabilityUndispellable.insertText = new vscode.SnippetString('Undispellable');
				specialabilityUndispellable.documentation = new vscode.MarkdownString("");
				results.push(specialabilityUndispellable);				
				
				const specialabilityUnfearable = new vscode.CompletionItem('Unfearable', vscode.CompletionItemKind.Property);
				
				specialabilityUnfearable.detail = "special_ability.Unfearable";
				specialabilityUnfearable.insertText = new vscode.SnippetString('Unfearable');
				specialabilityUnfearable.documentation = new vscode.MarkdownString("");
				results.push(specialabilityUnfearable);				
				
				const specialabilityUnmezable = new vscode.CompletionItem('Unmezable', vscode.CompletionItemKind.Property);
				
				specialabilityUnmezable.detail = "special_ability.Unmezable";
				specialabilityUnmezable.insertText = new vscode.SnippetString('Unmezable');
				specialabilityUnmezable.documentation = new vscode.MarkdownString("");
				results.push(specialabilityUnmezable);				
				
				const specialabilityUnslowable = new vscode.CompletionItem('Unslowable', vscode.CompletionItemKind.Property);
				
				specialabilityUnslowable.detail = "special_ability.Unslowable";
				specialabilityUnslowable.insertText = new vscode.SnippetString('Unslowable');
				specialabilityUnslowable.documentation = new vscode.MarkdownString("");
				results.push(specialabilityUnslowable);				
				
				const specialabilityUnsnareable = new vscode.CompletionItem('Unsnareable', vscode.CompletionItemKind.Property);
				
				specialabilityUnsnareable.detail = "special_ability.Unsnareable";
				specialabilityUnsnareable.insertText = new vscode.SnippetString('Unsnareable');
				specialabilityUnsnareable.documentation = new vscode.MarkdownString("");
				results.push(specialabilityUnsnareable);				
				
				const specialabilityUnstunable = new vscode.CompletionItem('Unstunable', vscode.CompletionItemKind.Property);
				
				specialabilityUnstunable.detail = "special_ability.Unstunable";
				specialabilityUnstunable.insertText = new vscode.SnippetString('Unstunable');
				specialabilityUnstunable.documentation = new vscode.MarkdownString("");
				results.push(specialabilityUnstunable);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));

	context.subscriptions.push(vscode.languages.registerCompletionItemProvider('lua', {
			provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
				const linePrefix = document.lineAt(position).text.substr(0, position.character);
				const results = [];
				if (!linePrefix.endsWith('spell.')) {
					return undefined;
				}
				
				
				const spellActivated = new vscode.CompletionItem('Activated', vscode.CompletionItemKind.Method);
				
				spellActivated.detail = "spell.Activated()";
				spellActivated.insertText = new vscode.SnippetString('Activated()');
				spellActivated.documentation = new vscode.MarkdownString("");
				results.push(spellActivated);				
				
				const spellAEDuration = new vscode.CompletionItem('AEDuration', vscode.CompletionItemKind.Method);
				
				spellAEDuration.detail = "spell.AEDuration()";
				spellAEDuration.insertText = new vscode.SnippetString('AEDuration()');
				spellAEDuration.documentation = new vscode.MarkdownString("");
				results.push(spellAEDuration);				
				
				const spellAEMaxTargets = new vscode.CompletionItem('AEMaxTargets', vscode.CompletionItemKind.Method);
				
				spellAEMaxTargets.detail = "spell.AEMaxTargets()";
				spellAEMaxTargets.insertText = new vscode.SnippetString('AEMaxTargets()');
				spellAEMaxTargets.documentation = new vscode.MarkdownString("");
				results.push(spellAEMaxTargets);				
				
				const spellAllowRest = new vscode.CompletionItem('AllowRest', vscode.CompletionItemKind.Method);
				
				spellAllowRest.detail = "spell.AllowRest()";
				spellAllowRest.insertText = new vscode.SnippetString('AllowRest()');
				spellAllowRest.documentation = new vscode.MarkdownString("");
				results.push(spellAllowRest);				
				
				const spellAoeRange = new vscode.CompletionItem('AoeRange', vscode.CompletionItemKind.Method);
				
				spellAoeRange.detail = "spell.AoeRange()";
				spellAoeRange.insertText = new vscode.SnippetString('AoeRange()');
				spellAoeRange.documentation = new vscode.MarkdownString("");
				results.push(spellAoeRange);				
				
				const spellBase = new vscode.CompletionItem('Base', vscode.CompletionItemKind.Method);
				
				spellBase.detail = "spell.Base()";
				spellBase.insertText = new vscode.SnippetString('Base()');
				spellBase.documentation = new vscode.MarkdownString("");
				results.push(spellBase);				
				
				const spellBaseDiff = new vscode.CompletionItem('BaseDiff', vscode.CompletionItemKind.Method);
				
				spellBaseDiff.detail = "spell.BaseDiff()";
				spellBaseDiff.insertText = new vscode.SnippetString('BaseDiff()');
				spellBaseDiff.documentation = new vscode.MarkdownString("");
				results.push(spellBaseDiff);				
				
				const spellBonusHate = new vscode.CompletionItem('BonusHate', vscode.CompletionItemKind.Method);
				
				spellBonusHate.detail = "spell.BonusHate()";
				spellBonusHate.insertText = new vscode.SnippetString('BonusHate()');
				spellBonusHate.documentation = new vscode.MarkdownString("");
				results.push(spellBonusHate);				
				
				const spellBuffDuration = new vscode.CompletionItem('BuffDuration', vscode.CompletionItemKind.Method);
				
				spellBuffDuration.detail = "spell.BuffDuration()";
				spellBuffDuration.insertText = new vscode.SnippetString('BuffDuration()');
				spellBuffDuration.documentation = new vscode.MarkdownString("");
				results.push(spellBuffDuration);				
				
				const spellBuffdurationFormula = new vscode.CompletionItem('BuffdurationFormula', vscode.CompletionItemKind.Method);
				
				spellBuffdurationFormula.detail = "spell.BuffdurationFormula()";
				spellBuffdurationFormula.insertText = new vscode.SnippetString('BuffdurationFormula()');
				spellBuffdurationFormula.documentation = new vscode.MarkdownString("");
				results.push(spellBuffdurationFormula);				
				
				const spellCanMGB = new vscode.CompletionItem('CanMGB', vscode.CompletionItemKind.Method);
				
				spellCanMGB.detail = "spell.CanMGB()";
				spellCanMGB.insertText = new vscode.SnippetString('CanMGB()');
				spellCanMGB.documentation = new vscode.MarkdownString("");
				results.push(spellCanMGB);				
				
				const spellCastingAnim = new vscode.CompletionItem('CastingAnim', vscode.CompletionItemKind.Method);
				
				spellCastingAnim.detail = "spell.CastingAnim()";
				spellCastingAnim.insertText = new vscode.SnippetString('CastingAnim()');
				spellCastingAnim.documentation = new vscode.MarkdownString("");
				results.push(spellCastingAnim);				
				
				const spellCastOnOther = new vscode.CompletionItem('CastOnOther', vscode.CompletionItemKind.Method);
				
				spellCastOnOther.detail = "spell.CastOnOther()";
				spellCastOnOther.insertText = new vscode.SnippetString('CastOnOther()');
				spellCastOnOther.documentation = new vscode.MarkdownString("");
				results.push(spellCastOnOther);				
				
				const spellCastOnYou = new vscode.CompletionItem('CastOnYou', vscode.CompletionItemKind.Method);
				
				spellCastOnYou.detail = "spell.CastOnYou()";
				spellCastOnYou.insertText = new vscode.SnippetString('CastOnYou()');
				spellCastOnYou.documentation = new vscode.MarkdownString("");
				results.push(spellCastOnYou);				
				
				const spellCastRestriction = new vscode.CompletionItem('CastRestriction', vscode.CompletionItemKind.Method);
				
				spellCastRestriction.detail = "spell.CastRestriction()";
				spellCastRestriction.insertText = new vscode.SnippetString('CastRestriction()');
				spellCastRestriction.documentation = new vscode.MarkdownString("");
				results.push(spellCastRestriction);				
				
				const spellCastTime = new vscode.CompletionItem('CastTime', vscode.CompletionItemKind.Method);
				
				spellCastTime.detail = "spell.CastTime()";
				spellCastTime.insertText = new vscode.SnippetString('CastTime()');
				spellCastTime.documentation = new vscode.MarkdownString("");
				results.push(spellCastTime);				
				
				const spellClasses = new vscode.CompletionItem('Classes', vscode.CompletionItemKind.Method);
				
				spellClasses.detail = "spell.Classes()";
				spellClasses.insertText = new vscode.SnippetString('Classes()');
				spellClasses.documentation = new vscode.MarkdownString("");
				results.push(spellClasses);				
				
				const spellComponentCounts = new vscode.CompletionItem('ComponentCounts', vscode.CompletionItemKind.Method);
				
				spellComponentCounts.detail = "spell.ComponentCounts()";
				spellComponentCounts.insertText = new vscode.SnippetString('ComponentCounts()');
				spellComponentCounts.documentation = new vscode.MarkdownString("");
				results.push(spellComponentCounts);				
				
				const spellComponents = new vscode.CompletionItem('Components', vscode.CompletionItemKind.Method);
				
				spellComponents.detail = "spell.Components()";
				spellComponents.insertText = new vscode.SnippetString('Components()');
				spellComponents.documentation = new vscode.MarkdownString("");
				results.push(spellComponents);				
				
				const spellDamageShieldType = new vscode.CompletionItem('DamageShieldType', vscode.CompletionItemKind.Method);
				
				spellDamageShieldType.detail = "spell.DamageShieldType()";
				spellDamageShieldType.insertText = new vscode.SnippetString('DamageShieldType()');
				spellDamageShieldType.documentation = new vscode.MarkdownString("");
				results.push(spellDamageShieldType);				
				
				const spellDeities = new vscode.CompletionItem('Deities', vscode.CompletionItemKind.Method);
				
				spellDeities.detail = "spell.Deities()";
				spellDeities.insertText = new vscode.SnippetString('Deities()');
				spellDeities.documentation = new vscode.MarkdownString("");
				results.push(spellDeities);				
				
				const spellDescNum = new vscode.CompletionItem('DescNum', vscode.CompletionItemKind.Method);
				
				spellDescNum.detail = "spell.DescNum()";
				spellDescNum.insertText = new vscode.SnippetString('DescNum()');
				spellDescNum.documentation = new vscode.MarkdownString("");
				results.push(spellDescNum);				
				
				const spellDirectionalEnd = new vscode.CompletionItem('DirectionalEnd', vscode.CompletionItemKind.Method);
				
				spellDirectionalEnd.detail = "spell.DirectionalEnd()";
				spellDirectionalEnd.insertText = new vscode.SnippetString('DirectionalEnd()');
				spellDirectionalEnd.documentation = new vscode.MarkdownString("");
				results.push(spellDirectionalEnd);				
				
				const spellDirectionalStart = new vscode.CompletionItem('DirectionalStart', vscode.CompletionItemKind.Method);
				
				spellDirectionalStart.detail = "spell.DirectionalStart()";
				spellDirectionalStart.insertText = new vscode.SnippetString('DirectionalStart()');
				spellDirectionalStart.documentation = new vscode.MarkdownString("");
				results.push(spellDirectionalStart);				
				
				const spellDisallowSit = new vscode.CompletionItem('DisallowSit', vscode.CompletionItemKind.Method);
				
				spellDisallowSit.detail = "spell.DisallowSit()";
				spellDisallowSit.insertText = new vscode.SnippetString('DisallowSit()');
				spellDisallowSit.documentation = new vscode.MarkdownString("");
				results.push(spellDisallowSit);				
				
				const spellDispelFlag = new vscode.CompletionItem('DispelFlag', vscode.CompletionItemKind.Method);
				
				spellDispelFlag.detail = "spell.DispelFlag()";
				spellDispelFlag.insertText = new vscode.SnippetString('DispelFlag()');
				spellDispelFlag.documentation = new vscode.MarkdownString("");
				results.push(spellDispelFlag);				
				
				const spellEffectDescNum = new vscode.CompletionItem('EffectDescNum', vscode.CompletionItemKind.Method);
				
				spellEffectDescNum.detail = "spell.EffectDescNum()";
				spellEffectDescNum.insertText = new vscode.SnippetString('EffectDescNum()');
				spellEffectDescNum.documentation = new vscode.MarkdownString("");
				results.push(spellEffectDescNum);				
				
				const spellEffectID = new vscode.CompletionItem('EffectID', vscode.CompletionItemKind.Method);
				
				spellEffectID.detail = "spell.EffectID()";
				spellEffectID.insertText = new vscode.SnippetString('EffectID()');
				spellEffectID.documentation = new vscode.MarkdownString("");
				results.push(spellEffectID);				
				
				const spellEndurCost = new vscode.CompletionItem('EndurCost', vscode.CompletionItemKind.Method);
				
				spellEndurCost.detail = "spell.EndurCost()";
				spellEndurCost.insertText = new vscode.SnippetString('EndurCost()');
				spellEndurCost.documentation = new vscode.MarkdownString("");
				results.push(spellEndurCost);				
				
				const spellEndurTimerIndex = new vscode.CompletionItem('EndurTimerIndex', vscode.CompletionItemKind.Method);
				
				spellEndurTimerIndex.detail = "spell.EndurTimerIndex()";
				spellEndurTimerIndex.insertText = new vscode.SnippetString('EndurTimerIndex()');
				spellEndurTimerIndex.documentation = new vscode.MarkdownString("");
				results.push(spellEndurTimerIndex);				
				
				const spellEndurUpkeep = new vscode.CompletionItem('EndurUpkeep', vscode.CompletionItemKind.Method);
				
				spellEndurUpkeep.detail = "spell.EndurUpkeep()";
				spellEndurUpkeep.insertText = new vscode.SnippetString('EndurUpkeep()');
				spellEndurUpkeep.documentation = new vscode.MarkdownString("");
				results.push(spellEndurUpkeep);				
				
				const spellEnvironmentType = new vscode.CompletionItem('EnvironmentType', vscode.CompletionItemKind.Method);
				
				spellEnvironmentType.detail = "spell.EnvironmentType()";
				spellEnvironmentType.insertText = new vscode.SnippetString('EnvironmentType()');
				spellEnvironmentType.documentation = new vscode.MarkdownString("");
				results.push(spellEnvironmentType);				
				
				const spellFormula = new vscode.CompletionItem('Formula', vscode.CompletionItemKind.Method);
				
				spellFormula.detail = "spell.Formula()";
				spellFormula.insertText = new vscode.SnippetString('Formula()');
				spellFormula.documentation = new vscode.MarkdownString("");
				results.push(spellFormula);				
				
				const spellGoodEffect = new vscode.CompletionItem('GoodEffect', vscode.CompletionItemKind.Method);
				
				spellGoodEffect.detail = "spell.GoodEffect()";
				spellGoodEffect.insertText = new vscode.SnippetString('GoodEffect()');
				spellGoodEffect.documentation = new vscode.MarkdownString("");
				results.push(spellGoodEffect);				
				
				const spellHateAdded = new vscode.CompletionItem('HateAdded', vscode.CompletionItemKind.Method);
				
				spellHateAdded.detail = "spell.HateAdded()";
				spellHateAdded.insertText = new vscode.SnippetString('HateAdded()');
				spellHateAdded.documentation = new vscode.MarkdownString("");
				results.push(spellHateAdded);				
				
				const spellID = new vscode.CompletionItem('ID', vscode.CompletionItemKind.Method);
				
				spellID.detail = "spell.ID()";
				spellID.insertText = new vscode.SnippetString('ID()');
				spellID.documentation = new vscode.MarkdownString("");
				results.push(spellID);				
				
				const spellInCombat = new vscode.CompletionItem('InCombat', vscode.CompletionItemKind.Method);
				
				spellInCombat.detail = "spell.InCombat()";
				spellInCombat.insertText = new vscode.SnippetString('InCombat()');
				spellInCombat.documentation = new vscode.MarkdownString("");
				results.push(spellInCombat);				
				
				const spellMana = new vscode.CompletionItem('Mana', vscode.CompletionItemKind.Method);
				
				spellMana.detail = "spell.Mana()";
				spellMana.insertText = new vscode.SnippetString('Mana()');
				spellMana.documentation = new vscode.MarkdownString("");
				results.push(spellMana);				
				
				const spellMax = new vscode.CompletionItem('Max', vscode.CompletionItemKind.Method);
				
				spellMax.detail = "spell.Max()";
				spellMax.insertText = new vscode.SnippetString('Max()');
				spellMax.documentation = new vscode.MarkdownString("");
				results.push(spellMax);				
				
				const spellMaxDist = new vscode.CompletionItem('MaxDist', vscode.CompletionItemKind.Method);
				
				spellMaxDist.detail = "spell.MaxDist()";
				spellMaxDist.insertText = new vscode.SnippetString('MaxDist()');
				spellMaxDist.documentation = new vscode.MarkdownString("");
				results.push(spellMaxDist);				
				
				const spellMaxDistMod = new vscode.CompletionItem('MaxDistMod', vscode.CompletionItemKind.Method);
				
				spellMaxDistMod.detail = "spell.MaxDistMod()";
				spellMaxDistMod.insertText = new vscode.SnippetString('MaxDistMod()');
				spellMaxDistMod.documentation = new vscode.MarkdownString("");
				results.push(spellMaxDistMod);				
				
				const spellMaxResist = new vscode.CompletionItem('MaxResist', vscode.CompletionItemKind.Method);
				
				spellMaxResist.detail = "spell.MaxResist()";
				spellMaxResist.insertText = new vscode.SnippetString('MaxResist()');
				spellMaxResist.documentation = new vscode.MarkdownString("");
				results.push(spellMaxResist);				
				
				const spellMaxTargets = new vscode.CompletionItem('MaxTargets', vscode.CompletionItemKind.Method);
				
				spellMaxTargets.detail = "spell.MaxTargets()";
				spellMaxTargets.insertText = new vscode.SnippetString('MaxTargets()');
				spellMaxTargets.documentation = new vscode.MarkdownString("");
				results.push(spellMaxTargets);				
				
				const spellMinDist = new vscode.CompletionItem('MinDist', vscode.CompletionItemKind.Method);
				
				spellMinDist.detail = "spell.MinDist()";
				spellMinDist.insertText = new vscode.SnippetString('MinDist()');
				spellMinDist.documentation = new vscode.MarkdownString("");
				results.push(spellMinDist);				
				
				const spellMinDistMod = new vscode.CompletionItem('MinDistMod', vscode.CompletionItemKind.Method);
				
				spellMinDistMod.detail = "spell.MinDistMod()";
				spellMinDistMod.insertText = new vscode.SnippetString('MinDistMod()');
				spellMinDistMod.documentation = new vscode.MarkdownString("");
				results.push(spellMinDistMod);				
				
				const spellMinRange = new vscode.CompletionItem('MinRange', vscode.CompletionItemKind.Method);
				
				spellMinRange.detail = "spell.MinRange()";
				spellMinRange.insertText = new vscode.SnippetString('MinRange()');
				spellMinRange.documentation = new vscode.MarkdownString("");
				results.push(spellMinRange);				
				
				const spellMinResist = new vscode.CompletionItem('MinResist', vscode.CompletionItemKind.Method);
				
				spellMinResist.detail = "spell.MinResist()";
				spellMinResist.insertText = new vscode.SnippetString('MinResist()');
				spellMinResist.documentation = new vscode.MarkdownString("");
				results.push(spellMinResist);				
				
				const spellName = new vscode.CompletionItem('Name', vscode.CompletionItemKind.Method);
				
				spellName.detail = "spell.Name()";
				spellName.insertText = new vscode.SnippetString('Name()');
				spellName.documentation = new vscode.MarkdownString("");
				results.push(spellName);				
				
				const spellNimbusEffect = new vscode.CompletionItem('NimbusEffect', vscode.CompletionItemKind.Method);
				
				spellNimbusEffect.detail = "spell.NimbusEffect()";
				spellNimbusEffect.insertText = new vscode.SnippetString('NimbusEffect()');
				spellNimbusEffect.documentation = new vscode.MarkdownString("");
				results.push(spellNimbusEffect);				
				
				const spellNoexpendReagent = new vscode.CompletionItem('NoexpendReagent', vscode.CompletionItemKind.Method);
				
				spellNoexpendReagent.detail = "spell.NoexpendReagent()";
				spellNoexpendReagent.insertText = new vscode.SnippetString('NoexpendReagent()');
				spellNoexpendReagent.documentation = new vscode.MarkdownString("");
				results.push(spellNoexpendReagent);				
				
				const spellNumHits = new vscode.CompletionItem('NumHits', vscode.CompletionItemKind.Method);
				
				spellNumHits.detail = "spell.NumHits()";
				spellNumHits.insertText = new vscode.SnippetString('NumHits()');
				spellNumHits.documentation = new vscode.MarkdownString("");
				results.push(spellNumHits);				
				
				const spellOtherCasts = new vscode.CompletionItem('OtherCasts', vscode.CompletionItemKind.Method);
				
				spellOtherCasts.detail = "spell.OtherCasts()";
				spellOtherCasts.insertText = new vscode.SnippetString('OtherCasts()');
				spellOtherCasts.documentation = new vscode.MarkdownString("");
				results.push(spellOtherCasts);				
				
				const spellOutOfCombat = new vscode.CompletionItem('OutOfCombat', vscode.CompletionItemKind.Method);
				
				spellOutOfCombat.detail = "spell.OutOfCombat()";
				spellOutOfCombat.insertText = new vscode.SnippetString('OutOfCombat()');
				spellOutOfCombat.documentation = new vscode.MarkdownString("");
				results.push(spellOutOfCombat);				
				
				const spellPersistDeath = new vscode.CompletionItem('PersistDeath', vscode.CompletionItemKind.Method);
				
				spellPersistDeath.detail = "spell.PersistDeath()";
				spellPersistDeath.insertText = new vscode.SnippetString('PersistDeath()');
				spellPersistDeath.documentation = new vscode.MarkdownString("");
				results.push(spellPersistDeath);				
				
				const spellPowerfulFlag = new vscode.CompletionItem('PowerfulFlag', vscode.CompletionItemKind.Method);
				
				spellPowerfulFlag.detail = "spell.PowerfulFlag()";
				spellPowerfulFlag.insertText = new vscode.SnippetString('PowerfulFlag()');
				spellPowerfulFlag.documentation = new vscode.MarkdownString("");
				results.push(spellPowerfulFlag);				
				
				const spellPushBack = new vscode.CompletionItem('PushBack', vscode.CompletionItemKind.Method);
				
				spellPushBack.detail = "spell.PushBack()";
				spellPushBack.insertText = new vscode.SnippetString('PushBack()');
				spellPushBack.documentation = new vscode.MarkdownString("");
				results.push(spellPushBack);				
				
				const spellPushUp = new vscode.CompletionItem('PushUp', vscode.CompletionItemKind.Method);
				
				spellPushUp.detail = "spell.PushUp()";
				spellPushUp.insertText = new vscode.SnippetString('PushUp()');
				spellPushUp.documentation = new vscode.MarkdownString("");
				results.push(spellPushUp);				
				
				const spellPVPResistBase = new vscode.CompletionItem('PVPResistBase', vscode.CompletionItemKind.Method);
				
				spellPVPResistBase.detail = "spell.PVPResistBase()";
				spellPVPResistBase.insertText = new vscode.SnippetString('PVPResistBase()');
				spellPVPResistBase.documentation = new vscode.MarkdownString("");
				results.push(spellPVPResistBase);				
				
				const spellPVPResistCalc = new vscode.CompletionItem('PVPResistCalc', vscode.CompletionItemKind.Method);
				
				spellPVPResistCalc.detail = "spell.PVPResistCalc()";
				spellPVPResistCalc.insertText = new vscode.SnippetString('PVPResistCalc()');
				spellPVPResistCalc.documentation = new vscode.MarkdownString("");
				results.push(spellPVPResistCalc);				
				
				const spellPVPResistCap = new vscode.CompletionItem('PVPResistCap', vscode.CompletionItemKind.Method);
				
				spellPVPResistCap.detail = "spell.PVPResistCap()";
				spellPVPResistCap.insertText = new vscode.SnippetString('PVPResistCap()');
				spellPVPResistCap.documentation = new vscode.MarkdownString("");
				results.push(spellPVPResistCap);				
				
				const spellRange = new vscode.CompletionItem('Range', vscode.CompletionItemKind.Method);
				
				spellRange.detail = "spell.Range()";
				spellRange.insertText = new vscode.SnippetString('Range()');
				spellRange.documentation = new vscode.MarkdownString("");
				results.push(spellRange);				
				
				const spellRecastTime = new vscode.CompletionItem('RecastTime', vscode.CompletionItemKind.Method);
				
				spellRecastTime.detail = "spell.RecastTime()";
				spellRecastTime.insertText = new vscode.SnippetString('RecastTime()');
				spellRecastTime.documentation = new vscode.MarkdownString("");
				results.push(spellRecastTime);				
				
				const spellRecourseLink = new vscode.CompletionItem('RecourseLink', vscode.CompletionItemKind.Method);
				
				spellRecourseLink.detail = "spell.RecourseLink()";
				spellRecourseLink.insertText = new vscode.SnippetString('RecourseLink()');
				spellRecourseLink.documentation = new vscode.MarkdownString("");
				results.push(spellRecourseLink);				
				
				const spellRecoveryTime = new vscode.CompletionItem('RecoveryTime', vscode.CompletionItemKind.Method);
				
				spellRecoveryTime.detail = "spell.RecoveryTime()";
				spellRecoveryTime.insertText = new vscode.SnippetString('RecoveryTime()');
				spellRecoveryTime.documentation = new vscode.MarkdownString("");
				results.push(spellRecoveryTime);				
				
				const spellResistDiff = new vscode.CompletionItem('ResistDiff', vscode.CompletionItemKind.Method);
				
				spellResistDiff.detail = "spell.ResistDiff()";
				spellResistDiff.insertText = new vscode.SnippetString('ResistDiff()');
				spellResistDiff.documentation = new vscode.MarkdownString("");
				results.push(spellResistDiff);				
				
				const spellResistType = new vscode.CompletionItem('ResistType', vscode.CompletionItemKind.Method);
				
				spellResistType.detail = "spell.ResistType()";
				spellResistType.insertText = new vscode.SnippetString('ResistType()');
				spellResistType.documentation = new vscode.MarkdownString("");
				results.push(spellResistType);				
				
				const spellShortBuffBox = new vscode.CompletionItem('ShortBuffBox', vscode.CompletionItemKind.Method);
				
				spellShortBuffBox.detail = "spell.ShortBuffBox()";
				spellShortBuffBox.insertText = new vscode.SnippetString('ShortBuffBox()');
				spellShortBuffBox.documentation = new vscode.MarkdownString("");
				results.push(spellShortBuffBox);				
				
				const spellSkill = new vscode.CompletionItem('Skill', vscode.CompletionItemKind.Method);
				
				spellSkill.detail = "spell.Skill()";
				spellSkill.insertText = new vscode.SnippetString('Skill()');
				spellSkill.documentation = new vscode.MarkdownString("");
				results.push(spellSkill);				
				
				const spellSpellAffectIndex = new vscode.CompletionItem('SpellAffectIndex', vscode.CompletionItemKind.Method);
				
				spellSpellAffectIndex.detail = "spell.SpellAffectIndex()";
				spellSpellAffectIndex.insertText = new vscode.SnippetString('SpellAffectIndex()');
				spellSpellAffectIndex.documentation = new vscode.MarkdownString("");
				results.push(spellSpellAffectIndex);				
				
				const spellSpellCategory = new vscode.CompletionItem('SpellCategory', vscode.CompletionItemKind.Method);
				
				spellSpellCategory.detail = "spell.SpellCategory()";
				spellSpellCategory.insertText = new vscode.SnippetString('SpellCategory()');
				spellSpellCategory.documentation = new vscode.MarkdownString("");
				results.push(spellSpellCategory);				
				
				const spellSpellFades = new vscode.CompletionItem('SpellFades', vscode.CompletionItemKind.Method);
				
				spellSpellFades.detail = "spell.SpellFades()";
				spellSpellFades.insertText = new vscode.SnippetString('SpellFades()');
				spellSpellFades.documentation = new vscode.MarkdownString("");
				results.push(spellSpellFades);				
				
				const spellSpellGroup = new vscode.CompletionItem('SpellGroup', vscode.CompletionItemKind.Method);
				
				spellSpellGroup.detail = "spell.SpellGroup()";
				spellSpellGroup.insertText = new vscode.SnippetString('SpellGroup()');
				spellSpellGroup.documentation = new vscode.MarkdownString("");
				results.push(spellSpellGroup);				
				
				const spellTargetType = new vscode.CompletionItem('TargetType', vscode.CompletionItemKind.Method);
				
				spellTargetType.detail = "spell.TargetType()";
				spellTargetType.insertText = new vscode.SnippetString('TargetType()');
				spellTargetType.documentation = new vscode.MarkdownString("");
				results.push(spellTargetType);				
				
				const spellTeleportZone = new vscode.CompletionItem('TeleportZone', vscode.CompletionItemKind.Method);
				
				spellTeleportZone.detail = "spell.TeleportZone()";
				spellTeleportZone.insertText = new vscode.SnippetString('TeleportZone()');
				spellTeleportZone.documentation = new vscode.MarkdownString("");
				results.push(spellTeleportZone);				
				
				const spellTimeOfDay = new vscode.CompletionItem('TimeOfDay', vscode.CompletionItemKind.Method);
				
				spellTimeOfDay.detail = "spell.TimeOfDay()";
				spellTimeOfDay.insertText = new vscode.SnippetString('TimeOfDay()');
				spellTimeOfDay.documentation = new vscode.MarkdownString("");
				results.push(spellTimeOfDay);				
				
				const spellUninterruptable = new vscode.CompletionItem('Uninterruptable', vscode.CompletionItemKind.Method);
				
				spellUninterruptable.detail = "spell.Uninterruptable()";
				spellUninterruptable.insertText = new vscode.SnippetString('Uninterruptable()');
				spellUninterruptable.documentation = new vscode.MarkdownString("");
				results.push(spellUninterruptable);				
				
				const spellViralTargets = new vscode.CompletionItem('ViralTargets', vscode.CompletionItemKind.Method);
				
				spellViralTargets.detail = "spell.ViralTargets()";
				spellViralTargets.insertText = new vscode.SnippetString('ViralTargets()');
				spellViralTargets.documentation = new vscode.MarkdownString("");
				results.push(spellViralTargets);				
				
				const spellViralTimer = new vscode.CompletionItem('ViralTimer', vscode.CompletionItemKind.Method);
				
				spellViralTimer.detail = "spell.ViralTimer()";
				spellViralTimer.insertText = new vscode.SnippetString('ViralTimer()');
				spellViralTimer.documentation = new vscode.MarkdownString("");
				results.push(spellViralTimer);				
				
				const spellYouCast = new vscode.CompletionItem('YouCast', vscode.CompletionItemKind.Method);
				
				spellYouCast.detail = "spell.YouCast()";
				spellYouCast.insertText = new vscode.SnippetString('YouCast()');
				spellYouCast.documentation = new vscode.MarkdownString("");
				results.push(spellYouCast);				
				
				const spellZoneType = new vscode.CompletionItem('ZoneType', vscode.CompletionItemKind.Method);
				
				spellZoneType.detail = "spell.ZoneType()";
				spellZoneType.insertText = new vscode.SnippetString('ZoneType()');
				spellZoneType.documentation = new vscode.MarkdownString("");
				results.push(spellZoneType);				
				
				return results;
			}
		}, '.' // triggered whenever a '.' is being typed
	));



	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "appearance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nappearance\n```\n[appearance on questapi](https://questapi.firebaseapp.com/en/lua/appearance/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "appearance.Crouching") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nappearance.Crouching\n```\n[appearance.Crouching on questapi](https://questapi.firebaseapp.com/en/lua/appearance/crouching)\n\nMakes an NPC appear crouching"), wordRange));
            }
			
			if (lineTillCurrentWord === "appearance.Dead") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nappearance.Dead\n```\n[appearance.Dead on questapi](https://questapi.firebaseapp.com/en/lua/appearance/dead)\n\nMakes an NPC appear dead"), wordRange));
            }
			
			if (lineTillCurrentWord === "appearance.Looting") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nappearance.Looting\n```\n[appearance.Looting on questapi](https://questapi.firebaseapp.com/en/lua/appearance/looting)\n\nMakes an NPC appear looting, crouching down"), wordRange));
            }
			
			if (lineTillCurrentWord === "appearance.Sitting") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nappearance.Sitting\n```\n[appearance.Sitting on questapi](https://questapi.firebaseapp.com/en/lua/appearance/sitting)\n\nMakes an NPC appear sitting"), wordRange));
            }
			
			if (lineTillCurrentWord === "appearance.Standing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nappearance.Standing\n```\n[appearance.Standing on questapi](https://questapi.firebaseapp.com/en/lua/appearance/standing)\n\nMakes an NPC animate standing idle"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "bt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt\n```\n[bt on questapi](https://questapi.firebaseapp.com/en/lua/bt/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Animal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Animal\n```\n[bt.Animal on questapi](https://questapi.firebaseapp.com/en/lua/bt/animal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Atenha_Ra") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Atenha_Ra\n```\n[bt.Atenha_Ra on questapi](https://questapi.firebaseapp.com/en/lua/bt/atenha_ra)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Boxes") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Boxes\n```\n[bt.Boxes on questapi](https://questapi.firebaseapp.com/en/lua/bt/boxes)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Construct") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Construct\n```\n[bt.Construct on questapi](https://questapi.firebaseapp.com/en/lua/bt/construct)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Dragon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Dragon\n```\n[bt.Dragon on questapi](https://questapi.firebaseapp.com/en/lua/bt/dragon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Dragon3") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Dragon3\n```\n[bt.Dragon3 on questapi](https://questapi.firebaseapp.com/en/lua/bt/dragon3)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Draz_Nurakk") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Draz_Nurakk\n```\n[bt.Draz_Nurakk on questapi](https://questapi.firebaseapp.com/en/lua/bt/draz_nurakk)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Extraplanar") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Extraplanar\n```\n[bt.Extraplanar on questapi](https://questapi.firebaseapp.com/en/lua/bt/extraplanar)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Giant") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Giant\n```\n[bt.Giant on questapi](https://questapi.firebaseapp.com/en/lua/bt/giant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Greater_Akheva") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Greater_Akheva\n```\n[bt.Greater_Akheva on questapi](https://questapi.firebaseapp.com/en/lua/bt/greater_akheva)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Humanoid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Humanoid\n```\n[bt.Humanoid on questapi](https://questapi.firebaseapp.com/en/lua/bt/humanoid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Insect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Insect\n```\n[bt.Insect on questapi](https://questapi.firebaseapp.com/en/lua/bt/insect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.InvisMan") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.InvisMan\n```\n[bt.InvisMan on questapi](https://questapi.firebaseapp.com/en/lua/bt/invisman)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Khati_Sha") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Khati_Sha\n```\n[bt.Khati_Sha on questapi](https://questapi.firebaseapp.com/en/lua/bt/khati_sha)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Luggald") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Luggald\n```\n[bt.Luggald on questapi](https://questapi.firebaseapp.com/en/lua/bt/luggald)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Lycanthrope") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Lycanthrope\n```\n[bt.Lycanthrope on questapi](https://questapi.firebaseapp.com/en/lua/bt/lycanthrope)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Magical") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Magical\n```\n[bt.Magical on questapi](https://questapi.firebaseapp.com/en/lua/bt/magical)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Monster") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Monster\n```\n[bt.Monster on questapi](https://questapi.firebaseapp.com/en/lua/bt/monster)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Muramite") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Muramite\n```\n[bt.Muramite on questapi](https://questapi.firebaseapp.com/en/lua/bt/muramite)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.NoTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.NoTarget\n```\n[bt.NoTarget on questapi](https://questapi.firebaseapp.com/en/lua/bt/notarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.NoTarget2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.NoTarget2\n```\n[bt.NoTarget2 on questapi](https://questapi.firebaseapp.com/en/lua/bt/notarget2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Plant") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Plant\n```\n[bt.Plant on questapi](https://questapi.firebaseapp.com/en/lua/bt/plant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.RaidGiant") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.RaidGiant\n```\n[bt.RaidGiant on questapi](https://questapi.firebaseapp.com/en/lua/bt/raidgiant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Seru") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Seru\n```\n[bt.Seru on questapi](https://questapi.firebaseapp.com/en/lua/bt/seru)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Special") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Special\n```\n[bt.Special on questapi](https://questapi.firebaseapp.com/en/lua/bt/special)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Summoned") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Summoned\n```\n[bt.Summoned on questapi](https://questapi.firebaseapp.com/en/lua/bt/summoned)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Summoned2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Summoned2\n```\n[bt.Summoned2 on questapi](https://questapi.firebaseapp.com/en/lua/bt/summoned2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Summoned3") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Summoned3\n```\n[bt.Summoned3 on questapi](https://questapi.firebaseapp.com/en/lua/bt/summoned3)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.SummonedUndead") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.SummonedUndead\n```\n[bt.SummonedUndead on questapi](https://questapi.firebaseapp.com/en/lua/bt/summonedundead)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.SwarmPet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.SwarmPet\n```\n[bt.SwarmPet on questapi](https://questapi.firebaseapp.com/en/lua/bt/swarmpet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Undead") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Undead\n```\n[bt.Undead on questapi](https://questapi.firebaseapp.com/en/lua/bt/undead)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Vampire") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Vampire\n```\n[bt.Vampire on questapi](https://questapi.firebaseapp.com/en/lua/bt/vampire)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.VeliousDragon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.VeliousDragon\n```\n[bt.VeliousDragon on questapi](https://questapi.firebaseapp.com/en/lua/bt/veliousdragon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "bt.Zek") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nbt.Zek\n```\n[bt.Zek on questapi](https://questapi.firebaseapp.com/en/lua/bt/zek)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "class") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass\n```\n[class on questapi](https://questapi.firebaseapp.com/en/lua/class/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.ADVENTUREMERCHANT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.ADVENTUREMERCHANT\n```\n[class.ADVENTUREMERCHANT on questapi](https://questapi.firebaseapp.com/en/lua/class/adventuremerchant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.ADVENTURERECRUITER") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.ADVENTURERECRUITER\n```\n[class.ADVENTURERECRUITER on questapi](https://questapi.firebaseapp.com/en/lua/class/adventurerecruiter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.ALT_CURRENCY_MERCHANT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.ALT_CURRENCY_MERCHANT\n```\n[class.ALT_CURRENCY_MERCHANT on questapi](https://questapi.firebaseapp.com/en/lua/class/alt_currency_merchant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.BANKER") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.BANKER\n```\n[class.BANKER on questapi](https://questapi.firebaseapp.com/en/lua/class/banker)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.BARD") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.BARD\n```\n[class.BARD on questapi](https://questapi.firebaseapp.com/en/lua/class/bard)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.BARDGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.BARDGM\n```\n[class.BARDGM on questapi](https://questapi.firebaseapp.com/en/lua/class/bardgm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.BEASTLORD") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.BEASTLORD\n```\n[class.BEASTLORD on questapi](https://questapi.firebaseapp.com/en/lua/class/beastlord)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.BEASTLORDGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.BEASTLORDGM\n```\n[class.BEASTLORDGM on questapi](https://questapi.firebaseapp.com/en/lua/class/beastlordgm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.BERSERKER") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.BERSERKER\n```\n[class.BERSERKER on questapi](https://questapi.firebaseapp.com/en/lua/class/berserker)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.BERSERKERGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.BERSERKERGM\n```\n[class.BERSERKERGM on questapi](https://questapi.firebaseapp.com/en/lua/class/berserkergm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.CLERIC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.CLERIC\n```\n[class.CLERIC on questapi](https://questapi.firebaseapp.com/en/lua/class/cleric)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.CLERICGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.CLERICGM\n```\n[class.CLERICGM on questapi](https://questapi.firebaseapp.com/en/lua/class/clericgm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.CORPSE_CLASS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.CORPSE_CLASS\n```\n[class.CORPSE_CLASS on questapi](https://questapi.firebaseapp.com/en/lua/class/corpse_class)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.DARK_REIGN_MERCHANT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.DARK_REIGN_MERCHANT\n```\n[class.DARK_REIGN_MERCHANT on questapi](https://questapi.firebaseapp.com/en/lua/class/dark_reign_merchant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.DISCORD_MERCHANT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.DISCORD_MERCHANT\n```\n[class.DISCORD_MERCHANT on questapi](https://questapi.firebaseapp.com/en/lua/class/discord_merchant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.DRUID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.DRUID\n```\n[class.DRUID on questapi](https://questapi.firebaseapp.com/en/lua/class/druid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.DRUIDGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.DRUIDGM\n```\n[class.DRUIDGM on questapi](https://questapi.firebaseapp.com/en/lua/class/druidgm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.ENCHANTER") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.ENCHANTER\n```\n[class.ENCHANTER on questapi](https://questapi.firebaseapp.com/en/lua/class/enchanter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.ENCHANTERGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.ENCHANTERGM\n```\n[class.ENCHANTERGM on questapi](https://questapi.firebaseapp.com/en/lua/class/enchantergm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.FELLOWSHIP_MASTER") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.FELLOWSHIP_MASTER\n```\n[class.FELLOWSHIP_MASTER on questapi](https://questapi.firebaseapp.com/en/lua/class/fellowship_master)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.GUILD_TRIBUTE_MASTER") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.GUILD_TRIBUTE_MASTER\n```\n[class.GUILD_TRIBUTE_MASTER on questapi](https://questapi.firebaseapp.com/en/lua/class/guild_tribute_master)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.LDON_TREASURE") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.LDON_TREASURE\n```\n[class.LDON_TREASURE on questapi](https://questapi.firebaseapp.com/en/lua/class/ldon_treasure)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.MAGICIAN") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.MAGICIAN\n```\n[class.MAGICIAN on questapi](https://questapi.firebaseapp.com/en/lua/class/magician)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.MAGICIANGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.MAGICIANGM\n```\n[class.MAGICIANGM on questapi](https://questapi.firebaseapp.com/en/lua/class/magiciangm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.MERCERNARY_MASTER") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.MERCERNARY_MASTER\n```\n[class.MERCERNARY_MASTER on questapi](https://questapi.firebaseapp.com/en/lua/class/mercernary_master)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.MERCHANT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.MERCHANT\n```\n[class.MERCHANT on questapi](https://questapi.firebaseapp.com/en/lua/class/merchant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.MONK") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.MONK\n```\n[class.MONK on questapi](https://questapi.firebaseapp.com/en/lua/class/monk)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.MONKGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.MONKGM\n```\n[class.MONKGM on questapi](https://questapi.firebaseapp.com/en/lua/class/monkgm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.NECROMANCER") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.NECROMANCER\n```\n[class.NECROMANCER on questapi](https://questapi.firebaseapp.com/en/lua/class/necromancer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.NECROMANCERGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.NECROMANCERGM\n```\n[class.NECROMANCERGM on questapi](https://questapi.firebaseapp.com/en/lua/class/necromancergm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.NORRATHS_KEEPERS_MERCHANT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.NORRATHS_KEEPERS_MERCHANT\n```\n[class.NORRATHS_KEEPERS_MERCHANT on questapi](https://questapi.firebaseapp.com/en/lua/class/norraths_keepers_merchant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.PALADIN") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.PALADIN\n```\n[class.PALADIN on questapi](https://questapi.firebaseapp.com/en/lua/class/paladin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.PALADINGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.PALADINGM\n```\n[class.PALADINGM on questapi](https://questapi.firebaseapp.com/en/lua/class/paladingm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.RANGER") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.RANGER\n```\n[class.RANGER on questapi](https://questapi.firebaseapp.com/en/lua/class/ranger)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.RANGERGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.RANGERGM\n```\n[class.RANGERGM on questapi](https://questapi.firebaseapp.com/en/lua/class/rangergm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.ROGUE") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.ROGUE\n```\n[class.ROGUE on questapi](https://questapi.firebaseapp.com/en/lua/class/rogue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.ROGUEGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.ROGUEGM\n```\n[class.ROGUEGM on questapi](https://questapi.firebaseapp.com/en/lua/class/roguegm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.SHADOWKNIGHT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.SHADOWKNIGHT\n```\n[class.SHADOWKNIGHT on questapi](https://questapi.firebaseapp.com/en/lua/class/shadowknight)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.SHADOWKNIGHTGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.SHADOWKNIGHTGM\n```\n[class.SHADOWKNIGHTGM on questapi](https://questapi.firebaseapp.com/en/lua/class/shadowknightgm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.SHAMAN") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.SHAMAN\n```\n[class.SHAMAN on questapi](https://questapi.firebaseapp.com/en/lua/class/shaman)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.SHAMANGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.SHAMANGM\n```\n[class.SHAMANGM on questapi](https://questapi.firebaseapp.com/en/lua/class/shamangm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.TRIBUTE_MASTER") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.TRIBUTE_MASTER\n```\n[class.TRIBUTE_MASTER on questapi](https://questapi.firebaseapp.com/en/lua/class/tribute_master)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.WARRIOR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.WARRIOR\n```\n[class.WARRIOR on questapi](https://questapi.firebaseapp.com/en/lua/class/warrior)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.WARRIORGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.WARRIORGM\n```\n[class.WARRIORGM on questapi](https://questapi.firebaseapp.com/en/lua/class/warriorgm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.WIZARD") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.WIZARD\n```\n[class.WIZARD on questapi](https://questapi.firebaseapp.com/en/lua/class/wizard)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "class.WIZARDGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclass.WIZARDGM\n```\n[class.WIZARDGM on questapi](https://questapi.firebaseapp.com/en/lua/class/wizardgm)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "client") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient\n```\n[client on questapi](https://questapi.firebaseapp.com/en/lua/client/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AccountID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AccountID()\n```\n[client.AccountID on questapi](https://questapi.firebaseapp.com/en/lua/client/accountid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AccountName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AccountName()\n```\n[client.AccountName on questapi](https://questapi.firebaseapp.com/en/lua/client/accountname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AddAAPoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AddAAPoints()\n```\n[client.AddAAPoints on questapi](https://questapi.firebaseapp.com/en/lua/client/addaapoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AddAlternateCurrencyValue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AddAlternateCurrencyValue()\n```\n[client.AddAlternateCurrencyValue on questapi](https://questapi.firebaseapp.com/en/lua/client/addalternatecurrencyvalue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AddCrystals") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AddCrystals()\n```\n[client.AddCrystals on questapi](https://questapi.firebaseapp.com/en/lua/client/addcrystals)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AddEXP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AddEXP()\n```\n[client.AddEXP on questapi](https://questapi.firebaseapp.com/en/lua/client/addexp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AddLevelBasedExp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AddLevelBasedExp()\n```\n[client.AddLevelBasedExp on questapi](https://questapi.firebaseapp.com/en/lua/client/addlevelbasedexp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AddMoneyToPP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AddMoneyToPP()\n```\n[client.AddMoneyToPP on questapi](https://questapi.firebaseapp.com/en/lua/client/addmoneytopp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AddPVPPoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AddPVPPoints()\n```\n[client.AddPVPPoints on questapi](https://questapi.firebaseapp.com/en/lua/client/addpvppoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AddSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AddSkill()\n```\n[client.AddSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/addskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Admin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Admin()\n```\n[client.Admin on questapi](https://questapi.firebaseapp.com/en/lua/client/admin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AssignTask") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AssignTask()\n```\n[client.AssignTask on questapi](https://questapi.firebaseapp.com/en/lua/client/assigntask)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AssignToInstance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AssignToInstance()\n```\n[client.AssignToInstance on questapi](https://questapi.firebaseapp.com/en/lua/client/assigntoinstance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.AutoSplitEnabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.AutoSplitEnabled()\n```\n[client.AutoSplitEnabled on questapi](https://questapi.firebaseapp.com/en/lua/client/autosplitenabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.BreakInvis") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.BreakInvis()\n```\n[client.BreakInvis on questapi](https://questapi.firebaseapp.com/en/lua/client/breakinvis)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.CalcATK") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.CalcATK()\n```\n[client.CalcATK on questapi](https://questapi.firebaseapp.com/en/lua/client/calcatk)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.CalcCurrentWeight") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.CalcCurrentWeight()\n```\n[client.CalcCurrentWeight on questapi](https://questapi.firebaseapp.com/en/lua/client/calccurrentweight)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.CalcPriceMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.CalcPriceMod()\n```\n[client.CalcPriceMod on questapi](https://questapi.firebaseapp.com/en/lua/client/calcpricemod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.CanHaveSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.CanHaveSkill()\n```\n[client.CanHaveSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/canhaveskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.ChangeLastName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.ChangeLastName()\n```\n[client.ChangeLastName on questapi](https://questapi.firebaseapp.com/en/lua/client/changelastname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.CharacterID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.CharacterID()\n```\n[client.CharacterID on questapi](https://questapi.firebaseapp.com/en/lua/client/characterid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.CheckIncreaseSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.CheckIncreaseSkill()\n```\n[client.CheckIncreaseSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/checkincreaseskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.CheckSpecializeIncrease") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.CheckSpecializeIncrease()\n```\n[client.CheckSpecializeIncrease on questapi](https://questapi.firebaseapp.com/en/lua/client/checkspecializeincrease)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.ClearCompassMark") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.ClearCompassMark()\n```\n[client.ClearCompassMark on questapi](https://questapi.firebaseapp.com/en/lua/client/clearcompassmark)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.ClearZoneFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.ClearZoneFlag()\n```\n[client.ClearZoneFlag on questapi](https://questapi.firebaseapp.com/en/lua/client/clearzoneflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Connected") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Connected()\n```\n[client.Connected on questapi](https://questapi.firebaseapp.com/en/lua/client/connected)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.DecreaseByID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.DecreaseByID()\n```\n[client.DecreaseByID on questapi](https://questapi.firebaseapp.com/en/lua/client/decreasebyid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.DeleteItemInInventory") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.DeleteItemInInventory()\n```\n[client.DeleteItemInInventory on questapi](https://questapi.firebaseapp.com/en/lua/client/deleteitemininventory)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.DisableAreaEndRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.DisableAreaEndRegen()\n```\n[client.DisableAreaEndRegen on questapi](https://questapi.firebaseapp.com/en/lua/client/disableareaendregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.DisableAreaHPRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.DisableAreaHPRegen()\n```\n[client.DisableAreaHPRegen on questapi](https://questapi.firebaseapp.com/en/lua/client/disableareahpregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.DisableAreaManaRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.DisableAreaManaRegen()\n```\n[client.DisableAreaManaRegen on questapi](https://questapi.firebaseapp.com/en/lua/client/disableareamanaregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.DisableAreaRegens") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.DisableAreaRegens()\n```\n[client.DisableAreaRegens on questapi](https://questapi.firebaseapp.com/en/lua/client/disablearearegens)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Disconnect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Disconnect()\n```\n[client.Disconnect on questapi](https://questapi.firebaseapp.com/en/lua/client/disconnect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.DropItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.DropItem()\n```\n[client.DropItem on questapi](https://questapi.firebaseapp.com/en/lua/client/dropitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Duck") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Duck()\n```\n[client.Duck on questapi](https://questapi.firebaseapp.com/en/lua/client/duck)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.DyeArmorBySlot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.DyeArmorBySlot()\n```\n[client.DyeArmorBySlot on questapi](https://questapi.firebaseapp.com/en/lua/client/dyearmorbyslot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.EnableAreaEndRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.EnableAreaEndRegen()\n```\n[client.EnableAreaEndRegen on questapi](https://questapi.firebaseapp.com/en/lua/client/enableareaendregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.EnableAreaHPRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.EnableAreaHPRegen()\n```\n[client.EnableAreaHPRegen on questapi](https://questapi.firebaseapp.com/en/lua/client/enableareahpregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.EnableAreaManaRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.EnableAreaManaRegen()\n```\n[client.EnableAreaManaRegen on questapi](https://questapi.firebaseapp.com/en/lua/client/enableareamanaregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.EnableAreaRegens") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.EnableAreaRegens()\n```\n[client.EnableAreaRegens on questapi](https://questapi.firebaseapp.com/en/lua/client/enablearearegens)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Escape") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Escape()\n```\n[client.Escape on questapi](https://questapi.firebaseapp.com/en/lua/client/escape)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.FailTask") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.FailTask()\n```\n[client.FailTask on questapi](https://questapi.firebaseapp.com/en/lua/client/failtask)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.FilteredMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.FilteredMessage()\n```\n[client.FilteredMessage on questapi](https://questapi.firebaseapp.com/en/lua/client/filteredmessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.FindMemmedSpellBySlot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.FindMemmedSpellBySlot()\n```\n[client.FindMemmedSpellBySlot on questapi](https://questapi.firebaseapp.com/en/lua/client/findmemmedspellbyslot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.FindSpellBookSlotBySpellID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.FindSpellBookSlotBySpellID()\n```\n[client.FindSpellBookSlotBySpellID on questapi](https://questapi.firebaseapp.com/en/lua/client/findspellbookslotbyspellid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.ForageItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.ForageItem()\n```\n[client.ForageItem on questapi](https://questapi.firebaseapp.com/en/lua/client/forageitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Freeze") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Freeze()\n```\n[client.Freeze on questapi](https://questapi.firebaseapp.com/en/lua/client/freeze)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetAAExp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetAAExp()\n```\n[client.GetAAExp on questapi](https://questapi.firebaseapp.com/en/lua/client/getaaexp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetAAPercent") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetAAPercent()\n```\n[client.GetAAPercent on questapi](https://questapi.firebaseapp.com/en/lua/client/getaapercent)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetAAPoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetAAPoints()\n```\n[client.GetAAPoints on questapi](https://questapi.firebaseapp.com/en/lua/client/getaapoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetAccountAge") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetAccountAge()\n```\n[client.GetAccountAge on questapi](https://questapi.firebaseapp.com/en/lua/client/getaccountage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetAccountFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetAccountFlag()\n```\n[client.GetAccountFlag on questapi](https://questapi.firebaseapp.com/en/lua/client/getaccountflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetAggroCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetAggroCount()\n```\n[client.GetAggroCount on questapi](https://questapi.firebaseapp.com/en/lua/client/getaggrocount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetAllMoney") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetAllMoney()\n```\n[client.GetAllMoney on questapi](https://questapi.firebaseapp.com/en/lua/client/getallmoney)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetAlternateCurrencyValue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetAlternateCurrencyValue()\n```\n[client.GetAlternateCurrencyValue on questapi](https://questapi.firebaseapp.com/en/lua/client/getalternatecurrencyvalue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetAnon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetAnon()\n```\n[client.GetAnon on questapi](https://questapi.firebaseapp.com/en/lua/client/getanon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetAugmentIDAt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetAugmentIDAt()\n```\n[client.GetAugmentIDAt on questapi](https://questapi.firebaseapp.com/en/lua/client/getaugmentidat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBaseAGI") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBaseAGI()\n```\n[client.GetBaseAGI on questapi](https://questapi.firebaseapp.com/en/lua/client/getbaseagi)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBaseCHA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBaseCHA()\n```\n[client.GetBaseCHA on questapi](https://questapi.firebaseapp.com/en/lua/client/getbasecha)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBaseDEX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBaseDEX()\n```\n[client.GetBaseDEX on questapi](https://questapi.firebaseapp.com/en/lua/client/getbasedex)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBaseFace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBaseFace()\n```\n[client.GetBaseFace on questapi](https://questapi.firebaseapp.com/en/lua/client/getbaseface)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBaseINT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBaseINT()\n```\n[client.GetBaseINT on questapi](https://questapi.firebaseapp.com/en/lua/client/getbaseint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBaseSTA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBaseSTA()\n```\n[client.GetBaseSTA on questapi](https://questapi.firebaseapp.com/en/lua/client/getbasesta)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBaseSTR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBaseSTR()\n```\n[client.GetBaseSTR on questapi](https://questapi.firebaseapp.com/en/lua/client/getbasestr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBaseWIS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBaseWIS()\n```\n[client.GetBaseWIS on questapi](https://questapi.firebaseapp.com/en/lua/client/getbasewis)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBindHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBindHeading()\n```\n[client.GetBindHeading on questapi](https://questapi.firebaseapp.com/en/lua/client/getbindheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBindX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBindX()\n```\n[client.GetBindX on questapi](https://questapi.firebaseapp.com/en/lua/client/getbindx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBindY") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBindY()\n```\n[client.GetBindY on questapi](https://questapi.firebaseapp.com/en/lua/client/getbindy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBindZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBindZ()\n```\n[client.GetBindZ on questapi](https://questapi.firebaseapp.com/en/lua/client/getbindz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetBindZoneID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetBindZoneID()\n```\n[client.GetBindZoneID on questapi](https://questapi.firebaseapp.com/en/lua/client/getbindzoneid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetCarriedMoney") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetCarriedMoney()\n```\n[client.GetCarriedMoney on questapi](https://questapi.firebaseapp.com/en/lua/client/getcarriedmoney)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetCharacterFactionLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetCharacterFactionLevel()\n```\n[client.GetCharacterFactionLevel on questapi](https://questapi.firebaseapp.com/en/lua/client/getcharacterfactionlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetClientMaxLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetClientMaxLevel()\n```\n[client.GetClientMaxLevel on questapi](https://questapi.firebaseapp.com/en/lua/client/getclientmaxlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetClientVersion") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetClientVersion()\n```\n[client.GetClientVersion on questapi](https://questapi.firebaseapp.com/en/lua/client/getclientversion)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetClientVersionBit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetClientVersionBit()\n```\n[client.GetClientVersionBit on questapi](https://questapi.firebaseapp.com/en/lua/client/getclientversionbit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetCorpseCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetCorpseCount()\n```\n[client.GetCorpseCount on questapi](https://questapi.firebaseapp.com/en/lua/client/getcorpsecount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetCorpseID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetCorpseID()\n```\n[client.GetCorpseID on questapi](https://questapi.firebaseapp.com/en/lua/client/getcorpseid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetCorpseItemAt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetCorpseItemAt()\n```\n[client.GetCorpseItemAt on questapi](https://questapi.firebaseapp.com/en/lua/client/getcorpseitemat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetDisciplineTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetDisciplineTimer()\n```\n[client.GetDisciplineTimer on questapi](https://questapi.firebaseapp.com/en/lua/client/getdisciplinetimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetDiscSlotBySpellID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetDiscSlotBySpellID()\n```\n[client.GetDiscSlotBySpellID on questapi](https://questapi.firebaseapp.com/en/lua/client/getdiscslotbyspellid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetDuelTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetDuelTarget()\n```\n[client.GetDuelTarget on questapi](https://questapi.firebaseapp.com/en/lua/client/getdueltarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetEbonCrystals") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetEbonCrystals()\n```\n[client.GetEbonCrystals on questapi](https://questapi.firebaseapp.com/en/lua/client/geteboncrystals)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetEndurance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetEndurance()\n```\n[client.GetEndurance on questapi](https://questapi.firebaseapp.com/en/lua/client/getendurance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetEndurancePercent") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetEndurancePercent()\n```\n[client.GetEndurancePercent on questapi](https://questapi.firebaseapp.com/en/lua/client/getendurancepercent)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetEXP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetEXP()\n```\n[client.GetEXP on questapi](https://questapi.firebaseapp.com/en/lua/client/getexp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetFace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetFace()\n```\n[client.GetFace on questapi](https://questapi.firebaseapp.com/en/lua/client/getface)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetFactionLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetFactionLevel()\n```\n[client.GetFactionLevel on questapi](https://questapi.firebaseapp.com/en/lua/client/getfactionlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetFeigned") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetFeigned()\n```\n[client.GetFeigned on questapi](https://questapi.firebaseapp.com/en/lua/client/getfeigned)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetGM()\n```\n[client.GetGM on questapi](https://questapi.firebaseapp.com/en/lua/client/getgm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetGroup()\n```\n[client.GetGroup on questapi](https://questapi.firebaseapp.com/en/lua/client/getgroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetGroupPoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetGroupPoints()\n```\n[client.GetGroupPoints on questapi](https://questapi.firebaseapp.com/en/lua/client/getgrouppoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetHorseId") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetHorseId()\n```\n[client.GetHorseId on questapi](https://questapi.firebaseapp.com/en/lua/client/gethorseid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetHunger") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetHunger()\n```\n[client.GetHunger on questapi](https://questapi.firebaseapp.com/en/lua/client/gethunger)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetInstrumentMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetInstrumentMod()\n```\n[client.GetInstrumentMod on questapi](https://questapi.firebaseapp.com/en/lua/client/getinstrumentmod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetInventory") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetInventory()\n```\n[client.GetInventory on questapi](https://questapi.firebaseapp.com/en/lua/client/getinventory)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetIP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetIP()\n```\n[client.GetIP on questapi](https://questapi.firebaseapp.com/en/lua/client/getip)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetItemIDAt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetItemIDAt()\n```\n[client.GetItemIDAt on questapi](https://questapi.firebaseapp.com/en/lua/client/getitemidat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetLanguageSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetLanguageSkill()\n```\n[client.GetLanguageSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/getlanguageskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetLastName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetLastName()\n```\n[client.GetLastName on questapi](https://questapi.firebaseapp.com/en/lua/client/getlastname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetLDoNLosses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetLDoNLosses()\n```\n[client.GetLDoNLosses on questapi](https://questapi.firebaseapp.com/en/lua/client/getldonlosses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetLDoNLossesTheme") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetLDoNLossesTheme()\n```\n[client.GetLDoNLossesTheme on questapi](https://questapi.firebaseapp.com/en/lua/client/getldonlossestheme)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetLDoNPointsTheme") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetLDoNPointsTheme()\n```\n[client.GetLDoNPointsTheme on questapi](https://questapi.firebaseapp.com/en/lua/client/getldonpointstheme)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetLDoNWins") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetLDoNWins()\n```\n[client.GetLDoNWins on questapi](https://questapi.firebaseapp.com/en/lua/client/getldonwins)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetLDoNWinsTheme") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetLDoNWinsTheme()\n```\n[client.GetLDoNWinsTheme on questapi](https://questapi.firebaseapp.com/en/lua/client/getldonwinstheme)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetMaxEndurance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetMaxEndurance()\n```\n[client.GetMaxEndurance on questapi](https://questapi.firebaseapp.com/en/lua/client/getmaxendurance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetModCharacterFactionLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetModCharacterFactionLevel()\n```\n[client.GetModCharacterFactionLevel on questapi](https://questapi.firebaseapp.com/en/lua/client/getmodcharacterfactionlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetMoney") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetMoney()\n```\n[client.GetMoney on questapi](https://questapi.firebaseapp.com/en/lua/client/getmoney)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetNextAvailableSpellBookSlot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetNextAvailableSpellBookSlot()\n```\n[client.GetNextAvailableSpellBookSlot on questapi](https://questapi.firebaseapp.com/en/lua/client/getnextavailablespellbookslot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetPVP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetPVP()\n```\n[client.GetPVP on questapi](https://questapi.firebaseapp.com/en/lua/client/getpvp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetPVPPoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetPVPPoints()\n```\n[client.GetPVPPoints on questapi](https://questapi.firebaseapp.com/en/lua/client/getpvppoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetRadiantCrystals") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetRadiantCrystals()\n```\n[client.GetRadiantCrystals on questapi](https://questapi.firebaseapp.com/en/lua/client/getradiantcrystals)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetRaid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetRaid()\n```\n[client.GetRaid on questapi](https://questapi.firebaseapp.com/en/lua/client/getraid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetRaidPoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetRaidPoints()\n```\n[client.GetRaidPoints on questapi](https://questapi.firebaseapp.com/en/lua/client/getraidpoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetRawItemAC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetRawItemAC()\n```\n[client.GetRawItemAC on questapi](https://questapi.firebaseapp.com/en/lua/client/getrawitemac)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetRawSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetRawSkill()\n```\n[client.GetRawSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/getrawskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetSkillPoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetSkillPoints()\n```\n[client.GetSkillPoints on questapi](https://questapi.firebaseapp.com/en/lua/client/getskillpoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetSpentAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetSpentAA()\n```\n[client.GetSpentAA on questapi](https://questapi.firebaseapp.com/en/lua/client/getspentaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetStartZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetStartZone()\n```\n[client.GetStartZone on questapi](https://questapi.firebaseapp.com/en/lua/client/getstartzone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetThirst") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetThirst()\n```\n[client.GetThirst on questapi](https://questapi.firebaseapp.com/en/lua/client/getthirst)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetTotalSecondsPlayed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetTotalSecondsPlayed()\n```\n[client.GetTotalSecondsPlayed on questapi](https://questapi.firebaseapp.com/en/lua/client/gettotalsecondsplayed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GetWeight") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GetWeight()\n```\n[client.GetWeight on questapi](https://questapi.firebaseapp.com/en/lua/client/getweight)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GoFish") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GoFish()\n```\n[client.GoFish on questapi](https://questapi.firebaseapp.com/en/lua/client/gofish)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GrantAlternateAdvancementAbility") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GrantAlternateAdvancementAbility()\n```\n[client.GrantAlternateAdvancementAbility on questapi](https://questapi.firebaseapp.com/en/lua/client/grantalternateadvancementability)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GuildID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GuildID()\n```\n[client.GuildID on questapi](https://questapi.firebaseapp.com/en/lua/client/guildid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.GuildRank") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.GuildRank()\n```\n[client.GuildRank on questapi](https://questapi.firebaseapp.com/en/lua/client/guildrank)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.HasSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.HasSkill()\n```\n[client.HasSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/hasskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.HasSpellScribed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.HasSpellScribed()\n```\n[client.HasSpellScribed on questapi](https://questapi.firebaseapp.com/en/lua/client/hasspellscribed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.HasZoneFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.HasZoneFlag()\n```\n[client.HasZoneFlag on questapi](https://questapi.firebaseapp.com/en/lua/client/haszoneflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Hungry") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Hungry()\n```\n[client.Hungry on questapi](https://questapi.firebaseapp.com/en/lua/client/hungry)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IncreaseLanguageSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IncreaseLanguageSkill()\n```\n[client.IncreaseLanguageSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/increaselanguageskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IncreaseSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IncreaseSkill()\n```\n[client.IncreaseSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/increaseskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IncrementAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IncrementAA()\n```\n[client.IncrementAA on questapi](https://questapi.firebaseapp.com/en/lua/client/incrementaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IncStats") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IncStats()\n```\n[client.IncStats on questapi](https://questapi.firebaseapp.com/en/lua/client/incstats)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.InZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.InZone()\n```\n[client.InZone on questapi](https://questapi.firebaseapp.com/en/lua/client/inzone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsCrouching") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsCrouching()\n```\n[client.IsCrouching on questapi](https://questapi.firebaseapp.com/en/lua/client/iscrouching)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsDead") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsDead()\n```\n[client.IsDead on questapi](https://questapi.firebaseapp.com/en/lua/client/isdead)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsDueling") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsDueling()\n```\n[client.IsDueling on questapi](https://questapi.firebaseapp.com/en/lua/client/isdueling)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsGrouped") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsGrouped()\n```\n[client.IsGrouped on questapi](https://questapi.firebaseapp.com/en/lua/client/isgrouped)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsLD") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsLD()\n```\n[client.IsLD on questapi](https://questapi.firebaseapp.com/en/lua/client/isld)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsMedding") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsMedding()\n```\n[client.IsMedding on questapi](https://questapi.firebaseapp.com/en/lua/client/ismedding)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsRaidGrouped") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsRaidGrouped()\n```\n[client.IsRaidGrouped on questapi](https://questapi.firebaseapp.com/en/lua/client/israidgrouped)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsSitting") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsSitting()\n```\n[client.IsSitting on questapi](https://questapi.firebaseapp.com/en/lua/client/issitting)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsStanding") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsStanding()\n```\n[client.IsStanding on questapi](https://questapi.firebaseapp.com/en/lua/client/isstanding)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsTaskActive") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsTaskActive()\n```\n[client.IsTaskActive on questapi](https://questapi.firebaseapp.com/en/lua/client/istaskactive)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsTaskActivityActive") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsTaskActivityActive()\n```\n[client.IsTaskActivityActive on questapi](https://questapi.firebaseapp.com/en/lua/client/istaskactivityactive)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.IsTaskCompleted") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.IsTaskCompleted()\n```\n[client.IsTaskCompleted on questapi](https://questapi.firebaseapp.com/en/lua/client/istaskcompleted)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.KeyRingAdd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.KeyRingAdd()\n```\n[client.KeyRingAdd on questapi](https://questapi.firebaseapp.com/en/lua/client/keyringadd)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.KeyRingCheck") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.KeyRingCheck()\n```\n[client.KeyRingCheck on questapi](https://questapi.firebaseapp.com/en/lua/client/keyringcheck)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Kick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Kick()\n```\n[client.Kick on questapi](https://questapi.firebaseapp.com/en/lua/client/kick)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.LearnRecipe") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.LearnRecipe()\n```\n[client.LearnRecipe on questapi](https://questapi.firebaseapp.com/en/lua/client/learnrecipe)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.LeaveGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.LeaveGroup()\n```\n[client.LeaveGroup on questapi](https://questapi.firebaseapp.com/en/lua/client/leavegroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MarkSingleCompassLoc") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MarkSingleCompassLoc()\n```\n[client.MarkSingleCompassLoc on questapi](https://questapi.firebaseapp.com/en/lua/client/marksinglecompassloc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MaxSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MaxSkill()\n```\n[client.MaxSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/maxskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MemmedCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MemmedCount()\n```\n[client.MemmedCount on questapi](https://questapi.firebaseapp.com/en/lua/client/memmedcount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MemSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MemSpell()\n```\n[client.MemSpell on questapi](https://questapi.firebaseapp.com/en/lua/client/memspell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MovePC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MovePC()\n```\n[client.MovePC on questapi](https://questapi.firebaseapp.com/en/lua/client/movepc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MovePCInstance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MovePCInstance()\n```\n[client.MovePCInstance on questapi](https://questapi.firebaseapp.com/en/lua/client/movepcinstance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MoveZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MoveZone()\n```\n[client.MoveZone on questapi](https://questapi.firebaseapp.com/en/lua/client/movezone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MoveZoneGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MoveZoneGroup()\n```\n[client.MoveZoneGroup on questapi](https://questapi.firebaseapp.com/en/lua/client/movezonegroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MoveZoneInstance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MoveZoneInstance()\n```\n[client.MoveZoneInstance on questapi](https://questapi.firebaseapp.com/en/lua/client/movezoneinstance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MoveZoneInstanceGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MoveZoneInstanceGroup()\n```\n[client.MoveZoneInstanceGroup on questapi](https://questapi.firebaseapp.com/en/lua/client/movezoneinstancegroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MoveZoneInstanceRaid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MoveZoneInstanceRaid()\n```\n[client.MoveZoneInstanceRaid on questapi](https://questapi.firebaseapp.com/en/lua/client/movezoneinstanceraid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.MoveZoneRaid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.MoveZoneRaid()\n```\n[client.MoveZoneRaid on questapi](https://questapi.firebaseapp.com/en/lua/client/movezoneraid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.NotifyNewTitlesAvailable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.NotifyNewTitlesAvailable()\n```\n[client.NotifyNewTitlesAvailable on questapi](https://questapi.firebaseapp.com/en/lua/client/notifynewtitlesavailable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.NukeItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.NukeItem()\n```\n[client.NukeItem on questapi](https://questapi.firebaseapp.com/en/lua/client/nukeitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.OpenLFGuildWindow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.OpenLFGuildWindow()\n```\n[client.OpenLFGuildWindow on questapi](https://questapi.firebaseapp.com/en/lua/client/openlfguildwindow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.PlayMP3") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.PlayMP3()\n```\n[client.PlayMP3 on questapi](https://questapi.firebaseapp.com/en/lua/client/playmp3)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.PushItemOnCursor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.PushItemOnCursor()\n```\n[client.PushItemOnCursor on questapi](https://questapi.firebaseapp.com/en/lua/client/pushitemoncursor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.PutItemInInventory") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.PutItemInInventory()\n```\n[client.PutItemInInventory on questapi](https://questapi.firebaseapp.com/en/lua/client/putitemininventory)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.QuestReadBook") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.QuestReadBook()\n```\n[client.QuestReadBook on questapi](https://questapi.firebaseapp.com/en/lua/client/questreadbook)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.QuestReward") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.QuestReward()\n```\n[client.QuestReward on questapi](https://questapi.firebaseapp.com/en/lua/client/questreward)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.QueuePacket") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.QueuePacket()\n```\n[client.QueuePacket on questapi](https://questapi.firebaseapp.com/en/lua/client/queuepacket)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.RefundAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.RefundAA()\n```\n[client.RefundAA on questapi](https://questapi.firebaseapp.com/en/lua/client/refundaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.ResetAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.ResetAA()\n```\n[client.ResetAA on questapi](https://questapi.firebaseapp.com/en/lua/client/resetaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.ResetDisciplineTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.ResetDisciplineTimer()\n```\n[client.ResetDisciplineTimer on questapi](https://questapi.firebaseapp.com/en/lua/client/resetdisciplinetimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.ResetTrade") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.ResetTrade()\n```\n[client.ResetTrade on questapi](https://questapi.firebaseapp.com/en/lua/client/resettrade)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Save") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Save()\n```\n[client.Save on questapi](https://questapi.firebaseapp.com/en/lua/client/save)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SaveBackup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SaveBackup()\n```\n[client.SaveBackup on questapi](https://questapi.firebaseapp.com/en/lua/client/savebackup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.ScribeSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.ScribeSpell()\n```\n[client.ScribeSpell on questapi](https://questapi.firebaseapp.com/en/lua/client/scribespell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SendColoredText") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SendColoredText()\n```\n[client.SendColoredText on questapi](https://questapi.firebaseapp.com/en/lua/client/sendcoloredtext)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SendItemScale") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SendItemScale()\n```\n[client.SendItemScale on questapi](https://questapi.firebaseapp.com/en/lua/client/senditemscale)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SendMarqueeMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SendMarqueeMessage()\n```\n[client.SendMarqueeMessage on questapi](https://questapi.firebaseapp.com/en/lua/client/sendmarqueemessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SendOPTranslocateConfirm") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SendOPTranslocateConfirm()\n```\n[client.SendOPTranslocateConfirm on questapi](https://questapi.firebaseapp.com/en/lua/client/sendoptranslocateconfirm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SendSound") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SendSound()\n```\n[client.SendSound on questapi](https://questapi.firebaseapp.com/en/lua/client/sendsound)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SendToGuildHall") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SendToGuildHall()\n```\n[client.SendToGuildHall on questapi](https://questapi.firebaseapp.com/en/lua/client/sendtoguildhall)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SendWebLink") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SendWebLink()\n```\n[client.SendWebLink on questapi](https://questapi.firebaseapp.com/en/lua/client/sendweblink)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SendZoneFlagInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SendZoneFlagInfo()\n```\n[client.SendZoneFlagInfo on questapi](https://questapi.firebaseapp.com/en/lua/client/sendzoneflaginfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetAAPoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetAAPoints()\n```\n[client.SetAAPoints on questapi](https://questapi.firebaseapp.com/en/lua/client/setaapoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetAATitle") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetAATitle()\n```\n[client.SetAATitle on questapi](https://questapi.firebaseapp.com/en/lua/client/setaatitle)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetAccountFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetAccountFlag()\n```\n[client.SetAccountFlag on questapi](https://questapi.firebaseapp.com/en/lua/client/setaccountflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetAlternateCurrencyValue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetAlternateCurrencyValue()\n```\n[client.SetAlternateCurrencyValue on questapi](https://questapi.firebaseapp.com/en/lua/client/setalternatecurrencyvalue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetBaseClass") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetBaseClass()\n```\n[client.SetBaseClass on questapi](https://questapi.firebaseapp.com/en/lua/client/setbaseclass)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetBaseGender") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetBaseGender()\n```\n[client.SetBaseGender on questapi](https://questapi.firebaseapp.com/en/lua/client/setbasegender)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetBaseRace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetBaseRace()\n```\n[client.SetBaseRace on questapi](https://questapi.firebaseapp.com/en/lua/client/setbaserace)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetBindPoint") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetBindPoint()\n```\n[client.SetBindPoint on questapi](https://questapi.firebaseapp.com/en/lua/client/setbindpoint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetClientMaxLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetClientMaxLevel()\n```\n[client.SetClientMaxLevel on questapi](https://questapi.firebaseapp.com/en/lua/client/setclientmaxlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetConsumption") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetConsumption()\n```\n[client.SetConsumption on questapi](https://questapi.firebaseapp.com/en/lua/client/setconsumption)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetDeity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetDeity()\n```\n[client.SetDeity on questapi](https://questapi.firebaseapp.com/en/lua/client/setdeity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetDueling") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetDueling()\n```\n[client.SetDueling on questapi](https://questapi.firebaseapp.com/en/lua/client/setdueling)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetDuelTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetDuelTarget()\n```\n[client.SetDuelTarget on questapi](https://questapi.firebaseapp.com/en/lua/client/setdueltarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetEndurance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetEndurance()\n```\n[client.SetEndurance on questapi](https://questapi.firebaseapp.com/en/lua/client/setendurance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetEXP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetEXP()\n```\n[client.SetEXP on questapi](https://questapi.firebaseapp.com/en/lua/client/setexp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetFactionLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetFactionLevel()\n```\n[client.SetFactionLevel on questapi](https://questapi.firebaseapp.com/en/lua/client/setfactionlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetFactionLevel2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetFactionLevel2()\n```\n[client.SetFactionLevel2 on questapi](https://questapi.firebaseapp.com/en/lua/client/setfactionlevel2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetFeigned") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetFeigned()\n```\n[client.SetFeigned on questapi](https://questapi.firebaseapp.com/en/lua/client/setfeigned)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetGM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetGM()\n```\n[client.SetGM on questapi](https://questapi.firebaseapp.com/en/lua/client/setgm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetHorseId") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetHorseId()\n```\n[client.SetHorseId on questapi](https://questapi.firebaseapp.com/en/lua/client/sethorseid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetHunger") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetHunger()\n```\n[client.SetHunger on questapi](https://questapi.firebaseapp.com/en/lua/client/sethunger)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetLanguageSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetLanguageSkill()\n```\n[client.SetLanguageSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/setlanguageskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetMaterial") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetMaterial()\n```\n[client.SetMaterial on questapi](https://questapi.firebaseapp.com/en/lua/client/setmaterial)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetPrimaryWeaponOrnamentation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetPrimaryWeaponOrnamentation()\n```\n[client.SetPrimaryWeaponOrnamentation on questapi](https://questapi.firebaseapp.com/en/lua/client/setprimaryweaponornamentation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetPVP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetPVP()\n```\n[client.SetPVP on questapi](https://questapi.firebaseapp.com/en/lua/client/setpvp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetSecondaryWeaponOrnamentation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetSecondaryWeaponOrnamentation()\n```\n[client.SetSecondaryWeaponOrnamentation on questapi](https://questapi.firebaseapp.com/en/lua/client/setsecondaryweaponornamentation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetSkill()\n```\n[client.SetSkill on questapi](https://questapi.firebaseapp.com/en/lua/client/setskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetSkillPoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetSkillPoints()\n```\n[client.SetSkillPoints on questapi](https://questapi.firebaseapp.com/en/lua/client/setskillpoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetStartZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetStartZone()\n```\n[client.SetStartZone on questapi](https://questapi.firebaseapp.com/en/lua/client/setstartzone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetStats") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetStats()\n```\n[client.SetStats on questapi](https://questapi.firebaseapp.com/en/lua/client/setstats)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetThirst") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetThirst()\n```\n[client.SetThirst on questapi](https://questapi.firebaseapp.com/en/lua/client/setthirst)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetTint") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetTint()\n```\n[client.SetTint on questapi](https://questapi.firebaseapp.com/en/lua/client/settint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetTitleSuffix") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetTitleSuffix()\n```\n[client.SetTitleSuffix on questapi](https://questapi.firebaseapp.com/en/lua/client/settitlesuffix)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SetZoneFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SetZoneFlag()\n```\n[client.SetZoneFlag on questapi](https://questapi.firebaseapp.com/en/lua/client/setzoneflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Signal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Signal()\n```\n[client.Signal on questapi](https://questapi.firebaseapp.com/en/lua/client/signal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Stand") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Stand()\n```\n[client.Stand on questapi](https://questapi.firebaseapp.com/en/lua/client/stand)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.SummonItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.SummonItem()\n```\n[client.SummonItem on questapi](https://questapi.firebaseapp.com/en/lua/client/summonitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.TakeMoneyFromPP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.TakeMoneyFromPP()\n```\n[client.TakeMoneyFromPP on questapi](https://questapi.firebaseapp.com/en/lua/client/takemoneyfrompp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.TGB") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.TGB()\n```\n[client.TGB on questapi](https://questapi.firebaseapp.com/en/lua/client/tgb)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Thirsty") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Thirsty()\n```\n[client.Thirsty on questapi](https://questapi.firebaseapp.com/en/lua/client/thirsty)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.TrainDisc") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.TrainDisc()\n```\n[client.TrainDisc on questapi](https://questapi.firebaseapp.com/en/lua/client/traindisc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.TrainDiscBySpellID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.TrainDiscBySpellID()\n```\n[client.TrainDiscBySpellID on questapi](https://questapi.firebaseapp.com/en/lua/client/traindiscbyspellid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.Undye") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.Undye()\n```\n[client.Undye on questapi](https://questapi.firebaseapp.com/en/lua/client/undye)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UnFreeze") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UnFreeze()\n```\n[client.UnFreeze on questapi](https://questapi.firebaseapp.com/en/lua/client/unfreeze)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UnmemSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UnmemSpell()\n```\n[client.UnmemSpell on questapi](https://questapi.firebaseapp.com/en/lua/client/unmemspell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UnmemSpellAll") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UnmemSpellAll()\n```\n[client.UnmemSpellAll on questapi](https://questapi.firebaseapp.com/en/lua/client/unmemspellall)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UnmemSpellBySpellID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UnmemSpellBySpellID()\n```\n[client.UnmemSpellBySpellID on questapi](https://questapi.firebaseapp.com/en/lua/client/unmemspellbyspellid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UnscribeSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UnscribeSpell()\n```\n[client.UnscribeSpell on questapi](https://questapi.firebaseapp.com/en/lua/client/unscribespell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UnscribeSpellAll") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UnscribeSpellAll()\n```\n[client.UnscribeSpellAll on questapi](https://questapi.firebaseapp.com/en/lua/client/unscribespellall)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UntrainDisc") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UntrainDisc()\n```\n[client.UntrainDisc on questapi](https://questapi.firebaseapp.com/en/lua/client/untraindisc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UntrainDiscAll") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UntrainDiscAll()\n```\n[client.UntrainDiscAll on questapi](https://questapi.firebaseapp.com/en/lua/client/untraindiscall)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UpdateGroupAAs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UpdateGroupAAs()\n```\n[client.UpdateGroupAAs on questapi](https://questapi.firebaseapp.com/en/lua/client/updategroupaas)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UpdateLDoNPoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UpdateLDoNPoints()\n```\n[client.UpdateLDoNPoints on questapi](https://questapi.firebaseapp.com/en/lua/client/updateldonpoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UpdateTaskActivity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UpdateTaskActivity()\n```\n[client.UpdateTaskActivity on questapi](https://questapi.firebaseapp.com/en/lua/client/updatetaskactivity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.UseDiscipline") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.UseDiscipline()\n```\n[client.UseDiscipline on questapi](https://questapi.firebaseapp.com/en/lua/client/usediscipline)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client.WorldKick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient.WorldKick()\n```\n[client.WorldKick on questapi](https://questapi.firebaseapp.com/en/lua/client/worldkick)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "client_list") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_list\n```\n[client_list on questapi](https://questapi.firebaseapp.com/en/lua/client_list/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client_list.Entries") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_list.Entries()\n```\n[client_list.Entries on questapi](https://questapi.firebaseapp.com/en/lua/client_list/entries)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "client_version") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_version\n```\n[client_version on questapi](https://questapi.firebaseapp.com/en/lua/client_version/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client_version.RoF") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_version.RoF\n```\n[client_version.RoF on questapi](https://questapi.firebaseapp.com/en/lua/client_version/rof)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client_version.RoF2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_version.RoF2\n```\n[client_version.RoF2 on questapi](https://questapi.firebaseapp.com/en/lua/client_version/rof2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client_version.SoD") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_version.SoD\n```\n[client_version.SoD on questapi](https://questapi.firebaseapp.com/en/lua/client_version/sod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client_version.SoF") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_version.SoF\n```\n[client_version.SoF on questapi](https://questapi.firebaseapp.com/en/lua/client_version/sof)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client_version.Titanium") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_version.Titanium\n```\n[client_version.Titanium on questapi](https://questapi.firebaseapp.com/en/lua/client_version/titanium)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client_version.UF") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_version.UF\n```\n[client_version.UF on questapi](https://questapi.firebaseapp.com/en/lua/client_version/uf)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client_version.Underfoot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_version.Underfoot\n```\n[client_version.Underfoot on questapi](https://questapi.firebaseapp.com/en/lua/client_version/underfoot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "client_version.Unknown") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nclient_version.Unknown\n```\n[client_version.Unknown on questapi](https://questapi.firebaseapp.com/en/lua/client_version/unknown)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "corpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse\n```\n[corpse on questapi](https://questapi.firebaseapp.com/en/lua/corpse/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.AddItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.AddItem()\n```\n[corpse.AddItem on questapi](https://questapi.firebaseapp.com/en/lua/corpse/additem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.AddLooter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.AddLooter()\n```\n[corpse.AddLooter on questapi](https://questapi.firebaseapp.com/en/lua/corpse/addlooter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.AllowMobLoot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.AllowMobLoot()\n```\n[corpse.AllowMobLoot on questapi](https://questapi.firebaseapp.com/en/lua/corpse/allowmobloot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.Bury") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.Bury()\n```\n[corpse.Bury on questapi](https://questapi.firebaseapp.com/en/lua/corpse/bury)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.CanMobLoot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.CanMobLoot()\n```\n[corpse.CanMobLoot on questapi](https://questapi.firebaseapp.com/en/lua/corpse/canmobloot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.CountItems") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.CountItems()\n```\n[corpse.CountItems on questapi](https://questapi.firebaseapp.com/en/lua/corpse/countitems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.Delete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.Delete()\n```\n[corpse.Delete on questapi](https://questapi.firebaseapp.com/en/lua/corpse/delete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.Depop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.Depop()\n```\n[corpse.Depop on questapi](https://questapi.firebaseapp.com/en/lua/corpse/depop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.GetCharID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.GetCharID()\n```\n[corpse.GetCharID on questapi](https://questapi.firebaseapp.com/en/lua/corpse/getcharid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.GetCopper") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.GetCopper()\n```\n[corpse.GetCopper on questapi](https://questapi.firebaseapp.com/en/lua/corpse/getcopper)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.GetDBID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.GetDBID()\n```\n[corpse.GetDBID on questapi](https://questapi.firebaseapp.com/en/lua/corpse/getdbid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.GetDecayTime") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.GetDecayTime()\n```\n[corpse.GetDecayTime on questapi](https://questapi.firebaseapp.com/en/lua/corpse/getdecaytime)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.GetGold") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.GetGold()\n```\n[corpse.GetGold on questapi](https://questapi.firebaseapp.com/en/lua/corpse/getgold)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.GetOwnerName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.GetOwnerName()\n```\n[corpse.GetOwnerName on questapi](https://questapi.firebaseapp.com/en/lua/corpse/getownername)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.GetPlatinum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.GetPlatinum()\n```\n[corpse.GetPlatinum on questapi](https://questapi.firebaseapp.com/en/lua/corpse/getplatinum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.GetSilver") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.GetSilver()\n```\n[corpse.GetSilver on questapi](https://questapi.firebaseapp.com/en/lua/corpse/getsilver)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.GetWornItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.GetWornItem()\n```\n[corpse.GetWornItem on questapi](https://questapi.firebaseapp.com/en/lua/corpse/getwornitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.IsEmpty") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.IsEmpty()\n```\n[corpse.IsEmpty on questapi](https://questapi.firebaseapp.com/en/lua/corpse/isempty)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.IsLocked") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.IsLocked()\n```\n[corpse.IsLocked on questapi](https://questapi.firebaseapp.com/en/lua/corpse/islocked)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.IsRezzed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.IsRezzed()\n```\n[corpse.IsRezzed on questapi](https://questapi.firebaseapp.com/en/lua/corpse/isrezzed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.Lock") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.Lock()\n```\n[corpse.Lock on questapi](https://questapi.firebaseapp.com/en/lua/corpse/lock)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.RemoveCash") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.RemoveCash()\n```\n[corpse.RemoveCash on questapi](https://questapi.firebaseapp.com/en/lua/corpse/removecash)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.RemoveItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.RemoveItem()\n```\n[corpse.RemoveItem on questapi](https://questapi.firebaseapp.com/en/lua/corpse/removeitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.ResetLooter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.ResetLooter()\n```\n[corpse.ResetLooter on questapi](https://questapi.firebaseapp.com/en/lua/corpse/resetlooter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.Save") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.Save()\n```\n[corpse.Save on questapi](https://questapi.firebaseapp.com/en/lua/corpse/save)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.SetCash") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.SetCash()\n```\n[corpse.SetCash on questapi](https://questapi.firebaseapp.com/en/lua/corpse/setcash)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.SetDecayTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.SetDecayTimer()\n```\n[corpse.SetDecayTimer on questapi](https://questapi.firebaseapp.com/en/lua/corpse/setdecaytimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.Summon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.Summon()\n```\n[corpse.Summon on questapi](https://questapi.firebaseapp.com/en/lua/corpse/summon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse.UnLock") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse.UnLock()\n```\n[corpse.UnLock on questapi](https://questapi.firebaseapp.com/en/lua/corpse/unlock)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "corpse_list") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse_list\n```\n[corpse_list on questapi](https://questapi.firebaseapp.com/en/lua/corpse_list/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "corpse_list.Entries") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ncorpse_list.Entries()\n```\n[corpse_list.Entries on questapi](https://questapi.firebaseapp.com/en/lua/corpse_list/entries)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "door") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor\n```\n[door on questapi](https://questapi.firebaseapp.com/en/lua/door/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.CreateDatabaseEntry") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.CreateDatabaseEntry()\n```\n[door.CreateDatabaseEntry on questapi](https://questapi.firebaseapp.com/en/lua/door/createdatabaseentry)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.ForceClose") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.ForceClose()\n```\n[door.ForceClose on questapi](https://questapi.firebaseapp.com/en/lua/door/forceclose)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.ForceOpen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.ForceOpen()\n```\n[door.ForceOpen on questapi](https://questapi.firebaseapp.com/en/lua/door/forceopen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetDisableTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetDisableTimer()\n```\n[door.GetDisableTimer on questapi](https://questapi.firebaseapp.com/en/lua/door/getdisabletimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetDoorDBID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetDoorDBID()\n```\n[door.GetDoorDBID on questapi](https://questapi.firebaseapp.com/en/lua/door/getdoordbid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetDoorID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetDoorID()\n```\n[door.GetDoorID on questapi](https://questapi.firebaseapp.com/en/lua/door/getdoorid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetDoorName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetDoorName()\n```\n[door.GetDoorName on questapi](https://questapi.firebaseapp.com/en/lua/door/getdoorname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetHeading()\n```\n[door.GetHeading on questapi](https://questapi.firebaseapp.com/en/lua/door/getheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetIncline") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetIncline()\n```\n[door.GetIncline on questapi](https://questapi.firebaseapp.com/en/lua/door/getincline)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetKeyItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetKeyItem()\n```\n[door.GetKeyItem on questapi](https://questapi.firebaseapp.com/en/lua/door/getkeyitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetLockPick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetLockPick()\n```\n[door.GetLockPick on questapi](https://questapi.firebaseapp.com/en/lua/door/getlockpick)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetNoKeyring") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetNoKeyring()\n```\n[door.GetNoKeyring on questapi](https://questapi.firebaseapp.com/en/lua/door/getnokeyring)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetOpenType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetOpenType()\n```\n[door.GetOpenType on questapi](https://questapi.firebaseapp.com/en/lua/door/getopentype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetSize()\n```\n[door.GetSize on questapi](https://questapi.firebaseapp.com/en/lua/door/getsize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetX()\n```\n[door.GetX on questapi](https://questapi.firebaseapp.com/en/lua/door/getx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetY") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetY()\n```\n[door.GetY on questapi](https://questapi.firebaseapp.com/en/lua/door/gety)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.GetZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.GetZ()\n```\n[door.GetZ on questapi](https://questapi.firebaseapp.com/en/lua/door/getz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetDisableTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetDisableTimer()\n```\n[door.SetDisableTimer on questapi](https://questapi.firebaseapp.com/en/lua/door/setdisabletimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetDoorName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetDoorName()\n```\n[door.SetDoorName on questapi](https://questapi.firebaseapp.com/en/lua/door/setdoorname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetHeading()\n```\n[door.SetHeading on questapi](https://questapi.firebaseapp.com/en/lua/door/setheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetIncline") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetIncline()\n```\n[door.SetIncline on questapi](https://questapi.firebaseapp.com/en/lua/door/setincline)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetKeyItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetKeyItem()\n```\n[door.SetKeyItem on questapi](https://questapi.firebaseapp.com/en/lua/door/setkeyitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetLocation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetLocation()\n```\n[door.SetLocation on questapi](https://questapi.firebaseapp.com/en/lua/door/setlocation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetLockPick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetLockPick()\n```\n[door.SetLockPick on questapi](https://questapi.firebaseapp.com/en/lua/door/setlockpick)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetNoKeyring") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetNoKeyring()\n```\n[door.SetNoKeyring on questapi](https://questapi.firebaseapp.com/en/lua/door/setnokeyring)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetOpenType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetOpenType()\n```\n[door.SetOpenType on questapi](https://questapi.firebaseapp.com/en/lua/door/setopentype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetSize()\n```\n[door.SetSize on questapi](https://questapi.firebaseapp.com/en/lua/door/setsize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetX()\n```\n[door.SetX on questapi](https://questapi.firebaseapp.com/en/lua/door/setx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetY") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetY()\n```\n[door.SetY on questapi](https://questapi.firebaseapp.com/en/lua/door/sety)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door.SetZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor.SetZ()\n```\n[door.SetZ on questapi](https://questapi.firebaseapp.com/en/lua/door/setz)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "door_list") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor_list\n```\n[door_list on questapi](https://questapi.firebaseapp.com/en/lua/door_list/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "door_list.Entries") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ndoor_list.Entries()\n```\n[door_list.Entries on questapi](https://questapi.firebaseapp.com/en/lua/door_list/entries)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "entity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity\n```\n[entity on questapi](https://questapi.firebaseapp.com/en/lua/entity/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.CastToClient") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.CastToClient()\n```\n[entity.CastToClient on questapi](https://questapi.firebaseapp.com/en/lua/entity/casttoclient)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.CastToCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.CastToCorpse()\n```\n[entity.CastToCorpse on questapi](https://questapi.firebaseapp.com/en/lua/entity/casttocorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.CastToDoor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.CastToDoor()\n```\n[entity.CastToDoor on questapi](https://questapi.firebaseapp.com/en/lua/entity/casttodoor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.CastToMob") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.CastToMob()\n```\n[entity.CastToMob on questapi](https://questapi.firebaseapp.com/en/lua/entity/casttomob)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.CastToNPC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.CastToNPC()\n```\n[entity.CastToNPC on questapi](https://questapi.firebaseapp.com/en/lua/entity/casttonpc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.CastToObject") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.CastToObject()\n```\n[entity.CastToObject on questapi](https://questapi.firebaseapp.com/en/lua/entity/casttoobject)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.GetID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.GetID()\n```\n[entity.GetID on questapi](https://questapi.firebaseapp.com/en/lua/entity/getid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsBeacon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsBeacon()\n```\n[entity.IsBeacon on questapi](https://questapi.firebaseapp.com/en/lua/entity/isbeacon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsBot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsBot()\n```\n[entity.IsBot on questapi](https://questapi.firebaseapp.com/en/lua/entity/isbot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsClient") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsClient()\n```\n[entity.IsClient on questapi](https://questapi.firebaseapp.com/en/lua/entity/isclient)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsCorpse()\n```\n[entity.IsCorpse on questapi](https://questapi.firebaseapp.com/en/lua/entity/iscorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsDoor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsDoor()\n```\n[entity.IsDoor on questapi](https://questapi.firebaseapp.com/en/lua/entity/isdoor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsEncounter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsEncounter()\n```\n[entity.IsEncounter on questapi](https://questapi.firebaseapp.com/en/lua/entity/isencounter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsMerc") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsMerc()\n```\n[entity.IsMerc on questapi](https://questapi.firebaseapp.com/en/lua/entity/ismerc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsMob") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsMob()\n```\n[entity.IsMob on questapi](https://questapi.firebaseapp.com/en/lua/entity/ismob)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsNPC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsNPC()\n```\n[entity.IsNPC on questapi](https://questapi.firebaseapp.com/en/lua/entity/isnpc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsNPCCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsNPCCorpse()\n```\n[entity.IsNPCCorpse on questapi](https://questapi.firebaseapp.com/en/lua/entity/isnpccorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsObject") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsObject()\n```\n[entity.IsObject on questapi](https://questapi.firebaseapp.com/en/lua/entity/isobject)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsPlayerCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsPlayerCorpse()\n```\n[entity.IsPlayerCorpse on questapi](https://questapi.firebaseapp.com/en/lua/entity/isplayercorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity.IsTrap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity.IsTrap()\n```\n[entity.IsTrap on questapi](https://questapi.firebaseapp.com/en/lua/entity/istrap)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "entity_list") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list\n```\n[entity_list on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.CanAddHateForMob") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.CanAddHateForMob()\n```\n[entity_list.CanAddHateForMob on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/canaddhateformob)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.ChannelMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.ChannelMessage()\n```\n[entity_list.ChannelMessage on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/channelmessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.ClearClientPetitionQueue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.ClearClientPetitionQueue()\n```\n[entity_list.ClearClientPetitionQueue on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/clearclientpetitionqueue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.ClearFeignAggro") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.ClearFeignAggro()\n```\n[entity_list.ClearFeignAggro on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/clearfeignaggro)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.DeleteNPCCorpses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.DeleteNPCCorpses()\n```\n[entity_list.DeleteNPCCorpses on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/deletenpccorpses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.DeletePlayerCorpses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.DeletePlayerCorpses()\n```\n[entity_list.DeletePlayerCorpses on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/deleteplayercorpses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.DoubleAggro") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.DoubleAggro()\n```\n[entity_list.DoubleAggro on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/doubleaggro)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.Fighting") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.Fighting()\n```\n[entity_list.Fighting on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/fighting)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.FilteredMessageClose") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.FilteredMessageClose()\n```\n[entity_list.FilteredMessageClose on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/filteredmessageclose)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.FindDoor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.FindDoor()\n```\n[entity_list.FindDoor on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/finddoor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetClientByAccID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetClientByAccID()\n```\n[entity_list.GetClientByAccID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getclientbyaccid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetClientByCharID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetClientByCharID()\n```\n[entity_list.GetClientByCharID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getclientbycharid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetClientByID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetClientByID()\n```\n[entity_list.GetClientByID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getclientbyid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetClientByName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetClientByName()\n```\n[entity_list.GetClientByName on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getclientbyname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetClientByWID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetClientByWID()\n```\n[entity_list.GetClientByWID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getclientbywid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetClientList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetClientList()\n```\n[entity_list.GetClientList on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getclientlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetCorpseByID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetCorpseByID()\n```\n[entity_list.GetCorpseByID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getcorpsebyid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetCorpseByName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetCorpseByName()\n```\n[entity_list.GetCorpseByName on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getcorpsebyname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetCorpseByOwner") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetCorpseByOwner()\n```\n[entity_list.GetCorpseByOwner on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getcorpsebyowner)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetCorpseList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetCorpseList()\n```\n[entity_list.GetCorpseList on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getcorpselist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetDoorsByDBID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetDoorsByDBID()\n```\n[entity_list.GetDoorsByDBID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getdoorsbydbid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetDoorsByDoorID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetDoorsByDoorID()\n```\n[entity_list.GetDoorsByDoorID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getdoorsbydoorid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetDoorsByID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetDoorsByID()\n```\n[entity_list.GetDoorsByID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getdoorsbyid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetDoorsList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetDoorsList()\n```\n[entity_list.GetDoorsList on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getdoorslist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetGroupByClient") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetGroupByClient()\n```\n[entity_list.GetGroupByClient on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getgroupbyclient)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetGroupByID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetGroupByID()\n```\n[entity_list.GetGroupByID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getgroupbyid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetGroupByLeaderName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetGroupByLeaderName()\n```\n[entity_list.GetGroupByLeaderName on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getgroupbyleadername)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetGroupByMob") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetGroupByMob()\n```\n[entity_list.GetGroupByMob on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getgroupbymob)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetMob") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetMob()\n```\n[entity_list.GetMob on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getmob)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetMobByNpcTypeID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetMobByNpcTypeID()\n```\n[entity_list.GetMobByNpcTypeID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getmobbynpctypeid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetMobID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetMobID()\n```\n[entity_list.GetMobID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getmobid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetMobList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetMobList()\n```\n[entity_list.GetMobList on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getmoblist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetNPCByID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetNPCByID()\n```\n[entity_list.GetNPCByID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getnpcbyid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetNPCByNPCTypeID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetNPCByNPCTypeID()\n```\n[entity_list.GetNPCByNPCTypeID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getnpcbynpctypeid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetNPCBySpawnID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetNPCBySpawnID()\n```\n[entity_list.GetNPCBySpawnID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getnpcbyspawnid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetNPCList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetNPCList()\n```\n[entity_list.GetNPCList on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getnpclist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetObjectByDBID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetObjectByDBID()\n```\n[entity_list.GetObjectByDBID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getobjectbydbid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetObjectByID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetObjectByID()\n```\n[entity_list.GetObjectByID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getobjectbyid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetObjectList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetObjectList()\n```\n[entity_list.GetObjectList on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getobjectlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetRaidByClient") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetRaidByClient()\n```\n[entity_list.GetRaidByClient on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getraidbyclient)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetRaidByID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetRaidByID()\n```\n[entity_list.GetRaidByID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getraidbyid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetRandomClient") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetRandomClient()\n```\n[entity_list.GetRandomClient on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getrandomclient)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetShuffledClientList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetShuffledClientList()\n```\n[entity_list.GetShuffledClientList on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getshuffledclientlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetSpawnByID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetSpawnByID()\n```\n[entity_list.GetSpawnByID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getspawnbyid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.GetSpawnList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.GetSpawnList()\n```\n[entity_list.GetSpawnList on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/getspawnlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.HalveAggro") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.HalveAggro()\n```\n[entity_list.HalveAggro on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/halveaggro)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.IsMobSpawnedByNpcTypeID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.IsMobSpawnedByNpcTypeID()\n```\n[entity_list.IsMobSpawnedByNpcTypeID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/ismobspawnedbynpctypeid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.MakeNameUnique") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.MakeNameUnique()\n```\n[entity_list.MakeNameUnique on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/makenameunique)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.Message") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.Message()\n```\n[entity_list.Message on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/message)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.MessageClose") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.MessageClose()\n```\n[entity_list.MessageClose on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/messageclose)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.MessageGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.MessageGroup()\n```\n[entity_list.MessageGroup on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/messagegroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.MessageStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.MessageStatus()\n```\n[entity_list.MessageStatus on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/messagestatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.OpenDoorsNear") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.OpenDoorsNear()\n```\n[entity_list.OpenDoorsNear on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/opendoorsnear)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.RemoveFromHateLists") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.RemoveFromHateLists()\n```\n[entity_list.RemoveFromHateLists on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/removefromhatelists)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.RemoveFromTargets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.RemoveFromTargets()\n```\n[entity_list.RemoveFromTargets on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/removefromtargets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.RemoveNumbers") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.RemoveNumbers()\n```\n[entity_list.RemoveNumbers on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/removenumbers)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.ReplaceWithTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.ReplaceWithTarget()\n```\n[entity_list.ReplaceWithTarget on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/replacewithtarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.SignalAllClients") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.SignalAllClients()\n```\n[entity_list.SignalAllClients on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/signalallclients)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "entity_list.SignalMobsByNPCID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nentity_list.SignalMobsByNPCID()\n```\n[entity_list.SignalMobsByNPCID on questapi](https://questapi.firebaseapp.com/en/lua/entity_list/signalmobsbynpcid)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "eq") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq\n```\n[eq on questapi](https://questapi.firebaseapp.com/en/lua/eq/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.active_speak_activity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.active_speak_activity()\n```\n[eq.active_speak_activity on questapi](https://questapi.firebaseapp.com/en/lua/eq/active_speak_activity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.active_speak_task") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.active_speak_task()\n```\n[eq.active_speak_task on questapi](https://questapi.firebaseapp.com/en/lua/eq/active_speak_task)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.active_tasks_in_set") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.active_tasks_in_set()\n```\n[eq.active_tasks_in_set on questapi](https://questapi.firebaseapp.com/en/lua/eq/active_tasks_in_set)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.add_area") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.add_area()\n```\n[eq.add_area on questapi](https://questapi.firebaseapp.com/en/lua/eq/add_area)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.assign_group_to_instance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.assign_group_to_instance()\n```\n[eq.assign_group_to_instance on questapi](https://questapi.firebaseapp.com/en/lua/eq/assign_group_to_instance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.assign_raid_to_instance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.assign_raid_to_instance()\n```\n[eq.assign_raid_to_instance on questapi](https://questapi.firebaseapp.com/en/lua/eq/assign_raid_to_instance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.assign_task") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.assign_task()\n```\n[eq.assign_task on questapi](https://questapi.firebaseapp.com/en/lua/eq/assign_task)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.assign_to_instance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.assign_to_instance()\n```\n[eq.assign_to_instance on questapi](https://questapi.firebaseapp.com/en/lua/eq/assign_to_instance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.assign_to_instance_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.assign_to_instance_by_char_id()\n```\n[eq.assign_to_instance_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/assign_to_instance_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.attack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.attack()\n```\n[eq.attack on questapi](https://questapi.firebaseapp.com/en/lua/eq/attack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.attack_npc") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.attack_npc()\n```\n[eq.attack_npc on questapi](https://questapi.firebaseapp.com/en/lua/eq/attack_npc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.attack_npc_type") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.attack_npc_type()\n```\n[eq.attack_npc_type on questapi](https://questapi.firebaseapp.com/en/lua/eq/attack_npc_type)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.bury_player_corpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.bury_player_corpse()\n```\n[eq.bury_player_corpse on questapi](https://questapi.firebaseapp.com/en/lua/eq/bury_player_corpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.check_instance_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.check_instance_by_char_id()\n```\n[eq.check_instance_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/check_instance_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.check_title") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.check_title()\n```\n[eq.check_title on questapi](https://questapi.firebaseapp.com/en/lua/eq/check_title)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.clear_areas") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.clear_areas()\n```\n[eq.clear_areas on questapi](https://questapi.firebaseapp.com/en/lua/eq/clear_areas)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.clear_npctype_cache") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.clear_npctype_cache()\n```\n[eq.clear_npctype_cache on questapi](https://questapi.firebaseapp.com/en/lua/eq/clear_npctype_cache)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.clear_opcode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.clear_opcode()\n```\n[eq.clear_opcode on questapi](https://questapi.firebaseapp.com/en/lua/eq/clear_opcode)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.clear_proximity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.clear_proximity()\n```\n[eq.clear_proximity on questapi](https://questapi.firebaseapp.com/en/lua/eq/clear_proximity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.clear_spawn_timers") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.clear_spawn_timers()\n```\n[eq.clear_spawn_timers on questapi](https://questapi.firebaseapp.com/en/lua/eq/clear_spawn_timers)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.clock") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.clock()\n```\n[eq.clock on questapi](https://questapi.firebaseapp.com/en/lua/eq/clock)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.collect_items") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.collect_items()\n```\n[eq.collect_items on questapi](https://questapi.firebaseapp.com/en/lua/eq/collect_items)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.completed_tasks_in_set") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.completed_tasks_in_set()\n```\n[eq.completed_tasks_in_set on questapi](https://questapi.firebaseapp.com/en/lua/eq/completed_tasks_in_set)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.count_item") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.count_item()\n```\n[eq.count_item on questapi](https://questapi.firebaseapp.com/en/lua/eq/count_item)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.create_door") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.create_door()\n```\n[eq.create_door on questapi](https://questapi.firebaseapp.com/en/lua/eq/create_door)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.create_ground_object") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.create_ground_object()\n```\n[eq.create_ground_object on questapi](https://questapi.firebaseapp.com/en/lua/eq/create_ground_object)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.create_ground_object_from_model") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.create_ground_object_from_model()\n```\n[eq.create_ground_object_from_model on questapi](https://questapi.firebaseapp.com/en/lua/eq/create_ground_object_from_model)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.create_guild") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.create_guild()\n```\n[eq.create_guild on questapi](https://questapi.firebaseapp.com/en/lua/eq/create_guild)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.create_instance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.create_instance()\n```\n[eq.create_instance on questapi](https://questapi.firebaseapp.com/en/lua/eq/create_instance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_assign_task_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_assign_task_by_char_id()\n```\n[eq.cross_zone_assign_task_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_assign_task_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_assign_task_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_assign_task_by_group_id()\n```\n[eq.cross_zone_assign_task_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_assign_task_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_assign_task_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_assign_task_by_guild_id()\n```\n[eq.cross_zone_assign_task_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_assign_task_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_assign_task_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_assign_task_by_raid_id()\n```\n[eq.cross_zone_assign_task_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_assign_task_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_cast_spell_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_cast_spell_by_char_id()\n```\n[eq.cross_zone_cast_spell_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_cast_spell_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_cast_spell_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_cast_spell_by_group_id()\n```\n[eq.cross_zone_cast_spell_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_cast_spell_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_cast_spell_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_cast_spell_by_guild_id()\n```\n[eq.cross_zone_cast_spell_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_cast_spell_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_cast_spell_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_cast_spell_by_raid_id()\n```\n[eq.cross_zone_cast_spell_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_cast_spell_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_disable_task_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_disable_task_by_char_id()\n```\n[eq.cross_zone_disable_task_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_disable_task_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_disable_task_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_disable_task_by_group_id()\n```\n[eq.cross_zone_disable_task_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_disable_task_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_disable_task_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_disable_task_by_guild_id()\n```\n[eq.cross_zone_disable_task_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_disable_task_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_disable_task_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_disable_task_by_raid_id()\n```\n[eq.cross_zone_disable_task_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_disable_task_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_enable_task_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_enable_task_by_char_id()\n```\n[eq.cross_zone_enable_task_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_enable_task_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_enable_task_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_enable_task_by_group_id()\n```\n[eq.cross_zone_enable_task_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_enable_task_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_enable_task_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_enable_task_by_guild_id()\n```\n[eq.cross_zone_enable_task_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_enable_task_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_enable_task_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_enable_task_by_raid_id()\n```\n[eq.cross_zone_enable_task_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_enable_task_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_fail_task_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_fail_task_by_char_id()\n```\n[eq.cross_zone_fail_task_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_fail_task_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_fail_task_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_fail_task_by_group_id()\n```\n[eq.cross_zone_fail_task_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_fail_task_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_fail_task_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_fail_task_by_guild_id()\n```\n[eq.cross_zone_fail_task_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_fail_task_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_fail_task_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_fail_task_by_raid_id()\n```\n[eq.cross_zone_fail_task_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_fail_task_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_marquee_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_marquee_by_char_id()\n```\n[eq.cross_zone_marquee_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_marquee_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_marquee_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_marquee_by_group_id()\n```\n[eq.cross_zone_marquee_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_marquee_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_marquee_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_marquee_by_guild_id()\n```\n[eq.cross_zone_marquee_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_marquee_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_marquee_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_marquee_by_raid_id()\n```\n[eq.cross_zone_marquee_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_marquee_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_message_player_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_message_player_by_group_id()\n```\n[eq.cross_zone_message_player_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_message_player_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_message_player_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_message_player_by_guild_id()\n```\n[eq.cross_zone_message_player_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_message_player_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_message_player_by_name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_message_player_by_name()\n```\n[eq.cross_zone_message_player_by_name on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_message_player_by_name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_message_player_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_message_player_by_raid_id()\n```\n[eq.cross_zone_message_player_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_message_player_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_move_instance_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_move_instance_by_char_id()\n```\n[eq.cross_zone_move_instance_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_move_instance_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_move_instance_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_move_instance_by_group_id()\n```\n[eq.cross_zone_move_instance_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_move_instance_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_move_instance_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_move_instance_by_guild_id()\n```\n[eq.cross_zone_move_instance_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_move_instance_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_move_instance_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_move_instance_by_raid_id()\n```\n[eq.cross_zone_move_instance_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_move_instance_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_move_player_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_move_player_by_char_id()\n```\n[eq.cross_zone_move_player_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_move_player_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_move_player_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_move_player_by_group_id()\n```\n[eq.cross_zone_move_player_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_move_player_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_move_player_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_move_player_by_guild_id()\n```\n[eq.cross_zone_move_player_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_move_player_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_move_player_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_move_player_by_raid_id()\n```\n[eq.cross_zone_move_player_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_move_player_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_remove_spell_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_remove_spell_by_char_id()\n```\n[eq.cross_zone_remove_spell_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_remove_spell_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_remove_spell_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_remove_spell_by_group_id()\n```\n[eq.cross_zone_remove_spell_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_remove_spell_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_remove_spell_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_remove_spell_by_guild_id()\n```\n[eq.cross_zone_remove_spell_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_remove_spell_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_remove_spell_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_remove_spell_by_raid_id()\n```\n[eq.cross_zone_remove_spell_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_remove_spell_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_remove_task_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_remove_task_by_char_id()\n```\n[eq.cross_zone_remove_task_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_remove_task_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_remove_task_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_remove_task_by_group_id()\n```\n[eq.cross_zone_remove_task_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_remove_task_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_remove_task_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_remove_task_by_guild_id()\n```\n[eq.cross_zone_remove_task_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_remove_task_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_remove_task_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_remove_task_by_raid_id()\n```\n[eq.cross_zone_remove_task_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_remove_task_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_reset_activity_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_reset_activity_by_char_id()\n```\n[eq.cross_zone_reset_activity_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_reset_activity_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_reset_activity_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_reset_activity_by_group_id()\n```\n[eq.cross_zone_reset_activity_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_reset_activity_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_reset_activity_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_reset_activity_by_guild_id()\n```\n[eq.cross_zone_reset_activity_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_reset_activity_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_reset_activity_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_reset_activity_by_raid_id()\n```\n[eq.cross_zone_reset_activity_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_reset_activity_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_set_entity_variable_by_client_name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_set_entity_variable_by_client_name()\n```\n[eq.cross_zone_set_entity_variable_by_client_name on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_set_entity_variable_by_client_name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_set_entity_variable_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_set_entity_variable_by_group_id()\n```\n[eq.cross_zone_set_entity_variable_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_set_entity_variable_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_set_entity_variable_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_set_entity_variable_by_guild_id()\n```\n[eq.cross_zone_set_entity_variable_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_set_entity_variable_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_set_entity_variable_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_set_entity_variable_by_raid_id()\n```\n[eq.cross_zone_set_entity_variable_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_set_entity_variable_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_signal_client_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_signal_client_by_char_id()\n```\n[eq.cross_zone_signal_client_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_signal_client_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_signal_client_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_signal_client_by_group_id()\n```\n[eq.cross_zone_signal_client_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_signal_client_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_signal_client_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_signal_client_by_guild_id()\n```\n[eq.cross_zone_signal_client_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_signal_client_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_signal_client_by_name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_signal_client_by_name()\n```\n[eq.cross_zone_signal_client_by_name on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_signal_client_by_name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_signal_client_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_signal_client_by_raid_id()\n```\n[eq.cross_zone_signal_client_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_signal_client_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_signal_npc_by_npctype_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_signal_npc_by_npctype_id()\n```\n[eq.cross_zone_signal_npc_by_npctype_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_signal_npc_by_npctype_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_update_activity_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_update_activity_by_char_id()\n```\n[eq.cross_zone_update_activity_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_update_activity_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_update_activity_by_group_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_update_activity_by_group_id()\n```\n[eq.cross_zone_update_activity_by_group_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_update_activity_by_group_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_update_activity_by_guild_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_update_activity_by_guild_id()\n```\n[eq.cross_zone_update_activity_by_guild_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_update_activity_by_guild_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.cross_zone_update_activity_by_raid_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.cross_zone_update_activity_by_raid_id()\n```\n[eq.cross_zone_update_activity_by_raid_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/cross_zone_update_activity_by_raid_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.debug") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.debug()\n```\n[eq.debug on questapi](https://questapi.firebaseapp.com/en/lua/eq/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.delete_global") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.delete_global()\n```\n[eq.delete_global on questapi](https://questapi.firebaseapp.com/en/lua/eq/delete_global)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.depop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.depop()\n```\n[eq.depop on questapi](https://questapi.firebaseapp.com/en/lua/eq/depop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.depop_all") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.depop_all()\n```\n[eq.depop_all on questapi](https://questapi.firebaseapp.com/en/lua/eq/depop_all)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.depop_with_timer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.depop_with_timer()\n```\n[eq.depop_with_timer on questapi](https://questapi.firebaseapp.com/en/lua/eq/depop_with_timer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.depop_zone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.depop_zone()\n```\n[eq.depop_zone on questapi](https://questapi.firebaseapp.com/en/lua/eq/depop_zone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.destroy_instance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.destroy_instance()\n```\n[eq.destroy_instance on questapi](https://questapi.firebaseapp.com/en/lua/eq/destroy_instance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.disable_proximity_say") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.disable_proximity_say()\n```\n[eq.disable_proximity_say on questapi](https://questapi.firebaseapp.com/en/lua/eq/disable_proximity_say)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.disable_recipe") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.disable_recipe()\n```\n[eq.disable_recipe on questapi](https://questapi.firebaseapp.com/en/lua/eq/disable_recipe)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.enable_proximity_say") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.enable_proximity_say()\n```\n[eq.enable_proximity_say on questapi](https://questapi.firebaseapp.com/en/lua/eq/enable_proximity_say)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.enable_recipe") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.enable_recipe()\n```\n[eq.enable_recipe on questapi](https://questapi.firebaseapp.com/en/lua/eq/enable_recipe)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.enable_title") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.enable_title()\n```\n[eq.enable_title on questapi](https://questapi.firebaseapp.com/en/lua/eq/enable_title)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.enabled_task_count") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.enabled_task_count()\n```\n[eq.enabled_task_count on questapi](https://questapi.firebaseapp.com/en/lua/eq/enabled_task_count)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.faction_value") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.faction_value()\n```\n[eq.faction_value on questapi](https://questapi.firebaseapp.com/en/lua/eq/faction_value)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.fail_task") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.fail_task()\n```\n[eq.fail_task on questapi](https://questapi.firebaseapp.com/en/lua/eq/fail_task)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.first_task_in_set") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.first_task_in_set()\n```\n[eq.first_task_in_set on questapi](https://questapi.firebaseapp.com/en/lua/eq/first_task_in_set)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.flag_instance_by_group_leader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.flag_instance_by_group_leader()\n```\n[eq.flag_instance_by_group_leader on questapi](https://questapi.firebaseapp.com/en/lua/eq/flag_instance_by_group_leader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.flag_instance_by_raid_leader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.flag_instance_by_raid_leader()\n```\n[eq.flag_instance_by_raid_leader on questapi](https://questapi.firebaseapp.com/en/lua/eq/flag_instance_by_raid_leader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.fly_mode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.fly_mode()\n```\n[eq.fly_mode on questapi](https://questapi.firebaseapp.com/en/lua/eq/fly_mode)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.follow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.follow()\n```\n[eq.follow on questapi](https://questapi.firebaseapp.com/en/lua/eq/follow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_char_id_by_name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_char_id_by_name()\n```\n[eq.get_char_id_by_name on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_char_id_by_name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_characters_in_instance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_characters_in_instance()\n```\n[eq.get_characters_in_instance on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_characters_in_instance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_class_name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_class_name()\n```\n[eq.get_class_name on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_class_name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_currency_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_currency_id()\n```\n[eq.get_currency_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_currency_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_currency_item_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_currency_item_id()\n```\n[eq.get_currency_item_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_currency_item_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_data") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_data()\n```\n[eq.get_data on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_data)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_encounter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_encounter()\n```\n[eq.get_encounter on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_encounter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_entity_list") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_entity_list()\n```\n[eq.get_entity_list on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_entity_list)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_group_id_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_group_id_by_char_id()\n```\n[eq.get_group_id_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_group_id_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_guild_id_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_guild_id_by_char_id()\n```\n[eq.get_guild_id_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_guild_id_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_initiator") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_initiator()\n```\n[eq.get_initiator on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_initiator)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_instance_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_instance_id()\n```\n[eq.get_instance_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_instance_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_instance_id_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_instance_id_by_char_id()\n```\n[eq.get_instance_id_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_instance_id_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_instance_timer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_instance_timer()\n```\n[eq.get_instance_timer on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_instance_timer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_instance_timer_by_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_instance_timer_by_id()\n```\n[eq.get_instance_timer_by_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_instance_timer_by_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_item_name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_item_name()\n```\n[eq.get_item_name on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_item_name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_level") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_level()\n```\n[eq.get_level on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_level)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_owner") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_owner()\n```\n[eq.get_owner on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_owner)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_player_buried_corpse_count") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_player_buried_corpse_count()\n```\n[eq.get_player_buried_corpse_count on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_player_buried_corpse_count)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_player_corpse_count") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_player_corpse_count()\n```\n[eq.get_player_corpse_count on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_player_corpse_count)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_player_corpse_count_by_zone_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_player_corpse_count_by_zone_id()\n```\n[eq.get_player_corpse_count_by_zone_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_player_corpse_count_by_zone_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_qglobals") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_qglobals()\n```\n[eq.get_qglobals on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_qglobals)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_quest_item") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_quest_item()\n```\n[eq.get_quest_item on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_quest_item)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_race_name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_race_name()\n```\n[eq.get_race_name on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_race_name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_raid_id_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_raid_id_by_char_id()\n```\n[eq.get_raid_id_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_raid_id_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_skill_name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_skill_name()\n```\n[eq.get_skill_name on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_skill_name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_spawn_condition") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_spawn_condition()\n```\n[eq.get_spawn_condition on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_spawn_condition)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_spell_name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_spell_name()\n```\n[eq.get_spell_name on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_spell_name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_task_activity_done_count") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_task_activity_done_count()\n```\n[eq.get_task_activity_done_count on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_task_activity_done_count)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_task_name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_task_name()\n```\n[eq.get_task_name on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_task_name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_zone_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_zone_id()\n```\n[eq.get_zone_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_zone_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_zone_instance_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_zone_instance_id()\n```\n[eq.get_zone_instance_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_zone_instance_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_zone_instance_version") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_zone_instance_version()\n```\n[eq.get_zone_instance_version on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_zone_instance_version)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_zone_time") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_zone_time()\n```\n[eq.get_zone_time on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_zone_time)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.get_zone_weather") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.get_zone_weather()\n```\n[eq.get_zone_weather on questapi](https://questapi.firebaseapp.com/en/lua/eq/get_zone_weather)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_call_of_the_forsaken_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_call_of_the_forsaken_enabled()\n```\n[eq.is_call_of_the_forsaken_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_call_of_the_forsaken_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_classic_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_classic_enabled()\n```\n[eq.is_classic_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_classic_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_call_of_the_forsaken") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_call_of_the_forsaken()\n```\n[eq.is_current_expansion_call_of_the_forsaken on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_call_of_the_forsaken)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_classic") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_classic()\n```\n[eq.is_current_expansion_classic on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_classic)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_depths_of_darkhollow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_depths_of_darkhollow()\n```\n[eq.is_current_expansion_depths_of_darkhollow on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_depths_of_darkhollow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_dragons_of_norrath") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_dragons_of_norrath()\n```\n[eq.is_current_expansion_dragons_of_norrath on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_dragons_of_norrath)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_empires_of_kunark") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_empires_of_kunark()\n```\n[eq.is_current_expansion_empires_of_kunark on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_empires_of_kunark)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_gates_of_discord") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_gates_of_discord()\n```\n[eq.is_current_expansion_gates_of_discord on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_gates_of_discord)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_house_of_thule") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_house_of_thule()\n```\n[eq.is_current_expansion_house_of_thule on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_house_of_thule)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_lost_dungeons_of_norrath") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_lost_dungeons_of_norrath()\n```\n[eq.is_current_expansion_lost_dungeons_of_norrath on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_lost_dungeons_of_norrath)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_omens_of_war") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_omens_of_war()\n```\n[eq.is_current_expansion_omens_of_war on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_omens_of_war)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_prophecy_of_ro") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_prophecy_of_ro()\n```\n[eq.is_current_expansion_prophecy_of_ro on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_prophecy_of_ro)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_rain_of_fear") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_rain_of_fear()\n```\n[eq.is_current_expansion_rain_of_fear on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_rain_of_fear)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_ring_of_scale") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_ring_of_scale()\n```\n[eq.is_current_expansion_ring_of_scale on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_ring_of_scale)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_secrets_of_faydwer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_secrets_of_faydwer()\n```\n[eq.is_current_expansion_secrets_of_faydwer on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_secrets_of_faydwer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_seeds_of_destruction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_seeds_of_destruction()\n```\n[eq.is_current_expansion_seeds_of_destruction on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_seeds_of_destruction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_the_broken_mirror") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_the_broken_mirror()\n```\n[eq.is_current_expansion_the_broken_mirror on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_the_broken_mirror)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_the_buried_sea") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_the_buried_sea()\n```\n[eq.is_current_expansion_the_buried_sea on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_the_buried_sea)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_the_burning_lands") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_the_burning_lands()\n```\n[eq.is_current_expansion_the_burning_lands on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_the_burning_lands)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_the_darkend_sea") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_the_darkend_sea()\n```\n[eq.is_current_expansion_the_darkend_sea on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_the_darkend_sea)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_the_legacy_of_ykesha") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_the_legacy_of_ykesha()\n```\n[eq.is_current_expansion_the_legacy_of_ykesha on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_the_legacy_of_ykesha)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_the_planes_of_power") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_the_planes_of_power()\n```\n[eq.is_current_expansion_the_planes_of_power on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_the_planes_of_power)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_the_ruins_of_kunark") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_the_ruins_of_kunark()\n```\n[eq.is_current_expansion_the_ruins_of_kunark on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_the_ruins_of_kunark)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_the_scars_of_velious") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_the_scars_of_velious()\n```\n[eq.is_current_expansion_the_scars_of_velious on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_the_scars_of_velious)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_the_serpents_spine") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_the_serpents_spine()\n```\n[eq.is_current_expansion_the_serpents_spine on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_the_serpents_spine)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_the_shadows_of_luclin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_the_shadows_of_luclin()\n```\n[eq.is_current_expansion_the_shadows_of_luclin on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_the_shadows_of_luclin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_torment_of_velious") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_torment_of_velious()\n```\n[eq.is_current_expansion_torment_of_velious on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_torment_of_velious)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_underfoot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_underfoot()\n```\n[eq.is_current_expansion_underfoot on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_underfoot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_current_expansion_veil_of_alaris") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_current_expansion_veil_of_alaris()\n```\n[eq.is_current_expansion_veil_of_alaris on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_current_expansion_veil_of_alaris)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_depths_of_darkhollow_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_depths_of_darkhollow_enabled()\n```\n[eq.is_depths_of_darkhollow_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_depths_of_darkhollow_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_disc_tome") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_disc_tome()\n```\n[eq.is_disc_tome on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_disc_tome)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_dragons_of_norrath_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_dragons_of_norrath_enabled()\n```\n[eq.is_dragons_of_norrath_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_dragons_of_norrath_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_empires_of_kunark_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_empires_of_kunark_enabled()\n```\n[eq.is_empires_of_kunark_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_empires_of_kunark_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_gates_of_discord_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_gates_of_discord_enabled()\n```\n[eq.is_gates_of_discord_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_gates_of_discord_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_house_of_thule_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_house_of_thule_enabled()\n```\n[eq.is_house_of_thule_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_house_of_thule_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_lost_dungeons_of_norrath_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_lost_dungeons_of_norrath_enabled()\n```\n[eq.is_lost_dungeons_of_norrath_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_lost_dungeons_of_norrath_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_omens_of_war_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_omens_of_war_enabled()\n```\n[eq.is_omens_of_war_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_omens_of_war_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_paused_timer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_paused_timer()\n```\n[eq.is_paused_timer on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_paused_timer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_prophecy_of_ro_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_prophecy_of_ro_enabled()\n```\n[eq.is_prophecy_of_ro_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_prophecy_of_ro_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_rain_of_fear_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_rain_of_fear_enabled()\n```\n[eq.is_rain_of_fear_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_rain_of_fear_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_ring_of_scale_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_ring_of_scale_enabled()\n```\n[eq.is_ring_of_scale_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_ring_of_scale_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_secrets_of_faydwer_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_secrets_of_faydwer_enabled()\n```\n[eq.is_secrets_of_faydwer_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_secrets_of_faydwer_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_seeds_of_destruction_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_seeds_of_destruction_enabled()\n```\n[eq.is_seeds_of_destruction_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_seeds_of_destruction_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_task_active") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_task_active()\n```\n[eq.is_task_active on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_task_active)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_task_activity_active") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_task_activity_active()\n```\n[eq.is_task_activity_active on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_task_activity_active)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_task_appropriate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_task_appropriate()\n```\n[eq.is_task_appropriate on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_task_appropriate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_task_completed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_task_completed()\n```\n[eq.is_task_completed on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_task_completed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_task_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_task_enabled()\n```\n[eq.is_task_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_task_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_the_broken_mirror_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_the_broken_mirror_enabled()\n```\n[eq.is_the_broken_mirror_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_the_broken_mirror_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_the_buried_sea_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_the_buried_sea_enabled()\n```\n[eq.is_the_buried_sea_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_the_buried_sea_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_the_burning_lands_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_the_burning_lands_enabled()\n```\n[eq.is_the_burning_lands_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_the_burning_lands_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_the_darkend_sea_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_the_darkend_sea_enabled()\n```\n[eq.is_the_darkend_sea_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_the_darkend_sea_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_the_legacy_of_ykesha_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_the_legacy_of_ykesha_enabled()\n```\n[eq.is_the_legacy_of_ykesha_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_the_legacy_of_ykesha_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_the_planes_of_power_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_the_planes_of_power_enabled()\n```\n[eq.is_the_planes_of_power_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_the_planes_of_power_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_the_ruins_of_kunark_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_the_ruins_of_kunark_enabled()\n```\n[eq.is_the_ruins_of_kunark_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_the_ruins_of_kunark_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_the_scars_of_velious_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_the_scars_of_velious_enabled()\n```\n[eq.is_the_scars_of_velious_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_the_scars_of_velious_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_the_serpents_spine_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_the_serpents_spine_enabled()\n```\n[eq.is_the_serpents_spine_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_the_serpents_spine_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_the_shadows_of_luclin_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_the_shadows_of_luclin_enabled()\n```\n[eq.is_the_shadows_of_luclin_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_the_shadows_of_luclin_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_torment_of_velious_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_torment_of_velious_enabled()\n```\n[eq.is_torment_of_velious_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_torment_of_velious_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_underfoot_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_underfoot_enabled()\n```\n[eq.is_underfoot_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_underfoot_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.is_veil_of_alaris_enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.is_veil_of_alaris_enabled()\n```\n[eq.is_veil_of_alaris_enabled on questapi](https://questapi.firebaseapp.com/en/lua/eq/is_veil_of_alaris_enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.item_link") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.item_link()\n```\n[eq.item_link on questapi](https://questapi.firebaseapp.com/en/lua/eq/item_link)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.last_task_in_set") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.last_task_in_set()\n```\n[eq.last_task_in_set on questapi](https://questapi.firebaseapp.com/en/lua/eq/last_task_in_set)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.load_encounter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.load_encounter()\n```\n[eq.load_encounter on questapi](https://questapi.firebaseapp.com/en/lua/eq/load_encounter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.load_encounter_with_data") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.load_encounter_with_data()\n```\n[eq.load_encounter_with_data on questapi](https://questapi.firebaseapp.com/en/lua/eq/load_encounter_with_data)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.log") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.log()\n```\n[eq.log on questapi](https://questapi.firebaseapp.com/en/lua/eq/log)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.map_opcodes") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.map_opcodes()\n```\n[eq.map_opcodes on questapi](https://questapi.firebaseapp.com/en/lua/eq/map_opcodes)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.merchant_count_item") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.merchant_count_item()\n```\n[eq.merchant_count_item on questapi](https://questapi.firebaseapp.com/en/lua/eq/merchant_count_item)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.merchant_set_item") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.merchant_set_item()\n```\n[eq.merchant_set_item on questapi](https://questapi.firebaseapp.com/en/lua/eq/merchant_set_item)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.modify_npc_stat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.modify_npc_stat()\n```\n[eq.modify_npc_stat on questapi](https://questapi.firebaseapp.com/en/lua/eq/modify_npc_stat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.move_to") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.move_to()\n```\n[eq.move_to on questapi](https://questapi.firebaseapp.com/en/lua/eq/move_to)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.next_task_in_set") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.next_task_in_set()\n```\n[eq.next_task_in_set on questapi](https://questapi.firebaseapp.com/en/lua/eq/next_task_in_set)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.path_resume") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.path_resume()\n```\n[eq.path_resume on questapi](https://questapi.firebaseapp.com/en/lua/eq/path_resume)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.pause") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.pause()\n```\n[eq.pause on questapi](https://questapi.firebaseapp.com/en/lua/eq/pause)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.pause_timer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.pause_timer()\n```\n[eq.pause_timer on questapi](https://questapi.firebaseapp.com/en/lua/eq/pause_timer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.popup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.popup()\n```\n[eq.popup on questapi](https://questapi.firebaseapp.com/en/lua/eq/popup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.process_mobs_while_zone_empty") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.process_mobs_while_zone_empty()\n```\n[eq.process_mobs_while_zone_empty on questapi](https://questapi.firebaseapp.com/en/lua/eq/process_mobs_while_zone_empty)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.rain") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.rain()\n```\n[eq.rain on questapi](https://questapi.firebaseapp.com/en/lua/eq/rain)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.register_general") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.register_general()\n```\n[eq.register_general on questapi](https://questapi.firebaseapp.com/en/lua/eq/register_general)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.register_item_event") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.register_item_event()\n```\n[eq.register_item_event on questapi](https://questapi.firebaseapp.com/en/lua/eq/register_item_event)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.register_npc_event") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.register_npc_event()\n```\n[eq.register_npc_event on questapi](https://questapi.firebaseapp.com/en/lua/eq/register_npc_event)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.register_player_event") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.register_player_event()\n```\n[eq.register_player_event on questapi](https://questapi.firebaseapp.com/en/lua/eq/register_player_event)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.register_random") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.register_random()\n```\n[eq.register_random on questapi](https://questapi.firebaseapp.com/en/lua/eq/register_random)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.reloadzonestaticdata") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.reloadzonestaticdata()\n```\n[eq.reloadzonestaticdata on questapi](https://questapi.firebaseapp.com/en/lua/eq/reloadzonestaticdata)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.remove_all_from_instance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.remove_all_from_instance()\n```\n[eq.remove_all_from_instance on questapi](https://questapi.firebaseapp.com/en/lua/eq/remove_all_from_instance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.remove_area") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.remove_area()\n```\n[eq.remove_area on questapi](https://questapi.firebaseapp.com/en/lua/eq/remove_area)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.remove_from_instance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.remove_from_instance()\n```\n[eq.remove_from_instance on questapi](https://questapi.firebaseapp.com/en/lua/eq/remove_from_instance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.remove_from_instance_by_char_id") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.remove_from_instance_by_char_id()\n```\n[eq.remove_from_instance_by_char_id on questapi](https://questapi.firebaseapp.com/en/lua/eq/remove_from_instance_by_char_id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.remove_spawn_point") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.remove_spawn_point()\n```\n[eq.remove_spawn_point on questapi](https://questapi.firebaseapp.com/en/lua/eq/remove_spawn_point)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.remove_title") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.remove_title()\n```\n[eq.remove_title on questapi](https://questapi.firebaseapp.com/en/lua/eq/remove_title)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.repop_zone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.repop_zone()\n```\n[eq.repop_zone on questapi](https://questapi.firebaseapp.com/en/lua/eq/repop_zone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.reset_task_activity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.reset_task_activity()\n```\n[eq.reset_task_activity on questapi](https://questapi.firebaseapp.com/en/lua/eq/reset_task_activity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.respawn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.respawn()\n```\n[eq.respawn on questapi](https://questapi.firebaseapp.com/en/lua/eq/respawn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.resume_timer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.resume_timer()\n```\n[eq.resume_timer on questapi](https://questapi.firebaseapp.com/en/lua/eq/resume_timer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.safe_move") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.safe_move()\n```\n[eq.safe_move on questapi](https://questapi.firebaseapp.com/en/lua/eq/safe_move)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.say_link") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.say_link()\n```\n[eq.say_link on questapi](https://questapi.firebaseapp.com/en/lua/eq/say_link)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.scribe_spells") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.scribe_spells()\n```\n[eq.scribe_spells on questapi](https://questapi.firebaseapp.com/en/lua/eq/scribe_spells)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.send_mail") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.send_mail()\n```\n[eq.send_mail on questapi](https://questapi.firebaseapp.com/en/lua/eq/send_mail)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.set_anim") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.set_anim()\n```\n[eq.set_anim on questapi](https://questapi.firebaseapp.com/en/lua/eq/set_anim)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.set_data") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.set_data()\n```\n[eq.set_data on questapi](https://questapi.firebaseapp.com/en/lua/eq/set_data)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.set_global") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.set_global()\n```\n[eq.set_global on questapi](https://questapi.firebaseapp.com/en/lua/eq/set_global)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.set_guild") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.set_guild()\n```\n[eq.set_guild on questapi](https://questapi.firebaseapp.com/en/lua/eq/set_guild)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.set_next_hp_event") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.set_next_hp_event()\n```\n[eq.set_next_hp_event on questapi](https://questapi.firebaseapp.com/en/lua/eq/set_next_hp_event)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.set_next_inc_hp_event") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.set_next_inc_hp_event()\n```\n[eq.set_next_inc_hp_event on questapi](https://questapi.firebaseapp.com/en/lua/eq/set_next_inc_hp_event)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.set_proximity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.set_proximity()\n```\n[eq.set_proximity on questapi](https://questapi.firebaseapp.com/en/lua/eq/set_proximity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.set_sky") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.set_sky()\n```\n[eq.set_sky on questapi](https://questapi.firebaseapp.com/en/lua/eq/set_sky)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.set_time") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.set_time()\n```\n[eq.set_time on questapi](https://questapi.firebaseapp.com/en/lua/eq/set_time)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.set_timer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.set_timer()\n```\n[eq.set_timer on questapi](https://questapi.firebaseapp.com/en/lua/eq/set_timer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.signal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.signal()\n```\n[eq.signal on questapi](https://questapi.firebaseapp.com/en/lua/eq/signal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.snow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.snow()\n```\n[eq.snow on questapi](https://questapi.firebaseapp.com/en/lua/eq/snow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.spawn2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.spawn2()\n```\n[eq.spawn2 on questapi](https://questapi.firebaseapp.com/en/lua/eq/spawn2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.spawn_condition") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.spawn_condition()\n```\n[eq.spawn_condition on questapi](https://questapi.firebaseapp.com/en/lua/eq/spawn_condition)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.start") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.start()\n```\n[eq.start on questapi](https://questapi.firebaseapp.com/en/lua/eq/start)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.stop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.stop()\n```\n[eq.stop on questapi](https://questapi.firebaseapp.com/en/lua/eq/stop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.stop_all_timers") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.stop_all_timers()\n```\n[eq.stop_all_timers on questapi](https://questapi.firebaseapp.com/en/lua/eq/stop_all_timers)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.stop_follow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.stop_follow()\n```\n[eq.stop_follow on questapi](https://questapi.firebaseapp.com/en/lua/eq/stop_follow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.stop_timer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.stop_timer()\n```\n[eq.stop_timer on questapi](https://questapi.firebaseapp.com/en/lua/eq/stop_timer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.summon_all_player_corpses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.summon_all_player_corpses()\n```\n[eq.summon_all_player_corpses on questapi](https://questapi.firebaseapp.com/en/lua/eq/summon_all_player_corpses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.summon_buried_player_corpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.summon_buried_player_corpse()\n```\n[eq.summon_buried_player_corpse on questapi](https://questapi.firebaseapp.com/en/lua/eq/summon_buried_player_corpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.target_global") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.target_global()\n```\n[eq.target_global on questapi](https://questapi.firebaseapp.com/en/lua/eq/target_global)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.task_explored_area") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.task_explored_area()\n```\n[eq.task_explored_area on questapi](https://questapi.firebaseapp.com/en/lua/eq/task_explored_area)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.task_set_selector") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.task_set_selector()\n```\n[eq.task_set_selector on questapi](https://questapi.firebaseapp.com/en/lua/eq/task_set_selector)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.task_time_left") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.task_time_left()\n```\n[eq.task_time_left on questapi](https://questapi.firebaseapp.com/en/lua/eq/task_time_left)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.toggle_spawn_event") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.toggle_spawn_event()\n```\n[eq.toggle_spawn_event on questapi](https://questapi.firebaseapp.com/en/lua/eq/toggle_spawn_event)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.train_discs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.train_discs()\n```\n[eq.train_discs on questapi](https://questapi.firebaseapp.com/en/lua/eq/train_discs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.unload_encounter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.unload_encounter()\n```\n[eq.unload_encounter on questapi](https://questapi.firebaseapp.com/en/lua/eq/unload_encounter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.unload_encounter_with_data") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.unload_encounter_with_data()\n```\n[eq.unload_encounter_with_data on questapi](https://questapi.firebaseapp.com/en/lua/eq/unload_encounter_with_data)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.unregister_item_event") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.unregister_item_event()\n```\n[eq.unregister_item_event on questapi](https://questapi.firebaseapp.com/en/lua/eq/unregister_item_event)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.unregister_npc_event") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.unregister_npc_event()\n```\n[eq.unregister_npc_event on questapi](https://questapi.firebaseapp.com/en/lua/eq/unregister_npc_event)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.unregister_player_event") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.unregister_player_event()\n```\n[eq.unregister_player_event on questapi](https://questapi.firebaseapp.com/en/lua/eq/unregister_player_event)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.update_instance_timer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.update_instance_timer()\n```\n[eq.update_instance_timer on questapi](https://questapi.firebaseapp.com/en/lua/eq/update_instance_timer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.update_spawn_timer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.update_spawn_timer()\n```\n[eq.update_spawn_timer on questapi](https://questapi.firebaseapp.com/en/lua/eq/update_spawn_timer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.update_task_activity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.update_task_activity()\n```\n[eq.update_task_activity on questapi](https://questapi.firebaseapp.com/en/lua/eq/update_task_activity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.voice_tell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.voice_tell()\n```\n[eq.voice_tell on questapi](https://questapi.firebaseapp.com/en/lua/eq/voice_tell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.wear_change") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.wear_change()\n```\n[eq.wear_change on questapi](https://questapi.firebaseapp.com/en/lua/eq/wear_change)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_emote") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_emote()\n```\n[eq.world_emote on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_emote)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_assign_task") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_assign_task()\n```\n[eq.world_wide_assign_task on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_assign_task)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_cast_spell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_cast_spell()\n```\n[eq.world_wide_cast_spell on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_cast_spell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_disable_task") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_disable_task()\n```\n[eq.world_wide_disable_task on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_disable_task)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_enable_task") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_enable_task()\n```\n[eq.world_wide_enable_task on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_enable_task)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_fail_task") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_fail_task()\n```\n[eq.world_wide_fail_task on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_fail_task)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_marquee") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_marquee()\n```\n[eq.world_wide_marquee on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_marquee)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_message") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_message()\n```\n[eq.world_wide_message on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_message)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_move") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_move()\n```\n[eq.world_wide_move on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_move)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_move_instance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_move_instance()\n```\n[eq.world_wide_move_instance on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_move_instance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_remove_spell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_remove_spell()\n```\n[eq.world_wide_remove_spell on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_remove_spell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_remove_task") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_remove_task()\n```\n[eq.world_wide_remove_task on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_remove_task)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_reset_activity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_reset_activity()\n```\n[eq.world_wide_reset_activity on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_reset_activity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_set_entity_variable_client") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_set_entity_variable_client()\n```\n[eq.world_wide_set_entity_variable_client on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_set_entity_variable_client)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_set_entity_variable_npc") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_set_entity_variable_npc()\n```\n[eq.world_wide_set_entity_variable_npc on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_set_entity_variable_npc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_signal_client") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_signal_client()\n```\n[eq.world_wide_signal_client on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_signal_client)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_signal_npc") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_signal_npc()\n```\n[eq.world_wide_signal_npc on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_signal_npc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.world_wide_update_activity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.world_wide_update_activity()\n```\n[eq.world_wide_update_activity on questapi](https://questapi.firebaseapp.com/en/lua/eq/world_wide_update_activity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.zone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.zone()\n```\n[eq.zone on questapi](https://questapi.firebaseapp.com/en/lua/eq/zone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.zone_emote") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.zone_emote()\n```\n[eq.zone_emote on questapi](https://questapi.firebaseapp.com/en/lua/eq/zone_emote)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.zone_group") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.zone_group()\n```\n[eq.zone_group on questapi](https://questapi.firebaseapp.com/en/lua/eq/zone_group)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "eq.zone_raid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\neq.zone_raid()\n```\n[eq.zone_raid on questapi](https://questapi.firebaseapp.com/en/lua/eq/zone_raid)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "event") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nevent\n```\n[event on questapi](https://questapi.firebaseapp.com/en/lua/event/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "event.event_aggro_say") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nevent.event_aggro_say()\n```\n[event.event_aggro_say on questapi](https://questapi.firebaseapp.com/en/lua/event/event_aggro_say)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "event.event_augment_insert") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nevent.event_augment_insert()\n```\n[event.event_augment_insert on questapi](https://questapi.firebaseapp.com/en/lua/event/event_augment_insert)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "event.event_augment_item") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nevent.event_augment_item()\n```\n[event.event_augment_item on questapi](https://questapi.firebaseapp.com/en/lua/event/event_augment_item)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "event.event_augment_remove") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nevent.event_augment_remove()\n```\n[event.event_augment_remove on questapi](https://questapi.firebaseapp.com/en/lua/event/event_augment_remove)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "event.event_cast_begin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nevent.event_cast_begin()\n```\n[event.event_cast_begin on questapi](https://questapi.firebaseapp.com/en/lua/event/event_cast_begin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "event.event_cast_on") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nevent.event_cast_on()\n```\n[event.event_cast_on on questapi](https://questapi.firebaseapp.com/en/lua/event/event_cast_on)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "event.event_say") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nevent.event_say()\n```\n[event.event_say on questapi](https://questapi.firebaseapp.com/en/lua/event/event_say)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "event.event_signal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nevent.event_signal()\n```\n[event.event_signal on questapi](https://questapi.firebaseapp.com/en/lua/event/event_signal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "event.event_trade") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nevent.event_trade()\n```\n[event.event_trade on questapi](https://questapi.firebaseapp.com/en/lua/event/event_trade)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "faction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfaction\n```\n[faction on questapi](https://questapi.firebaseapp.com/en/lua/faction/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "faction.Ally") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfaction.Ally()\n```\n[faction.Ally on questapi](https://questapi.firebaseapp.com/en/lua/faction/ally)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "faction.Amiable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfaction.Amiable()\n```\n[faction.Amiable on questapi](https://questapi.firebaseapp.com/en/lua/faction/amiable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "faction.Apprehensive") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfaction.Apprehensive()\n```\n[faction.Apprehensive on questapi](https://questapi.firebaseapp.com/en/lua/faction/apprehensive)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "faction.Dubious") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfaction.Dubious()\n```\n[faction.Dubious on questapi](https://questapi.firebaseapp.com/en/lua/faction/dubious)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "faction.Indifferent") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfaction.Indifferent()\n```\n[faction.Indifferent on questapi](https://questapi.firebaseapp.com/en/lua/faction/indifferent)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "faction.Kindly") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfaction.Kindly()\n```\n[faction.Kindly on questapi](https://questapi.firebaseapp.com/en/lua/faction/kindly)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "faction.Scowls") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfaction.Scowls()\n```\n[faction.Scowls on questapi](https://questapi.firebaseapp.com/en/lua/faction/scowls)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "faction.Threatenly") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfaction.Threatenly()\n```\n[faction.Threatenly on questapi](https://questapi.firebaseapp.com/en/lua/faction/threatenly)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "faction.Warmly") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfaction.Warmly()\n```\n[faction.Warmly on questapi](https://questapi.firebaseapp.com/en/lua/faction/warmly)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "filter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter\n```\n[filter on questapi](https://questapi.firebaseapp.com/en/lua/filter/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.Auctions") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.Auctions\n```\n[filter.Auctions on questapi](https://questapi.firebaseapp.com/en/lua/filter/auctions)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.BadWords") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.BadWords\n```\n[filter.BadWords on questapi](https://questapi.firebaseapp.com/en/lua/filter/badwords)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.BardSongs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.BardSongs\n```\n[filter.BardSongs on questapi](https://questapi.firebaseapp.com/en/lua/filter/bardsongs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.DamageShields") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.DamageShields\n```\n[filter.DamageShields on questapi](https://questapi.firebaseapp.com/en/lua/filter/damageshields)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.DOT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.DOT\n```\n[filter.DOT on questapi](https://questapi.firebaseapp.com/en/lua/filter/dot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.FocusEffects") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.FocusEffects\n```\n[filter.FocusEffects on questapi](https://questapi.firebaseapp.com/en/lua/filter/focuseffects)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.GroupChat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.GroupChat\n```\n[filter.GroupChat on questapi](https://questapi.firebaseapp.com/en/lua/filter/groupchat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.GuildChat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.GuildChat\n```\n[filter.GuildChat on questapi](https://questapi.firebaseapp.com/en/lua/filter/guildchat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.HealOverTime") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.HealOverTime\n```\n[filter.HealOverTime on questapi](https://questapi.firebaseapp.com/en/lua/filter/healovertime)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.MeleeCrits") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.MeleeCrits\n```\n[filter.MeleeCrits on questapi](https://questapi.firebaseapp.com/en/lua/filter/meleecrits)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.MissedMe") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.MissedMe\n```\n[filter.MissedMe on questapi](https://questapi.firebaseapp.com/en/lua/filter/missedme)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.MyMisses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.MyMisses\n```\n[filter.MyMisses on questapi](https://questapi.firebaseapp.com/en/lua/filter/mymisses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.None") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.None\n```\n[filter.None on questapi](https://questapi.firebaseapp.com/en/lua/filter/none)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.NPCSpells") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.NPCSpells\n```\n[filter.NPCSpells on questapi](https://questapi.firebaseapp.com/en/lua/filter/npcspells)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.OOC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.OOC\n```\n[filter.OOC on questapi](https://questapi.firebaseapp.com/en/lua/filter/ooc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.OthersHit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.OthersHit\n```\n[filter.OthersHit on questapi](https://questapi.firebaseapp.com/en/lua/filter/othershit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.OthersMiss") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.OthersMiss\n```\n[filter.OthersMiss on questapi](https://questapi.firebaseapp.com/en/lua/filter/othersmiss)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.PCSpells") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.PCSpells\n```\n[filter.PCSpells on questapi](https://questapi.firebaseapp.com/en/lua/filter/pcspells)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.PetHits") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.PetHits\n```\n[filter.PetHits on questapi](https://questapi.firebaseapp.com/en/lua/filter/pethits)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.PetMisses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.PetMisses\n```\n[filter.PetMisses on questapi](https://questapi.firebaseapp.com/en/lua/filter/petmisses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.PetSpells") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.PetSpells\n```\n[filter.PetSpells on questapi](https://questapi.firebaseapp.com/en/lua/filter/petspells)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.Shouts") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.Shouts\n```\n[filter.Shouts on questapi](https://questapi.firebaseapp.com/en/lua/filter/shouts)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.Socials") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.Socials\n```\n[filter.Socials on questapi](https://questapi.firebaseapp.com/en/lua/filter/socials)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.SpellCrits") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.SpellCrits\n```\n[filter.SpellCrits on questapi](https://questapi.firebaseapp.com/en/lua/filter/spellcrits)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.SpellDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.SpellDamage\n```\n[filter.SpellDamage on questapi](https://questapi.firebaseapp.com/en/lua/filter/spelldamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.Unknown25") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.Unknown25\n```\n[filter.Unknown25 on questapi](https://questapi.firebaseapp.com/en/lua/filter/unknown25)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.Unknown26") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.Unknown26\n```\n[filter.Unknown26 on questapi](https://questapi.firebaseapp.com/en/lua/filter/unknown26)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.Unknown27") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.Unknown27\n```\n[filter.Unknown27 on questapi](https://questapi.firebaseapp.com/en/lua/filter/unknown27)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "filter.Unknown28") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nfilter.Unknown28\n```\n[filter.Unknown28 on questapi](https://questapi.firebaseapp.com/en/lua/filter/unknown28)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "group") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup\n```\n[group on questapi](https://questapi.firebaseapp.com/en/lua/group/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.CastGroupSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.CastGroupSpell()\n```\n[group.CastGroupSpell on questapi](https://questapi.firebaseapp.com/en/lua/group/castgroupspell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.DisbandGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.DisbandGroup()\n```\n[group.DisbandGroup on questapi](https://questapi.firebaseapp.com/en/lua/group/disbandgroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.GetHighestLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.GetHighestLevel()\n```\n[group.GetHighestLevel on questapi](https://questapi.firebaseapp.com/en/lua/group/gethighestlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.GetID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.GetID()\n```\n[group.GetID on questapi](https://questapi.firebaseapp.com/en/lua/group/getid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.GetLeader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.GetLeader()\n```\n[group.GetLeader on questapi](https://questapi.firebaseapp.com/en/lua/group/getleader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.GetLeaderName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.GetLeaderName()\n```\n[group.GetLeaderName on questapi](https://questapi.firebaseapp.com/en/lua/group/getleadername)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.GetLowestLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.GetLowestLevel()\n```\n[group.GetLowestLevel on questapi](https://questapi.firebaseapp.com/en/lua/group/getlowestlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.GetMember") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.GetMember()\n```\n[group.GetMember on questapi](https://questapi.firebaseapp.com/en/lua/group/getmember)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.GetTotalGroupDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.GetTotalGroupDamage()\n```\n[group.GetTotalGroupDamage on questapi](https://questapi.firebaseapp.com/en/lua/group/gettotalgroupdamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.GroupCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.GroupCount()\n```\n[group.GroupCount on questapi](https://questapi.firebaseapp.com/en/lua/group/groupcount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.GroupMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.GroupMessage()\n```\n[group.GroupMessage on questapi](https://questapi.firebaseapp.com/en/lua/group/groupmessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.IsGroupMember") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.IsGroupMember()\n```\n[group.IsGroupMember on questapi](https://questapi.firebaseapp.com/en/lua/group/isgroupmember)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.IsLeader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.IsLeader()\n```\n[group.IsLeader on questapi](https://questapi.firebaseapp.com/en/lua/group/isleader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.SetLeader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.SetLeader()\n```\n[group.SetLeader on questapi](https://questapi.firebaseapp.com/en/lua/group/setleader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.SplitExp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.SplitExp()\n```\n[group.SplitExp on questapi](https://questapi.firebaseapp.com/en/lua/group/splitexp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.SplitMoney") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.SplitMoney()\n```\n[group.SplitMoney on questapi](https://questapi.firebaseapp.com/en/lua/group/splitmoney)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "group.TeleportGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ngroup.TeleportGroup()\n```\n[group.TeleportGroup on questapi](https://questapi.firebaseapp.com/en/lua/group/teleportgroup)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "hate_list") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nhate_list\n```\n[hate_list on questapi](https://questapi.firebaseapp.com/en/lua/hate_list/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "hate_list.Entries") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nhate_list.Entries()\n```\n[hate_list.Entries on questapi](https://questapi.firebaseapp.com/en/lua/hate_list/entries)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "inventory") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory\n```\n[inventory on questapi](https://questapi.firebaseapp.com/en/lua/inventory/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.CalcBagIdx") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.CalcBagIdx()\n```\n[inventory.CalcBagIdx on questapi](https://questapi.firebaseapp.com/en/lua/inventory/calcbagidx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.CalcMaterialFromSlot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.CalcMaterialFromSlot()\n```\n[inventory.CalcMaterialFromSlot on questapi](https://questapi.firebaseapp.com/en/lua/inventory/calcmaterialfromslot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.CalcSlotFromMaterial") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.CalcSlotFromMaterial()\n```\n[inventory.CalcSlotFromMaterial on questapi](https://questapi.firebaseapp.com/en/lua/inventory/calcslotfrommaterial)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.CalcSlotId") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.CalcSlotId()\n```\n[inventory.CalcSlotId on questapi](https://questapi.firebaseapp.com/en/lua/inventory/calcslotid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.CanItemFitInContainer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.CanItemFitInContainer()\n```\n[inventory.CanItemFitInContainer on questapi](https://questapi.firebaseapp.com/en/lua/inventory/canitemfitincontainer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.CheckNoDrop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.CheckNoDrop()\n```\n[inventory.CheckNoDrop on questapi](https://questapi.firebaseapp.com/en/lua/inventory/checknodrop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.DeleteItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.DeleteItem()\n```\n[inventory.DeleteItem on questapi](https://questapi.firebaseapp.com/en/lua/inventory/deleteitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.FindFreeSlot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.FindFreeSlot()\n```\n[inventory.FindFreeSlot on questapi](https://questapi.firebaseapp.com/en/lua/inventory/findfreeslot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.GetItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.GetItem()\n```\n[inventory.GetItem on questapi](https://questapi.firebaseapp.com/en/lua/inventory/getitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.GetSlotByItemInst") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.GetSlotByItemInst()\n```\n[inventory.GetSlotByItemInst on questapi](https://questapi.firebaseapp.com/en/lua/inventory/getslotbyiteminst)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.HasItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.HasItem()\n```\n[inventory.HasItem on questapi](https://questapi.firebaseapp.com/en/lua/inventory/hasitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.HasItemByLoreGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.HasItemByLoreGroup()\n```\n[inventory.HasItemByLoreGroup on questapi](https://questapi.firebaseapp.com/en/lua/inventory/hasitembyloregroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.HasItemByUse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.HasItemByUse()\n```\n[inventory.HasItemByUse on questapi](https://questapi.firebaseapp.com/en/lua/inventory/hasitembyuse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.HasSpaceForItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.HasSpaceForItem()\n```\n[inventory.HasSpaceForItem on questapi](https://questapi.firebaseapp.com/en/lua/inventory/hasspaceforitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.PopItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.PopItem()\n```\n[inventory.PopItem on questapi](https://questapi.firebaseapp.com/en/lua/inventory/popitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.PushCursor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.PushCursor()\n```\n[inventory.PushCursor on questapi](https://questapi.firebaseapp.com/en/lua/inventory/pushcursor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.PutItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.PutItem()\n```\n[inventory.PutItem on questapi](https://questapi.firebaseapp.com/en/lua/inventory/putitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.SupportsContainers") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.SupportsContainers()\n```\n[inventory.SupportsContainers on questapi](https://questapi.firebaseapp.com/en/lua/inventory/supportscontainers)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory.SwapItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory.SwapItem()\n```\n[inventory.SwapItem on questapi](https://questapi.firebaseapp.com/en/lua/inventory/swapitem)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "inventory_where") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory_where\n```\n[inventory_where on questapi](https://questapi.firebaseapp.com/en/lua/inventory_where/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory_where.Bank") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory_where.Bank()\n```\n[inventory_where.Bank on questapi](https://questapi.firebaseapp.com/en/lua/inventory_where/bank)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory_where.Cursor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory_where.Cursor()\n```\n[inventory_where.Cursor on questapi](https://questapi.firebaseapp.com/en/lua/inventory_where/cursor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory_where.Personal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory_where.Personal()\n```\n[inventory_where.Personal on questapi](https://questapi.firebaseapp.com/en/lua/inventory_where/personal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory_where.SharedBank") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory_where.SharedBank()\n```\n[inventory_where.SharedBank on questapi](https://questapi.firebaseapp.com/en/lua/inventory_where/sharedbank)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "inventory_where.Trading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\ninventory_where.Trading()\n```\n[inventory_where.Trading on questapi](https://questapi.firebaseapp.com/en/lua/inventory_where/trading)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "item") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem\n```\n[item on questapi](https://questapi.firebaseapp.com/en/lua/item/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.AAgi") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.AAgi()\n```\n[item.AAgi on questapi](https://questapi.firebaseapp.com/en/lua/item/aagi)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.AC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.AC()\n```\n[item.AC on questapi](https://questapi.firebaseapp.com/en/lua/item/ac)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Accuracy") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Accuracy()\n```\n[item.Accuracy on questapi](https://questapi.firebaseapp.com/en/lua/item/accuracy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ACha") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ACha()\n```\n[item.ACha on questapi](https://questapi.firebaseapp.com/en/lua/item/acha)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ADex") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ADex()\n```\n[item.ADex on questapi](https://questapi.firebaseapp.com/en/lua/item/adex)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.AInt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.AInt()\n```\n[item.AInt on questapi](https://questapi.firebaseapp.com/en/lua/item/aint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ArtifactFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ArtifactFlag()\n```\n[item.ArtifactFlag on questapi](https://questapi.firebaseapp.com/en/lua/item/artifactflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ASta") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ASta()\n```\n[item.ASta on questapi](https://questapi.firebaseapp.com/en/lua/item/asta)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.AStr") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.AStr()\n```\n[item.AStr on questapi](https://questapi.firebaseapp.com/en/lua/item/astr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Attack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Attack()\n```\n[item.Attack on questapi](https://questapi.firebaseapp.com/en/lua/item/attack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Attuneable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Attuneable()\n```\n[item.Attuneable on questapi](https://questapi.firebaseapp.com/en/lua/item/attuneable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.AugDistiller") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.AugDistiller()\n```\n[item.AugDistiller on questapi](https://questapi.firebaseapp.com/en/lua/item/augdistiller)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.AugRestrict") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.AugRestrict()\n```\n[item.AugRestrict on questapi](https://questapi.firebaseapp.com/en/lua/item/augrestrict)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.AugSlotType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.AugSlotType()\n```\n[item.AugSlotType on questapi](https://questapi.firebaseapp.com/en/lua/item/augslottype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.AugSlotVisible") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.AugSlotVisible()\n```\n[item.AugSlotVisible on questapi](https://questapi.firebaseapp.com/en/lua/item/augslotvisible)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.AugType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.AugType()\n```\n[item.AugType on questapi](https://questapi.firebaseapp.com/en/lua/item/augtype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Avoidance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Avoidance()\n```\n[item.Avoidance on questapi](https://questapi.firebaseapp.com/en/lua/item/avoidance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.AWis") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.AWis()\n```\n[item.AWis on questapi](https://questapi.firebaseapp.com/en/lua/item/awis)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BackstabDmg") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BackstabDmg()\n```\n[item.BackstabDmg on questapi](https://questapi.firebaseapp.com/en/lua/item/backstabdmg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BagSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BagSize()\n```\n[item.BagSize on questapi](https://questapi.firebaseapp.com/en/lua/item/bagsize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BagSlots") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BagSlots()\n```\n[item.BagSlots on questapi](https://questapi.firebaseapp.com/en/lua/item/bagslots)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BagType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BagType()\n```\n[item.BagType on questapi](https://questapi.firebaseapp.com/en/lua/item/bagtype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BagWR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BagWR()\n```\n[item.BagWR on questapi](https://questapi.firebaseapp.com/en/lua/item/bagwr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BaneDmgAmt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BaneDmgAmt()\n```\n[item.BaneDmgAmt on questapi](https://questapi.firebaseapp.com/en/lua/item/banedmgamt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BaneDmgBody") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BaneDmgBody()\n```\n[item.BaneDmgBody on questapi](https://questapi.firebaseapp.com/en/lua/item/banedmgbody)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BaneDmgRace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BaneDmgRace()\n```\n[item.BaneDmgRace on questapi](https://questapi.firebaseapp.com/en/lua/item/banedmgrace)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BaneDmgRaceAmt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BaneDmgRaceAmt()\n```\n[item.BaneDmgRaceAmt on questapi](https://questapi.firebaseapp.com/en/lua/item/banedmgraceamt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BardType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BardType()\n```\n[item.BardType on questapi](https://questapi.firebaseapp.com/en/lua/item/bardtype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BardValue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BardValue()\n```\n[item.BardValue on questapi](https://questapi.firebaseapp.com/en/lua/item/bardvalue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BenefitFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BenefitFlag()\n```\n[item.BenefitFlag on questapi](https://questapi.firebaseapp.com/en/lua/item/benefitflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Book") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Book()\n```\n[item.Book on questapi](https://questapi.firebaseapp.com/en/lua/item/book)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.BookType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.BookType()\n```\n[item.BookType on questapi](https://questapi.firebaseapp.com/en/lua/item/booktype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.CastTime") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.CastTime()\n```\n[item.CastTime on questapi](https://questapi.firebaseapp.com/en/lua/item/casttime)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.CharmFile") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.CharmFile()\n```\n[item.CharmFile on questapi](https://questapi.firebaseapp.com/en/lua/item/charmfile)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.CharmFileID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.CharmFileID()\n```\n[item.CharmFileID on questapi](https://questapi.firebaseapp.com/en/lua/item/charmfileid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Clairvoyance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Clairvoyance()\n```\n[item.Clairvoyance on questapi](https://questapi.firebaseapp.com/en/lua/item/clairvoyance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Classes") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Classes()\n```\n[item.Classes on questapi](https://questapi.firebaseapp.com/en/lua/item/classes)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ClickName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ClickName()\n```\n[item.ClickName on questapi](https://questapi.firebaseapp.com/en/lua/item/clickname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Color") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Color()\n```\n[item.Color on questapi](https://questapi.firebaseapp.com/en/lua/item/color)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.CombatEffects") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.CombatEffects()\n```\n[item.CombatEffects on questapi](https://questapi.firebaseapp.com/en/lua/item/combateffects)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.CR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.CR()\n```\n[item.CR on questapi](https://questapi.firebaseapp.com/en/lua/item/cr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Damage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Damage()\n```\n[item.Damage on questapi](https://questapi.firebaseapp.com/en/lua/item/damage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.DamageShield") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.DamageShield()\n```\n[item.DamageShield on questapi](https://questapi.firebaseapp.com/en/lua/item/damageshield)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Deity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Deity()\n```\n[item.Deity on questapi](https://questapi.firebaseapp.com/en/lua/item/deity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Delay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Delay()\n```\n[item.Delay on questapi](https://questapi.firebaseapp.com/en/lua/item/delay)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.DotShielding") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.DotShielding()\n```\n[item.DotShielding on questapi](https://questapi.firebaseapp.com/en/lua/item/dotshielding)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.DR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.DR()\n```\n[item.DR on questapi](https://questapi.firebaseapp.com/en/lua/item/dr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.DSMitigation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.DSMitigation()\n```\n[item.DSMitigation on questapi](https://questapi.firebaseapp.com/en/lua/item/dsmitigation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ElemDmgAmt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ElemDmgAmt()\n```\n[item.ElemDmgAmt on questapi](https://questapi.firebaseapp.com/en/lua/item/elemdmgamt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ElemDmgType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ElemDmgType()\n```\n[item.ElemDmgType on questapi](https://questapi.firebaseapp.com/en/lua/item/elemdmgtype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.EliteMaterial") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.EliteMaterial()\n```\n[item.EliteMaterial on questapi](https://questapi.firebaseapp.com/en/lua/item/elitematerial)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Endur") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Endur()\n```\n[item.Endur on questapi](https://questapi.firebaseapp.com/en/lua/item/endur)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.EnduranceRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.EnduranceRegen()\n```\n[item.EnduranceRegen on questapi](https://questapi.firebaseapp.com/en/lua/item/enduranceregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ExpendableArrow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ExpendableArrow()\n```\n[item.ExpendableArrow on questapi](https://questapi.firebaseapp.com/en/lua/item/expendablearrow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ExtraDmgAmt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ExtraDmgAmt()\n```\n[item.ExtraDmgAmt on questapi](https://questapi.firebaseapp.com/en/lua/item/extradmgamt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ExtraDmgSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ExtraDmgSkill()\n```\n[item.ExtraDmgSkill on questapi](https://questapi.firebaseapp.com/en/lua/item/extradmgskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Favor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Favor()\n```\n[item.Favor on questapi](https://questapi.firebaseapp.com/en/lua/item/favor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Filename") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Filename()\n```\n[item.Filename on questapi](https://questapi.firebaseapp.com/en/lua/item/filename)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.FocusName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.FocusName()\n```\n[item.FocusName on questapi](https://questapi.firebaseapp.com/en/lua/item/focusname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.FR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.FR()\n```\n[item.FR on questapi](https://questapi.firebaseapp.com/en/lua/item/fr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Fulfilment") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Fulfilment()\n```\n[item.Fulfilment on questapi](https://questapi.firebaseapp.com/en/lua/item/fulfilment)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.FVNoDrop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.FVNoDrop()\n```\n[item.FVNoDrop on questapi](https://questapi.firebaseapp.com/en/lua/item/fvnodrop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.GuildFavor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.GuildFavor()\n```\n[item.GuildFavor on questapi](https://questapi.firebaseapp.com/en/lua/item/guildfavor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Haste") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Haste()\n```\n[item.Haste on questapi](https://questapi.firebaseapp.com/en/lua/item/haste)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HealAmt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HealAmt()\n```\n[item.HealAmt on questapi](https://questapi.firebaseapp.com/en/lua/item/healamt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicAgi") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicAgi()\n```\n[item.HeroicAgi on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicagi)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicCha") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicCha()\n```\n[item.HeroicCha on questapi](https://questapi.firebaseapp.com/en/lua/item/heroiccha)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicCR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicCR()\n```\n[item.HeroicCR on questapi](https://questapi.firebaseapp.com/en/lua/item/heroiccr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicDex") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicDex()\n```\n[item.HeroicDex on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicdex)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicDR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicDR()\n```\n[item.HeroicDR on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicdr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicFR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicFR()\n```\n[item.HeroicFR on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicfr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicInt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicInt()\n```\n[item.HeroicInt on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicMR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicMR()\n```\n[item.HeroicMR on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicmr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicPR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicPR()\n```\n[item.HeroicPR on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicpr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicSta") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicSta()\n```\n[item.HeroicSta on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicsta)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicStr") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicStr()\n```\n[item.HeroicStr on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicstr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicSVCorrup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicSVCorrup()\n```\n[item.HeroicSVCorrup on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicsvcorrup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HeroicWis") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HeroicWis()\n```\n[item.HeroicWis on questapi](https://questapi.firebaseapp.com/en/lua/item/heroicwis)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.HP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.HP()\n```\n[item.HP on questapi](https://questapi.firebaseapp.com/en/lua/item/hp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Icon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Icon()\n```\n[item.Icon on questapi](https://questapi.firebaseapp.com/en/lua/item/icon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ID()\n```\n[item.ID on questapi](https://questapi.firebaseapp.com/en/lua/item/id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.IDFile") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.IDFile()\n```\n[item.IDFile on questapi](https://questapi.firebaseapp.com/en/lua/item/idfile)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ItemClass") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ItemClass()\n```\n[item.ItemClass on questapi](https://questapi.firebaseapp.com/en/lua/item/itemclass)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ItemType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ItemType()\n```\n[item.ItemType on questapi](https://questapi.firebaseapp.com/en/lua/item/itemtype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.LDoNPrice") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.LDoNPrice()\n```\n[item.LDoNPrice on questapi](https://questapi.firebaseapp.com/en/lua/item/ldonprice)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.LDoNSellBackRate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.LDoNSellBackRate()\n```\n[item.LDoNSellBackRate on questapi](https://questapi.firebaseapp.com/en/lua/item/ldonsellbackrate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.LDoNSold") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.LDoNSold()\n```\n[item.LDoNSold on questapi](https://questapi.firebaseapp.com/en/lua/item/ldonsold)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.LDoNTheme") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.LDoNTheme()\n```\n[item.LDoNTheme on questapi](https://questapi.firebaseapp.com/en/lua/item/ldontheme)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Light") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Light()\n```\n[item.Light on questapi](https://questapi.firebaseapp.com/en/lua/item/light)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Lore") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Lore()\n```\n[item.Lore on questapi](https://questapi.firebaseapp.com/en/lua/item/lore)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.LoreFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.LoreFlag()\n```\n[item.LoreFlag on questapi](https://questapi.firebaseapp.com/en/lua/item/loreflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.LoreGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.LoreGroup()\n```\n[item.LoreGroup on questapi](https://questapi.firebaseapp.com/en/lua/item/loregroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Magic") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Magic()\n```\n[item.Magic on questapi](https://questapi.firebaseapp.com/en/lua/item/magic)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Mana") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Mana()\n```\n[item.Mana on questapi](https://questapi.firebaseapp.com/en/lua/item/mana)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ManaRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ManaRegen()\n```\n[item.ManaRegen on questapi](https://questapi.firebaseapp.com/en/lua/item/manaregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Material") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Material()\n```\n[item.Material on questapi](https://questapi.firebaseapp.com/en/lua/item/material)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.MaxCharges") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.MaxCharges()\n```\n[item.MaxCharges on questapi](https://questapi.firebaseapp.com/en/lua/item/maxcharges)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.MinStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.MinStatus()\n```\n[item.MinStatus on questapi](https://questapi.firebaseapp.com/en/lua/item/minstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.MR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.MR()\n```\n[item.MR on questapi](https://questapi.firebaseapp.com/en/lua/item/mr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Name()\n```\n[item.Name on questapi](https://questapi.firebaseapp.com/en/lua/item/name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.NoDrop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.NoDrop()\n```\n[item.NoDrop on questapi](https://questapi.firebaseapp.com/en/lua/item/nodrop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.NoPet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.NoPet()\n```\n[item.NoPet on questapi](https://questapi.firebaseapp.com/en/lua/item/nopet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.NoRent") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.NoRent()\n```\n[item.NoRent on questapi](https://questapi.firebaseapp.com/en/lua/item/norent)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.NoTransfer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.NoTransfer()\n```\n[item.NoTransfer on questapi](https://questapi.firebaseapp.com/en/lua/item/notransfer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.null") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.null()\n```\n[item.null on questapi](https://questapi.firebaseapp.com/en/lua/item/null)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.PendingLoreFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.PendingLoreFlag()\n```\n[item.PendingLoreFlag on questapi](https://questapi.firebaseapp.com/en/lua/item/pendingloreflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.PointType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.PointType()\n```\n[item.PointType on questapi](https://questapi.firebaseapp.com/en/lua/item/pointtype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.PotionBelt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.PotionBelt()\n```\n[item.PotionBelt on questapi](https://questapi.firebaseapp.com/en/lua/item/potionbelt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.PotionBeltSlots") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.PotionBeltSlots()\n```\n[item.PotionBeltSlots on questapi](https://questapi.firebaseapp.com/en/lua/item/potionbeltslots)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.PR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.PR()\n```\n[item.PR on questapi](https://questapi.firebaseapp.com/en/lua/item/pr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Price") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Price()\n```\n[item.Price on questapi](https://questapi.firebaseapp.com/en/lua/item/price)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ProcName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ProcName()\n```\n[item.ProcName on questapi](https://questapi.firebaseapp.com/en/lua/item/procname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ProcRate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ProcRate()\n```\n[item.ProcRate on questapi](https://questapi.firebaseapp.com/en/lua/item/procrate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Purity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Purity()\n```\n[item.Purity on questapi](https://questapi.firebaseapp.com/en/lua/item/purity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.QuestItemFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.QuestItemFlag()\n```\n[item.QuestItemFlag on questapi](https://questapi.firebaseapp.com/en/lua/item/questitemflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Races") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Races()\n```\n[item.Races on questapi](https://questapi.firebaseapp.com/en/lua/item/races)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Range") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Range()\n```\n[item.Range on questapi](https://questapi.firebaseapp.com/en/lua/item/range)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.RecastDelay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.RecastDelay()\n```\n[item.RecastDelay on questapi](https://questapi.firebaseapp.com/en/lua/item/recastdelay)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.RecastType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.RecastType()\n```\n[item.RecastType on questapi](https://questapi.firebaseapp.com/en/lua/item/recasttype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.RecLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.RecLevel()\n```\n[item.RecLevel on questapi](https://questapi.firebaseapp.com/en/lua/item/reclevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.RecSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.RecSkill()\n```\n[item.RecSkill on questapi](https://questapi.firebaseapp.com/en/lua/item/recskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Regen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Regen()\n```\n[item.Regen on questapi](https://questapi.firebaseapp.com/en/lua/item/regen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ReqLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ReqLevel()\n```\n[item.ReqLevel on questapi](https://questapi.firebaseapp.com/en/lua/item/reqlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ScriptFileID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ScriptFileID()\n```\n[item.ScriptFileID on questapi](https://questapi.firebaseapp.com/en/lua/item/scriptfileid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.ScrollName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.ScrollName()\n```\n[item.ScrollName on questapi](https://questapi.firebaseapp.com/en/lua/item/scrollname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.SellRate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.SellRate()\n```\n[item.SellRate on questapi](https://questapi.firebaseapp.com/en/lua/item/sellrate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Shielding") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Shielding()\n```\n[item.Shielding on questapi](https://questapi.firebaseapp.com/en/lua/item/shielding)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Size") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Size()\n```\n[item.Size on questapi](https://questapi.firebaseapp.com/en/lua/item/size)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.SkillModType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.SkillModType()\n```\n[item.SkillModType on questapi](https://questapi.firebaseapp.com/en/lua/item/skillmodtype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.SkillModValue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.SkillModValue()\n```\n[item.SkillModValue on questapi](https://questapi.firebaseapp.com/en/lua/item/skillmodvalue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Slots") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Slots()\n```\n[item.Slots on questapi](https://questapi.firebaseapp.com/en/lua/item/slots)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.SpellDmg") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.SpellDmg()\n```\n[item.SpellDmg on questapi](https://questapi.firebaseapp.com/en/lua/item/spelldmg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.SpellShield") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.SpellShield()\n```\n[item.SpellShield on questapi](https://questapi.firebaseapp.com/en/lua/item/spellshield)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Stackable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Stackable()\n```\n[item.Stackable on questapi](https://questapi.firebaseapp.com/en/lua/item/stackable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.StackSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.StackSize()\n```\n[item.StackSize on questapi](https://questapi.firebaseapp.com/en/lua/item/stacksize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.StrikeThrough") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.StrikeThrough()\n```\n[item.StrikeThrough on questapi](https://questapi.firebaseapp.com/en/lua/item/strikethrough)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.StunResist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.StunResist()\n```\n[item.StunResist on questapi](https://questapi.firebaseapp.com/en/lua/item/stunresist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.SummonedFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.SummonedFlag()\n```\n[item.SummonedFlag on questapi](https://questapi.firebaseapp.com/en/lua/item/summonedflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.SVCorruption") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.SVCorruption()\n```\n[item.SVCorruption on questapi](https://questapi.firebaseapp.com/en/lua/item/svcorruption)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Tradeskills") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Tradeskills()\n```\n[item.Tradeskills on questapi](https://questapi.firebaseapp.com/en/lua/item/tradeskills)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.valid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.valid()\n```\n[item.valid on questapi](https://questapi.firebaseapp.com/en/lua/item/valid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.Weight") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.Weight()\n```\n[item.Weight on questapi](https://questapi.firebaseapp.com/en/lua/item/weight)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "item.WornName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nitem.WornName()\n```\n[item.WornName on questapi](https://questapi.firebaseapp.com/en/lua/item/wornname)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "iteminst") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst\n```\n[iteminst on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.AddExp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.AddExp()\n```\n[iteminst.AddExp on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/addexp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.ClearTimers") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.ClearTimers()\n```\n[iteminst.ClearTimers on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/cleartimers)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.Clone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.Clone()\n```\n[iteminst.Clone on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/clone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.DeleteCustomData") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.DeleteCustomData()\n```\n[iteminst.DeleteCustomData on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/deletecustomdata)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetAugment") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetAugment()\n```\n[iteminst.GetAugment on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getaugment)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetAugmentItemID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetAugmentItemID()\n```\n[iteminst.GetAugmentItemID on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getaugmentitemid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetAugmentType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetAugmentType()\n```\n[iteminst.GetAugmentType on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getaugmenttype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetCharges") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetCharges()\n```\n[iteminst.GetCharges on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getcharges)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetColor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetColor()\n```\n[iteminst.GetColor on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getcolor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetCustomData") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetCustomData()\n```\n[iteminst.GetCustomData on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getcustomdata)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetCustomDataString") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetCustomDataString()\n```\n[iteminst.GetCustomDataString on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getcustomdatastring)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetExp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetExp()\n```\n[iteminst.GetExp on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getexp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetID()\n```\n[iteminst.GetID on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetItem()\n```\n[iteminst.GetItem on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetItemID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetItemID()\n```\n[iteminst.GetItemID on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getitemid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetItemScriptID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetItemScriptID()\n```\n[iteminst.GetItemScriptID on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getitemscriptid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetKillsNeeded") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetKillsNeeded()\n```\n[iteminst.GetKillsNeeded on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getkillsneeded)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetMaxEvolveLvl") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetMaxEvolveLvl()\n```\n[iteminst.GetMaxEvolveLvl on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getmaxevolvelvl)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetPrice") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetPrice()\n```\n[iteminst.GetPrice on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getprice)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetTotalItemCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetTotalItemCount()\n```\n[iteminst.GetTotalItemCount on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/gettotalitemcount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.GetUnscaledItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.GetUnscaledItem()\n```\n[iteminst.GetUnscaledItem on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/getunscaleditem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.IsAmmo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.IsAmmo()\n```\n[iteminst.IsAmmo on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/isammo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.IsAugmentable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.IsAugmentable()\n```\n[iteminst.IsAugmentable on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/isaugmentable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.IsAugmented") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.IsAugmented()\n```\n[iteminst.IsAugmented on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/isaugmented)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.IsEquipable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.IsEquipable()\n```\n[iteminst.IsEquipable on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/isequipable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.IsExpendable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.IsExpendable()\n```\n[iteminst.IsExpendable on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/isexpendable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.IsInstNoDrop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.IsInstNoDrop()\n```\n[iteminst.IsInstNoDrop on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/isinstnodrop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.IsStackable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.IsStackable()\n```\n[iteminst.IsStackable on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/isstackable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.IsType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.IsType()\n```\n[iteminst.IsType on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/istype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.IsWeapon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.IsWeapon()\n```\n[iteminst.IsWeapon on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/isweapon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.SetCharges") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.SetCharges()\n```\n[iteminst.SetCharges on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/setcharges)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.SetColor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.SetColor()\n```\n[iteminst.SetColor on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/setcolor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.SetCustomData") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.SetCustomData()\n```\n[iteminst.SetCustomData on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/setcustomdata)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.SetExp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.SetExp()\n```\n[iteminst.SetExp on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/setexp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.SetInstNoDrop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.SetInstNoDrop()\n```\n[iteminst.SetInstNoDrop on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/setinstnodrop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.SetPrice") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.SetPrice()\n```\n[iteminst.SetPrice on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/setprice)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.SetScale") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.SetScale()\n```\n[iteminst.SetScale on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/setscale)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.SetScaling") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.SetScaling()\n```\n[iteminst.SetScaling on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/setscaling)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.SetTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.SetTimer()\n```\n[iteminst.SetTimer on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/settimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "iteminst.StopTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\niteminst.StopTimer()\n```\n[iteminst.StopTimer on questapi](https://questapi.firebaseapp.com/en/lua/iteminst/stoptimer)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "journal_mode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\njournal_mode\n```\n[journal_mode on questapi](https://questapi.firebaseapp.com/en/lua/journal_mode/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "journal_mode.Log1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\njournal_mode.Log1()\n```\n[journal_mode.Log1 on questapi](https://questapi.firebaseapp.com/en/lua/journal_mode/log1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "journal_mode.Log2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\njournal_mode.Log2()\n```\n[journal_mode.Log2 on questapi](https://questapi.firebaseapp.com/en/lua/journal_mode/log2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "journal_mode.None") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\njournal_mode.None()\n```\n[journal_mode.None on questapi](https://questapi.firebaseapp.com/en/lua/journal_mode/none)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "material") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial\n```\n[material on questapi](https://questapi.firebaseapp.com/en/lua/material/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Arms") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Arms\n```\n[material.Arms on questapi](https://questapi.firebaseapp.com/en/lua/material/arms)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Bracer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Bracer\n```\n[material.Bracer on questapi](https://questapi.firebaseapp.com/en/lua/material/bracer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Chest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Chest\n```\n[material.Chest on questapi](https://questapi.firebaseapp.com/en/lua/material/chest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Count") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Count\n```\n[material.Count on questapi](https://questapi.firebaseapp.com/en/lua/material/count)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Feet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Feet\n```\n[material.Feet on questapi](https://questapi.firebaseapp.com/en/lua/material/feet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Hands") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Hands\n```\n[material.Hands on questapi](https://questapi.firebaseapp.com/en/lua/material/hands)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Head") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Head\n```\n[material.Head on questapi](https://questapi.firebaseapp.com/en/lua/material/head)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Invalid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Invalid\n```\n[material.Invalid on questapi](https://questapi.firebaseapp.com/en/lua/material/invalid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Legs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Legs\n```\n[material.Legs on questapi](https://questapi.firebaseapp.com/en/lua/material/legs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Max") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Max\n```\n[material.Max on questapi](https://questapi.firebaseapp.com/en/lua/material/max)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Primary") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Primary\n```\n[material.Primary on questapi](https://questapi.firebaseapp.com/en/lua/material/primary)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Secondary") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Secondary\n```\n[material.Secondary on questapi](https://questapi.firebaseapp.com/en/lua/material/secondary)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "material.Wrist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmaterial.Wrist\n```\n[material.Wrist on questapi](https://questapi.firebaseapp.com/en/lua/material/wrist)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "mob") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob\n```\n[mob on questapi](https://questapi.firebaseapp.com/en/lua/mob/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.AddNimbusEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.AddNimbusEffect()\n```\n[mob.AddNimbusEffect on questapi](https://questapi.firebaseapp.com/en/lua/mob/addnimbuseffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.AddToHateList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.AddToHateList()\n```\n[mob.AddToHateList on questapi](https://questapi.firebaseapp.com/en/lua/mob/addtohatelist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Attack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Attack()\n```\n[mob.Attack on questapi](https://questapi.firebaseapp.com/en/lua/mob/attack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.AttackAnimation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.AttackAnimation()\n```\n[mob.AttackAnimation on questapi](https://questapi.firebaseapp.com/en/lua/mob/attackanimation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.BehindMob") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.BehindMob()\n```\n[mob.BehindMob on questapi](https://questapi.firebaseapp.com/en/lua/mob/behindmob)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.BuffCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.BuffCount()\n```\n[mob.BuffCount on questapi](https://questapi.firebaseapp.com/en/lua/mob/buffcount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.BuffFadeAll") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.BuffFadeAll()\n```\n[mob.BuffFadeAll on questapi](https://questapi.firebaseapp.com/en/lua/mob/bufffadeall)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.BuffFadeByEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.BuffFadeByEffect()\n```\n[mob.BuffFadeByEffect on questapi](https://questapi.firebaseapp.com/en/lua/mob/bufffadebyeffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.BuffFadeBySlot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.BuffFadeBySlot()\n```\n[mob.BuffFadeBySlot on questapi](https://questapi.firebaseapp.com/en/lua/mob/bufffadebyslot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.BuffFadeBySpellID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.BuffFadeBySpellID()\n```\n[mob.BuffFadeBySpellID on questapi](https://questapi.firebaseapp.com/en/lua/mob/bufffadebyspellid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CalculateDistance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CalculateDistance()\n```\n[mob.CalculateDistance on questapi](https://questapi.firebaseapp.com/en/lua/mob/calculatedistance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CalculateHeadingToTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CalculateHeadingToTarget()\n```\n[mob.CalculateHeadingToTarget on questapi](https://questapi.firebaseapp.com/en/lua/mob/calculateheadingtotarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CameraEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CameraEffect()\n```\n[mob.CameraEffect on questapi](https://questapi.firebaseapp.com/en/lua/mob/cameraeffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CanBuffStack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CanBuffStack()\n```\n[mob.CanBuffStack on questapi](https://questapi.firebaseapp.com/en/lua/mob/canbuffstack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CanThisClassBlock") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CanThisClassBlock()\n```\n[mob.CanThisClassBlock on questapi](https://questapi.firebaseapp.com/en/lua/mob/canthisclassblock)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CanThisClassDodge") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CanThisClassDodge()\n```\n[mob.CanThisClassDodge on questapi](https://questapi.firebaseapp.com/en/lua/mob/canthisclassdodge)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CanThisClassDoubleAttack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CanThisClassDoubleAttack()\n```\n[mob.CanThisClassDoubleAttack on questapi](https://questapi.firebaseapp.com/en/lua/mob/canthisclassdoubleattack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CanThisClassDualWield") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CanThisClassDualWield()\n```\n[mob.CanThisClassDualWield on questapi](https://questapi.firebaseapp.com/en/lua/mob/canthisclassdualwield)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CanThisClassParry") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CanThisClassParry()\n```\n[mob.CanThisClassParry on questapi](https://questapi.firebaseapp.com/en/lua/mob/canthisclassparry)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CanThisClassRiposte") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CanThisClassRiposte()\n```\n[mob.CanThisClassRiposte on questapi](https://questapi.firebaseapp.com/en/lua/mob/canthisclassriposte)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CastSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CastSpell()\n```\n[mob.CastSpell on questapi](https://questapi.firebaseapp.com/en/lua/mob/castspell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeBeard") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeBeard()\n```\n[mob.ChangeBeard on questapi](https://questapi.firebaseapp.com/en/lua/mob/changebeard)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeBeardColor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeBeardColor()\n```\n[mob.ChangeBeardColor on questapi](https://questapi.firebaseapp.com/en/lua/mob/changebeardcolor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeDrakkinDetails") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeDrakkinDetails()\n```\n[mob.ChangeDrakkinDetails on questapi](https://questapi.firebaseapp.com/en/lua/mob/changedrakkindetails)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeDrakkinHeritage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeDrakkinHeritage()\n```\n[mob.ChangeDrakkinHeritage on questapi](https://questapi.firebaseapp.com/en/lua/mob/changedrakkinheritage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeDrakkinTattoo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeDrakkinTattoo()\n```\n[mob.ChangeDrakkinTattoo on questapi](https://questapi.firebaseapp.com/en/lua/mob/changedrakkintattoo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeGender") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeGender()\n```\n[mob.ChangeGender on questapi](https://questapi.firebaseapp.com/en/lua/mob/changegender)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeHairColor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeHairColor()\n```\n[mob.ChangeHairColor on questapi](https://questapi.firebaseapp.com/en/lua/mob/changehaircolor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeHairStyle") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeHairStyle()\n```\n[mob.ChangeHairStyle on questapi](https://questapi.firebaseapp.com/en/lua/mob/changehairstyle)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeHelmTexture") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeHelmTexture()\n```\n[mob.ChangeHelmTexture on questapi](https://questapi.firebaseapp.com/en/lua/mob/changehelmtexture)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeLuclinFace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeLuclinFace()\n```\n[mob.ChangeLuclinFace on questapi](https://questapi.firebaseapp.com/en/lua/mob/changeluclinface)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeRace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeRace()\n```\n[mob.ChangeRace on questapi](https://questapi.firebaseapp.com/en/lua/mob/changerace)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeSize()\n```\n[mob.ChangeSize on questapi](https://questapi.firebaseapp.com/en/lua/mob/changesize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ChangeTexture") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ChangeTexture()\n```\n[mob.ChangeTexture on questapi](https://questapi.firebaseapp.com/en/lua/mob/changetexture)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Charmed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Charmed()\n```\n[mob.Charmed on questapi](https://questapi.firebaseapp.com/en/lua/mob/charmed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CheckAggro") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CheckAggro()\n```\n[mob.CheckAggro on questapi](https://questapi.firebaseapp.com/en/lua/mob/checkaggro)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CheckAggroAmount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CheckAggroAmount()\n```\n[mob.CheckAggroAmount on questapi](https://questapi.firebaseapp.com/en/lua/mob/checkaggroamount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CheckHealAggroAmount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CheckHealAggroAmount()\n```\n[mob.CheckHealAggroAmount on questapi](https://questapi.firebaseapp.com/en/lua/mob/checkhealaggroamount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CheckLoS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CheckLoS()\n```\n[mob.CheckLoS on questapi](https://questapi.firebaseapp.com/en/lua/mob/checklos)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CheckLoSToLoc") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CheckLoSToLoc()\n```\n[mob.CheckLoSToLoc on questapi](https://questapi.firebaseapp.com/en/lua/mob/checklostoloc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CheckNumHitsRemaining") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CheckNumHitsRemaining()\n```\n[mob.CheckNumHitsRemaining on questapi](https://questapi.firebaseapp.com/en/lua/mob/checknumhitsremaining)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ClearSpecialAbilities") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ClearSpecialAbilities()\n```\n[mob.ClearSpecialAbilities on questapi](https://questapi.firebaseapp.com/en/lua/mob/clearspecialabilities)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.CombatRange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.CombatRange()\n```\n[mob.CombatRange on questapi](https://questapi.firebaseapp.com/en/lua/mob/combatrange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Damage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Damage()\n```\n[mob.Damage on questapi](https://questapi.firebaseapp.com/en/lua/mob/damage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.DelGlobal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.DelGlobal()\n```\n[mob.DelGlobal on questapi](https://questapi.firebaseapp.com/en/lua/mob/delglobal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Depop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Depop()\n```\n[mob.Depop on questapi](https://questapi.firebaseapp.com/en/lua/mob/depop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.DivineAura") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.DivineAura()\n```\n[mob.DivineAura on questapi](https://questapi.firebaseapp.com/en/lua/mob/divineaura)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.DoAnim") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.DoAnim()\n```\n[mob.DoAnim on questapi](https://questapi.firebaseapp.com/en/lua/mob/doanim)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.DoArcheryAttackDmg") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.DoArcheryAttackDmg()\n```\n[mob.DoArcheryAttackDmg on questapi](https://questapi.firebaseapp.com/en/lua/mob/doarcheryattackdmg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.DoKnockback") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.DoKnockback()\n```\n[mob.DoKnockback on questapi](https://questapi.firebaseapp.com/en/lua/mob/doknockback)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.DoMeleeSkillAttackDmg") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.DoMeleeSkillAttackDmg()\n```\n[mob.DoMeleeSkillAttackDmg on questapi](https://questapi.firebaseapp.com/en/lua/mob/domeleeskillattackdmg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.DoSpecialAttackDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.DoSpecialAttackDamage()\n```\n[mob.DoSpecialAttackDamage on questapi](https://questapi.firebaseapp.com/en/lua/mob/dospecialattackdamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.DoThrowingAttackDmg") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.DoThrowingAttackDmg()\n```\n[mob.DoThrowingAttackDmg on questapi](https://questapi.firebaseapp.com/en/lua/mob/dothrowingattackdmg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.DoubleAggro") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.DoubleAggro()\n```\n[mob.DoubleAggro on questapi](https://questapi.firebaseapp.com/en/lua/mob/doubleaggro)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Emote") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Emote()\n```\n[mob.Emote on questapi](https://questapi.firebaseapp.com/en/lua/mob/emote)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.EntityVariableExists") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.EntityVariableExists()\n```\n[mob.EntityVariableExists on questapi](https://questapi.firebaseapp.com/en/lua/mob/entityvariableexists)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.FaceTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.FaceTarget()\n```\n[mob.FaceTarget on questapi](https://questapi.firebaseapp.com/en/lua/mob/facetarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.FindBuff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.FindBuff()\n```\n[mob.FindBuff on questapi](https://questapi.firebaseapp.com/en/lua/mob/findbuff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.FindBuffBySlot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.FindBuffBySlot()\n```\n[mob.FindBuffBySlot on questapi](https://questapi.firebaseapp.com/en/lua/mob/findbuffbyslot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.FindGroundZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.FindGroundZ()\n```\n[mob.FindGroundZ on questapi](https://questapi.firebaseapp.com/en/lua/mob/findgroundz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.FindType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.FindType()\n```\n[mob.FindType on questapi](https://questapi.firebaseapp.com/en/lua/mob/findtype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetAA()\n```\n[mob.GetAA on questapi](https://questapi.firebaseapp.com/en/lua/mob/getaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetAABonuses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetAABonuses()\n```\n[mob.GetAABonuses on questapi](https://questapi.firebaseapp.com/en/lua/mob/getaabonuses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetAAByAAID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetAAByAAID()\n```\n[mob.GetAAByAAID on questapi](https://questapi.firebaseapp.com/en/lua/mob/getaabyaaid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetAC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetAC()\n```\n[mob.GetAC on questapi](https://questapi.firebaseapp.com/en/lua/mob/getac)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetAggroRange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetAggroRange()\n```\n[mob.GetAggroRange on questapi](https://questapi.firebaseapp.com/en/lua/mob/getaggrorange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetAGI") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetAGI()\n```\n[mob.GetAGI on questapi](https://questapi.firebaseapp.com/en/lua/mob/getagi)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetAllowBeneficial") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetAllowBeneficial()\n```\n[mob.GetAllowBeneficial on questapi](https://questapi.firebaseapp.com/en/lua/mob/getallowbeneficial)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetAppearance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetAppearance()\n```\n[mob.GetAppearance on questapi](https://questapi.firebaseapp.com/en/lua/mob/getappearance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetAssistRange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetAssistRange()\n```\n[mob.GetAssistRange on questapi](https://questapi.firebaseapp.com/en/lua/mob/getassistrange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetATK") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetATK()\n```\n[mob.GetATK on questapi](https://questapi.firebaseapp.com/en/lua/mob/getatk)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetBaseGender") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetBaseGender()\n```\n[mob.GetBaseGender on questapi](https://questapi.firebaseapp.com/en/lua/mob/getbasegender)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetBaseRace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetBaseRace()\n```\n[mob.GetBaseRace on questapi](https://questapi.firebaseapp.com/en/lua/mob/getbaserace)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetBaseSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetBaseSize()\n```\n[mob.GetBaseSize on questapi](https://questapi.firebaseapp.com/en/lua/mob/getbasesize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetBeard") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetBeard()\n```\n[mob.GetBeard on questapi](https://questapi.firebaseapp.com/en/lua/mob/getbeard)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetBeardColor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetBeardColor()\n```\n[mob.GetBeardColor on questapi](https://questapi.firebaseapp.com/en/lua/mob/getbeardcolor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetBodyType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetBodyType()\n```\n[mob.GetBodyType on questapi](https://questapi.firebaseapp.com/en/lua/mob/getbodytype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetBuffSlotFromType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetBuffSlotFromType()\n```\n[mob.GetBuffSlotFromType on questapi](https://questapi.firebaseapp.com/en/lua/mob/getbuffslotfromtype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetCasterLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetCasterLevel()\n```\n[mob.GetCasterLevel on questapi](https://questapi.firebaseapp.com/en/lua/mob/getcasterlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetCHA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetCHA()\n```\n[mob.GetCHA on questapi](https://questapi.firebaseapp.com/en/lua/mob/getcha)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetClass") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetClass()\n```\n[mob.GetClass on questapi](https://questapi.firebaseapp.com/en/lua/mob/getclass)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetCleanName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetCleanName()\n```\n[mob.GetCleanName on questapi](https://questapi.firebaseapp.com/en/lua/mob/getcleanname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetCorruption") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetCorruption()\n```\n[mob.GetCorruption on questapi](https://questapi.firebaseapp.com/en/lua/mob/getcorruption)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetCR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetCR()\n```\n[mob.GetCR on questapi](https://questapi.firebaseapp.com/en/lua/mob/getcr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetDamageAmount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetDamageAmount()\n```\n[mob.GetDamageAmount on questapi](https://questapi.firebaseapp.com/en/lua/mob/getdamageamount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetDeity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetDeity()\n```\n[mob.GetDeity on questapi](https://questapi.firebaseapp.com/en/lua/mob/getdeity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetDEX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetDEX()\n```\n[mob.GetDEX on questapi](https://questapi.firebaseapp.com/en/lua/mob/getdex)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetDisplayAC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetDisplayAC()\n```\n[mob.GetDisplayAC on questapi](https://questapi.firebaseapp.com/en/lua/mob/getdisplayac)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetDR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetDR()\n```\n[mob.GetDR on questapi](https://questapi.firebaseapp.com/en/lua/mob/getdr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetDrakkinDetails") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetDrakkinDetails()\n```\n[mob.GetDrakkinDetails on questapi](https://questapi.firebaseapp.com/en/lua/mob/getdrakkindetails)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetDrakkinHeritage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetDrakkinHeritage()\n```\n[mob.GetDrakkinHeritage on questapi](https://questapi.firebaseapp.com/en/lua/mob/getdrakkinheritage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetDrakkinTattoo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetDrakkinTattoo()\n```\n[mob.GetDrakkinTattoo on questapi](https://questapi.firebaseapp.com/en/lua/mob/getdrakkintattoo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetEntityVariable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetEntityVariable()\n```\n[mob.GetEntityVariable on questapi](https://questapi.firebaseapp.com/en/lua/mob/getentityvariable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetFcDamageAmtIncoming") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetFcDamageAmtIncoming()\n```\n[mob.GetFcDamageAmtIncoming on questapi](https://questapi.firebaseapp.com/en/lua/mob/getfcdamageamtincoming)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetFlurryChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetFlurryChance()\n```\n[mob.GetFlurryChance on questapi](https://questapi.firebaseapp.com/en/lua/mob/getflurrychance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetFR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetFR()\n```\n[mob.GetFR on questapi](https://questapi.firebaseapp.com/en/lua/mob/getfr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetGender") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetGender()\n```\n[mob.GetGender on questapi](https://questapi.firebaseapp.com/en/lua/mob/getgender)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetGlobal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetGlobal()\n```\n[mob.GetGlobal on questapi](https://questapi.firebaseapp.com/en/lua/mob/getglobal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHairColor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHairColor()\n```\n[mob.GetHairColor on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethaircolor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHairStyle") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHairStyle()\n```\n[mob.GetHairStyle on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethairstyle)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHandToHandDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHandToHandDamage()\n```\n[mob.GetHandToHandDamage on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethandtohanddamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHandToHandDelay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHandToHandDelay()\n```\n[mob.GetHandToHandDelay on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethandtohanddelay)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHaste") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHaste()\n```\n[mob.GetHaste on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethaste)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHateAmount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHateAmount()\n```\n[mob.GetHateAmount on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethateamount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHateDamageTop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHateDamageTop()\n```\n[mob.GetHateDamageTop on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethatedamagetop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHateList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHateList()\n```\n[mob.GetHateList on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethatelist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHateRandom") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHateRandom()\n```\n[mob.GetHateRandom on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethaterandom)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHateTop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHateTop()\n```\n[mob.GetHateTop on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethatetop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHeading()\n```\n[mob.GetHeading on questapi](https://questapi.firebaseapp.com/en/lua/mob/getheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHelmTexture") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHelmTexture()\n```\n[mob.GetHelmTexture on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethelmtexture)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHerosForgeModel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHerosForgeModel()\n```\n[mob.GetHerosForgeModel on questapi](https://questapi.firebaseapp.com/en/lua/mob/getherosforgemodel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHP()\n```\n[mob.GetHP on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetHPRatio") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetHPRatio()\n```\n[mob.GetHPRatio on questapi](https://questapi.firebaseapp.com/en/lua/mob/gethpratio)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetINT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetINT()\n```\n[mob.GetINT on questapi](https://questapi.firebaseapp.com/en/lua/mob/getint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetInvul") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetInvul()\n```\n[mob.GetInvul on questapi](https://questapi.firebaseapp.com/en/lua/mob/getinvul)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetItemBonuses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetItemBonuses()\n```\n[mob.GetItemBonuses on questapi](https://questapi.firebaseapp.com/en/lua/mob/getitembonuses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetItemHPBonuses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetItemHPBonuses()\n```\n[mob.GetItemHPBonuses on questapi](https://questapi.firebaseapp.com/en/lua/mob/getitemhpbonuses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetItemStat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetItemStat()\n```\n[mob.GetItemStat on questapi](https://questapi.firebaseapp.com/en/lua/mob/getitemstat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetLevel()\n```\n[mob.GetLevel on questapi](https://questapi.firebaseapp.com/en/lua/mob/getlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetLevelCon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetLevelCon()\n```\n[mob.GetLevelCon on questapi](https://questapi.firebaseapp.com/en/lua/mob/getlevelcon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetLuclinFace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetLuclinFace()\n```\n[mob.GetLuclinFace on questapi](https://questapi.firebaseapp.com/en/lua/mob/getluclinface)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMana") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMana()\n```\n[mob.GetMana on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmana)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetManaRatio") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetManaRatio()\n```\n[mob.GetManaRatio on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmanaratio)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMaxAGI") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMaxAGI()\n```\n[mob.GetMaxAGI on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmaxagi)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMaxCHA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMaxCHA()\n```\n[mob.GetMaxCHA on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmaxcha)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMaxDEX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMaxDEX()\n```\n[mob.GetMaxDEX on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmaxdex)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMaxHP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMaxHP()\n```\n[mob.GetMaxHP on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmaxhp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMaxINT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMaxINT()\n```\n[mob.GetMaxINT on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmaxint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMaxMana") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMaxMana()\n```\n[mob.GetMaxMana on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmaxmana)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMaxSTA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMaxSTA()\n```\n[mob.GetMaxSTA on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmaxsta)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMaxSTR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMaxSTR()\n```\n[mob.GetMaxSTR on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmaxstr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMaxWIS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMaxWIS()\n```\n[mob.GetMaxWIS on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmaxwis)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMeleeMitigation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMeleeMitigation()\n```\n[mob.GetMeleeMitigation on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmeleemitigation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetModSkillDmgTaken") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetModSkillDmgTaken()\n```\n[mob.GetModSkillDmgTaken on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmodskilldmgtaken)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetModVulnerability") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetModVulnerability()\n```\n[mob.GetModVulnerability on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmodvulnerability)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetMR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetMR()\n```\n[mob.GetMR on questapi](https://questapi.firebaseapp.com/en/lua/mob/getmr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetName()\n```\n[mob.GetName on questapi](https://questapi.firebaseapp.com/en/lua/mob/getname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetNPCTypeID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetNPCTypeID()\n```\n[mob.GetNPCTypeID on questapi](https://questapi.firebaseapp.com/en/lua/mob/getnpctypeid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetOrigBodyType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetOrigBodyType()\n```\n[mob.GetOrigBodyType on questapi](https://questapi.firebaseapp.com/en/lua/mob/getorigbodytype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetOwner") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetOwner()\n```\n[mob.GetOwner on questapi](https://questapi.firebaseapp.com/en/lua/mob/getowner)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetPet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetPet()\n```\n[mob.GetPet on questapi](https://questapi.firebaseapp.com/en/lua/mob/getpet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetPetOrder") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetPetOrder()\n```\n[mob.GetPetOrder on questapi](https://questapi.firebaseapp.com/en/lua/mob/getpetorder)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetPhR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetPhR()\n```\n[mob.GetPhR on questapi](https://questapi.firebaseapp.com/en/lua/mob/getphr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetPR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetPR()\n```\n[mob.GetPR on questapi](https://questapi.firebaseapp.com/en/lua/mob/getpr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetRace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetRace()\n```\n[mob.GetRace on questapi](https://questapi.firebaseapp.com/en/lua/mob/getrace)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetResist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetResist()\n```\n[mob.GetResist on questapi](https://questapi.firebaseapp.com/en/lua/mob/getresist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetReverseFactionCon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetReverseFactionCon()\n```\n[mob.GetReverseFactionCon on questapi](https://questapi.firebaseapp.com/en/lua/mob/getreversefactioncon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetRunspeed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetRunspeed()\n```\n[mob.GetRunspeed on questapi](https://questapi.firebaseapp.com/en/lua/mob/getrunspeed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSize()\n```\n[mob.GetSize on questapi](https://questapi.firebaseapp.com/en/lua/mob/getsize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSkill()\n```\n[mob.GetSkill on questapi](https://questapi.firebaseapp.com/en/lua/mob/getskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSkillDmgAmt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSkillDmgAmt()\n```\n[mob.GetSkillDmgAmt on questapi](https://questapi.firebaseapp.com/en/lua/mob/getskilldmgamt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSkillDmgTaken") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSkillDmgTaken()\n```\n[mob.GetSkillDmgTaken on questapi](https://questapi.firebaseapp.com/en/lua/mob/getskilldmgtaken)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSpecialAbility") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSpecialAbility()\n```\n[mob.GetSpecialAbility on questapi](https://questapi.firebaseapp.com/en/lua/mob/getspecialability)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSpecialAbilityParam") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSpecialAbilityParam()\n```\n[mob.GetSpecialAbilityParam on questapi](https://questapi.firebaseapp.com/en/lua/mob/getspecialabilityparam)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSpecializeSkillValue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSpecializeSkillValue()\n```\n[mob.GetSpecializeSkillValue on questapi](https://questapi.firebaseapp.com/en/lua/mob/getspecializeskillvalue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSpellBonuses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSpellBonuses()\n```\n[mob.GetSpellBonuses on questapi](https://questapi.firebaseapp.com/en/lua/mob/getspellbonuses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSpellHPBonuses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSpellHPBonuses()\n```\n[mob.GetSpellHPBonuses on questapi](https://questapi.firebaseapp.com/en/lua/mob/getspellhpbonuses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSTA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSTA()\n```\n[mob.GetSTA on questapi](https://questapi.firebaseapp.com/en/lua/mob/getsta)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetSTR") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetSTR()\n```\n[mob.GetSTR on questapi](https://questapi.firebaseapp.com/en/lua/mob/getstr)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetTarget()\n```\n[mob.GetTarget on questapi](https://questapi.firebaseapp.com/en/lua/mob/gettarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetTexture") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetTexture()\n```\n[mob.GetTexture on questapi](https://questapi.firebaseapp.com/en/lua/mob/gettexture)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetWalkspeed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetWalkspeed()\n```\n[mob.GetWalkspeed on questapi](https://questapi.firebaseapp.com/en/lua/mob/getwalkspeed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetWaypointH") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetWaypointH()\n```\n[mob.GetWaypointH on questapi](https://questapi.firebaseapp.com/en/lua/mob/getwaypointh)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetWaypointID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetWaypointID()\n```\n[mob.GetWaypointID on questapi](https://questapi.firebaseapp.com/en/lua/mob/getwaypointid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetWaypointPause") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetWaypointPause()\n```\n[mob.GetWaypointPause on questapi](https://questapi.firebaseapp.com/en/lua/mob/getwaypointpause)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetWaypointX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetWaypointX()\n```\n[mob.GetWaypointX on questapi](https://questapi.firebaseapp.com/en/lua/mob/getwaypointx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetWaypointY") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetWaypointY()\n```\n[mob.GetWaypointY on questapi](https://questapi.firebaseapp.com/en/lua/mob/getwaypointy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetWaypointZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetWaypointZ()\n```\n[mob.GetWaypointZ on questapi](https://questapi.firebaseapp.com/en/lua/mob/getwaypointz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetWeaponDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetWeaponDamage()\n```\n[mob.GetWeaponDamage on questapi](https://questapi.firebaseapp.com/en/lua/mob/getweapondamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetWeaponDamageBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetWeaponDamageBonus()\n```\n[mob.GetWeaponDamageBonus on questapi](https://questapi.firebaseapp.com/en/lua/mob/getweapondamagebonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetWIS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetWIS()\n```\n[mob.GetWIS on questapi](https://questapi.firebaseapp.com/en/lua/mob/getwis)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetX()\n```\n[mob.GetX on questapi](https://questapi.firebaseapp.com/en/lua/mob/getx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetY") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetY()\n```\n[mob.GetY on questapi](https://questapi.firebaseapp.com/en/lua/mob/gety)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GetZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GetZ()\n```\n[mob.GetZ on questapi](https://questapi.firebaseapp.com/en/lua/mob/getz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GMMove") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GMMove()\n```\n[mob.GMMove on questapi](https://questapi.firebaseapp.com/en/lua/mob/gmmove)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.GotoBind") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.GotoBind()\n```\n[mob.GotoBind on questapi](https://questapi.firebaseapp.com/en/lua/mob/gotobind)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.HalveAggro") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.HalveAggro()\n```\n[mob.HalveAggro on questapi](https://questapi.firebaseapp.com/en/lua/mob/halveaggro)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.HasNPCSpecialAtk") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.HasNPCSpecialAtk()\n```\n[mob.HasNPCSpecialAtk on questapi](https://questapi.firebaseapp.com/en/lua/mob/hasnpcspecialatk)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.HasOwner") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.HasOwner()\n```\n[mob.HasOwner on questapi](https://questapi.firebaseapp.com/en/lua/mob/hasowner)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.HasPet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.HasPet()\n```\n[mob.HasPet on questapi](https://questapi.firebaseapp.com/en/lua/mob/haspet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.HasProcs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.HasProcs()\n```\n[mob.HasProcs on questapi](https://questapi.firebaseapp.com/en/lua/mob/hasprocs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.HasShieldEquiped") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.HasShieldEquiped()\n```\n[mob.HasShieldEquiped on questapi](https://questapi.firebaseapp.com/en/lua/mob/hasshieldequiped)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.HasTwoHandBluntEquiped") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.HasTwoHandBluntEquiped()\n```\n[mob.HasTwoHandBluntEquiped on questapi](https://questapi.firebaseapp.com/en/lua/mob/hastwohandbluntequiped)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.HasTwoHanderEquipped") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.HasTwoHanderEquipped()\n```\n[mob.HasTwoHanderEquipped on questapi](https://questapi.firebaseapp.com/en/lua/mob/hastwohanderequipped)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Heal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Heal()\n```\n[mob.Heal on questapi](https://questapi.firebaseapp.com/en/lua/mob/heal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.HealDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.HealDamage()\n```\n[mob.HealDamage on questapi](https://questapi.firebaseapp.com/en/lua/mob/healdamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.InterruptSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.InterruptSpell()\n```\n[mob.InterruptSpell on questapi](https://questapi.firebaseapp.com/en/lua/mob/interruptspell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsAIControlled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsAIControlled()\n```\n[mob.IsAIControlled on questapi](https://questapi.firebaseapp.com/en/lua/mob/isaicontrolled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsAmnesiad") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsAmnesiad()\n```\n[mob.IsAmnesiad on questapi](https://questapi.firebaseapp.com/en/lua/mob/isamnesiad)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsAttackAllowed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsAttackAllowed()\n```\n[mob.IsAttackAllowed on questapi](https://questapi.firebaseapp.com/en/lua/mob/isattackallowed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsBeneficialAllowed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsBeneficialAllowed()\n```\n[mob.IsBeneficialAllowed on questapi](https://questapi.firebaseapp.com/en/lua/mob/isbeneficialallowed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsBerserk") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsBerserk()\n```\n[mob.IsBerserk on questapi](https://questapi.firebaseapp.com/en/lua/mob/isberserk)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsBlind") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsBlind()\n```\n[mob.IsBlind on questapi](https://questapi.firebaseapp.com/en/lua/mob/isblind)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsCasting") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsCasting()\n```\n[mob.IsCasting on questapi](https://questapi.firebaseapp.com/en/lua/mob/iscasting)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsEliteMaterialItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsEliteMaterialItem()\n```\n[mob.IsEliteMaterialItem on questapi](https://questapi.firebaseapp.com/en/lua/mob/iselitematerialitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsEngaged") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsEngaged()\n```\n[mob.IsEngaged on questapi](https://questapi.firebaseapp.com/en/lua/mob/isengaged)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsEnraged") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsEnraged()\n```\n[mob.IsEnraged on questapi](https://questapi.firebaseapp.com/en/lua/mob/isenraged)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsFeared") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsFeared()\n```\n[mob.IsFeared on questapi](https://questapi.firebaseapp.com/en/lua/mob/isfeared)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsImmuneToSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsImmuneToSpell()\n```\n[mob.IsImmuneToSpell on questapi](https://questapi.firebaseapp.com/en/lua/mob/isimmunetospell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsInvisible") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsInvisible()\n```\n[mob.IsInvisible on questapi](https://questapi.firebaseapp.com/en/lua/mob/isinvisible)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsMeleeDisabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsMeleeDisabled()\n```\n[mob.IsMeleeDisabled on questapi](https://questapi.firebaseapp.com/en/lua/mob/ismeleedisabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsMezzed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsMezzed()\n```\n[mob.IsMezzed on questapi](https://questapi.firebaseapp.com/en/lua/mob/ismezzed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsMoving") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsMoving()\n```\n[mob.IsMoving on questapi](https://questapi.firebaseapp.com/en/lua/mob/ismoving)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsPet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsPet()\n```\n[mob.IsPet on questapi](https://questapi.firebaseapp.com/en/lua/mob/ispet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsRoamer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsRoamer()\n```\n[mob.IsRoamer on questapi](https://questapi.firebaseapp.com/en/lua/mob/isroamer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsRooted") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsRooted()\n```\n[mob.IsRooted on questapi](https://questapi.firebaseapp.com/en/lua/mob/isrooted)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsRunning") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsRunning()\n```\n[mob.IsRunning on questapi](https://questapi.firebaseapp.com/en/lua/mob/isrunning)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsSilenced") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsSilenced()\n```\n[mob.IsSilenced on questapi](https://questapi.firebaseapp.com/en/lua/mob/issilenced)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsStunned") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsStunned()\n```\n[mob.IsStunned on questapi](https://questapi.firebaseapp.com/en/lua/mob/isstunned)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsTargetable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsTargetable()\n```\n[mob.IsTargetable on questapi](https://questapi.firebaseapp.com/en/lua/mob/istargetable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsTargeted") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsTargeted()\n```\n[mob.IsTargeted on questapi](https://questapi.firebaseapp.com/en/lua/mob/istargeted)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.IsWarriorClass") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.IsWarriorClass()\n```\n[mob.IsWarriorClass on questapi](https://questapi.firebaseapp.com/en/lua/mob/iswarriorclass)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Kill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Kill()\n```\n[mob.Kill on questapi](https://questapi.firebaseapp.com/en/lua/mob/kill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Mesmerize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Mesmerize()\n```\n[mob.Mesmerize on questapi](https://questapi.firebaseapp.com/en/lua/mob/mesmerize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Message") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Message()\n```\n[mob.Message on questapi](https://questapi.firebaseapp.com/en/lua/mob/message)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.MessageString") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.MessageString()\n```\n[mob.MessageString on questapi](https://questapi.firebaseapp.com/en/lua/mob/messagestring)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ModSkillDmgTaken") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ModSkillDmgTaken()\n```\n[mob.ModSkillDmgTaken on questapi](https://questapi.firebaseapp.com/en/lua/mob/modskilldmgtaken)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ModVulnerability") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ModVulnerability()\n```\n[mob.ModVulnerability on questapi](https://questapi.firebaseapp.com/en/lua/mob/modvulnerability)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.NavigateTo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.NavigateTo()\n```\n[mob.NavigateTo on questapi](https://questapi.firebaseapp.com/en/lua/mob/navigateto)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.NPCSpecialAttacks") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.NPCSpecialAttacks()\n```\n[mob.NPCSpecialAttacks on questapi](https://questapi.firebaseapp.com/en/lua/mob/npcspecialattacks)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ProcessSpecialAbilities") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ProcessSpecialAbilities()\n```\n[mob.ProcessSpecialAbilities on questapi](https://questapi.firebaseapp.com/en/lua/mob/processspecialabilities)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ProjectileAnimation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ProjectileAnimation()\n```\n[mob.ProjectileAnimation on questapi](https://questapi.firebaseapp.com/en/lua/mob/projectileanimation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.QuestSay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.QuestSay()\n```\n[mob.QuestSay on questapi](https://questapi.firebaseapp.com/en/lua/mob/questsay)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.RandomizeFeatures") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.RandomizeFeatures()\n```\n[mob.RandomizeFeatures on questapi](https://questapi.firebaseapp.com/en/lua/mob/randomizefeatures)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.RangedAttack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.RangedAttack()\n```\n[mob.RangedAttack on questapi](https://questapi.firebaseapp.com/en/lua/mob/rangedattack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.RemoveNimbusEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.RemoveNimbusEffect()\n```\n[mob.RemoveNimbusEffect on questapi](https://questapi.firebaseapp.com/en/lua/mob/removenimbuseffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ResistSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ResistSpell()\n```\n[mob.ResistSpell on questapi](https://questapi.firebaseapp.com/en/lua/mob/resistspell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.RunTo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.RunTo()\n```\n[mob.RunTo on questapi](https://questapi.firebaseapp.com/en/lua/mob/runto)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Say") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Say()\n```\n[mob.Say on questapi](https://questapi.firebaseapp.com/en/lua/mob/say)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SeeHide") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SeeHide()\n```\n[mob.SeeHide on questapi](https://questapi.firebaseapp.com/en/lua/mob/seehide)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SeeImprovedHide") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SeeImprovedHide()\n```\n[mob.SeeImprovedHide on questapi](https://questapi.firebaseapp.com/en/lua/mob/seeimprovedhide)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SeeInvisible") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SeeInvisible()\n```\n[mob.SeeInvisible on questapi](https://questapi.firebaseapp.com/en/lua/mob/seeinvisible)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SeeInvisibleUndead") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SeeInvisibleUndead()\n```\n[mob.SeeInvisibleUndead on questapi](https://questapi.firebaseapp.com/en/lua/mob/seeinvisibleundead)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SendAppearanceEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SendAppearanceEffect()\n```\n[mob.SendAppearanceEffect on questapi](https://questapi.firebaseapp.com/en/lua/mob/sendappearanceeffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SendBeginCast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SendBeginCast()\n```\n[mob.SendBeginCast on questapi](https://questapi.firebaseapp.com/en/lua/mob/sendbegincast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SendIllusionPacket") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SendIllusionPacket()\n```\n[mob.SendIllusionPacket on questapi](https://questapi.firebaseapp.com/en/lua/mob/sendillusionpacket)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SendSpellEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SendSpellEffect()\n```\n[mob.SendSpellEffect on questapi](https://questapi.firebaseapp.com/en/lua/mob/sendspelleffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SendTo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SendTo()\n```\n[mob.SendTo on questapi](https://questapi.firebaseapp.com/en/lua/mob/sendto)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SendToFixZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SendToFixZ()\n```\n[mob.SendToFixZ on questapi](https://questapi.firebaseapp.com/en/lua/mob/sendtofixz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetAA()\n```\n[mob.SetAA on questapi](https://questapi.firebaseapp.com/en/lua/mob/setaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetAllowBeneficial") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetAllowBeneficial()\n```\n[mob.SetAllowBeneficial on questapi](https://questapi.firebaseapp.com/en/lua/mob/setallowbeneficial)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetAppearance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetAppearance()\n```\n[mob.SetAppearance on questapi](https://questapi.firebaseapp.com/en/lua/mob/setappearance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetBodyType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetBodyType()\n```\n[mob.SetBodyType on questapi](https://questapi.firebaseapp.com/en/lua/mob/setbodytype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetCurrentWP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetCurrentWP()\n```\n[mob.SetCurrentWP on questapi](https://questapi.firebaseapp.com/en/lua/mob/setcurrentwp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetDestructibleObject") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetDestructibleObject()\n```\n[mob.SetDestructibleObject on questapi](https://questapi.firebaseapp.com/en/lua/mob/setdestructibleobject)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetDisableMelee") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetDisableMelee()\n```\n[mob.SetDisableMelee on questapi](https://questapi.firebaseapp.com/en/lua/mob/setdisablemelee)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetEntityVariable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetEntityVariable()\n```\n[mob.SetEntityVariable on questapi](https://questapi.firebaseapp.com/en/lua/mob/setentityvariable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetExtraHaste") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetExtraHaste()\n```\n[mob.SetExtraHaste on questapi](https://questapi.firebaseapp.com/en/lua/mob/setextrahaste)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetFlurryChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetFlurryChance()\n```\n[mob.SetFlurryChance on questapi](https://questapi.firebaseapp.com/en/lua/mob/setflurrychance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetFlyMode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetFlyMode()\n```\n[mob.SetFlyMode on questapi](https://questapi.firebaseapp.com/en/lua/mob/setflymode)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetGender") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetGender()\n```\n[mob.SetGender on questapi](https://questapi.firebaseapp.com/en/lua/mob/setgender)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetGlobal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetGlobal()\n```\n[mob.SetGlobal on questapi](https://questapi.firebaseapp.com/en/lua/mob/setglobal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetHate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetHate()\n```\n[mob.SetHate on questapi](https://questapi.firebaseapp.com/en/lua/mob/sethate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetHeading()\n```\n[mob.SetHeading on questapi](https://questapi.firebaseapp.com/en/lua/mob/setheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetHP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetHP()\n```\n[mob.SetHP on questapi](https://questapi.firebaseapp.com/en/lua/mob/sethp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetInvisible") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetInvisible()\n```\n[mob.SetInvisible on questapi](https://questapi.firebaseapp.com/en/lua/mob/setinvisible)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetInvul") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetInvul()\n```\n[mob.SetInvul on questapi](https://questapi.firebaseapp.com/en/lua/mob/setinvul)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetLevel()\n```\n[mob.SetLevel on questapi](https://questapi.firebaseapp.com/en/lua/mob/setlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetMana") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetMana()\n```\n[mob.SetMana on questapi](https://questapi.firebaseapp.com/en/lua/mob/setmana)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetOOCRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetOOCRegen()\n```\n[mob.SetOOCRegen on questapi](https://questapi.firebaseapp.com/en/lua/mob/setoocregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetPetOrder") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetPetOrder()\n```\n[mob.SetPetOrder on questapi](https://questapi.firebaseapp.com/en/lua/mob/setpetorder)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetPseudoRoot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetPseudoRoot()\n```\n[mob.SetPseudoRoot on questapi](https://questapi.firebaseapp.com/en/lua/mob/setpseudoroot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetRace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetRace()\n```\n[mob.SetRace on questapi](https://questapi.firebaseapp.com/en/lua/mob/setrace)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetRunning") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetRunning()\n```\n[mob.SetRunning on questapi](https://questapi.firebaseapp.com/en/lua/mob/setrunning)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetSlotTint") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetSlotTint()\n```\n[mob.SetSlotTint on questapi](https://questapi.firebaseapp.com/en/lua/mob/setslottint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetSpecialAbility") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetSpecialAbility()\n```\n[mob.SetSpecialAbility on questapi](https://questapi.firebaseapp.com/en/lua/mob/setspecialability)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetSpecialAbilityParam") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetSpecialAbilityParam()\n```\n[mob.SetSpecialAbilityParam on questapi](https://questapi.firebaseapp.com/en/lua/mob/setspecialabilityparam)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetTarget()\n```\n[mob.SetTarget on questapi](https://questapi.firebaseapp.com/en/lua/mob/settarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetTargetable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetTargetable()\n```\n[mob.SetTargetable on questapi](https://questapi.firebaseapp.com/en/lua/mob/settargetable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SetTexture") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SetTexture()\n```\n[mob.SetTexture on questapi](https://questapi.firebaseapp.com/en/lua/mob/settexture)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Shout") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Shout()\n```\n[mob.Shout on questapi](https://questapi.firebaseapp.com/en/lua/mob/shout)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Signal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Signal()\n```\n[mob.Signal on questapi](https://questapi.firebaseapp.com/en/lua/mob/signal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SpellEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SpellEffect()\n```\n[mob.SpellEffect on questapi](https://questapi.firebaseapp.com/en/lua/mob/spelleffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.SpellFinished") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.SpellFinished()\n```\n[mob.SpellFinished on questapi](https://questapi.firebaseapp.com/en/lua/mob/spellfinished)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Spin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Spin()\n```\n[mob.Spin on questapi](https://questapi.firebaseapp.com/en/lua/mob/spin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.StopNavigation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.StopNavigation()\n```\n[mob.StopNavigation on questapi](https://questapi.firebaseapp.com/en/lua/mob/stopnavigation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.Stun") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.Stun()\n```\n[mob.Stun on questapi](https://questapi.firebaseapp.com/en/lua/mob/stun)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.TarGlobal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.TarGlobal()\n```\n[mob.TarGlobal on questapi](https://questapi.firebaseapp.com/en/lua/mob/targlobal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.TempName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.TempName()\n```\n[mob.TempName on questapi](https://questapi.firebaseapp.com/en/lua/mob/tempname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.ThrowingAttack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.ThrowingAttack()\n```\n[mob.ThrowingAttack on questapi](https://questapi.firebaseapp.com/en/lua/mob/throwingattack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.TryFinishingBlow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.TryFinishingBlow()\n```\n[mob.TryFinishingBlow on questapi](https://questapi.firebaseapp.com/en/lua/mob/tryfinishingblow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.TryMoveAlong") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.TryMoveAlong()\n```\n[mob.TryMoveAlong on questapi](https://questapi.firebaseapp.com/en/lua/mob/trymovealong)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.UnStun") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.UnStun()\n```\n[mob.UnStun on questapi](https://questapi.firebaseapp.com/en/lua/mob/unstun)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.WalkTo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.WalkTo()\n```\n[mob.WalkTo on questapi](https://questapi.firebaseapp.com/en/lua/mob/walkto)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.WearChange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.WearChange()\n```\n[mob.WearChange on questapi](https://questapi.firebaseapp.com/en/lua/mob/wearchange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob.WipeHateList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob.WipeHateList()\n```\n[mob.WipeHateList on questapi](https://questapi.firebaseapp.com/en/lua/mob/wipehatelist)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "mob_list") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob_list\n```\n[mob_list on questapi](https://questapi.firebaseapp.com/en/lua/mob_list/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mob_list.Entries") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmob_list.Entries()\n```\n[mob_list.Entries on questapi](https://questapi.firebaseapp.com/en/lua/mob_list/entries)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "mt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt\n```\n[mt on questapi](https://questapi.firebaseapp.com/en/lua/mt/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Auction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Auction\n```\n[mt.Auction on questapi](https://questapi.firebaseapp.com/en/lua/mt/auction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.AuctionEcho") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.AuctionEcho\n```\n[mt.AuctionEcho on questapi](https://questapi.firebaseapp.com/en/lua/mt/auctionecho)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Broadcasts") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Broadcasts\n```\n[mt.Broadcasts on questapi](https://questapi.firebaseapp.com/en/lua/mt/broadcasts)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Channel1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Channel1\n```\n[mt.Channel1 on questapi](https://questapi.firebaseapp.com/en/lua/mt/channel1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Channel10") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Channel10\n```\n[mt.Channel10 on questapi](https://questapi.firebaseapp.com/en/lua/mt/channel10)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Channel2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Channel2\n```\n[mt.Channel2 on questapi](https://questapi.firebaseapp.com/en/lua/mt/channel2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Channel3") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Channel3\n```\n[mt.Channel3 on questapi](https://questapi.firebaseapp.com/en/lua/mt/channel3)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Channel4") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Channel4\n```\n[mt.Channel4 on questapi](https://questapi.firebaseapp.com/en/lua/mt/channel4)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Channel5") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Channel5\n```\n[mt.Channel5 on questapi](https://questapi.firebaseapp.com/en/lua/mt/channel5)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Channel6") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Channel6\n```\n[mt.Channel6 on questapi](https://questapi.firebaseapp.com/en/lua/mt/channel6)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Channel7") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Channel7\n```\n[mt.Channel7 on questapi](https://questapi.firebaseapp.com/en/lua/mt/channel7)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Channel8") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Channel8\n```\n[mt.Channel8 on questapi](https://questapi.firebaseapp.com/en/lua/mt/channel8)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Channel9") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Channel9\n```\n[mt.Channel9 on questapi](https://questapi.firebaseapp.com/en/lua/mt/channel9)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat\n```\n[mt.Chat on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat10Echo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat10Echo\n```\n[mt.Chat10Echo on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat10echo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat1Echo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat1Echo\n```\n[mt.Chat1Echo on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat1echo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat2Echo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat2Echo\n```\n[mt.Chat2Echo on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat2echo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat3Echo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat3Echo\n```\n[mt.Chat3Echo on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat3echo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat4Echo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat4Echo\n```\n[mt.Chat4Echo on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat4echo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat5Echo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat5Echo\n```\n[mt.Chat5Echo on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat5echo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat6Echo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat6Echo\n```\n[mt.Chat6Echo on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat6echo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat7Echo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat7Echo\n```\n[mt.Chat7Echo on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat7echo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat8Echo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat8Echo\n```\n[mt.Chat8Echo on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat8echo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Chat9Echo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Chat9Echo\n```\n[mt.Chat9Echo on questapi](https://questapi.firebaseapp.com/en/lua/mt/chat9echo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.CritMelee") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.CritMelee\n```\n[mt.CritMelee on questapi](https://questapi.firebaseapp.com/en/lua/mt/critmelee)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.DefaultText") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.DefaultText\n```\n[mt.DefaultText on questapi](https://questapi.firebaseapp.com/en/lua/mt/defaulttext)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.DiceRoll") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.DiceRoll\n```\n[mt.DiceRoll on questapi](https://questapi.firebaseapp.com/en/lua/mt/diceroll)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Disciplines") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Disciplines\n```\n[mt.Disciplines on questapi](https://questapi.firebaseapp.com/en/lua/mt/disciplines)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.DoTDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.DoTDamage\n```\n[mt.DoTDamage on questapi](https://questapi.firebaseapp.com/en/lua/mt/dotdamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.DS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.DS\n```\n[mt.DS on questapi](https://questapi.firebaseapp.com/en/lua/mt/ds)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Emote") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Emote\n```\n[mt.Emote on questapi](https://questapi.firebaseapp.com/en/lua/mt/emote)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.EmoteEcho") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.EmoteEcho\n```\n[mt.EmoteEcho on questapi](https://questapi.firebaseapp.com/en/lua/mt/emoteecho)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Experience") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Experience\n```\n[mt.Experience on questapi](https://questapi.firebaseapp.com/en/lua/mt/experience)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.FocusEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.FocusEffect\n```\n[mt.FocusEffect on questapi](https://questapi.firebaseapp.com/en/lua/mt/focuseffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Group") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Group\n```\n[mt.Group on questapi](https://questapi.firebaseapp.com/en/lua/mt/group)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.GroupEcho") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.GroupEcho\n```\n[mt.GroupEcho on questapi](https://questapi.firebaseapp.com/en/lua/mt/groupecho)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Guild") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Guild\n```\n[mt.Guild on questapi](https://questapi.firebaseapp.com/en/lua/mt/guild)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.GuildEcho") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.GuildEcho\n```\n[mt.GuildEcho on questapi](https://questapi.firebaseapp.com/en/lua/mt/guildecho)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.ItemLink") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.ItemLink\n```\n[mt.ItemLink on questapi](https://questapi.firebaseapp.com/en/lua/mt/itemlink)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.ItemSpeech") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.ItemSpeech\n```\n[mt.ItemSpeech on questapi](https://questapi.firebaseapp.com/en/lua/mt/itemspeech)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Leadership") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Leadership\n```\n[mt.Leadership on questapi](https://questapi.firebaseapp.com/en/lua/mt/leadership)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.LootMessages") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.LootMessages\n```\n[mt.LootMessages on questapi](https://questapi.firebaseapp.com/en/lua/mt/lootmessages)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.MerchantBuySell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.MerchantBuySell\n```\n[mt.MerchantBuySell on questapi](https://questapi.firebaseapp.com/en/lua/mt/merchantbuysell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.MerchantOffer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.MerchantOffer\n```\n[mt.MerchantOffer on questapi](https://questapi.firebaseapp.com/en/lua/mt/merchantoffer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.MoneySplit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.MoneySplit\n```\n[mt.MoneySplit on questapi](https://questapi.firebaseapp.com/en/lua/mt/moneysplit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.MyPet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.MyPet\n```\n[mt.MyPet on questapi](https://questapi.firebaseapp.com/en/lua/mt/mypet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.NonMelee") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.NonMelee\n```\n[mt.NonMelee on questapi](https://questapi.firebaseapp.com/en/lua/mt/nonmelee)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.NPCEnrage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.NPCEnrage\n```\n[mt.NPCEnrage on questapi](https://questapi.firebaseapp.com/en/lua/mt/npcenrage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.NPCFlurry") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.NPCFlurry\n```\n[mt.NPCFlurry on questapi](https://questapi.firebaseapp.com/en/lua/mt/npcflurry)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.NPCQuestSay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.NPCQuestSay\n```\n[mt.NPCQuestSay on questapi](https://questapi.firebaseapp.com/en/lua/mt/npcquestsay)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.NPCRampage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.NPCRampage\n```\n[mt.NPCRampage on questapi](https://questapi.firebaseapp.com/en/lua/mt/npcrampage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.OOC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.OOC\n```\n[mt.OOC on questapi](https://questapi.firebaseapp.com/en/lua/mt/ooc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.OOCEcho") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.OOCEcho\n```\n[mt.OOCEcho on questapi](https://questapi.firebaseapp.com/en/lua/mt/oocecho)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.OtherDeath") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.OtherDeath\n```\n[mt.OtherDeath on questapi](https://questapi.firebaseapp.com/en/lua/mt/otherdeath)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.OtherHits") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.OtherHits\n```\n[mt.OtherHits on questapi](https://questapi.firebaseapp.com/en/lua/mt/otherhits)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.OtherHitsYou") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.OtherHitsYou\n```\n[mt.OtherHitsYou on questapi](https://questapi.firebaseapp.com/en/lua/mt/otherhitsyou)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.OtherMisses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.OtherMisses\n```\n[mt.OtherMisses on questapi](https://questapi.firebaseapp.com/en/lua/mt/othermisses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.OtherMissesYou") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.OtherMissesYou\n```\n[mt.OtherMissesYou on questapi](https://questapi.firebaseapp.com/en/lua/mt/othermissesyou)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.OtherSpells") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.OtherSpells\n```\n[mt.OtherSpells on questapi](https://questapi.firebaseapp.com/en/lua/mt/otherspells)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.PetCrit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.PetCrit\n```\n[mt.PetCrit on questapi](https://questapi.firebaseapp.com/en/lua/mt/petcrit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.PetFlurry") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.PetFlurry\n```\n[mt.PetFlurry on questapi](https://questapi.firebaseapp.com/en/lua/mt/petflurry)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.PetResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.PetResponse\n```\n[mt.PetResponse on questapi](https://questapi.firebaseapp.com/en/lua/mt/petresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.PetSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.PetSpell\n```\n[mt.PetSpell on questapi](https://questapi.firebaseapp.com/en/lua/mt/petspell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.RaidSay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.RaidSay\n```\n[mt.RaidSay on questapi](https://questapi.firebaseapp.com/en/lua/mt/raidsay)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Say") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Say\n```\n[mt.Say on questapi](https://questapi.firebaseapp.com/en/lua/mt/say)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.SayEcho") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.SayEcho\n```\n[mt.SayEcho on questapi](https://questapi.firebaseapp.com/en/lua/mt/sayecho)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Shout") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Shout\n```\n[mt.Shout on questapi](https://questapi.firebaseapp.com/en/lua/mt/shout)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.ShoutECho") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.ShoutECho\n```\n[mt.ShoutECho on questapi](https://questapi.firebaseapp.com/en/lua/mt/shoutecho)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Skills") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Skills\n```\n[mt.Skills on questapi](https://questapi.firebaseapp.com/en/lua/mt/skills)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.SpellCrits") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.SpellCrits\n```\n[mt.SpellCrits on questapi](https://questapi.firebaseapp.com/en/lua/mt/spellcrits)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.SpellFailure") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.SpellFailure\n```\n[mt.SpellFailure on questapi](https://questapi.firebaseapp.com/en/lua/mt/spellfailure)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Spells") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Spells\n```\n[mt.Spells on questapi](https://questapi.firebaseapp.com/en/lua/mt/spells)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.StrikeThrough") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.StrikeThrough\n```\n[mt.StrikeThrough on questapi](https://questapi.firebaseapp.com/en/lua/mt/strikethrough)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Stun") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Stun\n```\n[mt.Stun on questapi](https://questapi.firebaseapp.com/en/lua/mt/stun)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.System") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.System\n```\n[mt.System on questapi](https://questapi.firebaseapp.com/en/lua/mt/system)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Tell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Tell\n```\n[mt.Tell on questapi](https://questapi.firebaseapp.com/en/lua/mt/tell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.TellEcho") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.TellEcho\n```\n[mt.TellEcho on questapi](https://questapi.firebaseapp.com/en/lua/mt/tellecho)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.TooFarAway") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.TooFarAway\n```\n[mt.TooFarAway on questapi](https://questapi.firebaseapp.com/en/lua/mt/toofaraway)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Unused1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Unused1\n```\n[mt.Unused1 on questapi](https://questapi.firebaseapp.com/en/lua/mt/unused1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Unused2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Unused2\n```\n[mt.Unused2 on questapi](https://questapi.firebaseapp.com/en/lua/mt/unused2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.Who") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.Who\n```\n[mt.Who on questapi](https://questapi.firebaseapp.com/en/lua/mt/who)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.WornOff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.WornOff\n```\n[mt.WornOff on questapi](https://questapi.firebaseapp.com/en/lua/mt/wornoff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.YellForHelp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.YellForHelp\n```\n[mt.YellForHelp on questapi](https://questapi.firebaseapp.com/en/lua/mt/yellforhelp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.YouHitOther") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.YouHitOther\n```\n[mt.YouHitOther on questapi](https://questapi.firebaseapp.com/en/lua/mt/youhitother)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.YouMissOther") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.YouMissOther\n```\n[mt.YouMissOther on questapi](https://questapi.firebaseapp.com/en/lua/mt/youmissother)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "mt.YourDeath") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nmt.YourDeath\n```\n[mt.YourDeath on questapi](https://questapi.firebaseapp.com/en/lua/mt/yourdeath)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "npc") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc\n```\n[npc on questapi](https://questapi.firebaseapp.com/en/lua/npc/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.AddAISpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.AddAISpell()\n```\n[npc.AddAISpell on questapi](https://questapi.firebaseapp.com/en/lua/npc/addaispell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.AddCash") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.AddCash()\n```\n[npc.AddCash on questapi](https://questapi.firebaseapp.com/en/lua/npc/addcash)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.AddItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.AddItem()\n```\n[npc.AddItem on questapi](https://questapi.firebaseapp.com/en/lua/npc/additem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.AddLootTable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.AddLootTable()\n```\n[npc.AddLootTable on questapi](https://questapi.firebaseapp.com/en/lua/npc/addloottable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.AssignWaypoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.AssignWaypoints()\n```\n[npc.AssignWaypoints on questapi](https://questapi.firebaseapp.com/en/lua/npc/assignwaypoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.CalculateNewWaypoint") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.CalculateNewWaypoint()\n```\n[npc.CalculateNewWaypoint on questapi](https://questapi.firebaseapp.com/en/lua/npc/calculatenewwaypoint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.CheckNPCFactionAlly") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.CheckNPCFactionAlly()\n```\n[npc.CheckNPCFactionAlly on questapi](https://questapi.firebaseapp.com/en/lua/npc/checknpcfactionally)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.ClearItemList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.ClearItemList()\n```\n[npc.ClearItemList on questapi](https://questapi.firebaseapp.com/en/lua/npc/clearitemlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.CountLoot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.CountLoot()\n```\n[npc.CountLoot on questapi](https://questapi.firebaseapp.com/en/lua/npc/countloot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.DisplayWaypointInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.DisplayWaypointInfo()\n```\n[npc.DisplayWaypointInfo on questapi](https://questapi.firebaseapp.com/en/lua/npc/displaywaypointinfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.DoClassAttacks") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.DoClassAttacks()\n```\n[npc.DoClassAttacks on questapi](https://questapi.firebaseapp.com/en/lua/npc/doclassattacks)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetAccuracyRating") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetAccuracyRating()\n```\n[npc.GetAccuracyRating on questapi](https://questapi.firebaseapp.com/en/lua/npc/getaccuracyrating)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetAttackDelay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetAttackDelay()\n```\n[npc.GetAttackDelay on questapi](https://questapi.firebaseapp.com/en/lua/npc/getattackdelay)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetAttackSpeed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetAttackSpeed()\n```\n[npc.GetAttackSpeed on questapi](https://questapi.firebaseapp.com/en/lua/npc/getattackspeed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetAvoidanceRating") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetAvoidanceRating()\n```\n[npc.GetAvoidanceRating on questapi](https://questapi.firebaseapp.com/en/lua/npc/getavoidancerating)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetCopper") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetCopper()\n```\n[npc.GetCopper on questapi](https://questapi.firebaseapp.com/en/lua/npc/getcopper)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetFollowCanRun") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetFollowCanRun()\n```\n[npc.GetFollowCanRun on questapi](https://questapi.firebaseapp.com/en/lua/npc/getfollowcanrun)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetFollowDistance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetFollowDistance()\n```\n[npc.GetFollowDistance on questapi](https://questapi.firebaseapp.com/en/lua/npc/getfollowdistance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetFollowID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetFollowID()\n```\n[npc.GetFollowID on questapi](https://questapi.firebaseapp.com/en/lua/npc/getfollowid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetGold") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetGold()\n```\n[npc.GetGold on questapi](https://questapi.firebaseapp.com/en/lua/npc/getgold)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetGrid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetGrid()\n```\n[npc.GetGrid on questapi](https://questapi.firebaseapp.com/en/lua/npc/getgrid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetGuardPointX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetGuardPointX()\n```\n[npc.GetGuardPointX on questapi](https://questapi.firebaseapp.com/en/lua/npc/getguardpointx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetGuardPointY") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetGuardPointY()\n```\n[npc.GetGuardPointY on questapi](https://questapi.firebaseapp.com/en/lua/npc/getguardpointy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetGuardPointZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetGuardPointZ()\n```\n[npc.GetGuardPointZ on questapi](https://questapi.firebaseapp.com/en/lua/npc/getguardpointz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetLoottableID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetLoottableID()\n```\n[npc.GetLoottableID on questapi](https://questapi.firebaseapp.com/en/lua/npc/getloottableid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetMaxDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetMaxDamage()\n```\n[npc.GetMaxDamage on questapi](https://questapi.firebaseapp.com/en/lua/npc/getmaxdamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetMaxDMG") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetMaxDMG()\n```\n[npc.GetMaxDMG on questapi](https://questapi.firebaseapp.com/en/lua/npc/getmaxdmg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetMaxWp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetMaxWp()\n```\n[npc.GetMaxWp on questapi](https://questapi.firebaseapp.com/en/lua/npc/getmaxwp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetMinDMG") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetMinDMG()\n```\n[npc.GetMinDMG on questapi](https://questapi.firebaseapp.com/en/lua/npc/getmindmg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetNPCFactionID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetNPCFactionID()\n```\n[npc.GetNPCFactionID on questapi](https://questapi.firebaseapp.com/en/lua/npc/getnpcfactionid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetNPCHate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetNPCHate()\n```\n[npc.GetNPCHate on questapi](https://questapi.firebaseapp.com/en/lua/npc/getnpchate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetNPCSpellsID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetNPCSpellsID()\n```\n[npc.GetNPCSpellsID on questapi](https://questapi.firebaseapp.com/en/lua/npc/getnpcspellsid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetPetSpellID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetPetSpellID()\n```\n[npc.GetPetSpellID on questapi](https://questapi.firebaseapp.com/en/lua/npc/getpetspellid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetPlatinum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetPlatinum()\n```\n[npc.GetPlatinum on questapi](https://questapi.firebaseapp.com/en/lua/npc/getplatinum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetPrimaryFaction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetPrimaryFaction()\n```\n[npc.GetPrimaryFaction on questapi](https://questapi.firebaseapp.com/en/lua/npc/getprimaryfaction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetPrimSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetPrimSkill()\n```\n[npc.GetPrimSkill on questapi](https://questapi.firebaseapp.com/en/lua/npc/getprimskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetRawAC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetRawAC()\n```\n[npc.GetRawAC on questapi](https://questapi.firebaseapp.com/en/lua/npc/getrawac)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetScore") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetScore()\n```\n[npc.GetScore on questapi](https://questapi.firebaseapp.com/en/lua/npc/getscore)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSecSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSecSkill()\n```\n[npc.GetSecSkill on questapi](https://questapi.firebaseapp.com/en/lua/npc/getsecskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSilver") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSilver()\n```\n[npc.GetSilver on questapi](https://questapi.firebaseapp.com/en/lua/npc/getsilver)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSlowMitigation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSlowMitigation()\n```\n[npc.GetSlowMitigation on questapi](https://questapi.firebaseapp.com/en/lua/npc/getslowmitigation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSpawnKillCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSpawnKillCount()\n```\n[npc.GetSpawnKillCount on questapi](https://questapi.firebaseapp.com/en/lua/npc/getspawnkillcount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSpawnPointH") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSpawnPointH()\n```\n[npc.GetSpawnPointH on questapi](https://questapi.firebaseapp.com/en/lua/npc/getspawnpointh)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSpawnPointID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSpawnPointID()\n```\n[npc.GetSpawnPointID on questapi](https://questapi.firebaseapp.com/en/lua/npc/getspawnpointid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSpawnPointX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSpawnPointX()\n```\n[npc.GetSpawnPointX on questapi](https://questapi.firebaseapp.com/en/lua/npc/getspawnpointx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSpawnPointY") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSpawnPointY()\n```\n[npc.GetSpawnPointY on questapi](https://questapi.firebaseapp.com/en/lua/npc/getspawnpointy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSpawnPointZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSpawnPointZ()\n```\n[npc.GetSpawnPointZ on questapi](https://questapi.firebaseapp.com/en/lua/npc/getspawnpointz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSpellFocusDMG") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSpellFocusDMG()\n```\n[npc.GetSpellFocusDMG on questapi](https://questapi.firebaseapp.com/en/lua/npc/getspellfocusdmg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSpellFocusHeal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSpellFocusHeal()\n```\n[npc.GetSpellFocusHeal on questapi](https://questapi.firebaseapp.com/en/lua/npc/getspellfocusheal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSwarmOwner") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSwarmOwner()\n```\n[npc.GetSwarmOwner on questapi](https://questapi.firebaseapp.com/en/lua/npc/getswarmowner)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetSwarmTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetSwarmTarget()\n```\n[npc.GetSwarmTarget on questapi](https://questapi.firebaseapp.com/en/lua/npc/getswarmtarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.GetWaypointMax") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.GetWaypointMax()\n```\n[npc.GetWaypointMax on questapi](https://questapi.firebaseapp.com/en/lua/npc/getwaypointmax)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.IsAnimal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.IsAnimal()\n```\n[npc.IsAnimal on questapi](https://questapi.firebaseapp.com/en/lua/npc/isanimal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.IsGuarding") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.IsGuarding()\n```\n[npc.IsGuarding on questapi](https://questapi.firebaseapp.com/en/lua/npc/isguarding)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.IsOnHatelist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.IsOnHatelist()\n```\n[npc.IsOnHatelist on questapi](https://questapi.firebaseapp.com/en/lua/npc/isonhatelist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.IsTaunting") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.IsTaunting()\n```\n[npc.IsTaunting on questapi](https://questapi.firebaseapp.com/en/lua/npc/istaunting)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.MerchantCloseShop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.MerchantCloseShop()\n```\n[npc.MerchantCloseShop on questapi](https://questapi.firebaseapp.com/en/lua/npc/merchantcloseshop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.MerchantOpenShop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.MerchantOpenShop()\n```\n[npc.MerchantOpenShop on questapi](https://questapi.firebaseapp.com/en/lua/npc/merchantopenshop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.ModifyNPCStat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.ModifyNPCStat()\n```\n[npc.ModifyNPCStat on questapi](https://questapi.firebaseapp.com/en/lua/npc/modifynpcstat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.MoveTo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.MoveTo()\n```\n[npc.MoveTo on questapi](https://questapi.firebaseapp.com/en/lua/npc/moveto)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.NextGuardPosition") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.NextGuardPosition()\n```\n[npc.NextGuardPosition on questapi](https://questapi.firebaseapp.com/en/lua/npc/nextguardposition)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.PauseWandering") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.PauseWandering()\n```\n[npc.PauseWandering on questapi](https://questapi.firebaseapp.com/en/lua/npc/pausewandering)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.PickPocket") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.PickPocket()\n```\n[npc.PickPocket on questapi](https://questapi.firebaseapp.com/en/lua/npc/pickpocket)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.RecalculateSkills") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.RecalculateSkills()\n```\n[npc.RecalculateSkills on questapi](https://questapi.firebaseapp.com/en/lua/npc/recalculateskills)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.RemoveAISpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.RemoveAISpell()\n```\n[npc.RemoveAISpell on questapi](https://questapi.firebaseapp.com/en/lua/npc/removeaispell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.RemoveCash") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.RemoveCash()\n```\n[npc.RemoveCash on questapi](https://questapi.firebaseapp.com/en/lua/npc/removecash)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.RemoveItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.RemoveItem()\n```\n[npc.RemoveItem on questapi](https://questapi.firebaseapp.com/en/lua/npc/removeitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.ResumeWandering") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.ResumeWandering()\n```\n[npc.ResumeWandering on questapi](https://questapi.firebaseapp.com/en/lua/npc/resumewandering)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SaveGuardSpot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SaveGuardSpot()\n```\n[npc.SaveGuardSpot on questapi](https://questapi.firebaseapp.com/en/lua/npc/saveguardspot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetCopper") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetCopper()\n```\n[npc.SetCopper on questapi](https://questapi.firebaseapp.com/en/lua/npc/setcopper)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetFollowCanRun") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetFollowCanRun()\n```\n[npc.SetFollowCanRun on questapi](https://questapi.firebaseapp.com/en/lua/npc/setfollowcanrun)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetFollowDistance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetFollowDistance()\n```\n[npc.SetFollowDistance on questapi](https://questapi.firebaseapp.com/en/lua/npc/setfollowdistance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetFollowID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetFollowID()\n```\n[npc.SetFollowID on questapi](https://questapi.firebaseapp.com/en/lua/npc/setfollowid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetGold") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetGold()\n```\n[npc.SetGold on questapi](https://questapi.firebaseapp.com/en/lua/npc/setgold)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetGrid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetGrid()\n```\n[npc.SetGrid on questapi](https://questapi.firebaseapp.com/en/lua/npc/setgrid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetNPCFactionID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetNPCFactionID()\n```\n[npc.SetNPCFactionID on questapi](https://questapi.firebaseapp.com/en/lua/npc/setnpcfactionid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetPetSpellID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetPetSpellID()\n```\n[npc.SetPetSpellID on questapi](https://questapi.firebaseapp.com/en/lua/npc/setpetspellid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetPlatinum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetPlatinum()\n```\n[npc.SetPlatinum on questapi](https://questapi.firebaseapp.com/en/lua/npc/setplatinum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetPrimSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetPrimSkill()\n```\n[npc.SetPrimSkill on questapi](https://questapi.firebaseapp.com/en/lua/npc/setprimskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetSaveWaypoint") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetSaveWaypoint()\n```\n[npc.SetSaveWaypoint on questapi](https://questapi.firebaseapp.com/en/lua/npc/setsavewaypoint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetSecSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetSecSkill()\n```\n[npc.SetSecSkill on questapi](https://questapi.firebaseapp.com/en/lua/npc/setsecskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetSilver") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetSilver()\n```\n[npc.SetSilver on questapi](https://questapi.firebaseapp.com/en/lua/npc/setsilver)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetSimpleRoamBox") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetSimpleRoamBox()\n```\n[npc.SetSimpleRoamBox on questapi](https://questapi.firebaseapp.com/en/lua/npc/setsimpleroambox)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetSpellFocusDMG") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetSpellFocusDMG()\n```\n[npc.SetSpellFocusDMG on questapi](https://questapi.firebaseapp.com/en/lua/npc/setspellfocusdmg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetSpellFocusHeal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetSpellFocusHeal()\n```\n[npc.SetSpellFocusHeal on questapi](https://questapi.firebaseapp.com/en/lua/npc/setspellfocusheal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetSwarmTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetSwarmTarget()\n```\n[npc.SetSwarmTarget on questapi](https://questapi.firebaseapp.com/en/lua/npc/setswarmtarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetTaunting") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetTaunting()\n```\n[npc.SetTaunting on questapi](https://questapi.firebaseapp.com/en/lua/npc/settaunting)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.SetWaypointPause") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.SetWaypointPause()\n```\n[npc.SetWaypointPause on questapi](https://questapi.firebaseapp.com/en/lua/npc/setwaypointpause)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.Signal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.Signal()\n```\n[npc.Signal on questapi](https://questapi.firebaseapp.com/en/lua/npc/signal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.StartSwarmTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.StartSwarmTimer()\n```\n[npc.StartSwarmTimer on questapi](https://questapi.firebaseapp.com/en/lua/npc/startswarmtimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.StopWandering") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.StopWandering()\n```\n[npc.StopWandering on questapi](https://questapi.firebaseapp.com/en/lua/npc/stopwandering)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc.UpdateWaypoint") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc.UpdateWaypoint()\n```\n[npc.UpdateWaypoint on questapi](https://questapi.firebaseapp.com/en/lua/npc/updatewaypoint)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "npc_list") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc_list\n```\n[npc_list on questapi](https://questapi.firebaseapp.com/en/lua/npc_list/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "npc_list.Entries") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nnpc_list.Entries()\n```\n[npc_list.Entries on questapi](https://questapi.firebaseapp.com/en/lua/npc_list/entries)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "object") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject\n```\n[object on questapi](https://questapi.firebaseapp.com/en/lua/object/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.ClearUser") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.ClearUser()\n```\n[object.ClearUser on questapi](https://questapi.firebaseapp.com/en/lua/object/clearuser)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.Close") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.Close()\n```\n[object.Close on questapi](https://questapi.firebaseapp.com/en/lua/object/close)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.Delete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.Delete()\n```\n[object.Delete on questapi](https://questapi.firebaseapp.com/en/lua/object/delete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.DeleteItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.DeleteItem()\n```\n[object.DeleteItem on questapi](https://questapi.firebaseapp.com/en/lua/object/deleteitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.Depop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.Depop()\n```\n[object.Depop on questapi](https://questapi.firebaseapp.com/en/lua/object/depop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.EntityVariableExists") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.EntityVariableExists()\n```\n[object.EntityVariableExists on questapi](https://questapi.firebaseapp.com/en/lua/object/entityvariableexists)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetDBID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetDBID()\n```\n[object.GetDBID on questapi](https://questapi.firebaseapp.com/en/lua/object/getdbid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetEntityVariable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetEntityVariable()\n```\n[object.GetEntityVariable on questapi](https://questapi.firebaseapp.com/en/lua/object/getentityvariable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetHeading()\n```\n[object.GetHeading on questapi](https://questapi.firebaseapp.com/en/lua/object/getheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetIcon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetIcon()\n```\n[object.GetIcon on questapi](https://questapi.firebaseapp.com/en/lua/object/geticon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetID()\n```\n[object.GetID on questapi](https://questapi.firebaseapp.com/en/lua/object/getid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetItemID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetItemID()\n```\n[object.GetItemID on questapi](https://questapi.firebaseapp.com/en/lua/object/getitemid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetModelName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetModelName()\n```\n[object.GetModelName on questapi](https://questapi.firebaseapp.com/en/lua/object/getmodelname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetType()\n```\n[object.GetType on questapi](https://questapi.firebaseapp.com/en/lua/object/gettype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetX()\n```\n[object.GetX on questapi](https://questapi.firebaseapp.com/en/lua/object/getx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetY") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetY()\n```\n[object.GetY on questapi](https://questapi.firebaseapp.com/en/lua/object/gety)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.GetZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.GetZ()\n```\n[object.GetZ on questapi](https://questapi.firebaseapp.com/en/lua/object/getz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.IsGroundSpawn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.IsGroundSpawn()\n```\n[object.IsGroundSpawn on questapi](https://questapi.firebaseapp.com/en/lua/object/isgroundspawn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.Repop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.Repop()\n```\n[object.Repop on questapi](https://questapi.firebaseapp.com/en/lua/object/repop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.Save") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.Save()\n```\n[object.Save on questapi](https://questapi.firebaseapp.com/en/lua/object/save)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetEntityVariable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetEntityVariable()\n```\n[object.SetEntityVariable on questapi](https://questapi.firebaseapp.com/en/lua/object/setentityvariable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetHeading()\n```\n[object.SetHeading on questapi](https://questapi.firebaseapp.com/en/lua/object/setheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetIcon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetIcon()\n```\n[object.SetIcon on questapi](https://questapi.firebaseapp.com/en/lua/object/seticon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetID()\n```\n[object.SetID on questapi](https://questapi.firebaseapp.com/en/lua/object/setid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetItemID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetItemID()\n```\n[object.SetItemID on questapi](https://questapi.firebaseapp.com/en/lua/object/setitemid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetLocation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetLocation()\n```\n[object.SetLocation on questapi](https://questapi.firebaseapp.com/en/lua/object/setlocation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetModelName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetModelName()\n```\n[object.SetModelName on questapi](https://questapi.firebaseapp.com/en/lua/object/setmodelname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetType()\n```\n[object.SetType on questapi](https://questapi.firebaseapp.com/en/lua/object/settype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetX()\n```\n[object.SetX on questapi](https://questapi.firebaseapp.com/en/lua/object/setx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetY") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetY()\n```\n[object.SetY on questapi](https://questapi.firebaseapp.com/en/lua/object/sety)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.SetZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.SetZ()\n```\n[object.SetZ on questapi](https://questapi.firebaseapp.com/en/lua/object/setz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.StartDecay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.StartDecay()\n```\n[object.StartDecay on questapi](https://questapi.firebaseapp.com/en/lua/object/startdecay)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object.VarSave") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject.VarSave()\n```\n[object.VarSave on questapi](https://questapi.firebaseapp.com/en/lua/object/varsave)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "object_list") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject_list\n```\n[object_list on questapi](https://questapi.firebaseapp.com/en/lua/object_list/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "object_list.Entries") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nobject_list.Entries()\n```\n[object_list.Entries on questapi](https://questapi.firebaseapp.com/en/lua/object_list/entries)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "opcode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode\n```\n[opcode on questapi](https://questapi.firebaseapp.com/en/lua/opcode/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.0x0193") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.0x0193()\n```\n[opcode.0x0193 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/0x0193)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.0x0347") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.0x0347()\n```\n[opcode.0x0347 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/0x0347)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AAAction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AAAction\n```\n[opcode.AAAction on questapi](https://questapi.firebaseapp.com/en/lua/opcode/aaaction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AAExpUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AAExpUpdate\n```\n[opcode.AAExpUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/aaexpupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AcceptNewTask") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AcceptNewTask\n```\n[opcode.AcceptNewTask on questapi](https://questapi.firebaseapp.com/en/lua/opcode/acceptnewtask)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AckPacket") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AckPacket\n```\n[opcode.AckPacket on questapi](https://questapi.firebaseapp.com/en/lua/opcode/ackpacket)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Action") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Action\n```\n[opcode.Action on questapi](https://questapi.firebaseapp.com/en/lua/opcode/action)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Action2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Action2\n```\n[opcode.Action2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/action2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureData") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureData\n```\n[opcode.AdventureData on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventuredata)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureDetails") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureDetails\n```\n[opcode.AdventureDetails on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventuredetails)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureFinish") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureFinish\n```\n[opcode.AdventureFinish on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventurefinish)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureInfo\n```\n[opcode.AdventureInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventureinfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureInfoRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureInfoRequest\n```\n[opcode.AdventureInfoRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventureinforequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureLeaderboardReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureLeaderboardReply\n```\n[opcode.AdventureLeaderboardReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventureleaderboardreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureLeaderboardRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureLeaderboardRequest\n```\n[opcode.AdventureLeaderboardRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventureleaderboardrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureMerchantPurchase") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureMerchantPurchase\n```\n[opcode.AdventureMerchantPurchase on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventuremerchantpurchase)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureMerchantRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureMerchantRequest\n```\n[opcode.AdventureMerchantRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventuremerchantrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureMerchantResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureMerchantResponse\n```\n[opcode.AdventureMerchantResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventuremerchantresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureMerchantSell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureMerchantSell\n```\n[opcode.AdventureMerchantSell on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventuremerchantsell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventurePointsUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventurePointsUpdate\n```\n[opcode.AdventurePointsUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventurepointsupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureRequest\n```\n[opcode.AdventureRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventurerequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureStatsReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureStatsReply\n```\n[opcode.AdventureStatsReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventurestatsreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureStatsRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureStatsRequest\n```\n[opcode.AdventureStatsRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventurestatsrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AdventureUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AdventureUpdate\n```\n[opcode.AdventureUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/adventureupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AltCurrency") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AltCurrency\n```\n[opcode.AltCurrency on questapi](https://questapi.firebaseapp.com/en/lua/opcode/altcurrency)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AltCurrencyMerchantReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AltCurrencyMerchantReply\n```\n[opcode.AltCurrencyMerchantReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/altcurrencymerchantreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AltCurrencyMerchantRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AltCurrencyMerchantRequest\n```\n[opcode.AltCurrencyMerchantRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/altcurrencymerchantrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AltCurrencyPurchase") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AltCurrencyPurchase\n```\n[opcode.AltCurrencyPurchase on questapi](https://questapi.firebaseapp.com/en/lua/opcode/altcurrencypurchase)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AltCurrencyReclaim") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AltCurrencyReclaim\n```\n[opcode.AltCurrencyReclaim on questapi](https://questapi.firebaseapp.com/en/lua/opcode/altcurrencyreclaim)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AltCurrencySell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AltCurrencySell\n```\n[opcode.AltCurrencySell on questapi](https://questapi.firebaseapp.com/en/lua/opcode/altcurrencysell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AltCurrencySellSelection") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AltCurrencySellSelection\n```\n[opcode.AltCurrencySellSelection on questapi](https://questapi.firebaseapp.com/en/lua/opcode/altcurrencysellselection)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Animation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Animation\n```\n[opcode.Animation on questapi](https://questapi.firebaseapp.com/en/lua/opcode/animation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AnnoyingZoneUnknown") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AnnoyingZoneUnknown\n```\n[opcode.AnnoyingZoneUnknown on questapi](https://questapi.firebaseapp.com/en/lua/opcode/annoyingzoneunknown)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ApplyPoison") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ApplyPoison\n```\n[opcode.ApplyPoison on questapi](https://questapi.firebaseapp.com/en/lua/opcode/applypoison)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ApproveName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ApproveName\n```\n[opcode.ApproveName on questapi](https://questapi.firebaseapp.com/en/lua/opcode/approvename)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ApproveWorld") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ApproveWorld\n```\n[opcode.ApproveWorld on questapi](https://questapi.firebaseapp.com/en/lua/opcode/approveworld)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ApproveZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ApproveZone\n```\n[opcode.ApproveZone on questapi](https://questapi.firebaseapp.com/en/lua/opcode/approvezone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Assist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Assist\n```\n[opcode.Assist on questapi](https://questapi.firebaseapp.com/en/lua/opcode/assist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AssistGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AssistGroup\n```\n[opcode.AssistGroup on questapi](https://questapi.firebaseapp.com/en/lua/opcode/assistgroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AugmentInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AugmentInfo\n```\n[opcode.AugmentInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/augmentinfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AugmentItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AugmentItem\n```\n[opcode.AugmentItem on questapi](https://questapi.firebaseapp.com/en/lua/opcode/augmentitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AutoAttack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AutoAttack\n```\n[opcode.AutoAttack on questapi](https://questapi.firebaseapp.com/en/lua/opcode/autoattack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AutoAttack2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AutoAttack2\n```\n[opcode.AutoAttack2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/autoattack2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.AutoFire") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.AutoFire\n```\n[opcode.AutoFire on questapi](https://questapi.firebaseapp.com/en/lua/opcode/autofire)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Bandolier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Bandolier\n```\n[opcode.Bandolier on questapi](https://questapi.firebaseapp.com/en/lua/opcode/bandolier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.BankerChange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.BankerChange\n```\n[opcode.BankerChange on questapi](https://questapi.firebaseapp.com/en/lua/opcode/bankerchange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Barter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Barter\n```\n[opcode.Barter on questapi](https://questapi.firebaseapp.com/en/lua/opcode/barter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Bazaar") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Bazaar\n```\n[opcode.Bazaar on questapi](https://questapi.firebaseapp.com/en/lua/opcode/bazaar)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.BazaarInspect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.BazaarInspect\n```\n[opcode.BazaarInspect on questapi](https://questapi.firebaseapp.com/en/lua/opcode/bazaarinspect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.BazaarSearch") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.BazaarSearch\n```\n[opcode.BazaarSearch on questapi](https://questapi.firebaseapp.com/en/lua/opcode/bazaarsearch)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.BecomeCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.BecomeCorpse\n```\n[opcode.BecomeCorpse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/becomecorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.BecomeTrader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.BecomeTrader\n```\n[opcode.BecomeTrader on questapi](https://questapi.firebaseapp.com/en/lua/opcode/becometrader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Begging") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Begging\n```\n[opcode.Begging on questapi](https://questapi.firebaseapp.com/en/lua/opcode/begging)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.BeginCast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.BeginCast\n```\n[opcode.BeginCast on questapi](https://questapi.firebaseapp.com/en/lua/opcode/begincast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Bind_Wound") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Bind_Wound\n```\n[opcode.Bind_Wound on questapi](https://questapi.firebaseapp.com/en/lua/opcode/bind_wound)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.BlockedBuffs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.BlockedBuffs\n```\n[opcode.BlockedBuffs on questapi](https://questapi.firebaseapp.com/en/lua/opcode/blockedbuffs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.BoardBoat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.BoardBoat\n```\n[opcode.BoardBoat on questapi](https://questapi.firebaseapp.com/en/lua/opcode/boardboat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Buff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Buff\n```\n[opcode.Buff on questapi](https://questapi.firebaseapp.com/en/lua/opcode/buff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.BuffCreate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.BuffCreate\n```\n[opcode.BuffCreate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/buffcreate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.BuffRemoveRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.BuffRemoveRequest\n```\n[opcode.BuffRemoveRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/buffremoverequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Bug") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Bug\n```\n[opcode.Bug on questapi](https://questapi.firebaseapp.com/en/lua/opcode/bug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CameraEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CameraEffect\n```\n[opcode.CameraEffect on questapi](https://questapi.firebaseapp.com/en/lua/opcode/cameraeffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Camp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Camp\n```\n[opcode.Camp on questapi](https://questapi.firebaseapp.com/en/lua/opcode/camp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CancelTask") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CancelTask\n```\n[opcode.CancelTask on questapi](https://questapi.firebaseapp.com/en/lua/opcode/canceltask)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CancelTrade") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CancelTrade\n```\n[opcode.CancelTrade on questapi](https://questapi.firebaseapp.com/en/lua/opcode/canceltrade)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CastSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CastSpell\n```\n[opcode.CastSpell on questapi](https://questapi.firebaseapp.com/en/lua/opcode/castspell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ChangeSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ChangeSize\n```\n[opcode.ChangeSize on questapi](https://questapi.firebaseapp.com/en/lua/opcode/changesize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ChannelMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ChannelMessage\n```\n[opcode.ChannelMessage on questapi](https://questapi.firebaseapp.com/en/lua/opcode/channelmessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CharacterCreate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CharacterCreate\n```\n[opcode.CharacterCreate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/charactercreate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CharacterCreateRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CharacterCreateRequest\n```\n[opcode.CharacterCreateRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/charactercreaterequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CharInventory") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CharInventory\n```\n[opcode.CharInventory on questapi](https://questapi.firebaseapp.com/en/lua/opcode/charinventory)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Charm") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Charm\n```\n[opcode.Charm on questapi](https://questapi.firebaseapp.com/en/lua/opcode/charm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ChatMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ChatMessage\n```\n[opcode.ChatMessage on questapi](https://questapi.firebaseapp.com/en/lua/opcode/chatmessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClearBlockedBuffs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClearBlockedBuffs\n```\n[opcode.ClearBlockedBuffs on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clearblockedbuffs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClearNPCMarks") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClearNPCMarks\n```\n[opcode.ClearNPCMarks on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clearnpcmarks)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClearObject") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClearObject\n```\n[opcode.ClearObject on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clearobject)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClearSurname") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClearSurname\n```\n[opcode.ClearSurname on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clearsurname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClickDoor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClickDoor\n```\n[opcode.ClickDoor on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clickdoor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClickObject") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClickObject\n```\n[opcode.ClickObject on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clickobject)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClickObjectAction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClickObjectAction\n```\n[opcode.ClickObjectAction on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clickobjectaction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClientError") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClientError\n```\n[opcode.ClientError on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clienterror)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClientReady") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClientReady\n```\n[opcode.ClientReady on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clientready)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClientTimeStamp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClientTimeStamp\n```\n[opcode.ClientTimeStamp on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clienttimestamp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ClientUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ClientUpdate\n```\n[opcode.ClientUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/clientupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CloseContainer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CloseContainer\n```\n[opcode.CloseContainer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/closecontainer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CloseTributeMaster") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CloseTributeMaster\n```\n[opcode.CloseTributeMaster on questapi](https://questapi.firebaseapp.com/en/lua/opcode/closetributemaster)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ColoredText") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ColoredText\n```\n[opcode.ColoredText on questapi](https://questapi.firebaseapp.com/en/lua/opcode/coloredtext)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CombatAbility") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CombatAbility\n```\n[opcode.CombatAbility on questapi](https://questapi.firebaseapp.com/en/lua/opcode/combatability)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Command") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Command\n```\n[opcode.Command on questapi](https://questapi.firebaseapp.com/en/lua/opcode/command)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CompletedTasks") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CompletedTasks\n```\n[opcode.CompletedTasks on questapi](https://questapi.firebaseapp.com/en/lua/opcode/completedtasks)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ConfirmDelete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ConfirmDelete\n```\n[opcode.ConfirmDelete on questapi](https://questapi.firebaseapp.com/en/lua/opcode/confirmdelete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Consent") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Consent\n```\n[opcode.Consent on questapi](https://questapi.firebaseapp.com/en/lua/opcode/consent)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ConsentDeny") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ConsentDeny\n```\n[opcode.ConsentDeny on questapi](https://questapi.firebaseapp.com/en/lua/opcode/consentdeny)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ConsentResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ConsentResponse\n```\n[opcode.ConsentResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/consentresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Consider") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Consider\n```\n[opcode.Consider on questapi](https://questapi.firebaseapp.com/en/lua/opcode/consider)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ConsiderCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ConsiderCorpse\n```\n[opcode.ConsiderCorpse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/considercorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Consume") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Consume\n```\n[opcode.Consume on questapi](https://questapi.firebaseapp.com/en/lua/opcode/consume)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ControlBoat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ControlBoat\n```\n[opcode.ControlBoat on questapi](https://questapi.firebaseapp.com/en/lua/opcode/controlboat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CorpseDrag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CorpseDrag\n```\n[opcode.CorpseDrag on questapi](https://questapi.firebaseapp.com/en/lua/opcode/corpsedrag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CorpseDrop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CorpseDrop\n```\n[opcode.CorpseDrop on questapi](https://questapi.firebaseapp.com/en/lua/opcode/corpsedrop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CrashDump") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CrashDump\n```\n[opcode.CrashDump on questapi](https://questapi.firebaseapp.com/en/lua/opcode/crashdump)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CrystalCountUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CrystalCountUpdate\n```\n[opcode.CrystalCountUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/crystalcountupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CrystalCreate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CrystalCreate\n```\n[opcode.CrystalCreate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/crystalcreate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CrystalReclaim") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CrystalReclaim\n```\n[opcode.CrystalReclaim on questapi](https://questapi.firebaseapp.com/en/lua/opcode/crystalreclaim)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.CustomTitles") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.CustomTitles\n```\n[opcode.CustomTitles on questapi](https://questapi.firebaseapp.com/en/lua/opcode/customtitles)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Damage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Damage\n```\n[opcode.Damage on questapi](https://questapi.firebaseapp.com/en/lua/opcode/damage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Death") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Death\n```\n[opcode.Death on questapi](https://questapi.firebaseapp.com/en/lua/opcode/death)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DelegateAbility") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DelegateAbility\n```\n[opcode.DelegateAbility on questapi](https://questapi.firebaseapp.com/en/lua/opcode/delegateability)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DeleteCharacter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DeleteCharacter\n```\n[opcode.DeleteCharacter on questapi](https://questapi.firebaseapp.com/en/lua/opcode/deletecharacter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DeleteCharge") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DeleteCharge\n```\n[opcode.DeleteCharge on questapi](https://questapi.firebaseapp.com/en/lua/opcode/deletecharge)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DeleteItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DeleteItem\n```\n[opcode.DeleteItem on questapi](https://questapi.firebaseapp.com/en/lua/opcode/deleteitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DeletePetition") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DeletePetition\n```\n[opcode.DeletePetition on questapi](https://questapi.firebaseapp.com/en/lua/opcode/deletepetition)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DeleteSpawn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DeleteSpawn\n```\n[opcode.DeleteSpawn on questapi](https://questapi.firebaseapp.com/en/lua/opcode/deletespawn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DeleteSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DeleteSpell\n```\n[opcode.DeleteSpell on questapi](https://questapi.firebaseapp.com/en/lua/opcode/deletespell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DenyResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DenyResponse\n```\n[opcode.DenyResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/denyresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Disarm") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Disarm\n```\n[opcode.Disarm on questapi](https://questapi.firebaseapp.com/en/lua/opcode/disarm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DisarmTraps") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DisarmTraps\n```\n[opcode.DisarmTraps on questapi](https://questapi.firebaseapp.com/en/lua/opcode/disarmtraps)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DisciplineTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DisciplineTimer\n```\n[opcode.DisciplineTimer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/disciplinetimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DisciplineUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DisciplineUpdate\n```\n[opcode.DisciplineUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/disciplineupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DiscordMerchantInventory") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DiscordMerchantInventory\n```\n[opcode.DiscordMerchantInventory on questapi](https://questapi.firebaseapp.com/en/lua/opcode/discordmerchantinventory)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DoGroupLeadershipAbility") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DoGroupLeadershipAbility\n```\n[opcode.DoGroupLeadershipAbility on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dogroupleadershipability)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DuelResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DuelResponse\n```\n[opcode.DuelResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/duelresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DuelResponse2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DuelResponse2\n```\n[opcode.DuelResponse2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/duelresponse2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DumpName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DumpName\n```\n[opcode.DumpName on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dumpname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Dye") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Dye\n```\n[opcode.Dye on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dye)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DynamicWall") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DynamicWall\n```\n[opcode.DynamicWall on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dynamicwall)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzAddPlayer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzAddPlayer\n```\n[opcode.DzAddPlayer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzaddplayer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzChooseZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzChooseZone\n```\n[opcode.DzChooseZone on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzchoosezone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzCompass") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzCompass\n```\n[opcode.DzCompass on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzcompass)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzExpeditionEndsWarning") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzExpeditionEndsWarning\n```\n[opcode.DzExpeditionEndsWarning on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzexpeditionendswarning)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzExpeditionInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzExpeditionInfo\n```\n[opcode.DzExpeditionInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzexpeditioninfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzExpeditionList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzExpeditionList\n```\n[opcode.DzExpeditionList on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzexpeditionlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzJoinExpeditionConfirm") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzJoinExpeditionConfirm\n```\n[opcode.DzJoinExpeditionConfirm on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzjoinexpeditionconfirm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzJoinExpeditionReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzJoinExpeditionReply\n```\n[opcode.DzJoinExpeditionReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzjoinexpeditionreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzLeaderStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzLeaderStatus\n```\n[opcode.DzLeaderStatus on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzleaderstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzListTimers") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzListTimers\n```\n[opcode.DzListTimers on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzlisttimers)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzMakeLeader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzMakeLeader\n```\n[opcode.DzMakeLeader on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzmakeleader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzMemberList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzMemberList\n```\n[opcode.DzMemberList on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzmemberlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzMemberStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzMemberStatus\n```\n[opcode.DzMemberStatus on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzmemberstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzPlayerList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzPlayerList\n```\n[opcode.DzPlayerList on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzplayerlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzQuit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzQuit\n```\n[opcode.DzQuit on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzquit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzRemovePlayer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzRemovePlayer\n```\n[opcode.DzRemovePlayer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzremoveplayer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.DzSwapPlayer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.DzSwapPlayer\n```\n[opcode.DzSwapPlayer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/dzswapplayer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Emote") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Emote\n```\n[opcode.Emote on questapi](https://questapi.firebaseapp.com/en/lua/opcode/emote)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.EndLootRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.EndLootRequest\n```\n[opcode.EndLootRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/endlootrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.EnduranceUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.EnduranceUpdate\n```\n[opcode.EnduranceUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/enduranceupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.EnterChat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.EnterChat\n```\n[opcode.EnterChat on questapi](https://questapi.firebaseapp.com/en/lua/opcode/enterchat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.EnterWorld") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.EnterWorld\n```\n[opcode.EnterWorld on questapi](https://questapi.firebaseapp.com/en/lua/opcode/enterworld)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.EnvDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.EnvDamage\n```\n[opcode.EnvDamage on questapi](https://questapi.firebaseapp.com/en/lua/opcode/envdamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ExpansionInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ExpansionInfo\n```\n[opcode.ExpansionInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/expansioninfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ExploreUnknown") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ExploreUnknown\n```\n[opcode.ExploreUnknown on questapi](https://questapi.firebaseapp.com/en/lua/opcode/exploreunknown)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ExpUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ExpUpdate\n```\n[opcode.ExpUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/expupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FaceChange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FaceChange\n```\n[opcode.FaceChange on questapi](https://questapi.firebaseapp.com/en/lua/opcode/facechange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Feedback") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Feedback\n```\n[opcode.Feedback on questapi](https://questapi.firebaseapp.com/en/lua/opcode/feedback)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FeignDeath") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FeignDeath\n```\n[opcode.FeignDeath on questapi](https://questapi.firebaseapp.com/en/lua/opcode/feigndeath)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FellowshipUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FellowshipUpdate\n```\n[opcode.FellowshipUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/fellowshipupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FindPersonReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FindPersonReply\n```\n[opcode.FindPersonReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/findpersonreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FindPersonRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FindPersonRequest\n```\n[opcode.FindPersonRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/findpersonrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FinishTrade") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FinishTrade\n```\n[opcode.FinishTrade on questapi](https://questapi.firebaseapp.com/en/lua/opcode/finishtrade)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FinishWindow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FinishWindow\n```\n[opcode.FinishWindow on questapi](https://questapi.firebaseapp.com/en/lua/opcode/finishwindow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FinishWindow2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FinishWindow2\n```\n[opcode.FinishWindow2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/finishwindow2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Fishing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Fishing\n```\n[opcode.Fishing on questapi](https://questapi.firebaseapp.com/en/lua/opcode/fishing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Fling") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Fling\n```\n[opcode.Fling on questapi](https://questapi.firebaseapp.com/en/lua/opcode/fling)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FloatListThing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FloatListThing\n```\n[opcode.FloatListThing on questapi](https://questapi.firebaseapp.com/en/lua/opcode/floatlistthing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Forage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Forage\n```\n[opcode.Forage on questapi](https://questapi.firebaseapp.com/en/lua/opcode/forage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ForceFindPerson") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ForceFindPerson\n```\n[opcode.ForceFindPerson on questapi](https://questapi.firebaseapp.com/en/lua/opcode/forcefindperson)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FormattedMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FormattedMessage\n```\n[opcode.FormattedMessage on questapi](https://questapi.firebaseapp.com/en/lua/opcode/formattedmessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.FriendsWho") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.FriendsWho\n```\n[opcode.FriendsWho on questapi](https://questapi.firebaseapp.com/en/lua/opcode/friendswho)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GetGuildMOTD") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GetGuildMOTD\n```\n[opcode.GetGuildMOTD on questapi](https://questapi.firebaseapp.com/en/lua/opcode/getguildmotd)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GetGuildMOTDReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GetGuildMOTDReply\n```\n[opcode.GetGuildMOTDReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/getguildmotdreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GetGuildsList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GetGuildsList\n```\n[opcode.GetGuildsList on questapi](https://questapi.firebaseapp.com/en/lua/opcode/getguildslist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GiveMoney") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GiveMoney\n```\n[opcode.GiveMoney on questapi](https://questapi.firebaseapp.com/en/lua/opcode/givemoney)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMApproval") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMApproval\n```\n[opcode.GMApproval on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmapproval)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMBecomeNPC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMBecomeNPC\n```\n[opcode.GMBecomeNPC on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmbecomenpc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMDelCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMDelCorpse\n```\n[opcode.GMDelCorpse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmdelcorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMEmoteZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMEmoteZone\n```\n[opcode.GMEmoteZone on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmemotezone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMEndTraining") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMEndTraining\n```\n[opcode.GMEndTraining on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmendtraining)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMEndTrainingResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMEndTrainingResponse\n```\n[opcode.GMEndTrainingResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmendtrainingresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMFind") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMFind\n```\n[opcode.GMFind on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmfind)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMGoto") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMGoto\n```\n[opcode.GMGoto on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmgoto)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMHideMe") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMHideMe\n```\n[opcode.GMHideMe on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmhideme)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMKick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMKick\n```\n[opcode.GMKick on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmkick)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMKill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMKill\n```\n[opcode.GMKill on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmkill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMLastName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMLastName\n```\n[opcode.GMLastName on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmlastname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMNameChange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMNameChange\n```\n[opcode.GMNameChange on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmnamechange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMSearchCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMSearchCorpse\n```\n[opcode.GMSearchCorpse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmsearchcorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMServers") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMServers\n```\n[opcode.GMServers on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmservers)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMSummon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMSummon\n```\n[opcode.GMSummon on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmsummon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMToggle") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMToggle\n```\n[opcode.GMToggle on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmtoggle)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMTraining") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMTraining\n```\n[opcode.GMTraining on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmtraining)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMTrainSkill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMTrainSkill\n```\n[opcode.GMTrainSkill on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmtrainskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMTrainSkillConfirm") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMTrainSkillConfirm\n```\n[opcode.GMTrainSkillConfirm on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmtrainskillconfirm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMZoneRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMZoneRequest\n```\n[opcode.GMZoneRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmzonerequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GMZoneRequest2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GMZoneRequest2\n```\n[opcode.GMZoneRequest2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/gmzonerequest2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroundSpawn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroundSpawn\n```\n[opcode.GroundSpawn on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groundspawn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupAcknowledge") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupAcknowledge\n```\n[opcode.GroupAcknowledge on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupacknowledge)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupCancelInvite") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupCancelInvite\n```\n[opcode.GroupCancelInvite on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupcancelinvite)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupDelete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupDelete\n```\n[opcode.GroupDelete on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupdelete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupDisband") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupDisband\n```\n[opcode.GroupDisband on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupdisband)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupDisbandOther") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupDisbandOther\n```\n[opcode.GroupDisbandOther on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupdisbandother)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupDisbandYou") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupDisbandYou\n```\n[opcode.GroupDisbandYou on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupdisbandyou)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupFollow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupFollow\n```\n[opcode.GroupFollow on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupfollow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupFollow2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupFollow2\n```\n[opcode.GroupFollow2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupfollow2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupInvite") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupInvite\n```\n[opcode.GroupInvite on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupinvite)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupInvite2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupInvite2\n```\n[opcode.GroupInvite2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupinvite2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupLeaderChange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupLeaderChange\n```\n[opcode.GroupLeaderChange on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupleaderchange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupLeadershipAAUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupLeadershipAAUpdate\n```\n[opcode.GroupLeadershipAAUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupleadershipaaupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupMakeLeader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupMakeLeader\n```\n[opcode.GroupMakeLeader on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupmakeleader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupRoles") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupRoles\n```\n[opcode.GroupRoles on questapi](https://questapi.firebaseapp.com/en/lua/opcode/grouproles)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupUpdate\n```\n[opcode.GroupUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupUpdateB") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupUpdateB\n```\n[opcode.GroupUpdateB on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupupdateb)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GroupUpdateLeaderAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GroupUpdateLeaderAA\n```\n[opcode.GroupUpdateLeaderAA on questapi](https://questapi.firebaseapp.com/en/lua/opcode/groupupdateleaderaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildBank") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildBank\n```\n[opcode.GuildBank on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildbank)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildCreate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildCreate\n```\n[opcode.GuildCreate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildcreate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildDelete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildDelete\n```\n[opcode.GuildDelete on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guilddelete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildDemote") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildDemote\n```\n[opcode.GuildDemote on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guilddemote)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildInvite") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildInvite\n```\n[opcode.GuildInvite on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildinvite)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildInviteAccept") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildInviteAccept\n```\n[opcode.GuildInviteAccept on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildinviteaccept)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildLeader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildLeader\n```\n[opcode.GuildLeader on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildleader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildManageAdd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildManageAdd\n```\n[opcode.GuildManageAdd on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildmanageadd)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildManageBanker") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildManageBanker\n```\n[opcode.GuildManageBanker on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildmanagebanker)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildManageRemove") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildManageRemove\n```\n[opcode.GuildManageRemove on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildmanageremove)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildManageStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildManageStatus\n```\n[opcode.GuildManageStatus on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildmanagestatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildMemberLevelUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildMemberLevelUpdate\n```\n[opcode.GuildMemberLevelUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildmemberlevelupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildMemberList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildMemberList\n```\n[opcode.GuildMemberList on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildmemberlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildMemberUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildMemberUpdate\n```\n[opcode.GuildMemberUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildmemberupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildMOTD") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildMOTD\n```\n[opcode.GuildMOTD on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildmotd)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildPeace") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildPeace\n```\n[opcode.GuildPeace on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildpeace)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildPromote") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildPromote\n```\n[opcode.GuildPromote on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildpromote)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildPublicNote") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildPublicNote\n```\n[opcode.GuildPublicNote on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildpublicnote)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildRemove") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildRemove\n```\n[opcode.GuildRemove on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildremove)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildsList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildsList\n```\n[opcode.GuildsList on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildslist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildStatus\n```\n[opcode.GuildStatus on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildTributeInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildTributeInfo\n```\n[opcode.GuildTributeInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildtributeinfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildUpdateURLAndChannel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildUpdateURLAndChannel\n```\n[opcode.GuildUpdateURLAndChannel on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildupdateurlandchannel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.GuildWar") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.GuildWar\n```\n[opcode.GuildWar on questapi](https://questapi.firebaseapp.com/en/lua/opcode/guildwar)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Heartbeat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Heartbeat\n```\n[opcode.Heartbeat on questapi](https://questapi.firebaseapp.com/en/lua/opcode/heartbeat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Hide") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Hide\n```\n[opcode.Hide on questapi](https://questapi.firebaseapp.com/en/lua/opcode/hide)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.HideCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.HideCorpse\n```\n[opcode.HideCorpse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/hidecorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.HPUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.HPUpdate\n```\n[opcode.HPUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/hpupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Illusion") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Illusion\n```\n[opcode.Illusion on questapi](https://questapi.firebaseapp.com/en/lua/opcode/illusion)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.IncreaseStats") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.IncreaseStats\n```\n[opcode.IncreaseStats on questapi](https://questapi.firebaseapp.com/en/lua/opcode/increasestats)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.InitialHPUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.InitialHPUpdate\n```\n[opcode.InitialHPUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/initialhpupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.InitialMobHealth") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.InitialMobHealth\n```\n[opcode.InitialMobHealth on questapi](https://questapi.firebaseapp.com/en/lua/opcode/initialmobhealth)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.InspectAnswer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.InspectAnswer\n```\n[opcode.InspectAnswer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/inspectanswer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.InspectMessageUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.InspectMessageUpdate\n```\n[opcode.InspectMessageUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/inspectmessageupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.InspectRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.InspectRequest\n```\n[opcode.InspectRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/inspectrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.InstillDoubt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.InstillDoubt\n```\n[opcode.InstillDoubt on questapi](https://questapi.firebaseapp.com/en/lua/opcode/instilldoubt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.InterruptCast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.InterruptCast\n```\n[opcode.InterruptCast on questapi](https://questapi.firebaseapp.com/en/lua/opcode/interruptcast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ItemLinkClick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ItemLinkClick\n```\n[opcode.ItemLinkClick on questapi](https://questapi.firebaseapp.com/en/lua/opcode/itemlinkclick)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ItemLinkResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ItemLinkResponse\n```\n[opcode.ItemLinkResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/itemlinkresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ItemLinkText") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ItemLinkText\n```\n[opcode.ItemLinkText on questapi](https://questapi.firebaseapp.com/en/lua/opcode/itemlinktext)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ItemName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ItemName\n```\n[opcode.ItemName on questapi](https://questapi.firebaseapp.com/en/lua/opcode/itemname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ItemPacket") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ItemPacket\n```\n[opcode.ItemPacket on questapi](https://questapi.firebaseapp.com/en/lua/opcode/itempacket)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ItemPreview") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ItemPreview\n```\n[opcode.ItemPreview on questapi](https://questapi.firebaseapp.com/en/lua/opcode/itempreview)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ItemVerifyReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ItemVerifyReply\n```\n[opcode.ItemVerifyReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/itemverifyreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ItemVerifyRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ItemVerifyRequest\n```\n[opcode.ItemVerifyRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/itemverifyrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ItemViewUnknown") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ItemViewUnknown\n```\n[opcode.ItemViewUnknown on questapi](https://questapi.firebaseapp.com/en/lua/opcode/itemviewunknown)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Jump") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Jump\n```\n[opcode.Jump on questapi](https://questapi.firebaseapp.com/en/lua/opcode/jump)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.KeyRing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.KeyRing\n```\n[opcode.KeyRing on questapi](https://questapi.firebaseapp.com/en/lua/opcode/keyring)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.KnowledgeBase") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.KnowledgeBase\n```\n[opcode.KnowledgeBase on questapi](https://questapi.firebaseapp.com/en/lua/opcode/knowledgebase)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LDoNButton") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LDoNButton\n```\n[opcode.LDoNButton on questapi](https://questapi.firebaseapp.com/en/lua/opcode/ldonbutton)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LDoNDisarmTraps") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LDoNDisarmTraps\n```\n[opcode.LDoNDisarmTraps on questapi](https://questapi.firebaseapp.com/en/lua/opcode/ldondisarmtraps)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LDoNInspect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LDoNInspect\n```\n[opcode.LDoNInspect on questapi](https://questapi.firebaseapp.com/en/lua/opcode/ldoninspect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LDoNOpen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LDoNOpen\n```\n[opcode.LDoNOpen on questapi](https://questapi.firebaseapp.com/en/lua/opcode/ldonopen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LDoNPickLock") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LDoNPickLock\n```\n[opcode.LDoNPickLock on questapi](https://questapi.firebaseapp.com/en/lua/opcode/ldonpicklock)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LDoNSenseTraps") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LDoNSenseTraps\n```\n[opcode.LDoNSenseTraps on questapi](https://questapi.firebaseapp.com/en/lua/opcode/ldonsensetraps)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LeadershipExpToggle") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LeadershipExpToggle\n```\n[opcode.LeadershipExpToggle on questapi](https://questapi.firebaseapp.com/en/lua/opcode/leadershipexptoggle)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LeadershipExpUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LeadershipExpUpdate\n```\n[opcode.LeadershipExpUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/leadershipexpupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LeaveAdventure") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LeaveAdventure\n```\n[opcode.LeaveAdventure on questapi](https://questapi.firebaseapp.com/en/lua/opcode/leaveadventure)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LeaveBoat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LeaveBoat\n```\n[opcode.LeaveBoat on questapi](https://questapi.firebaseapp.com/en/lua/opcode/leaveboat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LevelAppearance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LevelAppearance\n```\n[opcode.LevelAppearance on questapi](https://questapi.firebaseapp.com/en/lua/opcode/levelappearance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LevelUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LevelUpdate\n```\n[opcode.LevelUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/levelupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LFGAppearance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LFGAppearance\n```\n[opcode.LFGAppearance on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lfgappearance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LFGCommand") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LFGCommand\n```\n[opcode.LFGCommand on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lfgcommand)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LFGGetMatchesRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LFGGetMatchesRequest\n```\n[opcode.LFGGetMatchesRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lfggetmatchesrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LFGGetMatchesResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LFGGetMatchesResponse\n```\n[opcode.LFGGetMatchesResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lfggetmatchesresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LFGResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LFGResponse\n```\n[opcode.LFGResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lfgresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LFGuild") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LFGuild\n```\n[opcode.LFGuild on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lfguild)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LFPCommand") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LFPCommand\n```\n[opcode.LFPCommand on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lfpcommand)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LFPGetMatchesRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LFPGetMatchesRequest\n```\n[opcode.LFPGetMatchesRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lfpgetmatchesrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LFPGetMatchesResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LFPGetMatchesResponse\n```\n[opcode.LFPGetMatchesResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lfpgetmatchesresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LoadSpellSet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LoadSpellSet\n```\n[opcode.LoadSpellSet on questapi](https://questapi.firebaseapp.com/en/lua/opcode/loadspellset)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LocInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LocInfo\n```\n[opcode.LocInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/locinfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LockoutTimerInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LockoutTimerInfo\n```\n[opcode.LockoutTimerInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lockouttimerinfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Login") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Login\n```\n[opcode.Login on questapi](https://questapi.firebaseapp.com/en/lua/opcode/login)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LoginAccepted") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LoginAccepted\n```\n[opcode.LoginAccepted on questapi](https://questapi.firebaseapp.com/en/lua/opcode/loginaccepted)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LoginComplete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LoginComplete\n```\n[opcode.LoginComplete on questapi](https://questapi.firebaseapp.com/en/lua/opcode/logincomplete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LoginUnknown1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LoginUnknown1\n```\n[opcode.LoginUnknown1 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/loginunknown1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LoginUnknown2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LoginUnknown2\n```\n[opcode.LoginUnknown2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/loginunknown2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Logout") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Logout\n```\n[opcode.Logout on questapi](https://questapi.firebaseapp.com/en/lua/opcode/logout)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LogoutReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LogoutReply\n```\n[opcode.LogoutReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/logoutreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LogServer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LogServer\n```\n[opcode.LogServer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/logserver)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LootComplete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LootComplete\n```\n[opcode.LootComplete on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lootcomplete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LootItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LootItem\n```\n[opcode.LootItem on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lootitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.LootRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.LootRequest\n```\n[opcode.LootRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/lootrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ManaChange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ManaChange\n```\n[opcode.ManaChange on questapi](https://questapi.firebaseapp.com/en/lua/opcode/manachange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ManaUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ManaUpdate\n```\n[opcode.ManaUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/manaupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MarkNPC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MarkNPC\n```\n[opcode.MarkNPC on questapi](https://questapi.firebaseapp.com/en/lua/opcode/marknpc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Marquee") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Marquee\n```\n[opcode.Marquee on questapi](https://questapi.firebaseapp.com/en/lua/opcode/marquee)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MemorizeSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MemorizeSpell\n```\n[opcode.MemorizeSpell on questapi](https://questapi.firebaseapp.com/en/lua/opcode/memorizespell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Mend") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Mend\n```\n[opcode.Mend on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MendHPUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MendHPUpdate\n```\n[opcode.MendHPUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mendhpupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryAssign") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryAssign\n```\n[opcode.MercenaryAssign on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenaryassign)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryCommand") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryCommand\n```\n[opcode.MercenaryCommand on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenarycommand)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryDataRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryDataRequest\n```\n[opcode.MercenaryDataRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenarydatarequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryDataResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryDataResponse\n```\n[opcode.MercenaryDataResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenarydataresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryDataUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryDataUpdate\n```\n[opcode.MercenaryDataUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenarydataupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryDataUpdateRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryDataUpdateRequest\n```\n[opcode.MercenaryDataUpdateRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenarydataupdaterequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryDismiss") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryDismiss\n```\n[opcode.MercenaryDismiss on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenarydismiss)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryHire") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryHire\n```\n[opcode.MercenaryHire on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenaryhire)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenarySuspendRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenarySuspendRequest\n```\n[opcode.MercenarySuspendRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenarysuspendrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenarySuspendResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenarySuspendResponse\n```\n[opcode.MercenarySuspendResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenarysuspendresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryTimer\n```\n[opcode.MercenaryTimer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenarytimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryTimerRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryTimerRequest\n```\n[opcode.MercenaryTimerRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenarytimerrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryUnknown1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryUnknown1\n```\n[opcode.MercenaryUnknown1 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenaryunknown1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MercenaryUnsuspendResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MercenaryUnsuspendResponse\n```\n[opcode.MercenaryUnsuspendResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mercenaryunsuspendresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MobEnduranceUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MobEnduranceUpdate\n```\n[opcode.MobEnduranceUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mobenduranceupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MobHealth") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MobHealth\n```\n[opcode.MobHealth on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mobhealth)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MobManaUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MobManaUpdate\n```\n[opcode.MobManaUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mobmanaupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MobRename") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MobRename\n```\n[opcode.MobRename on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mobrename)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MobUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MobUpdate\n```\n[opcode.MobUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/mobupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MoneyOnCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MoneyOnCorpse\n```\n[opcode.MoneyOnCorpse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/moneyoncorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MoneyUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MoneyUpdate\n```\n[opcode.MoneyUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/moneyupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MOTD") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MOTD\n```\n[opcode.MOTD on questapi](https://questapi.firebaseapp.com/en/lua/opcode/motd)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MoveCoin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MoveCoin\n```\n[opcode.MoveCoin on questapi](https://questapi.firebaseapp.com/en/lua/opcode/movecoin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MoveDoor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MoveDoor\n```\n[opcode.MoveDoor on questapi](https://questapi.firebaseapp.com/en/lua/opcode/movedoor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MoveItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MoveItem\n```\n[opcode.MoveItem on questapi](https://questapi.firebaseapp.com/en/lua/opcode/moveitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MoveLogDisregard") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MoveLogDisregard\n```\n[opcode.MoveLogDisregard on questapi](https://questapi.firebaseapp.com/en/lua/opcode/movelogdisregard)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MoveLogRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MoveLogRequest\n```\n[opcode.MoveLogRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/movelogrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.MultiLineMsg") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.MultiLineMsg\n```\n[opcode.MultiLineMsg on questapi](https://questapi.firebaseapp.com/en/lua/opcode/multilinemsg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.NewSpawn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.NewSpawn\n```\n[opcode.NewSpawn on questapi](https://questapi.firebaseapp.com/en/lua/opcode/newspawn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.NewTitlesAvailable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.NewTitlesAvailable\n```\n[opcode.NewTitlesAvailable on questapi](https://questapi.firebaseapp.com/en/lua/opcode/newtitlesavailable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.NewZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.NewZone\n```\n[opcode.NewZone on questapi](https://questapi.firebaseapp.com/en/lua/opcode/newzone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.OnLevelMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.OnLevelMessage\n```\n[opcode.OnLevelMessage on questapi](https://questapi.firebaseapp.com/en/lua/opcode/onlevelmessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.OpenContainer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.OpenContainer\n```\n[opcode.OpenContainer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/opencontainer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.OpenDiscordMerchant") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.OpenDiscordMerchant\n```\n[opcode.OpenDiscordMerchant on questapi](https://questapi.firebaseapp.com/en/lua/opcode/opendiscordmerchant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.OpenGuildTributeMaster") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.OpenGuildTributeMaster\n```\n[opcode.OpenGuildTributeMaster on questapi](https://questapi.firebaseapp.com/en/lua/opcode/openguildtributemaster)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.OpenInventory") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.OpenInventory\n```\n[opcode.OpenInventory on questapi](https://questapi.firebaseapp.com/en/lua/opcode/openinventory)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.OpenNewTasksWindow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.OpenNewTasksWindow\n```\n[opcode.OpenNewTasksWindow on questapi](https://questapi.firebaseapp.com/en/lua/opcode/opennewtaskswindow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.OpenTributeMaster") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.OpenTributeMaster\n```\n[opcode.OpenTributeMaster on questapi](https://questapi.firebaseapp.com/en/lua/opcode/opentributemaster)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PDeletePetition") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PDeletePetition\n```\n[opcode.PDeletePetition on questapi](https://questapi.firebaseapp.com/en/lua/opcode/pdeletepetition)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetBuffWindow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetBuffWindow\n```\n[opcode.PetBuffWindow on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petbuffwindow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetCommands") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetCommands\n```\n[opcode.PetCommands on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petcommands)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Petition") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Petition\n```\n[opcode.Petition on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petition)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionBug") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionBug\n```\n[opcode.PetitionBug on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitionbug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionCheckIn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionCheckIn\n```\n[opcode.PetitionCheckIn on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitioncheckin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionCheckout") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionCheckout\n```\n[opcode.PetitionCheckout on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitioncheckout)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionCheckout2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionCheckout2\n```\n[opcode.PetitionCheckout2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitioncheckout2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionDelete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionDelete\n```\n[opcode.PetitionDelete on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitiondelete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionQue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionQue\n```\n[opcode.PetitionQue on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitionque)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionRefresh") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionRefresh\n```\n[opcode.PetitionRefresh on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitionrefresh)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionResolve") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionResolve\n```\n[opcode.PetitionResolve on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitionresolve)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionSearch") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionSearch\n```\n[opcode.PetitionSearch on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitionsearch)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionSearchResults") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionSearchResults\n```\n[opcode.PetitionSearchResults on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitionsearchresults)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionSearchText") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionSearchText\n```\n[opcode.PetitionSearchText on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitionsearchtext)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionUnCheckout") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionUnCheckout\n```\n[opcode.PetitionUnCheckout on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitionuncheckout)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PetitionUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PetitionUpdate\n```\n[opcode.PetitionUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/petitionupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PickPocket") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PickPocket\n```\n[opcode.PickPocket on questapi](https://questapi.firebaseapp.com/en/lua/opcode/pickpocket)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PlayerProfile") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PlayerProfile\n```\n[opcode.PlayerProfile on questapi](https://questapi.firebaseapp.com/en/lua/opcode/playerprofile)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PlayerStateAdd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PlayerStateAdd\n```\n[opcode.PlayerStateAdd on questapi](https://questapi.firebaseapp.com/en/lua/opcode/playerstateadd)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PlayerStateRemove") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PlayerStateRemove\n```\n[opcode.PlayerStateRemove on questapi](https://questapi.firebaseapp.com/en/lua/opcode/playerstateremove)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PlayEverquestRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PlayEverquestRequest\n```\n[opcode.PlayEverquestRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/playeverquestrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PlayEverquestResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PlayEverquestResponse\n```\n[opcode.PlayEverquestResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/playeverquestresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PlayMP3") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PlayMP3\n```\n[opcode.PlayMP3 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/playmp3)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Poll") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Poll\n```\n[opcode.Poll on questapi](https://questapi.firebaseapp.com/en/lua/opcode/poll)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PollResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PollResponse\n```\n[opcode.PollResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/pollresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PopupResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PopupResponse\n```\n[opcode.PopupResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/popupresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PostEnterWorld") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PostEnterWorld\n```\n[opcode.PostEnterWorld on questapi](https://questapi.firebaseapp.com/en/lua/opcode/postenterworld)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PotionBelt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PotionBelt\n```\n[opcode.PotionBelt on questapi](https://questapi.firebaseapp.com/en/lua/opcode/potionbelt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PreLogoutReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PreLogoutReply\n```\n[opcode.PreLogoutReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/prelogoutreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PurchaseLeadershipAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PurchaseLeadershipAA\n```\n[opcode.PurchaseLeadershipAA on questapi](https://questapi.firebaseapp.com/en/lua/opcode/purchaseleadershipaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PVPLeaderBoardDetailsReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PVPLeaderBoardDetailsReply\n```\n[opcode.PVPLeaderBoardDetailsReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/pvpleaderboarddetailsreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PVPLeaderBoardDetailsRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PVPLeaderBoardDetailsRequest\n```\n[opcode.PVPLeaderBoardDetailsRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/pvpleaderboarddetailsrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PVPLeaderBoardReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PVPLeaderBoardReply\n```\n[opcode.PVPLeaderBoardReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/pvpleaderboardreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PVPLeaderBoardRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PVPLeaderBoardRequest\n```\n[opcode.PVPLeaderBoardRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/pvpleaderboardrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.PVPStats") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.PVPStats\n```\n[opcode.PVPStats on questapi](https://questapi.firebaseapp.com/en/lua/opcode/pvpstats)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.QueryResponseThing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.QueryResponseThing\n```\n[opcode.QueryResponseThing on questapi](https://questapi.firebaseapp.com/en/lua/opcode/queryresponsething)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RaidInvite") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RaidInvite\n```\n[opcode.RaidInvite on questapi](https://questapi.firebaseapp.com/en/lua/opcode/raidinvite)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RaidJoin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RaidJoin\n```\n[opcode.RaidJoin on questapi](https://questapi.firebaseapp.com/en/lua/opcode/raidjoin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RaidUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RaidUpdate\n```\n[opcode.RaidUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/raidupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RandomNameGenerator") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RandomNameGenerator\n```\n[opcode.RandomNameGenerator on questapi](https://questapi.firebaseapp.com/en/lua/opcode/randomnamegenerator)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RandomReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RandomReply\n```\n[opcode.RandomReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/randomreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RandomReq") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RandomReq\n```\n[opcode.RandomReq on questapi](https://questapi.firebaseapp.com/en/lua/opcode/randomreq)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ReadBook") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ReadBook\n```\n[opcode.ReadBook on questapi](https://questapi.firebaseapp.com/en/lua/opcode/readbook)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RecipeAutoCombine") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RecipeAutoCombine\n```\n[opcode.RecipeAutoCombine on questapi](https://questapi.firebaseapp.com/en/lua/opcode/recipeautocombine)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RecipeDetails") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RecipeDetails\n```\n[opcode.RecipeDetails on questapi](https://questapi.firebaseapp.com/en/lua/opcode/recipedetails)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RecipeReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RecipeReply\n```\n[opcode.RecipeReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/recipereply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RecipesFavorite") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RecipesFavorite\n```\n[opcode.RecipesFavorite on questapi](https://questapi.firebaseapp.com/en/lua/opcode/recipesfavorite)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RecipesSearch") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RecipesSearch\n```\n[opcode.RecipesSearch on questapi](https://questapi.firebaseapp.com/en/lua/opcode/recipessearch)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ReclaimCrystals") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ReclaimCrystals\n```\n[opcode.ReclaimCrystals on questapi](https://questapi.firebaseapp.com/en/lua/opcode/reclaimcrystals)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ReloadUI") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ReloadUI\n```\n[opcode.ReloadUI on questapi](https://questapi.firebaseapp.com/en/lua/opcode/reloadui)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RemoveAllDoors") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RemoveAllDoors\n```\n[opcode.RemoveAllDoors on questapi](https://questapi.firebaseapp.com/en/lua/opcode/removealldoors)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RemoveBlockedBuffs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RemoveBlockedBuffs\n```\n[opcode.RemoveBlockedBuffs on questapi](https://questapi.firebaseapp.com/en/lua/opcode/removeblockedbuffs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RemoveNimbusEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RemoveNimbusEffect\n```\n[opcode.RemoveNimbusEffect on questapi](https://questapi.firebaseapp.com/en/lua/opcode/removenimbuseffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Report") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Report\n```\n[opcode.Report on questapi](https://questapi.firebaseapp.com/en/lua/opcode/report)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ReqClientSpawn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ReqClientSpawn\n```\n[opcode.ReqClientSpawn on questapi](https://questapi.firebaseapp.com/en/lua/opcode/reqclientspawn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ReqNewZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ReqNewZone\n```\n[opcode.ReqNewZone on questapi](https://questapi.firebaseapp.com/en/lua/opcode/reqnewzone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RequestClientZoneChange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RequestClientZoneChange\n```\n[opcode.RequestClientZoneChange on questapi](https://questapi.firebaseapp.com/en/lua/opcode/requestclientzonechange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RequestDuel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RequestDuel\n```\n[opcode.RequestDuel on questapi](https://questapi.firebaseapp.com/en/lua/opcode/requestduel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RequestKnowledgeBase") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RequestKnowledgeBase\n```\n[opcode.RequestKnowledgeBase on questapi](https://questapi.firebaseapp.com/en/lua/opcode/requestknowledgebase)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RequestTitles") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RequestTitles\n```\n[opcode.RequestTitles on questapi](https://questapi.firebaseapp.com/en/lua/opcode/requesttitles)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RespawnWindow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RespawnWindow\n```\n[opcode.RespawnWindow on questapi](https://questapi.firebaseapp.com/en/lua/opcode/respawnwindow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RespondAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RespondAA\n```\n[opcode.RespondAA on questapi](https://questapi.firebaseapp.com/en/lua/opcode/respondaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RestState") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RestState\n```\n[opcode.RestState on questapi](https://questapi.firebaseapp.com/en/lua/opcode/reststate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Rewind") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Rewind\n```\n[opcode.Rewind on questapi](https://questapi.firebaseapp.com/en/lua/opcode/rewind)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RezzAnswer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RezzAnswer\n```\n[opcode.RezzAnswer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/rezzanswer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RezzComplete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RezzComplete\n```\n[opcode.RezzComplete on questapi](https://questapi.firebaseapp.com/en/lua/opcode/rezzcomplete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.RezzRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.RezzRequest\n```\n[opcode.RezzRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/rezzrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Sacrifice") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Sacrifice\n```\n[opcode.Sacrifice on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sacrifice)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SafeFallSuccess") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SafeFallSuccess\n```\n[opcode.SafeFallSuccess on questapi](https://questapi.firebaseapp.com/en/lua/opcode/safefallsuccess)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SafePoint") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SafePoint\n```\n[opcode.SafePoint on questapi](https://questapi.firebaseapp.com/en/lua/opcode/safepoint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Save") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Save\n```\n[opcode.Save on questapi](https://questapi.firebaseapp.com/en/lua/opcode/save)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SaveOnZoneReq") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SaveOnZoneReq\n```\n[opcode.SaveOnZoneReq on questapi](https://questapi.firebaseapp.com/en/lua/opcode/saveonzonereq)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SelectTribute") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SelectTribute\n```\n[opcode.SelectTribute on questapi](https://questapi.firebaseapp.com/en/lua/opcode/selecttribute)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendAAStats") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendAAStats\n```\n[opcode.SendAAStats on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendaastats)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendAATable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendAATable\n```\n[opcode.SendAATable on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendaatable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendCharInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendCharInfo\n```\n[opcode.SendCharInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendcharinfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendExpZonein") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendExpZonein\n```\n[opcode.SendExpZonein on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendexpzonein)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendFindableNPCs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendFindableNPCs\n```\n[opcode.SendFindableNPCs on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendfindablenpcs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendGuildTributes") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendGuildTributes\n```\n[opcode.SendGuildTributes on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendguildtributes)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendLoginInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendLoginInfo\n```\n[opcode.SendLoginInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendlogininfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendMaxCharacters") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendMaxCharacters\n```\n[opcode.SendMaxCharacters on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendmaxcharacters)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendMembership") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendMembership\n```\n[opcode.SendMembership on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendmembership)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendMembershipDetails") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendMembershipDetails\n```\n[opcode.SendMembershipDetails on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendmembershipdetails)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendSystemStats") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendSystemStats\n```\n[opcode.SendSystemStats on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendsystemstats)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendTitleList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendTitleList\n```\n[opcode.SendTitleList on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendtitlelist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendTributes") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendTributes\n```\n[opcode.SendTributes on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendtributes)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SendZonepoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SendZonepoints\n```\n[opcode.SendZonepoints on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sendzonepoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SenseHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SenseHeading\n```\n[opcode.SenseHeading on questapi](https://questapi.firebaseapp.com/en/lua/opcode/senseheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SenseTraps") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SenseTraps\n```\n[opcode.SenseTraps on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sensetraps)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ServerListRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ServerListRequest\n```\n[opcode.ServerListRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/serverlistrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ServerListResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ServerListResponse\n```\n[opcode.ServerListResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/serverlistresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SessionReady") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SessionReady\n```\n[opcode.SessionReady on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sessionready)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SetChatServer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SetChatServer\n```\n[opcode.SetChatServer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/setchatserver)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SetChatServer2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SetChatServer2\n```\n[opcode.SetChatServer2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/setchatserver2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SetGroupTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SetGroupTarget\n```\n[opcode.SetGroupTarget on questapi](https://questapi.firebaseapp.com/en/lua/opcode/setgrouptarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SetGuildMOTD") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SetGuildMOTD\n```\n[opcode.SetGuildMOTD on questapi](https://questapi.firebaseapp.com/en/lua/opcode/setguildmotd)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SetGuildRank") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SetGuildRank\n```\n[opcode.SetGuildRank on questapi](https://questapi.firebaseapp.com/en/lua/opcode/setguildrank)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SetRunMode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SetRunMode\n```\n[opcode.SetRunMode on questapi](https://questapi.firebaseapp.com/en/lua/opcode/setrunmode)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SetServerFilter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SetServerFilter\n```\n[opcode.SetServerFilter on questapi](https://questapi.firebaseapp.com/en/lua/opcode/setserverfilter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SetStartCity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SetStartCity\n```\n[opcode.SetStartCity on questapi](https://questapi.firebaseapp.com/en/lua/opcode/setstartcity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SetTitle") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SetTitle\n```\n[opcode.SetTitle on questapi](https://questapi.firebaseapp.com/en/lua/opcode/settitle)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SetTitleReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SetTitleReply\n```\n[opcode.SetTitleReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/settitlereply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Shielding") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Shielding\n```\n[opcode.Shielding on questapi](https://questapi.firebaseapp.com/en/lua/opcode/shielding)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ShopDelItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ShopDelItem\n```\n[opcode.ShopDelItem on questapi](https://questapi.firebaseapp.com/en/lua/opcode/shopdelitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ShopEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ShopEnd\n```\n[opcode.ShopEnd on questapi](https://questapi.firebaseapp.com/en/lua/opcode/shopend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ShopEndConfirm") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ShopEndConfirm\n```\n[opcode.ShopEndConfirm on questapi](https://questapi.firebaseapp.com/en/lua/opcode/shopendconfirm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ShopItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ShopItem\n```\n[opcode.ShopItem on questapi](https://questapi.firebaseapp.com/en/lua/opcode/shopitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ShopPlayerBuy") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ShopPlayerBuy\n```\n[opcode.ShopPlayerBuy on questapi](https://questapi.firebaseapp.com/en/lua/opcode/shopplayerbuy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ShopPlayerSell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ShopPlayerSell\n```\n[opcode.ShopPlayerSell on questapi](https://questapi.firebaseapp.com/en/lua/opcode/shopplayersell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ShopRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ShopRequest\n```\n[opcode.ShopRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/shoprequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SimpleMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SimpleMessage\n```\n[opcode.SimpleMessage on questapi](https://questapi.firebaseapp.com/en/lua/opcode/simplemessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SkillUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SkillUpdate\n```\n[opcode.SkillUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/skillupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Sneak") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Sneak\n```\n[opcode.Sneak on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sneak)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Some3ByteHPUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Some3ByteHPUpdate\n```\n[opcode.Some3ByteHPUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/some3bytehpupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Some6ByteHPUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Some6ByteHPUpdate\n```\n[opcode.Some6ByteHPUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/some6bytehpupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SomeItemPacketMaybe") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SomeItemPacketMaybe\n```\n[opcode.SomeItemPacketMaybe on questapi](https://questapi.firebaseapp.com/en/lua/opcode/someitempacketmaybe)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Sound") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Sound\n```\n[opcode.Sound on questapi](https://questapi.firebaseapp.com/en/lua/opcode/sound)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SpawnAppearance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SpawnAppearance\n```\n[opcode.SpawnAppearance on questapi](https://questapi.firebaseapp.com/en/lua/opcode/spawnappearance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SpawnDoor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SpawnDoor\n```\n[opcode.SpawnDoor on questapi](https://questapi.firebaseapp.com/en/lua/opcode/spawndoor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SpawnPositionUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SpawnPositionUpdate\n```\n[opcode.SpawnPositionUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/spawnpositionupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SpecialMesg") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SpecialMesg\n```\n[opcode.SpecialMesg on questapi](https://questapi.firebaseapp.com/en/lua/opcode/specialmesg)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SpellEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SpellEffect\n```\n[opcode.SpellEffect on questapi](https://questapi.firebaseapp.com/en/lua/opcode/spelleffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Split") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Split\n```\n[opcode.Split on questapi](https://questapi.firebaseapp.com/en/lua/opcode/split)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Stamina") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Stamina\n```\n[opcode.Stamina on questapi](https://questapi.firebaseapp.com/en/lua/opcode/stamina)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Stun") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Stun\n```\n[opcode.Stun on questapi](https://questapi.firebaseapp.com/en/lua/opcode/stun)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Surname") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Surname\n```\n[opcode.Surname on questapi](https://questapi.firebaseapp.com/en/lua/opcode/surname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.SwapSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.SwapSpell\n```\n[opcode.SwapSpell on questapi](https://questapi.firebaseapp.com/en/lua/opcode/swapspell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TargetBuffs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TargetBuffs\n```\n[opcode.TargetBuffs on questapi](https://questapi.firebaseapp.com/en/lua/opcode/targetbuffs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TargetCommand") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TargetCommand\n```\n[opcode.TargetCommand on questapi](https://questapi.firebaseapp.com/en/lua/opcode/targetcommand)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TargetHoTT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TargetHoTT\n```\n[opcode.TargetHoTT on questapi](https://questapi.firebaseapp.com/en/lua/opcode/targethott)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TargetMouse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TargetMouse\n```\n[opcode.TargetMouse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/targetmouse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TargetReject") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TargetReject\n```\n[opcode.TargetReject on questapi](https://questapi.firebaseapp.com/en/lua/opcode/targetreject)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TaskActivity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TaskActivity\n```\n[opcode.TaskActivity on questapi](https://questapi.firebaseapp.com/en/lua/opcode/taskactivity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TaskActivityComplete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TaskActivityComplete\n```\n[opcode.TaskActivityComplete on questapi](https://questapi.firebaseapp.com/en/lua/opcode/taskactivitycomplete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TaskDescription") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TaskDescription\n```\n[opcode.TaskDescription on questapi](https://questapi.firebaseapp.com/en/lua/opcode/taskdescription)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TaskHistoryReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TaskHistoryReply\n```\n[opcode.TaskHistoryReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/taskhistoryreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TaskHistoryRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TaskHistoryRequest\n```\n[opcode.TaskHistoryRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/taskhistoryrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TaskMemberList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TaskMemberList\n```\n[opcode.TaskMemberList on questapi](https://questapi.firebaseapp.com/en/lua/opcode/taskmemberlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Taunt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Taunt\n```\n[opcode.Taunt on questapi](https://questapi.firebaseapp.com/en/lua/opcode/taunt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TestBuff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TestBuff\n```\n[opcode.TestBuff on questapi](https://questapi.firebaseapp.com/en/lua/opcode/testbuff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TGB") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TGB\n```\n[opcode.TGB on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tgb)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TimeOfDay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TimeOfDay\n```\n[opcode.TimeOfDay on questapi](https://questapi.firebaseapp.com/en/lua/opcode/timeofday)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Track") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Track\n```\n[opcode.Track on questapi](https://questapi.firebaseapp.com/en/lua/opcode/track)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TrackTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TrackTarget\n```\n[opcode.TrackTarget on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tracktarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TrackUnknown") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TrackUnknown\n```\n[opcode.TrackUnknown on questapi](https://questapi.firebaseapp.com/en/lua/opcode/trackunknown)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TradeAcceptClick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TradeAcceptClick\n```\n[opcode.TradeAcceptClick on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tradeacceptclick)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TradeBusy") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TradeBusy\n```\n[opcode.TradeBusy on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tradebusy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TradeCoins") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TradeCoins\n```\n[opcode.TradeCoins on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tradecoins)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TradeMoneyUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TradeMoneyUpdate\n```\n[opcode.TradeMoneyUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/trademoneyupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Trader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Trader\n```\n[opcode.Trader on questapi](https://questapi.firebaseapp.com/en/lua/opcode/trader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TraderBuy") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TraderBuy\n```\n[opcode.TraderBuy on questapi](https://questapi.firebaseapp.com/en/lua/opcode/traderbuy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TraderDelItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TraderDelItem\n```\n[opcode.TraderDelItem on questapi](https://questapi.firebaseapp.com/en/lua/opcode/traderdelitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TradeRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TradeRequest\n```\n[opcode.TradeRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/traderequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TradeRequestAck") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TradeRequestAck\n```\n[opcode.TradeRequestAck on questapi](https://questapi.firebaseapp.com/en/lua/opcode/traderequestack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TraderItemUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TraderItemUpdate\n```\n[opcode.TraderItemUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/traderitemupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TraderShop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TraderShop\n```\n[opcode.TraderShop on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tradershop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TradeSkillCombine") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TradeSkillCombine\n```\n[opcode.TradeSkillCombine on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tradeskillcombine)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Translocate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Translocate\n```\n[opcode.Translocate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/translocate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TributeInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TributeInfo\n```\n[opcode.TributeInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tributeinfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TributeItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TributeItem\n```\n[opcode.TributeItem on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tributeitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TributeMoney") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TributeMoney\n```\n[opcode.TributeMoney on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tributemoney)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TributeNPC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TributeNPC\n```\n[opcode.TributeNPC on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tributenpc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TributePointUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TributePointUpdate\n```\n[opcode.TributePointUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tributepointupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TributeTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TributeTimer\n```\n[opcode.TributeTimer on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tributetimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TributeToggle") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TributeToggle\n```\n[opcode.TributeToggle on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tributetoggle)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.TributeUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.TributeUpdate\n```\n[opcode.TributeUpdate on questapi](https://questapi.firebaseapp.com/en/lua/opcode/tributeupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Untargetable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Untargetable\n```\n[opcode.Untargetable on questapi](https://questapi.firebaseapp.com/en/lua/opcode/untargetable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.UpdateAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.UpdateAA\n```\n[opcode.UpdateAA on questapi](https://questapi.firebaseapp.com/en/lua/opcode/updateaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.UpdateLeadershipAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.UpdateLeadershipAA\n```\n[opcode.UpdateLeadershipAA on questapi](https://questapi.firebaseapp.com/en/lua/opcode/updateleadershipaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.VetClaimReply") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.VetClaimReply\n```\n[opcode.VetClaimReply on questapi](https://questapi.firebaseapp.com/en/lua/opcode/vetclaimreply)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.VetClaimRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.VetClaimRequest\n```\n[opcode.VetClaimRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/vetclaimrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.VetRewardsAvaliable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.VetRewardsAvaliable\n```\n[opcode.VetRewardsAvaliable on questapi](https://questapi.firebaseapp.com/en/lua/opcode/vetrewardsavaliable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.VoiceMacroIn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.VoiceMacroIn\n```\n[opcode.VoiceMacroIn on questapi](https://questapi.firebaseapp.com/en/lua/opcode/voicemacroin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.VoiceMacroOut") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.VoiceMacroOut\n```\n[opcode.VoiceMacroOut on questapi](https://questapi.firebaseapp.com/en/lua/opcode/voicemacroout)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.WeaponEquip1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.WeaponEquip1\n```\n[opcode.WeaponEquip1 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/weaponequip1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.WearChange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.WearChange\n```\n[opcode.WearChange on questapi](https://questapi.firebaseapp.com/en/lua/opcode/wearchange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Weather") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Weather\n```\n[opcode.Weather on questapi](https://questapi.firebaseapp.com/en/lua/opcode/weather)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.Weblink") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.Weblink\n```\n[opcode.Weblink on questapi](https://questapi.firebaseapp.com/en/lua/opcode/weblink)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.WhoAllRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.WhoAllRequest\n```\n[opcode.WhoAllRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/whoallrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.WhoAllResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.WhoAllResponse\n```\n[opcode.WhoAllResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/whoallresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.World_Client_CRC1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.World_Client_CRC1\n```\n[opcode.World_Client_CRC1 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/world_client_crc1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.World_Client_CRC2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.World_Client_CRC2\n```\n[opcode.World_Client_CRC2 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/world_client_crc2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.WorldClientReady") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.WorldClientReady\n```\n[opcode.WorldClientReady on questapi](https://questapi.firebaseapp.com/en/lua/opcode/worldclientready)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.WorldComplete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.WorldComplete\n```\n[opcode.WorldComplete on questapi](https://questapi.firebaseapp.com/en/lua/opcode/worldcomplete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.WorldLogout") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.WorldLogout\n```\n[opcode.WorldLogout on questapi](https://questapi.firebaseapp.com/en/lua/opcode/worldlogout)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.WorldObjectsSent") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.WorldObjectsSent\n```\n[opcode.WorldObjectsSent on questapi](https://questapi.firebaseapp.com/en/lua/opcode/worldobjectssent)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.WorldUnknown001") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.WorldUnknown001\n```\n[opcode.WorldUnknown001 on questapi](https://questapi.firebaseapp.com/en/lua/opcode/worldunknown001)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.XTargetAutoAddHaters") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.XTargetAutoAddHaters\n```\n[opcode.XTargetAutoAddHaters on questapi](https://questapi.firebaseapp.com/en/lua/opcode/xtargetautoaddhaters)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.XTargetRequest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.XTargetRequest\n```\n[opcode.XTargetRequest on questapi](https://questapi.firebaseapp.com/en/lua/opcode/xtargetrequest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.XTargetResponse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.XTargetResponse\n```\n[opcode.XTargetResponse on questapi](https://questapi.firebaseapp.com/en/lua/opcode/xtargetresponse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.YellForHelp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.YellForHelp\n```\n[opcode.YellForHelp on questapi](https://questapi.firebaseapp.com/en/lua/opcode/yellforhelp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ZoneChange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ZoneChange\n```\n[opcode.ZoneChange on questapi](https://questapi.firebaseapp.com/en/lua/opcode/zonechange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ZoneComplete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ZoneComplete\n```\n[opcode.ZoneComplete on questapi](https://questapi.firebaseapp.com/en/lua/opcode/zonecomplete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ZoneEntry") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ZoneEntry\n```\n[opcode.ZoneEntry on questapi](https://questapi.firebaseapp.com/en/lua/opcode/zoneentry)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ZoneGuildList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ZoneGuildList\n```\n[opcode.ZoneGuildList on questapi](https://questapi.firebaseapp.com/en/lua/opcode/zoneguildlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ZoneInUnknown") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ZoneInUnknown\n```\n[opcode.ZoneInUnknown on questapi](https://questapi.firebaseapp.com/en/lua/opcode/zoneinunknown)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ZonePlayerToBind") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ZonePlayerToBind\n```\n[opcode.ZonePlayerToBind on questapi](https://questapi.firebaseapp.com/en/lua/opcode/zoneplayertobind)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ZoneServerInfo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ZoneServerInfo\n```\n[opcode.ZoneServerInfo on questapi](https://questapi.firebaseapp.com/en/lua/opcode/zoneserverinfo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ZoneServerReady") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ZoneServerReady\n```\n[opcode.ZoneServerReady on questapi](https://questapi.firebaseapp.com/en/lua/opcode/zoneserverready)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ZoneSpawns") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ZoneSpawns\n```\n[opcode.ZoneSpawns on questapi](https://questapi.firebaseapp.com/en/lua/opcode/zonespawns)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "opcode.ZoneUnavail") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nopcode.ZoneUnavail\n```\n[opcode.ZoneUnavail on questapi](https://questapi.firebaseapp.com/en/lua/opcode/zoneunavail)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "packet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket\n```\n[packet on questapi](https://questapi.firebaseapp.com/en/lua/packet/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.GetOpcode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.GetOpcode()\n```\n[packet.GetOpcode on questapi](https://questapi.firebaseapp.com/en/lua/packet/getopcode)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.GetRawOpcode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.GetRawOpcode()\n```\n[packet.GetRawOpcode on questapi](https://questapi.firebaseapp.com/en/lua/packet/getrawopcode)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.GetSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.GetSize()\n```\n[packet.GetSize on questapi](https://questapi.firebaseapp.com/en/lua/packet/getsize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.ReadDouble") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.ReadDouble()\n```\n[packet.ReadDouble on questapi](https://questapi.firebaseapp.com/en/lua/packet/readdouble)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.ReadFixedLengthString") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.ReadFixedLengthString()\n```\n[packet.ReadFixedLengthString on questapi](https://questapi.firebaseapp.com/en/lua/packet/readfixedlengthstring)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.ReadFloat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.ReadFloat()\n```\n[packet.ReadFloat on questapi](https://questapi.firebaseapp.com/en/lua/packet/readfloat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.ReadString") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.ReadString()\n```\n[packet.ReadString on questapi](https://questapi.firebaseapp.com/en/lua/packet/readstring)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.SetOpcode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.SetOpcode()\n```\n[packet.SetOpcode on questapi](https://questapi.firebaseapp.com/en/lua/packet/setopcode)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.SetRawOpcode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.SetRawOpcode()\n```\n[packet.SetRawOpcode on questapi](https://questapi.firebaseapp.com/en/lua/packet/setrawopcode)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.WriteDouble") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.WriteDouble()\n```\n[packet.WriteDouble on questapi](https://questapi.firebaseapp.com/en/lua/packet/writedouble)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.WriteFixedLengthString") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.WriteFixedLengthString()\n```\n[packet.WriteFixedLengthString on questapi](https://questapi.firebaseapp.com/en/lua/packet/writefixedlengthstring)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.WriteFloat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.WriteFloat()\n```\n[packet.WriteFloat on questapi](https://questapi.firebaseapp.com/en/lua/packet/writefloat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "packet.WriteString") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\npacket.WriteString()\n```\n[packet.WriteString on questapi](https://questapi.firebaseapp.com/en/lua/packet/writestring)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "raid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid\n```\n[raid on questapi](https://questapi.firebaseapp.com/en/lua/raid/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.BalanceHP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.BalanceHP()\n```\n[raid.BalanceHP on questapi](https://questapi.firebaseapp.com/en/lua/raid/balancehp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.CastGroupSpell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.CastGroupSpell()\n```\n[raid.CastGroupSpell on questapi](https://questapi.firebaseapp.com/en/lua/raid/castgroupspell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.GetClientByIndex") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.GetClientByIndex()\n```\n[raid.GetClientByIndex on questapi](https://questapi.firebaseapp.com/en/lua/raid/getclientbyindex)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.GetGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.GetGroup()\n```\n[raid.GetGroup on questapi](https://questapi.firebaseapp.com/en/lua/raid/getgroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.GetGroupNumber") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.GetGroupNumber()\n```\n[raid.GetGroupNumber on questapi](https://questapi.firebaseapp.com/en/lua/raid/getgroupnumber)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.GetHighestLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.GetHighestLevel()\n```\n[raid.GetHighestLevel on questapi](https://questapi.firebaseapp.com/en/lua/raid/gethighestlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.GetID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.GetID()\n```\n[raid.GetID on questapi](https://questapi.firebaseapp.com/en/lua/raid/getid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.GetLowestLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.GetLowestLevel()\n```\n[raid.GetLowestLevel on questapi](https://questapi.firebaseapp.com/en/lua/raid/getlowestlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.GetMember") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.GetMember()\n```\n[raid.GetMember on questapi](https://questapi.firebaseapp.com/en/lua/raid/getmember)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.GetTotalRaidDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.GetTotalRaidDamage()\n```\n[raid.GetTotalRaidDamage on questapi](https://questapi.firebaseapp.com/en/lua/raid/gettotalraiddamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.GroupCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.GroupCount()\n```\n[raid.GroupCount on questapi](https://questapi.firebaseapp.com/en/lua/raid/groupcount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.IsGroupLeader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.IsGroupLeader()\n```\n[raid.IsGroupLeader on questapi](https://questapi.firebaseapp.com/en/lua/raid/isgroupleader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.IsLeader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.IsLeader()\n```\n[raid.IsLeader on questapi](https://questapi.firebaseapp.com/en/lua/raid/isleader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.IsRaidMember") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.IsRaidMember()\n```\n[raid.IsRaidMember on questapi](https://questapi.firebaseapp.com/en/lua/raid/israidmember)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.RaidCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.RaidCount()\n```\n[raid.RaidCount on questapi](https://questapi.firebaseapp.com/en/lua/raid/raidcount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.SplitExp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.SplitExp()\n```\n[raid.SplitExp on questapi](https://questapi.firebaseapp.com/en/lua/raid/splitexp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.SplitMoney") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.SplitMoney()\n```\n[raid.SplitMoney on questapi](https://questapi.firebaseapp.com/en/lua/raid/splitmoney)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.TeleportGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.TeleportGroup()\n```\n[raid.TeleportGroup on questapi](https://questapi.firebaseapp.com/en/lua/raid/teleportgroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "raid.TeleportRaid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nraid.TeleportRaid()\n```\n[raid.TeleportRaid on questapi](https://questapi.firebaseapp.com/en/lua/raid/teleportraid)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "random") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrandom\n```\n[random on questapi](https://questapi.firebaseapp.com/en/lua/random/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "random.Int") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrandom.Int()\n```\n[random.Int on questapi](https://questapi.firebaseapp.com/en/lua/random/int)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "random.Real") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrandom.Real()\n```\n[random.Real on questapi](https://questapi.firebaseapp.com/en/lua/random/real)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "rule") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule\n```\n[rule on questapi](https://questapi.firebaseapp.com/en/lua/rule/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule._BoolRuleCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule._BoolRuleCount()\n```\n[rule._BoolRuleCount on questapi](https://questapi.firebaseapp.com/en/lua/rule/_boolrulecount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule._IntRuleCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule._IntRuleCount()\n```\n[rule._IntRuleCount on questapi](https://questapi.firebaseapp.com/en/lua/rule/_intrulecount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule._RealRuleCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule._RealRuleCount()\n```\n[rule._RealRuleCount on questapi](https://questapi.firebaseapp.com/en/lua/rule/_realrulecount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AAExpMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AAExpMultiplier()\n```\n[rule.AAExpMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/aaexpmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AAMitigationACFactor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AAMitigationACFactor()\n```\n[rule.AAMitigationACFactor on questapi](https://questapi.firebaseapp.com/en/lua/rule/aamitigationacfactor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ACthac0Factor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ACthac0Factor()\n```\n[rule.ACthac0Factor on questapi](https://questapi.firebaseapp.com/en/lua/rule/acthac0factor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ACthac20Factor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ACthac20Factor()\n```\n[rule.ACthac20Factor on questapi](https://questapi.firebaseapp.com/en/lua/rule/acthac20factor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ActiveInvSnapshots") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ActiveInvSnapshots()\n```\n[rule.ActiveInvSnapshots on questapi](https://questapi.firebaseapp.com/en/lua/rule/activeinvsnapshots)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AdditiveBonusWornType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AdditiveBonusWornType()\n```\n[rule.AdditiveBonusWornType on questapi](https://questapi.firebaseapp.com/en/lua/rule/additivebonusworntype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AddMaxClientsPerIP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AddMaxClientsPerIP()\n```\n[rule.AddMaxClientsPerIP on questapi](https://questapi.firebaseapp.com/en/lua/rule/addmaxclientsperip)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AddMaxClientsStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AddMaxClientsStatus()\n```\n[rule.AddMaxClientsStatus on questapi](https://questapi.firebaseapp.com/en/lua/rule/addmaxclientsstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AdjustProcPerMinute") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AdjustProcPerMinute()\n```\n[rule.AdjustProcPerMinute on questapi](https://questapi.firebaseapp.com/en/lua/rule/adjustprocperminute)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AdjustSpecialProcPerMinute") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AdjustSpecialProcPerMinute()\n```\n[rule.AdjustSpecialProcPerMinute on questapi](https://questapi.firebaseapp.com/en/lua/rule/adjustspecialprocperminute)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AERampageSafeZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AERampageSafeZone()\n```\n[rule.AERampageSafeZone on questapi](https://questapi.firebaseapp.com/en/lua/rule/aerampagesafezone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AggroRadius") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AggroRadius()\n```\n[rule.AggroRadius on questapi](https://questapi.firebaseapp.com/en/lua/rule/aggroradius)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AggroRadiusPuller") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AggroRadiusPuller()\n```\n[rule.AggroRadiusPuller on questapi](https://questapi.firebaseapp.com/en/lua/rule/aggroradiuspuller)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AgiHitFactor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AgiHitFactor()\n```\n[rule.AgiHitFactor on questapi](https://questapi.firebaseapp.com/en/lua/rule/agihitfactor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_EngagedBeneficialOtherChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_EngagedBeneficialOtherChance()\n```\n[rule.AI_EngagedBeneficialOtherChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_engagedbeneficialotherchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_EngagedBeneficialSelfChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_EngagedBeneficialSelfChance()\n```\n[rule.AI_EngagedBeneficialSelfChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_engagedbeneficialselfchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_EngagedDetrimentalChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_EngagedDetrimentalChance()\n```\n[rule.AI_EngagedDetrimentalChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_engageddetrimentalchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_EngagedNoSpellMaxRecast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_EngagedNoSpellMaxRecast()\n```\n[rule.AI_EngagedNoSpellMaxRecast on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_engagednospellmaxrecast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_EngagedNoSpellMinRecast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_EngagedNoSpellMinRecast()\n```\n[rule.AI_EngagedNoSpellMinRecast on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_engagednospellminrecast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_HealHPPct") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_HealHPPct()\n```\n[rule.AI_HealHPPct on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_healhppct)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_IdleBeneficialChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_IdleBeneficialChance()\n```\n[rule.AI_IdleBeneficialChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_idlebeneficialchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_IdleNoSpellMaxRecast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_IdleNoSpellMaxRecast()\n```\n[rule.AI_IdleNoSpellMaxRecast on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_idlenospellmaxrecast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_IdleNoSpellMinRecast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_IdleNoSpellMinRecast()\n```\n[rule.AI_IdleNoSpellMinRecast on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_idlenospellminrecast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_PursueDetrimentalChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_PursueDetrimentalChance()\n```\n[rule.AI_PursueDetrimentalChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_pursuedetrimentalchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_PursueNoSpellMaxRecast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_PursueNoSpellMaxRecast()\n```\n[rule.AI_PursueNoSpellMaxRecast on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_pursuenospellmaxrecast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_PursueNoSpellMinRecast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_PursueNoSpellMinRecast()\n```\n[rule.AI_PursueNoSpellMinRecast on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_pursuenospellminrecast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AI_SpellCastFinishedFailRecast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AI_SpellCastFinishedFailRecast()\n```\n[rule.AI_SpellCastFinishedFailRecast on questapi](https://questapi.firebaseapp.com/en/lua/rule/ai_spellcastfinishedfailrecast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowAnyWeaponTransformation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowAnyWeaponTransformation()\n```\n[rule.AllowAnyWeaponTransformation on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowanyweapontransformation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowApplyPoisonCommand") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowApplyPoisonCommand()\n```\n[rule.AllowApplyPoisonCommand on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowapplypoisoncommand)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowApplyPotionCommand") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowApplyPotionCommand()\n```\n[rule.AllowApplyPotionCommand on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowapplypotioncommand)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowCamelCaseNames") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowCamelCaseNames()\n```\n[rule.AllowCamelCaseNames on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowcamelcasenames)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowCorpse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowCorpse()\n```\n[rule.AllowCorpse on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowcorpse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowCrossClassTrainers") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowCrossClassTrainers()\n```\n[rule.AllowCrossClassTrainers on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowcrossclasstrainers)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowedClasses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowedClasses()\n```\n[rule.AllowedClasses on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowedclasses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowedGenders") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowedGenders()\n```\n[rule.AllowedGenders on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowedgenders)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowedRaces") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowedRaces()\n```\n[rule.AllowedRaces on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowedraces)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowItemTGB") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowItemTGB()\n```\n[rule.AllowItemTGB on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowitemtgb)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowMercs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowMercs()\n```\n[rule.AllowMercs on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowmercs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowMercSuspendInCombat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowMercSuspendInCombat()\n```\n[rule.AllowMercSuspendInCombat on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowmercsuspendincombat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowMQTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowMQTarget()\n```\n[rule.AllowMQTarget on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowmqtarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowMultiplePetitions") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowMultiplePetitions()\n```\n[rule.AllowMultiplePetitions on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowmultiplepetitions)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowOwnerOptionAltCombat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowOwnerOptionAltCombat()\n```\n[rule.AllowOwnerOptionAltCombat on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowowneroptionaltcombat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowOwnerOptionAutoDefend") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowOwnerOptionAutoDefend()\n```\n[rule.AllowOwnerOptionAutoDefend on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowowneroptionautodefend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllowTickPulling") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllowTickPulling()\n```\n[rule.AllowTickPulling on questapi](https://questapi.firebaseapp.com/en/lua/rule/allowtickpulling)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AllyFactionMinimum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AllyFactionMinimum()\n```\n[rule.AllyFactionMinimum on questapi](https://questapi.firebaseapp.com/en/lua/rule/allyfactionminimum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AlwaysSendTargetsBuffs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AlwaysSendTargetsBuffs()\n```\n[rule.AlwaysSendTargetsBuffs on questapi](https://questapi.firebaseapp.com/en/lua/rule/alwayssendtargetsbuffs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AmiablyFactionMinimum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AmiablyFactionMinimum()\n```\n[rule.AmiablyFactionMinimum on questapi](https://questapi.firebaseapp.com/en/lua/rule/amiablyfactionminimum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ApprehensivelyFactionMinimum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ApprehensivelyFactionMinimum()\n```\n[rule.ApprehensivelyFactionMinimum on questapi](https://questapi.firebaseapp.com/en/lua/rule/apprehensivelyfactionminimum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ArcheryBaseDamageBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ArcheryBaseDamageBonus()\n```\n[rule.ArcheryBaseDamageBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/archerybasedamagebonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ArcheryBonusChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ArcheryBonusChance()\n```\n[rule.ArcheryBonusChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/archerybonuschance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ArcheryBonusRequiresStationary") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ArcheryBonusRequiresStationary()\n```\n[rule.ArcheryBonusRequiresStationary on questapi](https://questapi.firebaseapp.com/en/lua/rule/archerybonusrequiresstationary)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ArcheryCritDifficulty") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ArcheryCritDifficulty()\n```\n[rule.ArcheryCritDifficulty on questapi](https://questapi.firebaseapp.com/en/lua/rule/archerycritdifficulty)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ArcheryHitPenalty") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ArcheryHitPenalty()\n```\n[rule.ArcheryHitPenalty on questapi](https://questapi.firebaseapp.com/en/lua/rule/archeryhitpenalty)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ArcheryNPCMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ArcheryNPCMultiplier()\n```\n[rule.ArcheryNPCMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/archerynpcmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AssistNoTargetSelf") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AssistNoTargetSelf()\n```\n[rule.AssistNoTargetSelf on questapi](https://questapi.firebaseapp.com/en/lua/rule/assistnotargetself)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AttackCommandRange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AttackCommandRange()\n```\n[rule.AttackCommandRange on questapi](https://questapi.firebaseapp.com/en/lua/rule/attackcommandrange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AuditTrail") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AuditTrail()\n```\n[rule.AuditTrail on questapi](https://questapi.firebaseapp.com/en/lua/rule/audittrail)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AutosaveIntervalS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AutosaveIntervalS()\n```\n[rule.AutosaveIntervalS on questapi](https://questapi.firebaseapp.com/en/lua/rule/autosaveintervals)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AutoShutdownDelay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AutoShutdownDelay()\n```\n[rule.AutoShutdownDelay on questapi](https://questapi.firebaseapp.com/en/lua/rule/autoshutdowndelay)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AvgDefProcsPerMinute") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AvgDefProcsPerMinute()\n```\n[rule.AvgDefProcsPerMinute on questapi](https://questapi.firebaseapp.com/en/lua/rule/avgdefprocsperminute)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AvgProcsPerMinute") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AvgProcsPerMinute()\n```\n[rule.AvgProcsPerMinute on questapi](https://questapi.firebaseapp.com/en/lua/rule/avgprocsperminute)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AvgSpecialProcsPerMinute") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AvgSpecialProcsPerMinute()\n```\n[rule.AvgSpecialProcsPerMinute on questapi](https://questapi.firebaseapp.com/en/lua/rule/avgspecialprocsperminute)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AvgSpellProcsPerMinute") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AvgSpellProcsPerMinute()\n```\n[rule.AvgSpellProcsPerMinute on questapi](https://questapi.firebaseapp.com/en/lua/rule/avgspellprocsperminute)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.AvoidanceCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.AvoidanceCap()\n```\n[rule.AvoidanceCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/avoidancecap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BackstabBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BackstabBonus()\n```\n[rule.BackstabBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/backstabbonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BaseCritChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BaseCritChance()\n```\n[rule.BaseCritChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/basecritchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BaseCritRatio") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BaseCritRatio()\n```\n[rule.BaseCritRatio on questapi](https://questapi.firebaseapp.com/en/lua/rule/basecritratio)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BaseHitChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BaseHitChance()\n```\n[rule.BaseHitChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/basehitchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BaseHPRegenBonusRaces") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BaseHPRegenBonusRaces()\n```\n[rule.BaseHPRegenBonusRaces on questapi](https://questapi.firebaseapp.com/en/lua/rule/basehpregenbonusraces)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BaseImmunityLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BaseImmunityLevel()\n```\n[rule.BaseImmunityLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/baseimmunitylevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BaseInstrumentSoftCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BaseInstrumentSoftCap()\n```\n[rule.BaseInstrumentSoftCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/baseinstrumentsoftcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BaseProcChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BaseProcChance()\n```\n[rule.BaseProcChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/baseprocchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BaseRunSpeedCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BaseRunSpeedCap()\n```\n[rule.BaseRunSpeedCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/baserunspeedcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BeginCast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BeginCast()\n```\n[rule.BeginCast on questapi](https://questapi.firebaseapp.com/en/lua/rule/begincast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BerserkerFrenzyEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BerserkerFrenzyEnd()\n```\n[rule.BerserkerFrenzyEnd on questapi](https://questapi.firebaseapp.com/en/lua/rule/berserkerfrenzyend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BerserkerFrenzyStart") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BerserkerFrenzyStart()\n```\n[rule.BerserkerFrenzyStart on questapi](https://questapi.firebaseapp.com/en/lua/rule/berserkerfrenzystart)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BindAnywhere") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BindAnywhere()\n```\n[rule.BindAnywhere on questapi](https://questapi.firebaseapp.com/en/lua/rule/bindanywhere)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BlueModifier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BlueModifier()\n```\n[rule.BlueModifier on questapi](https://questapi.firebaseapp.com/en/lua/rule/bluemodifier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BotBardUseOutOfCombatSongs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BotBardUseOutOfCombatSongs()\n```\n[rule.BotBardUseOutOfCombatSongs on questapi](https://questapi.firebaseapp.com/en/lua/rule/botbarduseoutofcombatsongs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BotCharacterLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BotCharacterLevel()\n```\n[rule.BotCharacterLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/botcharacterlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BotCharacterLevelEnabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BotCharacterLevelEnabled()\n```\n[rule.BotCharacterLevelEnabled on questapi](https://questapi.firebaseapp.com/en/lua/rule/botcharacterlevelenabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BotExpansionSettings") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BotExpansionSettings()\n```\n[rule.BotExpansionSettings on questapi](https://questapi.firebaseapp.com/en/lua/rule/botexpansionsettings)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BotGroupXP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BotGroupXP()\n```\n[rule.BotGroupXP on questapi](https://questapi.firebaseapp.com/en/lua/rule/botgroupxp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BotLevelsWithOwner") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BotLevelsWithOwner()\n```\n[rule.BotLevelsWithOwner on questapi](https://questapi.firebaseapp.com/en/lua/rule/botlevelswithowner)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BuffFriends") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BuffFriends()\n```\n[rule.BuffFriends on questapi](https://questapi.firebaseapp.com/en/lua/rule/bufffriends)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BuffLevelRestrictions") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BuffLevelRestrictions()\n```\n[rule.BuffLevelRestrictions on questapi](https://questapi.firebaseapp.com/en/lua/rule/bufflevelrestrictions)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.BuyCostMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.BuyCostMod()\n```\n[rule.BuyCostMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/buycostmod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CanTakeNoDrop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CanTakeNoDrop()\n```\n[rule.CanTakeNoDrop on questapi](https://questapi.firebaseapp.com/en/lua/rule/cantakenodrop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CasterACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CasterACSoftcapReturn()\n```\n[rule.CasterACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/casteracsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CasterStopMeleeLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CasterStopMeleeLevel()\n```\n[rule.CasterStopMeleeLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/casterstopmeleelevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ChaBonusMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ChaBonusMod()\n```\n[rule.ChaBonusMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/chabonusmod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ChainACSoftcap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ChainACSoftcap()\n```\n[rule.ChainACSoftcap on questapi](https://questapi.firebaseapp.com/en/lua/rule/chainacsoftcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ChaPenaltyMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ChaPenaltyMod()\n```\n[rule.ChaPenaltyMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/chapenaltymod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ChargeMercPurchaseCost") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ChargeMercPurchaseCost()\n```\n[rule.ChargeMercPurchaseCost on questapi](https://questapi.firebaseapp.com/en/lua/rule/chargemercpurchasecost)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ChargeMercUpkeepCost") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ChargeMercUpkeepCost()\n```\n[rule.ChargeMercUpkeepCost on questapi](https://questapi.firebaseapp.com/en/lua/rule/chargemercupkeepcost)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CharismaCharmDuration") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CharismaCharmDuration()\n```\n[rule.CharismaCharmDuration on questapi](https://questapi.firebaseapp.com/en/lua/rule/charismacharmduration)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CharismaEffectiveness") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CharismaEffectiveness()\n```\n[rule.CharismaEffectiveness on questapi](https://questapi.firebaseapp.com/en/lua/rule/charismaeffectiveness)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CharismaEffectivenessCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CharismaEffectivenessCap()\n```\n[rule.CharismaEffectivenessCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/charismaeffectivenesscap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CharmBreakCheckChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CharmBreakCheckChance()\n```\n[rule.CharmBreakCheckChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/charmbreakcheckchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CharmDisablesSpecialAbilities") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CharmDisablesSpecialAbilities()\n```\n[rule.CharmDisablesSpecialAbilities on questapi](https://questapi.firebaseapp.com/en/lua/rule/charmdisablesspecialabilities)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CheckCursorEmptyWhenLooting") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CheckCursorEmptyWhenLooting()\n```\n[rule.CheckCursorEmptyWhenLooting on questapi](https://questapi.firebaseapp.com/en/lua/rule/checkcursoremptywhenlooting)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CheckForWaterAtWaypoints") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CheckForWaterAtWaypoints()\n```\n[rule.CheckForWaterAtWaypoints on questapi](https://questapi.firebaseapp.com/en/lua/rule/checkforwateratwaypoints)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CheckForWaterOnSendTo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CheckForWaterOnSendTo()\n```\n[rule.CheckForWaterOnSendTo on questapi](https://questapi.firebaseapp.com/en/lua/rule/checkforwateronsendto)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CheckForWaterWhenFishing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CheckForWaterWhenFishing()\n```\n[rule.CheckForWaterWhenFishing on questapi](https://questapi.firebaseapp.com/en/lua/rule/checkforwaterwhenfishing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CheckForWaterWhenMoving") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CheckForWaterWhenMoving()\n```\n[rule.CheckForWaterWhenMoving on questapi](https://questapi.firebaseapp.com/en/lua/rule/checkforwaterwhenmoving)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CheckWaypointsInWaterWhenLoading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CheckWaypointsInWaterWhenLoading()\n```\n[rule.CheckWaypointsInWaterWhenLoading on questapi](https://questapi.firebaseapp.com/en/lua/rule/checkwaypointsinwaterwhenloading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ClassicMasterWu") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ClassicMasterWu()\n```\n[rule.ClassicMasterWu on questapi](https://questapi.firebaseapp.com/en/lua/rule/classicmasterwu)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ClassicNPCBackstab") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ClassicNPCBackstab()\n```\n[rule.ClassicNPCBackstab on questapi](https://questapi.firebaseapp.com/en/lua/rule/classicnpcbackstab)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ClearTempMerchantlist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ClearTempMerchantlist()\n```\n[rule.ClearTempMerchantlist on questapi](https://questapi.firebaseapp.com/en/lua/rule/cleartempmerchantlist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ClientAggroCheckInterval") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ClientAggroCheckInterval()\n```\n[rule.ClientAggroCheckInterval on questapi](https://questapi.firebaseapp.com/en/lua/rule/clientaggrocheckinterval)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ClientDataRate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ClientDataRate()\n```\n[rule.ClientDataRate on questapi](https://questapi.firebaseapp.com/en/lua/rule/clientdatarate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ClientLinkdeadMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ClientLinkdeadMS()\n```\n[rule.ClientLinkdeadMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/clientlinkdeadms)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ClientPositionUpdates") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ClientPositionUpdates()\n```\n[rule.ClientPositionUpdates on questapi](https://questapi.firebaseapp.com/en/lua/rule/clientpositionupdates)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ClientStunLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ClientStunLevel()\n```\n[rule.ClientStunLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/clientstunlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ClothACSoftcap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ClothACSoftcap()\n```\n[rule.ClothACSoftcap on questapi](https://questapi.firebaseapp.com/en/lua/rule/clothacsoftcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ClrRngMnkBrdACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ClrRngMnkBrdACSoftcapReturn()\n```\n[rule.ClrRngMnkBrdACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/clrrngmnkbrdacsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CommandSpellRank") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CommandSpellRank()\n```\n[rule.CommandSpellRank on questapi](https://questapi.firebaseapp.com/en/lua/rule/commandspellrank)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CompressZoneStream") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CompressZoneStream()\n```\n[rule.CompressZoneStream on questapi](https://questapi.firebaseapp.com/en/lua/rule/compresszonestream)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ConsumptionMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ConsumptionMultiplier()\n```\n[rule.ConsumptionMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/consumptionmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CorpseDecayTimeMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CorpseDecayTimeMS()\n```\n[rule.CorpseDecayTimeMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/corpsedecaytimems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CorpseResTimeMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CorpseResTimeMS()\n```\n[rule.CorpseResTimeMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/corpserestimems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CorpseUnlockTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CorpseUnlockTimer()\n```\n[rule.CorpseUnlockTimer on questapi](https://questapi.firebaseapp.com/en/lua/rule/corpseunlocktimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CreationLimit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CreationLimit()\n```\n[rule.CreationLimit on questapi](https://questapi.firebaseapp.com/en/lua/rule/creationlimit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CriticalDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CriticalDamage()\n```\n[rule.CriticalDamage on questapi](https://questapi.firebaseapp.com/en/lua/rule/criticaldamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CriticallyWoundedAggroMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CriticallyWoundedAggroMod()\n```\n[rule.CriticallyWoundedAggroMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/criticallywoundedaggromod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CurrentExpansion") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CurrentExpansion()\n```\n[rule.CurrentExpansion on questapi](https://questapi.firebaseapp.com/en/lua/rule/currentexpansion)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.CurrentTargetAggroMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.CurrentTargetAggroMod()\n```\n[rule.CurrentTargetAggroMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/currenttargetaggromod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DamageMessages") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DamageMessages()\n```\n[rule.DamageMessages on questapi](https://questapi.firebaseapp.com/en/lua/rule/damagemessages)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DeathExpLossLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DeathExpLossLevel()\n```\n[rule.DeathExpLossLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/deathexplosslevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DeathExpLossMaxLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DeathExpLossMaxLevel()\n```\n[rule.DeathExpLossMaxLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/deathexplossmaxlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DeathExpLossMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DeathExpLossMultiplier()\n```\n[rule.DeathExpLossMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/deathexplossmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DeathItemLossLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DeathItemLossLevel()\n```\n[rule.DeathItemLossLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/deathitemlosslevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DeathSaveCharismaMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DeathSaveCharismaMod()\n```\n[rule.DeathSaveCharismaMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/deathsavecharismamod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DefaultGuild") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DefaultGuild()\n```\n[rule.DefaultGuild on questapi](https://questapi.firebaseapp.com/en/lua/rule/defaultguild)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DefaultRampageTargets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DefaultRampageTargets()\n```\n[rule.DefaultRampageTargets on questapi](https://questapi.firebaseapp.com/en/lua/rule/defaultrampagetargets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DefProcPerMinAgiContrib") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DefProcPerMinAgiContrib()\n```\n[rule.DefProcPerMinAgiContrib on questapi](https://questapi.firebaseapp.com/en/lua/rule/defprocperminagicontrib)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DeleteStaleCorpeBackups") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DeleteStaleCorpeBackups()\n```\n[rule.DeleteStaleCorpeBackups on questapi](https://questapi.firebaseapp.com/en/lua/rule/deletestalecorpebackups)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DeleteTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DeleteTimer()\n```\n[rule.DeleteTimer on questapi](https://questapi.firebaseapp.com/en/lua/rule/deletetimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DeleteTransformationMold") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DeleteTransformationMold()\n```\n[rule.DeleteTransformationMold on questapi](https://questapi.firebaseapp.com/en/lua/rule/deletetransformationmold)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DismountWater") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DismountWater()\n```\n[rule.DismountWater on questapi](https://questapi.firebaseapp.com/en/lua/rule/dismountwater)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DistanceCanTravelBeforeAdjustment") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DistanceCanTravelBeforeAdjustment()\n```\n[rule.DistanceCanTravelBeforeAdjustment on questapi](https://questapi.firebaseapp.com/en/lua/rule/distancecantravelbeforeadjustment)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DistanceForRescueAccept") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DistanceForRescueAccept()\n```\n[rule.DistanceForRescueAccept on questapi](https://questapi.firebaseapp.com/en/lua/rule/distanceforrescueaccept)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DistanceForRescueComplete") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DistanceForRescueComplete()\n```\n[rule.DistanceForRescueComplete on questapi](https://questapi.firebaseapp.com/en/lua/rule/distanceforrescuecomplete)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DivineInterventionHeal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DivineInterventionHeal()\n```\n[rule.DivineInterventionHeal on questapi](https://questapi.firebaseapp.com/en/lua/rule/divineinterventionheal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DragCorpseDistance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DragCorpseDistance()\n```\n[rule.DragCorpseDistance on questapi](https://questapi.firebaseapp.com/en/lua/rule/dragcorpsedistance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DragonPunchBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DragonPunchBonus()\n```\n[rule.DragonPunchBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/dragonpunchbonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DruNecWizEncMagACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DruNecWizEncMagACSoftcapReturn()\n```\n[rule.DruNecWizEncMagACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/drunecwizencmagacsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DubiouslyFactionMinimum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DubiouslyFactionMinimum()\n```\n[rule.DubiouslyFactionMinimum on questapi](https://questapi.firebaseapp.com/en/lua/rule/dubiouslyfactionminimum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.DumpTargetEntity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.DumpTargetEntity()\n```\n[rule.DumpTargetEntity on questapi](https://questapi.firebaseapp.com/en/lua/rule/dumptargetentity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EagleStrikeBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EagleStrikeBonus()\n```\n[rule.EagleStrikeBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/eaglestrikebonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EbonCrystalItemID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EbonCrystalItemID()\n```\n[rule.EbonCrystalItemID on questapi](https://questapi.firebaseapp.com/en/lua/rule/eboncrystalitemid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.Emote") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.Emote()\n```\n[rule.Emote on questapi](https://questapi.firebaseapp.com/en/lua/rule/emote)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EmptyNPCCorpseDecayTimeMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EmptyNPCCorpseDecayTimeMS()\n```\n[rule.EmptyNPCCorpseDecayTimeMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/emptynpccorpsedecaytimems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableAggroMeter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableAggroMeter()\n```\n[rule.EnableAggroMeter on questapi](https://questapi.firebaseapp.com/en/lua/rule/enableaggrometer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableAltCurrencySell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableAltCurrencySell()\n```\n[rule.EnableAltCurrencySell on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablealtcurrencysell)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableAntiSpam") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableAntiSpam()\n```\n[rule.EnableAntiSpam on questapi](https://questapi.firebaseapp.com/en/lua/rule/enableantispam)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableAvoidanceCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableAvoidanceCap()\n```\n[rule.EnableAvoidanceCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/enableavoidancecap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableBlockedBuffs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableBlockedBuffs()\n```\n[rule.EnableBlockedBuffs on questapi](https://questapi.firebaseapp.com/en/lua/rule/enableblockedbuffs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableDiscoveredItems") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableDiscoveredItems()\n```\n[rule.EnableDiscoveredItems on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablediscovereditems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableFearPathing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableFearPathing()\n```\n[rule.EnableFearPathing on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablefearpathing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableFoodRequirement") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableFoodRequirement()\n```\n[rule.EnableFoodRequirement on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablefoodrequirement)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableHungerPenalties") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableHungerPenalties()\n```\n[rule.EnableHungerPenalties on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablehungerpenalties)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableIPExemptions") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableIPExemptions()\n```\n[rule.EnableIPExemptions on questapi](https://questapi.firebaseapp.com/en/lua/rule/enableipexemptions)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableLoggedOffReplenishments") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableLoggedOffReplenishments()\n```\n[rule.EnableLoggedOffReplenishments on questapi](https://questapi.firebaseapp.com/en/lua/rule/enableloggedoffreplenishments)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableMailKeyIPVerification") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableMailKeyIPVerification()\n```\n[rule.EnableMailKeyIPVerification on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablemailkeyipverification)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableMailSystem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableMailSystem()\n```\n[rule.EnableMailSystem on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablemailsystem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableMeritBasedFaction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableMeritBasedFaction()\n```\n[rule.EnableMeritBasedFaction on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablemeritbasedfaction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableMQGateDetector") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableMQGateDetector()\n```\n[rule.EnableMQGateDetector on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablemqgatedetector)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableMQGhostDetector") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableMQGhostDetector()\n```\n[rule.EnableMQGhostDetector on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablemqghostdetector)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableMQWarpDetector") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableMQWarpDetector()\n```\n[rule.EnableMQWarpDetector on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablemqwarpdetector)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableMQZoneDetector") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableMQZoneDetector()\n```\n[rule.EnableMQZoneDetector on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablemqzonedetector)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableNPCQuestJournal") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableNPCQuestJournal()\n```\n[rule.EnableNPCQuestJournal on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablenpcquestjournal)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableReturnHomeButton") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableReturnHomeButton()\n```\n[rule.EnableReturnHomeButton on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablereturnhomebutton)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableShadowrest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableShadowrest()\n```\n[rule.EnableShadowrest on questapi](https://questapi.firebaseapp.com/en/lua/rule/enableshadowrest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableSpellBuckets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableSpellBuckets()\n```\n[rule.EnableSpellBuckets on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablespellbuckets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableSpellGlobals") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableSpellGlobals()\n```\n[rule.EnableSpellGlobals on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablespellglobals)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableTaskProximity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableTaskProximity()\n```\n[rule.EnableTaskProximity on questapi](https://questapi.firebaseapp.com/en/lua/rule/enabletaskproximity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableTaskSystem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableTaskSystem()\n```\n[rule.EnableTaskSystem on questapi](https://questapi.firebaseapp.com/en/lua/rule/enabletasksystem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableTutorialButton") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableTutorialButton()\n```\n[rule.EnableTutorialButton on questapi](https://questapi.firebaseapp.com/en/lua/rule/enabletutorialbutton)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableVoiceMacros") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableVoiceMacros()\n```\n[rule.EnableVoiceMacros on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablevoicemacros)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableWarpToTrader") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableWarpToTrader()\n```\n[rule.EnableWarpToTrader on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablewarptotrader)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableXTargetting") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableXTargetting()\n```\n[rule.EnableXTargetting on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablextargetting)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnableZoneControllerGlobals") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnableZoneControllerGlobals()\n```\n[rule.EnableZoneControllerGlobals on questapi](https://questapi.firebaseapp.com/en/lua/rule/enablezonecontrollerglobals)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnduranceRegenMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnduranceRegenMultiplier()\n```\n[rule.EnduranceRegenMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/enduranceregenmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnforceAugmentRestriction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnforceAugmentRestriction()\n```\n[rule.EnforceAugmentRestriction on questapi](https://questapi.firebaseapp.com/en/lua/rule/enforceaugmentrestriction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnforceAugmentUsability") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnforceAugmentUsability()\n```\n[rule.EnforceAugmentUsability on questapi](https://questapi.firebaseapp.com/en/lua/rule/enforceaugmentusability)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnforceAugmentWear") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnforceAugmentWear()\n```\n[rule.EnforceAugmentWear on questapi](https://questapi.firebaseapp.com/en/lua/rule/enforceaugmentwear)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnforceCharacterLimitAtLogin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnforceCharacterLimitAtLogin()\n```\n[rule.EnforceCharacterLimitAtLogin on questapi](https://questapi.firebaseapp.com/en/lua/rule/enforcecharacterlimitatlogin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.EnvironmentDamageMulipliter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.EnvironmentDamageMulipliter()\n```\n[rule.EnvironmentDamageMulipliter on questapi](https://questapi.firebaseapp.com/en/lua/rule/environmentdamagemulipliter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ExemptMaxClientsStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ExemptMaxClientsStatus()\n```\n[rule.ExemptMaxClientsStatus on questapi](https://questapi.firebaseapp.com/en/lua/rule/exemptmaxclientsstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ExpansionSettings") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ExpansionSettings()\n```\n[rule.ExpansionSettings on questapi](https://questapi.firebaseapp.com/en/lua/rule/expansionsettings)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ExpireRead") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ExpireRead()\n```\n[rule.ExpireRead on questapi](https://questapi.firebaseapp.com/en/lua/rule/expireread)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ExpireTrash") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ExpireTrash()\n```\n[rule.ExpireTrash on questapi](https://questapi.firebaseapp.com/en/lua/rule/expiretrash)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ExpireUnread") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ExpireUnread()\n```\n[rule.ExpireUnread on questapi](https://questapi.firebaseapp.com/en/lua/rule/expireunread)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ExpMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ExpMultiplier()\n```\n[rule.ExpMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/expmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ExpPerPoint") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ExpPerPoint()\n```\n[rule.ExpPerPoint on questapi](https://questapi.firebaseapp.com/en/lua/rule/expperpoint)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.Fear") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.Fear()\n```\n[rule.Fear on questapi](https://questapi.firebaseapp.com/en/lua/rule/fear)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FearBreakCheckChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FearBreakCheckChance()\n```\n[rule.FearBreakCheckChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/fearbreakcheckchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FeignKillsPet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FeignKillsPet()\n```\n[rule.FeignKillsPet on questapi](https://questapi.firebaseapp.com/en/lua/rule/feignkillspet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FinalExpMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FinalExpMultiplier()\n```\n[rule.FinalExpMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/finalexpmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.Find") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.Find()\n```\n[rule.Find on questapi](https://questapi.firebaseapp.com/en/lua/rule/find)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FindBestZHeightAdjust") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FindBestZHeightAdjust()\n```\n[rule.FindBestZHeightAdjust on questapi](https://questapi.firebaseapp.com/en/lua/rule/findbestzheightadjust)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FinishBuffing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FinishBuffing()\n```\n[rule.FinishBuffing on questapi](https://questapi.firebaseapp.com/en/lua/rule/finishbuffing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FishingLineLength") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FishingLineLength()\n```\n[rule.FishingLineLength on questapi](https://questapi.firebaseapp.com/en/lua/rule/fishinglinelength)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FishingLineStepSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FishingLineStepSize()\n```\n[rule.FishingLineStepSize on questapi](https://questapi.firebaseapp.com/en/lua/rule/fishinglinestepsize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FishingRodLength") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FishingRodLength()\n```\n[rule.FishingRodLength on questapi](https://questapi.firebaseapp.com/en/lua/rule/fishingrodlength)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FixPathingZMaxDeltaSendTo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FixPathingZMaxDeltaSendTo()\n```\n[rule.FixPathingZMaxDeltaSendTo on questapi](https://questapi.firebaseapp.com/en/lua/rule/fixpathingzmaxdeltasendto)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FixPathingZOnSendTo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FixPathingZOnSendTo()\n```\n[rule.FixPathingZOnSendTo on questapi](https://questapi.firebaseapp.com/en/lua/rule/fixpathingzonsendto)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FixZWhenPathing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FixZWhenPathing()\n```\n[rule.FixZWhenPathing on questapi](https://questapi.firebaseapp.com/en/lua/rule/fixzwhenpathing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FlatItemExtraSpellAmt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FlatItemExtraSpellAmt()\n```\n[rule.FlatItemExtraSpellAmt on questapi](https://questapi.firebaseapp.com/en/lua/rule/flatitemextraspellamt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FleeGray") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FleeGray()\n```\n[rule.FleeGray on questapi](https://questapi.firebaseapp.com/en/lua/rule/fleegray)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FleeGrayHPRatio") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FleeGrayHPRatio()\n```\n[rule.FleeGrayHPRatio on questapi](https://questapi.firebaseapp.com/en/lua/rule/fleegrayhpratio)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FleeGrayMaxLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FleeGrayMaxLevel()\n```\n[rule.FleeGrayMaxLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/fleegraymaxlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FleeHPRatio") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FleeHPRatio()\n```\n[rule.FleeHPRatio on questapi](https://questapi.firebaseapp.com/en/lua/rule/fleehpratio)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FleeIfNotAlone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FleeIfNotAlone()\n```\n[rule.FleeIfNotAlone on questapi](https://questapi.firebaseapp.com/en/lua/rule/fleeifnotalone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FleeMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FleeMultiplier()\n```\n[rule.FleeMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/fleemultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FlyingKickBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FlyingKickBonus()\n```\n[rule.FlyingKickBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/flyingkickbonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FocusCombatProcs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FocusCombatProcs()\n```\n[rule.FocusCombatProcs on questapi](https://questapi.firebaseapp.com/en/lua/rule/focuscombatprocs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FoodLossPerUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FoodLossPerUpdate()\n```\n[rule.FoodLossPerUpdate on questapi](https://questapi.firebaseapp.com/en/lua/rule/foodlossperupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FrenzyBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FrenzyBonus()\n```\n[rule.FrenzyBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/frenzybonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FRProjectileItem_NPC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FRProjectileItem_NPC()\n```\n[rule.FRProjectileItem_NPC on questapi](https://questapi.firebaseapp.com/en/lua/rule/frprojectileitem_npc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FRProjectileItem_SOF") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FRProjectileItem_SOF()\n```\n[rule.FRProjectileItem_SOF on questapi](https://questapi.firebaseapp.com/en/lua/rule/frprojectileitem_sof)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FRProjectileItem_Titanium") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FRProjectileItem_Titanium()\n```\n[rule.FRProjectileItem_Titanium on questapi](https://questapi.firebaseapp.com/en/lua/rule/frprojectileitem_titanium)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.FVNoDropFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.FVNoDropFlag()\n```\n[rule.FVNoDropFlag on questapi](https://questapi.firebaseapp.com/en/lua/rule/fvnodropflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.GlobalChatLevelLimit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.GlobalChatLevelLimit()\n```\n[rule.GlobalChatLevelLimit on questapi](https://questapi.firebaseapp.com/en/lua/rule/globalchatlevellimit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.GlobalLootMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.GlobalLootMultiplier()\n```\n[rule.GlobalLootMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/globallootmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.GMAccountIPList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.GMAccountIPList()\n```\n[rule.GMAccountIPList on questapi](https://questapi.firebaseapp.com/en/lua/rule/gmaccountiplist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.GrantHoTTOnCreate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.GrantHoTTOnCreate()\n```\n[rule.GrantHoTTOnCreate on questapi](https://questapi.firebaseapp.com/en/lua/rule/granthottoncreate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.GraveyardTimeMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.GraveyardTimeMS()\n```\n[rule.GraveyardTimeMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/graveyardtimems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.GreenModifier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.GreenModifier()\n```\n[rule.GreenModifier on questapi](https://questapi.firebaseapp.com/en/lua/rule/greenmodifier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.GroupBuffing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.GroupBuffing()\n```\n[rule.GroupBuffing on questapi](https://questapi.firebaseapp.com/en/lua/rule/groupbuffing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.GroupExpMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.GroupExpMultiplier()\n```\n[rule.GroupExpMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/groupexpmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.Guard") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.Guard()\n```\n[rule.Guard on questapi](https://questapi.firebaseapp.com/en/lua/rule/guard)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.GuildBankZoneID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.GuildBankZoneID()\n```\n[rule.GuildBankZoneID on questapi](https://questapi.firebaseapp.com/en/lua/rule/guildbankzoneid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.GuildHallExpirationDays") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.GuildHallExpirationDays()\n```\n[rule.GuildHallExpirationDays on questapi](https://questapi.firebaseapp.com/en/lua/rule/guildhallexpirationdays)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HasteCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HasteCap()\n```\n[rule.HasteCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/hastecap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HealOnLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HealOnLevel()\n```\n[rule.HealOnLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/healonlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HealRotationMaxMembers") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HealRotationMaxMembers()\n```\n[rule.HealRotationMaxMembers on questapi](https://questapi.firebaseapp.com/en/lua/rule/healrotationmaxmembers)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HealRotationMaxTargets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HealRotationMaxTargets()\n```\n[rule.HealRotationMaxTargets on questapi](https://questapi.firebaseapp.com/en/lua/rule/healrotationmaxtargets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HitBonusPerLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HitBonusPerLevel()\n```\n[rule.HitBonusPerLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/hitbonusperlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HitBoxMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HitBoxMod()\n```\n[rule.HitBoxMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/hitboxmod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HitCapPre10") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HitCapPre10()\n```\n[rule.HitCapPre10 on questapi](https://questapi.firebaseapp.com/en/lua/rule/hitcappre10)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HitCapPre20") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HitCapPre20()\n```\n[rule.HitCapPre20 on questapi](https://questapi.firebaseapp.com/en/lua/rule/hitcappre20)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HitFalloffMajor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HitFalloffMajor()\n```\n[rule.HitFalloffMajor on questapi](https://questapi.firebaseapp.com/en/lua/rule/hitfalloffmajor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HitFalloffMinor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HitFalloffMinor()\n```\n[rule.HitFalloffMinor on questapi](https://questapi.firebaseapp.com/en/lua/rule/hitfalloffminor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HitFalloffModerate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HitFalloffModerate()\n```\n[rule.HitFalloffModerate on questapi](https://questapi.firebaseapp.com/en/lua/rule/hitfalloffmoderate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HotZoneBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HotZoneBonus()\n```\n[rule.HotZoneBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/hotzonebonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.HPRegenMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.HPRegenMultiplier()\n```\n[rule.HPRegenMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/hpregenmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.IgnoreSpellDmgLvlRestriction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.IgnoreSpellDmgLvlRestriction()\n```\n[rule.IgnoreSpellDmgLvlRestriction on questapi](https://questapi.firebaseapp.com/en/lua/rule/ignorespelldmglvlrestriction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.IksarCommonTongue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.IksarCommonTongue()\n```\n[rule.IksarCommonTongue on questapi](https://questapi.firebaseapp.com/en/lua/rule/iksarcommontongue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.IndifferentlyFactionMinimum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.IndifferentlyFactionMinimum()\n```\n[rule.IndifferentlyFactionMinimum on questapi](https://questapi.firebaseapp.com/en/lua/rule/indifferentlyfactionminimum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.IntAggroThreshold") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.IntAggroThreshold()\n```\n[rule.IntAggroThreshold on questapi](https://questapi.firebaseapp.com/en/lua/rule/intaggrothreshold)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.IntervalDurationMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.IntervalDurationMS()\n```\n[rule.IntervalDurationMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/intervaldurationms)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.InvSnapshotHistoryD") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.InvSnapshotHistoryD()\n```\n[rule.InvSnapshotHistoryD on questapi](https://questapi.firebaseapp.com/en/lua/rule/invsnapshothistoryd)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.InvSnapshotMinIntervalM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.InvSnapshotMinIntervalM()\n```\n[rule.InvSnapshotMinIntervalM on questapi](https://questapi.firebaseapp.com/en/lua/rule/invsnapshotminintervalm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.InvSnapshotMinRetryM") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.InvSnapshotMinRetryM()\n```\n[rule.InvSnapshotMinRetryM on questapi](https://questapi.firebaseapp.com/en/lua/rule/invsnapshotminretrym)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.IPLimitDisconnectAll") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.IPLimitDisconnectAll()\n```\n[rule.IPLimitDisconnectAll on questapi](https://questapi.firebaseapp.com/en/lua/rule/iplimitdisconnectall)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.IsGMPetitionWindowEnabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.IsGMPetitionWindowEnabled()\n```\n[rule.IsGMPetitionWindowEnabled on questapi](https://questapi.firebaseapp.com/en/lua/rule/isgmpetitionwindowenabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemAccuracyCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemAccuracyCap()\n```\n[rule.ItemAccuracyCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemaccuracycap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemATKCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemATKCap()\n```\n[rule.ItemATKCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itematkcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemAvoidanceCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemAvoidanceCap()\n```\n[rule.ItemAvoidanceCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemavoidancecap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemCastsUseFocus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemCastsUseFocus()\n```\n[rule.ItemCastsUseFocus on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemcastsusefocus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemClairvoyanceCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemClairvoyanceCap()\n```\n[rule.ItemClairvoyanceCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemclairvoyancecap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemCombatEffectsCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemCombatEffectsCap()\n```\n[rule.ItemCombatEffectsCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemcombateffectscap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemDamageShieldCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemDamageShieldCap()\n```\n[rule.ItemDamageShieldCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemdamageshieldcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemDoTShieldingCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemDoTShieldingCap()\n```\n[rule.ItemDoTShieldingCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemdotshieldingcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemDSMitigationCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemDSMitigationCap()\n```\n[rule.ItemDSMitigationCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemdsmitigationcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemEnduranceRegenCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemEnduranceRegenCap()\n```\n[rule.ItemEnduranceRegenCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemenduranceregencap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemExtraDmgCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemExtraDmgCap()\n```\n[rule.ItemExtraDmgCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemextradmgcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemHealAmtCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemHealAmtCap()\n```\n[rule.ItemHealAmtCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemhealamtcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemHealthRegenCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemHealthRegenCap()\n```\n[rule.ItemHealthRegenCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemhealthregencap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemIDToEnablePorts") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemIDToEnablePorts()\n```\n[rule.ItemIDToEnablePorts on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemidtoenableports)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemManaRegenCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemManaRegenCap()\n```\n[rule.ItemManaRegenCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemmanaregencap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemShieldingCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemShieldingCap()\n```\n[rule.ItemShieldingCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemshieldingcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemSpellDmgCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemSpellDmgCap()\n```\n[rule.ItemSpellDmgCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemspelldmgcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemSpellShieldingCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemSpellShieldingCap()\n```\n[rule.ItemSpellShieldingCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemspellshieldingcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemStrikethroughCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemStrikethroughCap()\n```\n[rule.ItemStrikethroughCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemstrikethroughcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ItemStunResistCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ItemStunResistCap()\n```\n[rule.ItemStunResistCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/itemstunresistcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.Jun182014HundredHandsRevamp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.Jun182014HundredHandsRevamp()\n```\n[rule.Jun182014HundredHandsRevamp on questapi](https://questapi.firebaseapp.com/en/lua/rule/jun182014hundredhandsrevamp)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.KarmaGlobalChatLimit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.KarmaGlobalChatLimit()\n```\n[rule.KarmaGlobalChatLimit on questapi](https://questapi.firebaseapp.com/en/lua/rule/karmaglobalchatlimit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.KarmaUpdateIntervalMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.KarmaUpdateIntervalMS()\n```\n[rule.KarmaUpdateIntervalMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/karmaupdateintervalms)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.KeepLevelOverMax") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.KeepLevelOverMax()\n```\n[rule.KeepLevelOverMax on questapi](https://questapi.firebaseapp.com/en/lua/rule/keeplevelovermax)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.KeepOneRecordPerCompletedTask") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.KeepOneRecordPerCompletedTask()\n```\n[rule.KeepOneRecordPerCompletedTask on questapi](https://questapi.firebaseapp.com/en/lua/rule/keeponerecordpercompletedtask)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.KillProcessOnDynamicShutdown") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.KillProcessOnDynamicShutdown()\n```\n[rule.KillProcessOnDynamicShutdown on questapi](https://questapi.firebaseapp.com/en/lua/rule/killprocessondynamicshutdown)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.KillsPerGroupLeadershipAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.KillsPerGroupLeadershipAA()\n```\n[rule.KillsPerGroupLeadershipAA on questapi](https://questapi.firebaseapp.com/en/lua/rule/killspergroupleadershipaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.KillsPerRaidLeadershipAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.KillsPerRaidLeadershipAA()\n```\n[rule.KillsPerRaidLeadershipAA on questapi](https://questapi.firebaseapp.com/en/lua/rule/killsperraidleadershipaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.KindlyFactionMinimum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.KindlyFactionMinimum()\n```\n[rule.KindlyFactionMinimum on questapi](https://questapi.firebaseapp.com/en/lua/rule/kindlyfactionminimum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.KnightACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.KnightACSoftcapReturn()\n```\n[rule.KnightACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/knightacsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LastFightingDelayMovingMax") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LastFightingDelayMovingMax()\n```\n[rule.LastFightingDelayMovingMax on questapi](https://questapi.firebaseapp.com/en/lua/rule/lastfightingdelaymovingmax)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LastFightingDelayMovingMin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LastFightingDelayMovingMin()\n```\n[rule.LastFightingDelayMovingMin on questapi](https://questapi.firebaseapp.com/en/lua/rule/lastfightingdelaymovingmin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LDoNAdventureExpireTime") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LDoNAdventureExpireTime()\n```\n[rule.LDoNAdventureExpireTime on questapi](https://questapi.firebaseapp.com/en/lua/rule/ldonadventureexpiretime)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LDoNBaseTrapDifficulty") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LDoNBaseTrapDifficulty()\n```\n[rule.LDoNBaseTrapDifficulty on questapi](https://questapi.firebaseapp.com/en/lua/rule/ldonbasetrapdifficulty)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LDoNCriticalFailTrapThreshold") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LDoNCriticalFailTrapThreshold()\n```\n[rule.LDoNCriticalFailTrapThreshold on questapi](https://questapi.firebaseapp.com/en/lua/rule/ldoncriticalfailtrapthreshold)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LDoNTrapDistanceUse") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LDoNTrapDistanceUse()\n```\n[rule.LDoNTrapDistanceUse on questapi](https://questapi.firebaseapp.com/en/lua/rule/ldontrapdistanceuse)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LeashDistance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LeashDistance()\n```\n[rule.LeashDistance on questapi](https://questapi.firebaseapp.com/en/lua/rule/leashdistance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LeatherACSoftcap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LeatherACSoftcap()\n```\n[rule.LeatherACSoftcap on questapi](https://questapi.firebaseapp.com/en/lua/rule/leatheracsoftcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LeaveCorpses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LeaveCorpses()\n```\n[rule.LeaveCorpses on questapi](https://questapi.firebaseapp.com/en/lua/rule/leavecorpses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LeaveNakedCorpses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LeaveNakedCorpses()\n```\n[rule.LeaveNakedCorpses on questapi](https://questapi.firebaseapp.com/en/lua/rule/leavenakedcorpses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LevelBasedEXPMods") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LevelBasedEXPMods()\n```\n[rule.LevelBasedEXPMods on questapi](https://questapi.firebaseapp.com/en/lua/rule/levelbasedexpmods)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LevelToStopACTwinkControl") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LevelToStopACTwinkControl()\n```\n[rule.LevelToStopACTwinkControl on questapi](https://questapi.firebaseapp.com/en/lua/rule/leveltostopactwinkcontrol)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LevelToStopDamageCaps") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LevelToStopDamageCaps()\n```\n[rule.LevelToStopDamageCaps on questapi](https://questapi.firebaseapp.com/en/lua/rule/leveltostopdamagecaps)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LightBlueModifier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LightBlueModifier()\n```\n[rule.LightBlueModifier on questapi](https://questapi.firebaseapp.com/en/lua/rule/lightbluemodifier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LiveLikeEnrage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LiveLikeEnrage()\n```\n[rule.LiveLikeEnrage on questapi](https://questapi.firebaseapp.com/en/lua/rule/livelikeenrage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LiveLikeFocusEffects") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LiveLikeFocusEffects()\n```\n[rule.LiveLikeFocusEffects on questapi](https://questapi.firebaseapp.com/en/lua/rule/livelikefocuseffects)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LowChainLeatherACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LowChainLeatherACSoftcapReturn()\n```\n[rule.LowChainLeatherACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/lowchainleatheracsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.LowPlateChainACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.LowPlateChainACSoftcapReturn()\n```\n[rule.LowPlateChainACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/lowplatechainacsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaintainIntoxicationAcrossZones") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaintainIntoxicationAcrossZones()\n```\n[rule.MaintainIntoxicationAcrossZones on questapi](https://questapi.firebaseapp.com/en/lua/rule/maintainintoxicationacrosszones)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MajorNPCCorpseDecayTimeMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MajorNPCCorpseDecayTimeMS()\n```\n[rule.MajorNPCCorpseDecayTimeMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/majornpccorpsedecaytimems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ManaRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ManaRegen()\n```\n[rule.ManaRegen on questapi](https://questapi.firebaseapp.com/en/lua/rule/manaregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ManaRegenMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ManaRegenMultiplier()\n```\n[rule.ManaRegenMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/manaregenmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MarqueeHPUpdates") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MarqueeHPUpdates()\n```\n[rule.MarqueeHPUpdates on questapi](https://questapi.firebaseapp.com/en/lua/rule/marqueehpupdates)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxBarterSearchResults") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxBarterSearchResults()\n```\n[rule.MaxBarterSearchResults on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxbartersearchresults)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxBuffRulesNPC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxBuffRulesNPC()\n```\n[rule.MaxBuffRulesNPC on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxbuffrulesnpc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxCastTimeReduction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxCastTimeReduction()\n```\n[rule.MaxCastTimeReduction on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxcasttimereduction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxChancetoHit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxChancetoHit()\n```\n[rule.MaxChancetoHit on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxchancetohit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxCharmDurationForPlayerCharacter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxCharmDurationForPlayerCharacter()\n```\n[rule.MaxCharmDurationForPlayerCharacter on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxcharmdurationforplayercharacter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxClientsPerIP") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxClientsPerIP()\n```\n[rule.MaxClientsPerIP on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxclientsperip)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxClientsSetByStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxClientsSetByStatus()\n```\n[rule.MaxClientsSetByStatus on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxclientssetbystatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxClientsSimplifiedLogic") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxClientsSimplifiedLogic()\n```\n[rule.MaxClientsSimplifiedLogic on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxclientssimplifiedlogic)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxDiscRulesNPC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxDiscRulesNPC()\n```\n[rule.MaxDiscRulesNPC on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxdiscrulesnpc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxDraggedCorpses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxDraggedCorpses()\n```\n[rule.MaxDraggedCorpses on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxdraggedcorpses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxExpLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxExpLevel()\n```\n[rule.MaxExpLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxexplevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxFearDurationForPlayerCharacter") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxFearDurationForPlayerCharacter()\n```\n[rule.MaxFearDurationForPlayerCharacter on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxfeardurationforplayercharacter)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxFlurryHits") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxFlurryHits()\n```\n[rule.MaxFlurryHits on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxflurryhits)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaximumMessagesPerInterval") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaximumMessagesPerInterval()\n```\n[rule.MaximumMessagesPerInterval on questapi](https://questapi.firebaseapp.com/en/lua/rule/maximummessagesperinterval)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxLevel()\n```\n[rule.MaxLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxLevelForTutorial") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxLevelForTutorial()\n```\n[rule.MaxLevelForTutorial on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxlevelfortutorial)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxLevelRange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxLevelRange()\n```\n[rule.MaxLevelRange on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxlevelrange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxMembers") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxMembers()\n```\n[rule.MaxMembers on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxmembers)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxMessagesBeforeKick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxMessagesBeforeKick()\n```\n[rule.MaxMessagesBeforeKick on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxmessagesbeforekick)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxNavmeshNodes") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxNavmeshNodes()\n```\n[rule.MaxNavmeshNodes on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxnavmeshnodes)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxNumberForGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxNumberForGroup()\n```\n[rule.MaxNumberForGroup on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxnumberforgroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxRampageTargets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxRampageTargets()\n```\n[rule.MaxRampageTargets on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxrampagetargets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxScalingProcAggro") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxScalingProcAggro()\n```\n[rule.MaxScalingProcAggro on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxscalingprocaggro)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxSearchResults") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxSearchResults()\n```\n[rule.MaxSearchResults on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxsearchresults)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxSongRulesNPC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxSongRulesNPC()\n```\n[rule.MaxSongRulesNPC on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxsongrulesnpc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxTotalRulesNPC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxTotalRulesNPC()\n```\n[rule.MaxTotalRulesNPC on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxtotalrulesnpc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxTotalRulesPET") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxTotalRulesPET()\n```\n[rule.MaxTotalRulesPET on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxtotalrulespet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxTradeskillSearchSkillDiff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxTradeskillSearchSkillDiff()\n```\n[rule.MaxTradeskillSearchSkillDiff on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxtradeskillsearchskilldiff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxTrainSpecializations") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxTrainSpecializations()\n```\n[rule.MaxTrainSpecializations on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxtrainspecializations)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MaxTrainTradeskills") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MaxTrainTradeskills()\n```\n[rule.MaxTrainTradeskills on questapi](https://questapi.firebaseapp.com/en/lua/rule/maxtraintradeskills)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MeleeCritDifficulty") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MeleeCritDifficulty()\n```\n[rule.MeleeCritDifficulty on questapi](https://questapi.firebaseapp.com/en/lua/rule/meleecritdifficulty)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MeleePush") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MeleePush()\n```\n[rule.MeleePush on questapi](https://questapi.firebaseapp.com/en/lua/rule/meleepush)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MeleePushChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MeleePushChance()\n```\n[rule.MeleePushChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/meleepushchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MeleeRangeAggroMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MeleeRangeAggroMod()\n```\n[rule.MeleeRangeAggroMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/meleerangeaggromod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MercsUsePathing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MercsUsePathing()\n```\n[rule.MercsUsePathing on questapi](https://questapi.firebaseapp.com/en/lua/rule/mercsusepathing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinAggroLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinAggroLevel()\n```\n[rule.MinAggroLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/minaggrolevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinChancetoHit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinChancetoHit()\n```\n[rule.MinChancetoHit on questapi](https://questapi.firebaseapp.com/en/lua/rule/minchancetohit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinGMAntiHackStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinGMAntiHackStatus()\n```\n[rule.MinGMAntiHackStatus on questapi](https://questapi.firebaseapp.com/en/lua/rule/mingmantihackstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinHastedDelay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinHastedDelay()\n```\n[rule.MinHastedDelay on questapi](https://questapi.firebaseapp.com/en/lua/rule/minhasteddelay)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinimumMessagesPerInterval") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinimumMessagesPerInterval()\n```\n[rule.MinimumMessagesPerInterval on questapi](https://questapi.firebaseapp.com/en/lua/rule/minimummessagesperinterval)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinNumberForGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinNumberForGroup()\n```\n[rule.MinNumberForGroup on questapi](https://questapi.firebaseapp.com/en/lua/rule/minnumberforgroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinOfflineTimeToReplenishments") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinOfflineTimeToReplenishments()\n```\n[rule.MinOfflineTimeToReplenishments on questapi](https://questapi.firebaseapp.com/en/lua/rule/minofflinetimetoreplenishments)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinOfflineTimeToReturnHome") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinOfflineTimeToReturnHome()\n```\n[rule.MinOfflineTimeToReturnHome on questapi](https://questapi.firebaseapp.com/en/lua/rule/minofflinetimetoreturnhome)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinorNPCCorpseDecayTimeMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinorNPCCorpseDecayTimeMS()\n```\n[rule.MinorNPCCorpseDecayTimeMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/minornpccorpsedecaytimems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinRangedAttackDist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinRangedAttackDist()\n```\n[rule.MinRangedAttackDist on questapi](https://questapi.firebaseapp.com/en/lua/rule/minrangedattackdist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinStatusForNoDropExemptions") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinStatusForNoDropExemptions()\n```\n[rule.MinStatusForNoDropExemptions on questapi](https://questapi.firebaseapp.com/en/lua/rule/minstatusfornodropexemptions)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinStatusToBypassAntiSpam") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinStatusToBypassAntiSpam()\n```\n[rule.MinStatusToBypassAntiSpam on questapi](https://questapi.firebaseapp.com/en/lua/rule/minstatustobypassantispam)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinStatusToLevelTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinStatusToLevelTarget()\n```\n[rule.MinStatusToLevelTarget on questapi](https://questapi.firebaseapp.com/en/lua/rule/minstatustoleveltarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinStatusToSummonItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinStatusToSummonItem()\n```\n[rule.MinStatusToSummonItem on questapi](https://questapi.firebaseapp.com/en/lua/rule/minstatustosummonitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MinStatusToZoneAnywhere") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MinStatusToZoneAnywhere()\n```\n[rule.MinStatusToZoneAnywhere on questapi](https://questapi.firebaseapp.com/en/lua/rule/minstatustozoneanywhere)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MiscACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MiscACSoftcapReturn()\n```\n[rule.MiscACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/miscacsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MobCloseScanDistance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MobCloseScanDistance()\n```\n[rule.MobCloseScanDistance on questapi](https://questapi.firebaseapp.com/en/lua/rule/mobclosescandistance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MobPositionUpdates") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MobPositionUpdates()\n```\n[rule.MobPositionUpdates on questapi](https://questapi.firebaseapp.com/en/lua/rule/mobpositionupdates)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MobZVisualDebug") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MobZVisualDebug()\n```\n[rule.MobZVisualDebug on questapi](https://questapi.firebaseapp.com/en/lua/rule/mobzvisualdebug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ModernAAScalingAALimit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ModernAAScalingAALimit()\n```\n[rule.ModernAAScalingAALimit on questapi](https://questapi.firebaseapp.com/en/lua/rule/modernaascalingaalimit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ModernAAScalingAAMinimum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ModernAAScalingAAMinimum()\n```\n[rule.ModernAAScalingAAMinimum on questapi](https://questapi.firebaseapp.com/en/lua/rule/modernaascalingaaminimum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ModernAAScalingEnabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ModernAAScalingEnabled()\n```\n[rule.ModernAAScalingEnabled on questapi](https://questapi.firebaseapp.com/en/lua/rule/modernaascalingenabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ModernAAScalingStartPercent") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ModernAAScalingStartPercent()\n```\n[rule.ModernAAScalingStartPercent on questapi](https://questapi.firebaseapp.com/en/lua/rule/modernaascalingstartpercent)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MonkACBonusWeight") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MonkACBonusWeight()\n```\n[rule.MonkACBonusWeight on questapi](https://questapi.firebaseapp.com/en/lua/rule/monkacbonusweight)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MonkACSoftcap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MonkACSoftcap()\n```\n[rule.MonkACSoftcap on questapi](https://questapi.firebaseapp.com/en/lua/rule/monkacsoftcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MonkDamageTableBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MonkDamageTableBonus()\n```\n[rule.MonkDamageTableBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/monkdamagetablebonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MQGateExemptStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MQGateExemptStatus()\n```\n[rule.MQGateExemptStatus on questapi](https://questapi.firebaseapp.com/en/lua/rule/mqgateexemptstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MQGhostExemptStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MQGhostExemptStatus()\n```\n[rule.MQGhostExemptStatus on questapi](https://questapi.firebaseapp.com/en/lua/rule/mqghostexemptstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MQWarpDetectionDistanceFactor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MQWarpDetectionDistanceFactor()\n```\n[rule.MQWarpDetectionDistanceFactor on questapi](https://questapi.firebaseapp.com/en/lua/rule/mqwarpdetectiondistancefactor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MQWarpExemptStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MQWarpExemptStatus()\n```\n[rule.MQWarpExemptStatus on questapi](https://questapi.firebaseapp.com/en/lua/rule/mqwarpexemptstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.MQZoneExemptStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.MQZoneExemptStatus()\n```\n[rule.MQZoneExemptStatus on questapi](https://questapi.firebaseapp.com/en/lua/rule/mqzoneexemptstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NavmeshStepSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NavmeshStepSize()\n```\n[rule.NavmeshStepSize on questapi](https://questapi.firebaseapp.com/en/lua/rule/navmeshstepsize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NewLevelScaling") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NewLevelScaling()\n```\n[rule.NewLevelScaling on questapi](https://questapi.firebaseapp.com/en/lua/rule/newlevelscaling)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NormalizedAAEnabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NormalizedAAEnabled()\n```\n[rule.NormalizedAAEnabled on questapi](https://questapi.firebaseapp.com/en/lua/rule/normalizedaaenabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NormalizedAANumberOfWhiteConPerAA") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NormalizedAANumberOfWhiteConPerAA()\n```\n[rule.NormalizedAANumberOfWhiteConPerAA on questapi](https://questapi.firebaseapp.com/en/lua/rule/normalizedaanumberofwhiteconperaa)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPC_UseFocusFromItems") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPC_UseFocusFromItems()\n```\n[rule.NPC_UseFocusFromItems on questapi](https://questapi.firebaseapp.com/en/lua/rule/npc_usefocusfromitems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPC_UseFocusFromSpells") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPC_UseFocusFromSpells()\n```\n[rule.NPC_UseFocusFromSpells on questapi](https://questapi.firebaseapp.com/en/lua/rule/npc_usefocusfromspells)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCACFactor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCACFactor()\n```\n[rule.NPCACFactor on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcacfactor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCAggroMaxDistanceEnabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCAggroMaxDistanceEnabled()\n```\n[rule.NPCAggroMaxDistanceEnabled on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcaggromaxdistanceenabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCAssistCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCAssistCap()\n```\n[rule.NPCAssistCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcassistcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCAssistCapTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCAssistCapTimer()\n```\n[rule.NPCAssistCapTimer on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcassistcaptimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCBashKickLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCBashKickLevel()\n```\n[rule.NPCBashKickLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcbashkicklevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCBashKickStunChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCBashKickStunChance()\n```\n[rule.NPCBashKickStunChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcbashkickstunchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCBonusHitChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCBonusHitChance()\n```\n[rule.NPCBonusHitChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcbonushitchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCCanCrit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCCanCrit()\n```\n[rule.NPCCanCrit on questapi](https://questapi.firebaseapp.com/en/lua/rule/npccancrit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCFlurryChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCFlurryChance()\n```\n[rule.NPCFlurryChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcflurrychance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCGateDistanceBind") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCGateDistanceBind()\n```\n[rule.NPCGateDistanceBind on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcgatedistancebind)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCGateNearBind") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCGateNearBind()\n```\n[rule.NPCGateNearBind on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcgatenearbind)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCGatePercent") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCGatePercent()\n```\n[rule.NPCGatePercent on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcgatepercent)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCHealOnGate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCHealOnGate()\n```\n[rule.NPCHealOnGate on questapi](https://questapi.firebaseapp.com/en/lua/rule/npchealongate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCHealOnGateAmount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCHealOnGateAmount()\n```\n[rule.NPCHealOnGateAmount on questapi](https://questapi.firebaseapp.com/en/lua/rule/npchealongateamount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCIgnoreBaseImmunity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCIgnoreBaseImmunity()\n```\n[rule.NPCIgnoreBaseImmunity on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcignorebaseimmunity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCInnateProcOverride") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCInnateProcOverride()\n```\n[rule.NPCInnateProcOverride on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcinnateprocoverride)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCSpellPush") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCSpellPush()\n```\n[rule.NPCSpellPush on questapi](https://questapi.firebaseapp.com/en/lua/rule/npcspellpush)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCToNPCAggroTimerMax") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCToNPCAggroTimerMax()\n```\n[rule.NPCToNPCAggroTimerMax on questapi](https://questapi.firebaseapp.com/en/lua/rule/npctonpcaggrotimermax)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NPCToNPCAggroTimerMin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NPCToNPCAggroTimerMin()\n```\n[rule.NPCToNPCAggroTimerMin on questapi](https://questapi.firebaseapp.com/en/lua/rule/npctonpcaggrotimermin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.NumberKillsForBossSpawn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.NumberKillsForBossSpawn()\n```\n[rule.NumberKillsForBossSpawn on questapi](https://questapi.firebaseapp.com/en/lua/rule/numberkillsforbossspawn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.OgreCommonTongue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.OgreCommonTongue()\n```\n[rule.OgreCommonTongue on questapi](https://questapi.firebaseapp.com/en/lua/rule/ogrecommontongue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.OldACSoftcapRules") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.OldACSoftcapRules()\n```\n[rule.OldACSoftcapRules on questapi](https://questapi.firebaseapp.com/en/lua/rule/oldacsoftcaprules)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.OldMinMana") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.OldMinMana()\n```\n[rule.OldMinMana on questapi](https://questapi.firebaseapp.com/en/lua/rule/oldminmana)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.OldRainTargets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.OldRainTargets()\n```\n[rule.OldRainTargets on questapi](https://questapi.firebaseapp.com/en/lua/rule/oldraintargets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.OneProcPerWeapon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.OneProcPerWeapon()\n```\n[rule.OneProcPerWeapon on questapi](https://questapi.firebaseapp.com/en/lua/rule/oneprocperweapon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.OOCRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.OOCRegen()\n```\n[rule.OOCRegen on questapi](https://questapi.firebaseapp.com/en/lua/rule/oocregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.OPClientUpdateVisualDebug") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.OPClientUpdateVisualDebug()\n```\n[rule.OPClientUpdateVisualDebug on questapi](https://questapi.firebaseapp.com/en/lua/rule/opclientupdatevisualdebug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.OrnamentationAugmentType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.OrnamentationAugmentType()\n```\n[rule.OrnamentationAugmentType on questapi](https://questapi.firebaseapp.com/en/lua/rule/ornamentationaugmenttype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PalShdACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PalShdACSoftcapReturn()\n```\n[rule.PalShdACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/palshdacsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PartialHitChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PartialHitChance()\n```\n[rule.PartialHitChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/partialhitchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PartialHitChanceFear") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PartialHitChanceFear()\n```\n[rule.PartialHitChanceFear on questapi](https://questapi.firebaseapp.com/en/lua/rule/partialhitchancefear)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PEQZoneDebuff1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PEQZoneDebuff1()\n```\n[rule.PEQZoneDebuff1 on questapi](https://questapi.firebaseapp.com/en/lua/rule/peqzonedebuff1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PEQZoneDebuff2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PEQZoneDebuff2()\n```\n[rule.PEQZoneDebuff2 on questapi](https://questapi.firebaseapp.com/en/lua/rule/peqzonedebuff2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PEQZoneReuseTime") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PEQZoneReuseTime()\n```\n[rule.PEQZoneReuseTime on questapi](https://questapi.firebaseapp.com/en/lua/rule/peqzonereusetime)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PerCharacterBucketMaxLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PerCharacterBucketMaxLevel()\n```\n[rule.PerCharacterBucketMaxLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/percharacterbucketmaxlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PerCharacterQglobalMaxLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PerCharacterQglobalMaxLevel()\n```\n[rule.PerCharacterQglobalMaxLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/percharacterqglobalmaxlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PeriodicCheckTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PeriodicCheckTimer()\n```\n[rule.PeriodicCheckTimer on questapi](https://questapi.firebaseapp.com/en/lua/rule/periodicchecktimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PetAttackMagicLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PetAttackMagicLevel()\n```\n[rule.PetAttackMagicLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/petattackmagiclevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PetAttackRange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PetAttackRange()\n```\n[rule.PetAttackRange on questapi](https://questapi.firebaseapp.com/en/lua/rule/petattackrange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PetBaseCritChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PetBaseCritChance()\n```\n[rule.PetBaseCritChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/petbasecritchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PetPowerLevelCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PetPowerLevelCap()\n```\n[rule.PetPowerLevelCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/petpowerlevelcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PetSpellAggroMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PetSpellAggroMod()\n```\n[rule.PetSpellAggroMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/petspellaggromod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PetsUseReagents") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PetsUseReagents()\n```\n[rule.PetsUseReagents on questapi](https://questapi.firebaseapp.com/en/lua/rule/petsusereagents)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlateACSoftcap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlateACSoftcap()\n```\n[rule.PlateACSoftcap on questapi](https://questapi.firebaseapp.com/en/lua/rule/plateacsoftcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerCreationAllowed") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerCreationAllowed()\n```\n[rule.PlayerCreationAllowed on questapi](https://questapi.firebaseapp.com/en/lua/rule/playercreationallowed)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerCreationLimit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerCreationLimit()\n```\n[rule.PlayerCreationLimit on questapi](https://questapi.firebaseapp.com/en/lua/rule/playercreationlimit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerCreationRequiredLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerCreationRequiredLevel()\n```\n[rule.PlayerCreationRequiredLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/playercreationrequiredlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerCreationRequiredStatus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerCreationRequiredStatus()\n```\n[rule.PlayerCreationRequiredStatus on questapi](https://questapi.firebaseapp.com/en/lua/rule/playercreationrequiredstatus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerCreationRequiredTime") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerCreationRequiredTime()\n```\n[rule.PlayerCreationRequiredTime on questapi](https://questapi.firebaseapp.com/en/lua/rule/playercreationrequiredtime)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerDropItems") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerDropItems()\n```\n[rule.PlayerDropItems on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerdropitems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogAAPurchases") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogAAPurchases()\n```\n[rule.PlayerLogAAPurchases on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogaapurchases)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogAARate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogAARate()\n```\n[rule.PlayerLogAARate on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogaarate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogAlternateCurrencyTransactions") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogAlternateCurrencyTransactions()\n```\n[rule.PlayerLogAlternateCurrencyTransactions on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogalternatecurrencytransactions)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogChat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogChat()\n```\n[rule.PlayerLogChat on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogchat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogConnectDisconnect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogConnectDisconnect()\n```\n[rule.PlayerLogConnectDisconnect on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogconnectdisconnect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogDeaths") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogDeaths()\n```\n[rule.PlayerLogDeaths on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogdeaths)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogDeletes") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogDeletes()\n```\n[rule.PlayerLogDeletes on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogdeletes)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogDropItem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogDropItem()\n```\n[rule.PlayerLogDropItem on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogdropitem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogHandins") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogHandins()\n```\n[rule.PlayerLogHandins on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerloghandins)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogIssuedCommandes") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogIssuedCommandes()\n```\n[rule.PlayerLogIssuedCommandes on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogissuedcommandes)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogKeyringAddition") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogKeyringAddition()\n```\n[rule.PlayerLogKeyringAddition on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogkeyringaddition)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogLevels") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogLevels()\n```\n[rule.PlayerLogLevels on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerloglevels)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogMerchantTransactions") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogMerchantTransactions()\n```\n[rule.PlayerLogMerchantTransactions on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogmerchanttransactions)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogMoneyTransactions") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogMoneyTransactions()\n```\n[rule.PlayerLogMoneyTransactions on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogmoneytransactions)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogMoves") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogMoves()\n```\n[rule.PlayerLogMoves on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogmoves)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogNPCKills") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogNPCKills()\n```\n[rule.PlayerLogNPCKills on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlognpckills)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogPCCoordinates") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogPCCoordinates()\n```\n[rule.PlayerLogPCCoordinates on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogpccoordinates)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogQGlobalUpdate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogQGlobalUpdate()\n```\n[rule.PlayerLogQGlobalUpdate on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogqglobalupdate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogTaskUpdates") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogTaskUpdates()\n```\n[rule.PlayerLogTaskUpdates on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogtaskupdates)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogTrades") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogTrades()\n```\n[rule.PlayerLogTrades on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogtrades)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogTradeSkillEvents") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogTradeSkillEvents()\n```\n[rule.PlayerLogTradeSkillEvents on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogtradeskillevents)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PlayerLogZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PlayerLogZone()\n```\n[rule.PlayerLogZone on questapi](https://questapi.firebaseapp.com/en/lua/rule/playerlogzone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PreferNoManaCommandSpells") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PreferNoManaCommandSpells()\n```\n[rule.PreferNoManaCommandSpells on questapi](https://questapi.firebaseapp.com/en/lua/rule/prefernomanacommandspells)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PreNerfBardAEDoT") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PreNerfBardAEDoT()\n```\n[rule.PreNerfBardAEDoT on questapi](https://questapi.firebaseapp.com/en/lua/rule/prenerfbardaedot)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PriceBonusPct") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PriceBonusPct()\n```\n[rule.PriceBonusPct on questapi](https://questapi.firebaseapp.com/en/lua/rule/pricebonuspct)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PricePenaltyPct") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PricePenaltyPct()\n```\n[rule.PricePenaltyPct on questapi](https://questapi.firebaseapp.com/en/lua/rule/pricepenaltypct)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PrintFileFunctionAndLine") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PrintFileFunctionAndLine()\n```\n[rule.PrintFileFunctionAndLine on questapi](https://questapi.firebaseapp.com/en/lua/rule/printfilefunctionandline)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ProcDexDivideBy") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ProcDexDivideBy()\n```\n[rule.ProcDexDivideBy on questapi](https://questapi.firebaseapp.com/en/lua/rule/procdexdivideby)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ProcessFearedProximity") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ProcessFearedProximity()\n```\n[rule.ProcessFearedProximity on questapi](https://questapi.firebaseapp.com/en/lua/rule/processfearedproximity)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ProcPerMinDexContrib") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ProcPerMinDexContrib()\n```\n[rule.ProcPerMinDexContrib on questapi](https://questapi.firebaseapp.com/en/lua/rule/procpermindexcontrib)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ProcTargetOnly") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ProcTargetOnly()\n```\n[rule.ProcTargetOnly on questapi](https://questapi.firebaseapp.com/en/lua/rule/proctargetonly)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ProjectileDmgOnImpact") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ProjectileDmgOnImpact()\n```\n[rule.ProjectileDmgOnImpact on questapi](https://questapi.firebaseapp.com/en/lua/rule/projectiledmgonimpact)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PVPMinLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PVPMinLevel()\n```\n[rule.PVPMinLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/pvpminlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.PVPSettings") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.PVPSettings()\n```\n[rule.PVPSettings on questapi](https://questapi.firebaseapp.com/en/lua/rule/pvpsettings)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.QuestableSpawnLimit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.QuestableSpawnLimit()\n```\n[rule.QuestableSpawnLimit on questapi](https://questapi.firebaseapp.com/en/lua/rule/questablespawnlimit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.QuestableSpells") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.QuestableSpells()\n```\n[rule.QuestableSpells on questapi](https://questapi.firebaseapp.com/en/lua/rule/questablespells)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.QuestsAutoReloadGlobalScripts") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.QuestsAutoReloadGlobalScripts()\n```\n[rule.QuestsAutoReloadGlobalScripts on questapi](https://questapi.firebaseapp.com/en/lua/rule/questsautoreloadglobalscripts)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.QuestsRepopWhenPlayersNotInCombat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.QuestsRepopWhenPlayersNotInCombat()\n```\n[rule.QuestsRepopWhenPlayersNotInCombat on questapi](https://questapi.firebaseapp.com/en/lua/rule/questsrepopwhenplayersnotincombat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.QuestsRepopWithReload") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.QuestsRepopWithReload()\n```\n[rule.QuestsRepopWithReload on questapi](https://questapi.firebaseapp.com/en/lua/rule/questsrepopwithreload)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.QuestsResetTimersWithReload") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.QuestsResetTimersWithReload()\n```\n[rule.QuestsResetTimersWithReload on questapi](https://questapi.firebaseapp.com/en/lua/rule/questsresettimerswithreload)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.QuiverHasteCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.QuiverHasteCap()\n```\n[rule.QuiverHasteCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/quiverhastecap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RadiantCrystalItemID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RadiantCrystalItemID()\n```\n[rule.RadiantCrystalItemID on questapi](https://questapi.firebaseapp.com/en/lua/rule/radiantcrystalitemid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RaidExpMultiplier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RaidExpMultiplier()\n```\n[rule.RaidExpMultiplier on questapi](https://questapi.firebaseapp.com/en/lua/rule/raidexpmultiplier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RampageHitsTarget") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RampageHitsTarget()\n```\n[rule.RampageHitsTarget on questapi](https://questapi.firebaseapp.com/en/lua/rule/rampagehitstarget)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RecordBuyFromMerchant") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RecordBuyFromMerchant()\n```\n[rule.RecordBuyFromMerchant on questapi](https://questapi.firebaseapp.com/en/lua/rule/recordbuyfrommerchant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RecordCompletedOptionalActivities") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RecordCompletedOptionalActivities()\n```\n[rule.RecordCompletedOptionalActivities on questapi](https://questapi.firebaseapp.com/en/lua/rule/recordcompletedoptionalactivities)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RecordCompletedTasks") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RecordCompletedTasks()\n```\n[rule.RecordCompletedTasks on questapi](https://questapi.firebaseapp.com/en/lua/rule/recordcompletedtasks)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RecordSellToMerchant") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RecordSellToMerchant()\n```\n[rule.RecordSellToMerchant on questapi](https://questapi.firebaseapp.com/en/lua/rule/recordselltomerchant)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RecycleInstanceIds") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RecycleInstanceIds()\n```\n[rule.RecycleInstanceIds on questapi](https://questapi.firebaseapp.com/en/lua/rule/recycleinstanceids)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RedModifier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RedModifier()\n```\n[rule.RedModifier on questapi](https://questapi.firebaseapp.com/en/lua/rule/redmodifier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ReflectMessagesClose") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ReflectMessagesClose()\n```\n[rule.ReflectMessagesClose on questapi](https://questapi.firebaseapp.com/en/lua/rule/reflectmessagesclose)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ReflectType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ReflectType()\n```\n[rule.ReflectType on questapi](https://questapi.firebaseapp.com/en/lua/rule/reflecttype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ReportingSystemActive") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ReportingSystemActive()\n```\n[rule.ReportingSystemActive on questapi](https://questapi.firebaseapp.com/en/lua/rule/reportingsystemactive)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RequiredStatusAdmin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RequiredStatusAdmin()\n```\n[rule.RequiredStatusAdmin on questapi](https://questapi.firebaseapp.com/en/lua/rule/requiredstatusadmin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RequiredStatusListAll") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RequiredStatusListAll()\n```\n[rule.RequiredStatusListAll on questapi](https://questapi.firebaseapp.com/en/lua/rule/requiredstatuslistall)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RequireTomeHandin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RequireTomeHandin()\n```\n[rule.RequireTomeHandin on questapi](https://questapi.firebaseapp.com/en/lua/rule/requiretomehandin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ResendDelayBaseMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ResendDelayBaseMS()\n```\n[rule.ResendDelayBaseMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/resenddelaybasems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ResendDelayFactor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ResendDelayFactor()\n```\n[rule.ResendDelayFactor on questapi](https://questapi.firebaseapp.com/en/lua/rule/resenddelayfactor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ResendDelayMaxMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ResendDelayMaxMS()\n```\n[rule.ResendDelayMaxMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/resenddelaymaxms)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ResendDelayMinMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ResendDelayMinMS()\n```\n[rule.ResendDelayMinMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/resenddelayminms)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ReservedInstances") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ReservedInstances()\n```\n[rule.ReservedInstances on questapi](https://questapi.firebaseapp.com/en/lua/rule/reservedinstances)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ResistChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ResistChance()\n```\n[rule.ResistChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/resistchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ResistFalloff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ResistFalloff()\n```\n[rule.ResistFalloff on questapi](https://questapi.firebaseapp.com/en/lua/rule/resistfalloff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ResistMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ResistMod()\n```\n[rule.ResistMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/resistmod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ResistPerLevelDiff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ResistPerLevelDiff()\n```\n[rule.ResistPerLevelDiff on questapi](https://questapi.firebaseapp.com/en/lua/rule/resistperleveldiff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RespawnFromHover") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RespawnFromHover()\n```\n[rule.RespawnFromHover on questapi](https://questapi.firebaseapp.com/en/lua/rule/respawnfromhover)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RespawnFromHoverTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RespawnFromHoverTimer()\n```\n[rule.RespawnFromHoverTimer on questapi](https://questapi.firebaseapp.com/en/lua/rule/respawnfromhovertimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RestRegenEnabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RestRegenEnabled()\n```\n[rule.RestRegenEnabled on questapi](https://questapi.firebaseapp.com/en/lua/rule/restregenenabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RestRegenRaidTimeToActivate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RestRegenRaidTimeToActivate()\n```\n[rule.RestRegenRaidTimeToActivate on questapi](https://questapi.firebaseapp.com/en/lua/rule/restregenraidtimetoactivate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RestRegenTimeToActivate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RestRegenTimeToActivate()\n```\n[rule.RestRegenTimeToActivate on questapi](https://questapi.firebaseapp.com/en/lua/rule/restregentimetoactivate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RestrictApplyPotionToRogue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RestrictApplyPotionToRogue()\n```\n[rule.RestrictApplyPotionToRogue on questapi](https://questapi.firebaseapp.com/en/lua/rule/restrictapplypotiontorogue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RestrictSpellScribing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RestrictSpellScribing()\n```\n[rule.RestrictSpellScribing on questapi](https://questapi.firebaseapp.com/en/lua/rule/restrictspellscribing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ResurrectRadius") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ResurrectRadius()\n```\n[rule.ResurrectRadius on questapi](https://questapi.firebaseapp.com/en/lua/rule/resurrectradius)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ReturnNonQuestNoDropItems") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ReturnNonQuestNoDropItems()\n```\n[rule.ReturnNonQuestNoDropItems on questapi](https://questapi.firebaseapp.com/en/lua/rule/returnnonquestnodropitems)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RogShmBstBerACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RogShmBstBerACSoftcapReturn()\n```\n[rule.RogShmBstBerACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/rogshmbstberacsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RootBreakCheckChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RootBreakCheckChance()\n```\n[rule.RootBreakCheckChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/rootbreakcheckchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RootBreakFromSpells") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RootBreakFromSpells()\n```\n[rule.RootBreakFromSpells on questapi](https://questapi.firebaseapp.com/en/lua/rule/rootbreakfromspells)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.RoundKickBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.RoundKickBonus()\n```\n[rule.RoundKickBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/roundkickbonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SacrificeItemID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SacrificeItemID()\n```\n[rule.SacrificeItemID on questapi](https://questapi.firebaseapp.com/en/lua/rule/sacrificeitemid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SacrificeMaxLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SacrificeMaxLevel()\n```\n[rule.SacrificeMaxLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/sacrificemaxlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SacrificeMinLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SacrificeMinLevel()\n```\n[rule.SacrificeMinLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/sacrificeminlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SayPauseTimeInSec") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SayPauseTimeInSec()\n```\n[rule.SayPauseTimeInSec on questapi](https://questapi.firebaseapp.com/en/lua/rule/saypausetimeinsec)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ScaleRate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ScaleRate()\n```\n[rule.ScaleRate on questapi](https://questapi.firebaseapp.com/en/lua/rule/scalerate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SecondsBeforeIdle") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SecondsBeforeIdle()\n```\n[rule.SecondsBeforeIdle on questapi](https://questapi.firebaseapp.com/en/lua/rule/secondsbeforeidle)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SelfLanguageLearning") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SelfLanguageLearning()\n```\n[rule.SelfLanguageLearning on questapi](https://questapi.firebaseapp.com/en/lua/rule/selflanguagelearning)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SellCostMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SellCostMod()\n```\n[rule.SellCostMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/sellcostmod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SenseHeadingStartValue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SenseHeadingStartValue()\n```\n[rule.SenseHeadingStartValue on questapi](https://questapi.firebaseapp.com/en/lua/rule/senseheadingstartvalue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ServerWideAuction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ServerWideAuction()\n```\n[rule.ServerWideAuction on questapi](https://questapi.firebaseapp.com/en/lua/rule/serverwideauction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ServerWideOOC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ServerWideOOC()\n```\n[rule.ServerWideOOC on questapi](https://questapi.firebaseapp.com/en/lua/rule/serverwideooc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SessionTimeOut") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SessionTimeOut()\n```\n[rule.SessionTimeOut on questapi](https://questapi.firebaseapp.com/en/lua/rule/sessiontimeout)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SharedBankPlat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SharedBankPlat()\n```\n[rule.SharedBankPlat on questapi](https://questapi.firebaseapp.com/en/lua/rule/sharedbankplat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SHDProcIDOffByOne") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SHDProcIDOffByOne()\n```\n[rule.SHDProcIDOffByOne on questapi](https://questapi.firebaseapp.com/en/lua/rule/shdprocidoffbyone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ShortMovementUpdateRange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ShortMovementUpdateRange()\n```\n[rule.ShortMovementUpdateRange on questapi](https://questapi.firebaseapp.com/en/lua/rule/shortmovementupdaterange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ShowExpValues") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ShowExpValues()\n```\n[rule.ShowExpValues on questapi](https://questapi.firebaseapp.com/en/lua/rule/showexpvalues)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SittingAggroMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SittingAggroMod()\n```\n[rule.SittingAggroMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/sittingaggromod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SkillCapMaxLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SkillCapMaxLevel()\n```\n[rule.SkillCapMaxLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/skillcapmaxlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SkillUpModifier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SkillUpModifier()\n```\n[rule.SkillUpModifier on questapi](https://questapi.firebaseapp.com/en/lua/rule/skillupmodifier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SmartAggroList") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SmartAggroList()\n```\n[rule.SmartAggroList on questapi](https://questapi.firebaseapp.com/en/lua/rule/smartaggrolist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SmartLastFightingDelayMoving") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SmartLastFightingDelayMoving()\n```\n[rule.SmartLastFightingDelayMoving on questapi](https://questapi.firebaseapp.com/en/lua/rule/smartlastfightingdelaymoving)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SoDClientUseSoDHPManaEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SoDClientUseSoDHPManaEnd()\n```\n[rule.SoDClientUseSoDHPManaEnd on questapi](https://questapi.firebaseapp.com/en/lua/rule/sodclientusesodhpmanaend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SoFStartZoneID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SoFStartZoneID()\n```\n[rule.SoFStartZoneID on questapi](https://questapi.firebaseapp.com/en/lua/rule/sofstartzoneid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SoftcapFactor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SoftcapFactor()\n```\n[rule.SoftcapFactor on questapi](https://questapi.firebaseapp.com/en/lua/rule/softcapfactor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SoftDeletes") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SoftDeletes()\n```\n[rule.SoftDeletes on questapi](https://questapi.firebaseapp.com/en/lua/rule/softdeletes)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SongAggroMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SongAggroMod()\n```\n[rule.SongAggroMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/songaggromod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SongMessages") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SongMessages()\n```\n[rule.SongMessages on questapi](https://questapi.firebaseapp.com/en/lua/rule/songmessages)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SoundForAAEarned") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SoundForAAEarned()\n```\n[rule.SoundForAAEarned on questapi](https://questapi.firebaseapp.com/en/lua/rule/soundforaaearned)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SpawnLimit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SpawnLimit()\n```\n[rule.SpawnLimit on questapi](https://questapi.firebaseapp.com/en/lua/rule/spawnlimit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SpecialAttackACBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SpecialAttackACBonus()\n```\n[rule.SpecialAttackACBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/specialattackacbonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SpellAggroMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SpellAggroMod()\n```\n[rule.SpellAggroMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/spellaggromod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SpellMessages") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SpellMessages()\n```\n[rule.SpellMessages on questapi](https://questapi.firebaseapp.com/en/lua/rule/spellmessages)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SpellParticles") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SpellParticles()\n```\n[rule.SpellParticles on questapi](https://questapi.firebaseapp.com/en/lua/rule/spellparticles)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.Stacking") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.Stacking()\n```\n[rule.Stacking on questapi](https://questapi.firebaseapp.com/en/lua/rule/stacking)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.StartEnrageValue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.StartEnrageValue()\n```\n[rule.StartEnrageValue on questapi](https://questapi.firebaseapp.com/en/lua/rule/startenragevalue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.StartZoneSameAsBindOnCreation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.StartZoneSameAsBindOnCreation()\n```\n[rule.StartZoneSameAsBindOnCreation on questapi](https://questapi.firebaseapp.com/en/lua/rule/startzonesameasbindoncreation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.StatCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.StatCap()\n```\n[rule.StatCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/statcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SuccorFailChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SuccorFailChance()\n```\n[rule.SuccorFailChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/succorfailchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SuppressCommandErrors") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SuppressCommandErrors()\n```\n[rule.SuppressCommandErrors on questapi](https://questapi.firebaseapp.com/en/lua/rule/suppresscommanderrors)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SuspendIntervalMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SuspendIntervalMS()\n```\n[rule.SuspendIntervalMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/suspendintervalms)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SuspendIntervalS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SuspendIntervalS()\n```\n[rule.SuspendIntervalS on questapi](https://questapi.firebaseapp.com/en/lua/rule/suspendintervals)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SwarmPetTargetLock") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SwarmPetTargetLock()\n```\n[rule.SwarmPetTargetLock on questapi](https://questapi.firebaseapp.com/en/lua/rule/swarmpettargetlock)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.SwimmingStartValue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.SwimmingStartValue()\n```\n[rule.SwimmingStartValue on questapi](https://questapi.firebaseapp.com/en/lua/rule/swimmingstartvalue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TellQueueSize") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TellQueueSize()\n```\n[rule.TellQueueSize on questapi](https://questapi.firebaseapp.com/en/lua/rule/tellqueuesize)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ThreateninglyFactionMinimum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ThreateninglyFactionMinimum()\n```\n[rule.ThreateninglyFactionMinimum on questapi](https://questapi.firebaseapp.com/en/lua/rule/threateninglyfactionminimum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ThrowingCritDifficulty") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ThrowingCritDifficulty()\n```\n[rule.ThrowingCritDifficulty on questapi](https://questapi.firebaseapp.com/en/lua/rule/throwingcritdifficulty)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TigerClawBonus") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TigerClawBonus()\n```\n[rule.TigerClawBonus on questapi](https://questapi.firebaseapp.com/en/lua/rule/tigerclawbonus)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TitaniumStartZoneID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TitaniumStartZoneID()\n```\n[rule.TitaniumStartZoneID on questapi](https://questapi.firebaseapp.com/en/lua/rule/titaniumstartzoneid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TradeskillUpAlchemy") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TradeskillUpAlchemy()\n```\n[rule.TradeskillUpAlchemy on questapi](https://questapi.firebaseapp.com/en/lua/rule/tradeskillupalchemy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TradeskillUpBaking") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TradeskillUpBaking()\n```\n[rule.TradeskillUpBaking on questapi](https://questapi.firebaseapp.com/en/lua/rule/tradeskillupbaking)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TradeskillUpBlacksmithing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TradeskillUpBlacksmithing()\n```\n[rule.TradeskillUpBlacksmithing on questapi](https://questapi.firebaseapp.com/en/lua/rule/tradeskillupblacksmithing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TradeskillUpBrewing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TradeskillUpBrewing()\n```\n[rule.TradeskillUpBrewing on questapi](https://questapi.firebaseapp.com/en/lua/rule/tradeskillupbrewing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TradeskillUpFletching") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TradeskillUpFletching()\n```\n[rule.TradeskillUpFletching on questapi](https://questapi.firebaseapp.com/en/lua/rule/tradeskillupfletching)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TradeskillUpJewelcrafting") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TradeskillUpJewelcrafting()\n```\n[rule.TradeskillUpJewelcrafting on questapi](https://questapi.firebaseapp.com/en/lua/rule/tradeskillupjewelcrafting)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TradeskillUpMakePoison") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TradeskillUpMakePoison()\n```\n[rule.TradeskillUpMakePoison on questapi](https://questapi.firebaseapp.com/en/lua/rule/tradeskillupmakepoison)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TradeskillUpPottery") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TradeskillUpPottery()\n```\n[rule.TradeskillUpPottery on questapi](https://questapi.firebaseapp.com/en/lua/rule/tradeskilluppottery)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TradeskillUpResearch") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TradeskillUpResearch()\n```\n[rule.TradeskillUpResearch on questapi](https://questapi.firebaseapp.com/en/lua/rule/tradeskillupresearch)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TradeskillUpTinkering") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TradeskillUpTinkering()\n```\n[rule.TradeskillUpTinkering on questapi](https://questapi.firebaseapp.com/en/lua/rule/tradeskilluptinkering)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TrainSenseHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TrainSenseHeading()\n```\n[rule.TrainSenseHeading on questapi](https://questapi.firebaseapp.com/en/lua/rule/trainsenseheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TransformSummonedBags") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TransformSummonedBags()\n```\n[rule.TransformSummonedBags on questapi](https://questapi.firebaseapp.com/en/lua/rule/transformsummonedbags)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TranslocateTimeLimit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TranslocateTimeLimit()\n```\n[rule.TranslocateTimeLimit on questapi](https://questapi.firebaseapp.com/en/lua/rule/translocatetimelimit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TrollCommonTongue") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TrollCommonTongue()\n```\n[rule.TrollCommonTongue on questapi](https://questapi.firebaseapp.com/en/lua/rule/trollcommontongue)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TunnelVisionAggroMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TunnelVisionAggroMod()\n```\n[rule.TunnelVisionAggroMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/tunnelvisionaggromod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.TutorialZoneID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.TutorialZoneID()\n```\n[rule.TutorialZoneID on questapi](https://questapi.firebaseapp.com/en/lua/rule/tutorialzoneid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UnmemSpellsOnDeath") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UnmemSpellsOnDeath()\n```\n[rule.UnmemSpellsOnDeath on questapi](https://questapi.firebaseapp.com/en/lua/rule/unmemspellsondeath)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UnTargetableSwarmPet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UnTargetableSwarmPet()\n```\n[rule.UnTargetableSwarmPet on questapi](https://questapi.firebaseapp.com/en/lua/rule/untargetableswarmpet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UpdatePositionWithTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UpdatePositionWithTimer()\n```\n[rule.UpdatePositionWithTimer on questapi](https://questapi.firebaseapp.com/en/lua/rule/updatepositionwithtimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UpkeepIntervalMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UpkeepIntervalMS()\n```\n[rule.UpkeepIntervalMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/upkeepintervalms)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseAdditiveFocusFromWornRule") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseAdditiveFocusFromWornRule()\n```\n[rule.UseAdditiveFocusFromWornRule on questapi](https://questapi.firebaseapp.com/en/lua/rule/useadditivefocusfromwornrule)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseArcheryBonusRoll") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseArcheryBonusRoll()\n```\n[rule.UseArcheryBonusRoll on questapi](https://questapi.firebaseapp.com/en/lua/rule/usearcherybonusroll)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseBaneDamage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseBaneDamage()\n```\n[rule.UseBaneDamage on questapi](https://questapi.firebaseapp.com/en/lua/rule/usebanedamage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseBannedIPsTable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseBannedIPsTable()\n```\n[rule.UseBannedIPsTable on questapi](https://questapi.firebaseapp.com/en/lua/rule/usebannedipstable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseCHAScribeHack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseCHAScribeHack()\n```\n[rule.UseCHAScribeHack on questapi](https://questapi.firebaseapp.com/en/lua/rule/usechascribehack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseClassAsLastName") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseClassAsLastName()\n```\n[rule.UseClassAsLastName on questapi](https://questapi.firebaseapp.com/en/lua/rule/useclassaslastname)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseClientBasedExpansionSettings") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseClientBasedExpansionSettings()\n```\n[rule.UseClientBasedExpansionSettings on questapi](https://questapi.firebaseapp.com/en/lua/rule/useclientbasedexpansionsettings)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseDeathExpLossMult") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseDeathExpLossMult()\n```\n[rule.UseDeathExpLossMult on questapi](https://questapi.firebaseapp.com/en/lua/rule/usedeathexplossmult)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseExtendedPoisonProcs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseExtendedPoisonProcs()\n```\n[rule.UseExtendedPoisonProcs on questapi](https://questapi.firebaseapp.com/en/lua/rule/useextendedpoisonprocs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseIntervalAC") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseIntervalAC()\n```\n[rule.UseIntervalAC on questapi](https://questapi.firebaseapp.com/en/lua/rule/useintervalac)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseItemBonusesForNonPets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseItemBonusesForNonPets()\n```\n[rule.UseItemBonusesForNonPets on questapi](https://questapi.firebaseapp.com/en/lua/rule/useitembonusesfornonpets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseLevelAggro") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseLevelAggro()\n```\n[rule.UseLevelAggro on questapi](https://questapi.firebaseapp.com/en/lua/rule/uselevelaggro)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseLimitTradeskillSearchSkillDiff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseLimitTradeskillSearchSkillDiff()\n```\n[rule.UseLimitTradeskillSearchSkillDiff on questapi](https://questapi.firebaseapp.com/en/lua/rule/uselimittradeskillsearchskilldiff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseLiveBlockedMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseLiveBlockedMessage()\n```\n[rule.UseLiveBlockedMessage on questapi](https://questapi.firebaseapp.com/en/lua/rule/useliveblockedmessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseLiveCombatRounds") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseLiveCombatRounds()\n```\n[rule.UseLiveCombatRounds on questapi](https://questapi.firebaseapp.com/en/lua/rule/uselivecombatrounds)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseLiveFactionMessage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseLiveFactionMessage()\n```\n[rule.UseLiveFactionMessage on questapi](https://questapi.firebaseapp.com/en/lua/rule/uselivefactionmessage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseLiveSpellProjectileGFX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseLiveSpellProjectileGFX()\n```\n[rule.UseLiveSpellProjectileGFX on questapi](https://questapi.firebaseapp.com/en/lua/rule/uselivespellprojectilegfx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseMeditateBasedManaRegen") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseMeditateBasedManaRegen()\n```\n[rule.UseMeditateBasedManaRegen on questapi](https://questapi.firebaseapp.com/en/lua/rule/usemeditatebasedmanaregen)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseNewStatsWindow") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseNewStatsWindow()\n```\n[rule.UseNewStatsWindow on questapi](https://questapi.firebaseapp.com/en/lua/rule/usenewstatswindow)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseNoJunkFishing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseNoJunkFishing()\n```\n[rule.UseNoJunkFishing on questapi](https://questapi.firebaseapp.com/en/lua/rule/usenojunkfishing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseNPCDamageClassLevelMods") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseNPCDamageClassLevelMods()\n```\n[rule.UseNPCDamageClassLevelMods on questapi](https://questapi.firebaseapp.com/en/lua/rule/usenpcdamageclasslevelmods)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseOldBindWound") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseOldBindWound()\n```\n[rule.UseOldBindWound on questapi](https://questapi.firebaseapp.com/en/lua/rule/useoldbindwound)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseOldClassExpPenalties") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseOldClassExpPenalties()\n```\n[rule.UseOldClassExpPenalties on questapi](https://questapi.firebaseapp.com/en/lua/rule/useoldclassexppenalties)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseOldConSystem") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseOldConSystem()\n```\n[rule.UseOldConSystem on questapi](https://questapi.firebaseapp.com/en/lua/rule/useoldconsystem)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseOldDamageIntervalRules") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseOldDamageIntervalRules()\n```\n[rule.UseOldDamageIntervalRules on questapi](https://questapi.firebaseapp.com/en/lua/rule/useolddamageintervalrules)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseOldRaceExpPenalties") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseOldRaceExpPenalties()\n```\n[rule.UseOldRaceExpPenalties on questapi](https://questapi.firebaseapp.com/en/lua/rule/useoldraceexppenalties)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseOldRaceRezEffects") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseOldRaceRezEffects()\n```\n[rule.UseOldRaceRezEffects on questapi](https://questapi.firebaseapp.com/en/lua/rule/useoldracerezeffects)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseOldReportingMethod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseOldReportingMethod()\n```\n[rule.UseOldReportingMethod on questapi](https://questapi.firebaseapp.com/en/lua/rule/useoldreportingmethod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UsePathing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UsePathing()\n```\n[rule.UsePathing on questapi](https://questapi.firebaseapp.com/en/lua/rule/usepathing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UsePEQZoneDebuffs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UsePEQZoneDebuffs()\n```\n[rule.UsePEQZoneDebuffs on questapi](https://questapi.firebaseapp.com/en/lua/rule/usepeqzonedebuffs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UsePlayerCorpseBackups") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UsePlayerCorpseBackups()\n```\n[rule.UsePlayerCorpseBackups on questapi](https://questapi.firebaseapp.com/en/lua/rule/useplayercorpsebackups)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UsePriceMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UsePriceMod()\n```\n[rule.UsePriceMod on questapi](https://questapi.firebaseapp.com/en/lua/rule/usepricemod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseRaceClassExpBonuses") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseRaceClassExpBonuses()\n```\n[rule.UseRaceClassExpBonuses on questapi](https://questapi.firebaseapp.com/en/lua/rule/useraceclassexpbonuses)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseRevampHandToHand") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseRevampHandToHand()\n```\n[rule.UseRevampHandToHand on questapi](https://questapi.firebaseapp.com/en/lua/rule/userevamphandtohand)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseSpellFileSongCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseSpellFileSongCap()\n```\n[rule.UseSpellFileSongCap on questapi](https://questapi.firebaseapp.com/en/lua/rule/usespellfilesongcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseStackablePickPocketing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseStackablePickPocketing()\n```\n[rule.UseStackablePickPocketing on questapi](https://questapi.firebaseapp.com/en/lua/rule/usestackablepickpocketing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseXPConScaling") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseXPConScaling()\n```\n[rule.UseXPConScaling on questapi](https://questapi.firebaseapp.com/en/lua/rule/usexpconscaling)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.UseZoneController") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.UseZoneController()\n```\n[rule.UseZoneController on questapi](https://questapi.firebaseapp.com/en/lua/rule/usezonecontroller)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.VirusSpreadDistance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.VirusSpreadDistance()\n```\n[rule.VirusSpreadDistance on questapi](https://questapi.firebaseapp.com/en/lua/rule/virusspreaddistance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.WarACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.WarACSoftcapReturn()\n```\n[rule.WarACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/waracsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.WarmlyFactionMinimum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.WarmlyFactionMinimum()\n```\n[rule.WarmlyFactionMinimum on questapi](https://questapi.firebaseapp.com/en/lua/rule/warmlyfactionminimum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.WarriorACSoftcapReturn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.WarriorACSoftcapReturn()\n```\n[rule.WarriorACSoftcapReturn on questapi](https://questapi.firebaseapp.com/en/lua/rule/warrioracsoftcapreturn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.WeaponSkillFalloff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.WeaponSkillFalloff()\n```\n[rule.WeaponSkillFalloff on questapi](https://questapi.firebaseapp.com/en/lua/rule/weaponskillfalloff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.WeatherTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.WeatherTimer()\n```\n[rule.WeatherTimer on questapi](https://questapi.firebaseapp.com/en/lua/rule/weathertimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.WhiteModifier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.WhiteModifier()\n```\n[rule.WhiteModifier on questapi](https://questapi.firebaseapp.com/en/lua/rule/whitemodifier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.WizCritChance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.WizCritChance()\n```\n[rule.WizCritChance on questapi](https://questapi.firebaseapp.com/en/lua/rule/wizcritchance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.WizCritLevel") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.WizCritLevel()\n```\n[rule.WizCritLevel on questapi](https://questapi.firebaseapp.com/en/lua/rule/wizcritlevel)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.WizCritRatio") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.WizCritRatio()\n```\n[rule.WizCritRatio on questapi](https://questapi.firebaseapp.com/en/lua/rule/wizcritratio)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.YellowModifier") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.YellowModifier()\n```\n[rule.YellowModifier on questapi](https://questapi.firebaseapp.com/en/lua/rule/yellowmodifier)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule.ZoneAutobootTimeoutMS") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule.ZoneAutobootTimeoutMS()\n```\n[rule.ZoneAutobootTimeoutMS on questapi](https://questapi.firebaseapp.com/en/lua/rule/zoneautoboottimeoutms)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "rule_b") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule_b\n```\n[rule_b on questapi](https://questapi.firebaseapp.com/en/lua/rule_b/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule_b.Get") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule_b.Get()\n```\n[rule_b.Get on questapi](https://questapi.firebaseapp.com/en/lua/rule_b/get)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "rule_i") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule_i\n```\n[rule_i on questapi](https://questapi.firebaseapp.com/en/lua/rule_i/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule_i.Get") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule_i.Get()\n```\n[rule_i.Get on questapi](https://questapi.firebaseapp.com/en/lua/rule_i/get)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "rule_r") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule_r\n```\n[rule_r on questapi](https://questapi.firebaseapp.com/en/lua/rule_r/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "rule_r.Get") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nrule_r.Get()\n```\n[rule_r.Get on questapi](https://questapi.firebaseapp.com/en/lua/rule_r/get)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "skill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill\n```\n[skill on questapi](https://questapi.firebaseapp.com/en/lua/skill/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.1HBlunt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.1HBlunt()\n```\n[skill.1HBlunt on questapi](https://questapi.firebaseapp.com/en/lua/skill/1hblunt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.1HPiercing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.1HPiercing()\n```\n[skill.1HPiercing on questapi](https://questapi.firebaseapp.com/en/lua/skill/1hpiercing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.1HSlashing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.1HSlashing()\n```\n[skill.1HSlashing on questapi](https://questapi.firebaseapp.com/en/lua/skill/1hslashing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.2HBlunt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.2HBlunt()\n```\n[skill.2HBlunt on questapi](https://questapi.firebaseapp.com/en/lua/skill/2hblunt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.2HPiercing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.2HPiercing()\n```\n[skill.2HPiercing on questapi](https://questapi.firebaseapp.com/en/lua/skill/2hpiercing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.2HSlashing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.2HSlashing()\n```\n[skill.2HSlashing on questapi](https://questapi.firebaseapp.com/en/lua/skill/2hslashing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Abjuration") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Abjuration\n```\n[skill.Abjuration on questapi](https://questapi.firebaseapp.com/en/lua/skill/abjuration)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Alchemy") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Alchemy\n```\n[skill.Alchemy on questapi](https://questapi.firebaseapp.com/en/lua/skill/alchemy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.AlcoholTolerance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.AlcoholTolerance\n```\n[skill.AlcoholTolerance on questapi](https://questapi.firebaseapp.com/en/lua/skill/alcoholtolerance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Alteration") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Alteration\n```\n[skill.Alteration on questapi](https://questapi.firebaseapp.com/en/lua/skill/alteration)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.ApplyPoison") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.ApplyPoison\n```\n[skill.ApplyPoison on questapi](https://questapi.firebaseapp.com/en/lua/skill/applypoison)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Archery") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Archery\n```\n[skill.Archery on questapi](https://questapi.firebaseapp.com/en/lua/skill/archery)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Backstab") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Backstab\n```\n[skill.Backstab on questapi](https://questapi.firebaseapp.com/en/lua/skill/backstab)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Baking") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Baking\n```\n[skill.Baking on questapi](https://questapi.firebaseapp.com/en/lua/skill/baking)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Bash") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Bash\n```\n[skill.Bash on questapi](https://questapi.firebaseapp.com/en/lua/skill/bash)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Begging") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Begging\n```\n[skill.Begging on questapi](https://questapi.firebaseapp.com/en/lua/skill/begging)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Berserking") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Berserking\n```\n[skill.Berserking on questapi](https://questapi.firebaseapp.com/en/lua/skill/berserking)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.BindWound") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.BindWound\n```\n[skill.BindWound on questapi](https://questapi.firebaseapp.com/en/lua/skill/bindwound)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Blacksmithing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Blacksmithing\n```\n[skill.Blacksmithing on questapi](https://questapi.firebaseapp.com/en/lua/skill/blacksmithing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Block") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Block\n```\n[skill.Block on questapi](https://questapi.firebaseapp.com/en/lua/skill/block)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.BrassInstruments") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.BrassInstruments\n```\n[skill.BrassInstruments on questapi](https://questapi.firebaseapp.com/en/lua/skill/brassinstruments)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Brewing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Brewing\n```\n[skill.Brewing on questapi](https://questapi.firebaseapp.com/en/lua/skill/brewing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Channeling") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Channeling\n```\n[skill.Channeling on questapi](https://questapi.firebaseapp.com/en/lua/skill/channeling)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Conjuration") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Conjuration\n```\n[skill.Conjuration on questapi](https://questapi.firebaseapp.com/en/lua/skill/conjuration)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Defense") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Defense\n```\n[skill.Defense on questapi](https://questapi.firebaseapp.com/en/lua/skill/defense)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Disarm") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Disarm\n```\n[skill.Disarm on questapi](https://questapi.firebaseapp.com/en/lua/skill/disarm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.DisarmTraps") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.DisarmTraps\n```\n[skill.DisarmTraps on questapi](https://questapi.firebaseapp.com/en/lua/skill/disarmtraps)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Divination") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Divination\n```\n[skill.Divination on questapi](https://questapi.firebaseapp.com/en/lua/skill/divination)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Dodge") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Dodge\n```\n[skill.Dodge on questapi](https://questapi.firebaseapp.com/en/lua/skill/dodge)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.DoubleAttack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.DoubleAttack\n```\n[skill.DoubleAttack on questapi](https://questapi.firebaseapp.com/en/lua/skill/doubleattack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.DragonPunch") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.DragonPunch\n```\n[skill.DragonPunch on questapi](https://questapi.firebaseapp.com/en/lua/skill/dragonpunch)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.DualWield") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.DualWield\n```\n[skill.DualWield on questapi](https://questapi.firebaseapp.com/en/lua/skill/dualwield)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.EagleStrike") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.EagleStrike\n```\n[skill.EagleStrike on questapi](https://questapi.firebaseapp.com/en/lua/skill/eaglestrike)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Evocation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Evocation\n```\n[skill.Evocation on questapi](https://questapi.firebaseapp.com/en/lua/skill/evocation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.FeignDeath") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.FeignDeath\n```\n[skill.FeignDeath on questapi](https://questapi.firebaseapp.com/en/lua/skill/feigndeath)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Fishing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Fishing\n```\n[skill.Fishing on questapi](https://questapi.firebaseapp.com/en/lua/skill/fishing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Fletching") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Fletching\n```\n[skill.Fletching on questapi](https://questapi.firebaseapp.com/en/lua/skill/fletching)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.FlyingKick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.FlyingKick\n```\n[skill.FlyingKick on questapi](https://questapi.firebaseapp.com/en/lua/skill/flyingkick)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Forage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Forage\n```\n[skill.Forage on questapi](https://questapi.firebaseapp.com/en/lua/skill/forage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Frenzy") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Frenzy\n```\n[skill.Frenzy on questapi](https://questapi.firebaseapp.com/en/lua/skill/frenzy)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.HandtoHand") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.HandtoHand\n```\n[skill.HandtoHand on questapi](https://questapi.firebaseapp.com/en/lua/skill/handtohand)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Hide") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Hide\n```\n[skill.Hide on questapi](https://questapi.firebaseapp.com/en/lua/skill/hide)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.HIGHEST_SKILL") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.HIGHEST_SKILL\n```\n[skill.HIGHEST_SKILL on questapi](https://questapi.firebaseapp.com/en/lua/skill/highest_skill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Intimidation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Intimidation\n```\n[skill.Intimidation on questapi](https://questapi.firebaseapp.com/en/lua/skill/intimidation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.JewelryMaking") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.JewelryMaking\n```\n[skill.JewelryMaking on questapi](https://questapi.firebaseapp.com/en/lua/skill/jewelrymaking)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Kick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Kick\n```\n[skill.Kick on questapi](https://questapi.firebaseapp.com/en/lua/skill/kick)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.MakePoison") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.MakePoison\n```\n[skill.MakePoison on questapi](https://questapi.firebaseapp.com/en/lua/skill/makepoison)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Meditate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Meditate\n```\n[skill.Meditate on questapi](https://questapi.firebaseapp.com/en/lua/skill/meditate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Mend") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Mend\n```\n[skill.Mend on questapi](https://questapi.firebaseapp.com/en/lua/skill/mend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Offense") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Offense\n```\n[skill.Offense on questapi](https://questapi.firebaseapp.com/en/lua/skill/offense)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Parry") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Parry\n```\n[skill.Parry on questapi](https://questapi.firebaseapp.com/en/lua/skill/parry)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.PercussionInstruments") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.PercussionInstruments\n```\n[skill.PercussionInstruments on questapi](https://questapi.firebaseapp.com/en/lua/skill/percussioninstruments)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.PickLock") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.PickLock\n```\n[skill.PickLock on questapi](https://questapi.firebaseapp.com/en/lua/skill/picklock)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.PickPockets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.PickPockets\n```\n[skill.PickPockets on questapi](https://questapi.firebaseapp.com/en/lua/skill/pickpockets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Pottery") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Pottery\n```\n[skill.Pottery on questapi](https://questapi.firebaseapp.com/en/lua/skill/pottery)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.RemoveTraps") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.RemoveTraps\n```\n[skill.RemoveTraps on questapi](https://questapi.firebaseapp.com/en/lua/skill/removetraps)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Research") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Research\n```\n[skill.Research on questapi](https://questapi.firebaseapp.com/en/lua/skill/research)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Riposte") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Riposte\n```\n[skill.Riposte on questapi](https://questapi.firebaseapp.com/en/lua/skill/riposte)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.RoundKick") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.RoundKick\n```\n[skill.RoundKick on questapi](https://questapi.firebaseapp.com/en/lua/skill/roundkick)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.SafeFall") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.SafeFall\n```\n[skill.SafeFall on questapi](https://questapi.firebaseapp.com/en/lua/skill/safefall)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.SenseHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.SenseHeading\n```\n[skill.SenseHeading on questapi](https://questapi.firebaseapp.com/en/lua/skill/senseheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.SenseTraps") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.SenseTraps\n```\n[skill.SenseTraps on questapi](https://questapi.firebaseapp.com/en/lua/skill/sensetraps)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Singing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Singing\n```\n[skill.Singing on questapi](https://questapi.firebaseapp.com/en/lua/skill/singing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Sneak") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Sneak\n```\n[skill.Sneak on questapi](https://questapi.firebaseapp.com/en/lua/skill/sneak)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.SpecializeAbjure") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.SpecializeAbjure\n```\n[skill.SpecializeAbjure on questapi](https://questapi.firebaseapp.com/en/lua/skill/specializeabjure)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.SpecializeAlteration") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.SpecializeAlteration\n```\n[skill.SpecializeAlteration on questapi](https://questapi.firebaseapp.com/en/lua/skill/specializealteration)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.SpecializeConjuration") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.SpecializeConjuration\n```\n[skill.SpecializeConjuration on questapi](https://questapi.firebaseapp.com/en/lua/skill/specializeconjuration)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.SpecializeDivination") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.SpecializeDivination\n```\n[skill.SpecializeDivination on questapi](https://questapi.firebaseapp.com/en/lua/skill/specializedivination)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.SpecializeEvocation") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.SpecializeEvocation\n```\n[skill.SpecializeEvocation on questapi](https://questapi.firebaseapp.com/en/lua/skill/specializeevocation)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.StringedInstruments") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.StringedInstruments\n```\n[skill.StringedInstruments on questapi](https://questapi.firebaseapp.com/en/lua/skill/stringedinstruments)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Swimming") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Swimming\n```\n[skill.Swimming on questapi](https://questapi.firebaseapp.com/en/lua/skill/swimming)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Tailoring") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Tailoring\n```\n[skill.Tailoring on questapi](https://questapi.firebaseapp.com/en/lua/skill/tailoring)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.TailRake") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.TailRake\n```\n[skill.TailRake on questapi](https://questapi.firebaseapp.com/en/lua/skill/tailrake)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Taunt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Taunt\n```\n[skill.Taunt on questapi](https://questapi.firebaseapp.com/en/lua/skill/taunt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Throwing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Throwing\n```\n[skill.Throwing on questapi](https://questapi.firebaseapp.com/en/lua/skill/throwing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.TigerClaw") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.TigerClaw\n```\n[skill.TigerClaw on questapi](https://questapi.firebaseapp.com/en/lua/skill/tigerclaw)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Tinkering") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Tinkering\n```\n[skill.Tinkering on questapi](https://questapi.firebaseapp.com/en/lua/skill/tinkering)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.Tracking") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.Tracking\n```\n[skill.Tracking on questapi](https://questapi.firebaseapp.com/en/lua/skill/tracking)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.TripleAttack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.TripleAttack\n```\n[skill.TripleAttack on questapi](https://questapi.firebaseapp.com/en/lua/skill/tripleattack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "skill.WindInstruments") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nskill.WindInstruments\n```\n[skill.WindInstruments on questapi](https://questapi.firebaseapp.com/en/lua/skill/windinstruments)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "slot") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot\n```\n[slot on questapi](https://questapi.firebaseapp.com/en/lua/slot/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Ammo") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Ammo\n```\n[slot.Ammo on questapi](https://questapi.firebaseapp.com/en/lua/slot/ammo)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Arms") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Arms\n```\n[slot.Arms on questapi](https://questapi.firebaseapp.com/en/lua/slot/arms)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Augment") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Augment\n```\n[slot.Augment on questapi](https://questapi.firebaseapp.com/en/lua/slot/augment)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.AugSocketBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.AugSocketBegin\n```\n[slot.AugSocketBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/augsocketbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.AugSocketEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.AugSocketEnd\n```\n[slot.AugSocketEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/augsocketend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.BagSlotBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.BagSlotBegin\n```\n[slot.BagSlotBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/bagslotbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.BankBagsBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.BankBagsBegin\n```\n[slot.BankBagsBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/bankbagsbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.BankBagsEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.BankBagsEnd\n```\n[slot.BankBagsEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/bankbagsend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.BankBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.BankBegin\n```\n[slot.BankBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/bankbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.BankEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.BankEnd\n```\n[slot.BankEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/bankend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Bracer1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Bracer1\n```\n[slot.Bracer1 on questapi](https://questapi.firebaseapp.com/en/lua/slot/bracer1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Bracer2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Bracer2\n```\n[slot.Bracer2 on questapi](https://questapi.firebaseapp.com/en/lua/slot/bracer2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Charm") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Charm\n```\n[slot.Charm on questapi](https://questapi.firebaseapp.com/en/lua/slot/charm)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Chest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Chest\n```\n[slot.Chest on questapi](https://questapi.firebaseapp.com/en/lua/slot/chest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Cursor") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Cursor\n```\n[slot.Cursor on questapi](https://questapi.firebaseapp.com/en/lua/slot/cursor)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.CursorBagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.CursorBagBegin\n```\n[slot.CursorBagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/cursorbagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.CursorBagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.CursorBagEnd\n```\n[slot.CursorBagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/cursorbagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.CursorEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.CursorEnd\n```\n[slot.CursorEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/cursorend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Ear1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Ear1\n```\n[slot.Ear1 on questapi](https://questapi.firebaseapp.com/en/lua/slot/ear1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Ear2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Ear2\n```\n[slot.Ear2 on questapi](https://questapi.firebaseapp.com/en/lua/slot/ear2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.EquipmentBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.EquipmentBegin\n```\n[slot.EquipmentBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/equipmentbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.EquipmentEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.EquipmentEnd\n```\n[slot.EquipmentEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/equipmentend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Face") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Face\n```\n[slot.Face on questapi](https://questapi.firebaseapp.com/en/lua/slot/face)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Feet") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Feet\n```\n[slot.Feet on questapi](https://questapi.firebaseapp.com/en/lua/slot/feet)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Finger1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Finger1\n```\n[slot.Finger1 on questapi](https://questapi.firebaseapp.com/en/lua/slot/finger1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Finger2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Finger2\n```\n[slot.Finger2 on questapi](https://questapi.firebaseapp.com/en/lua/slot/finger2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General9BagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General9BagBegin\n```\n[slot.General9BagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/general9bagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General1\n```\n[slot.General1 on questapi](https://questapi.firebaseapp.com/en/lua/slot/general1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General10") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General10\n```\n[slot.General10 on questapi](https://questapi.firebaseapp.com/en/lua/slot/general10)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General10BagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General10BagBegin\n```\n[slot.General10BagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/general10bagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General10BagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General10BagEnd\n```\n[slot.General10BagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/general10bagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General1BagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General1BagBegin\n```\n[slot.General1BagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/general1bagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General1BagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General1BagEnd\n```\n[slot.General1BagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/general1bagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General2BagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General2BagBegin\n```\n[slot.General2BagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/general2bagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General2BagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General2BagEnd\n```\n[slot.General2BagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/general2bagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General3") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General3\n```\n[slot.General3 on questapi](https://questapi.firebaseapp.com/en/lua/slot/general3)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General3BagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General3BagBegin\n```\n[slot.General3BagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/general3bagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General3BagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General3BagEnd\n```\n[slot.General3BagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/general3bagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General4") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General4\n```\n[slot.General4 on questapi](https://questapi.firebaseapp.com/en/lua/slot/general4)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General4BagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General4BagBegin\n```\n[slot.General4BagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/general4bagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General4BagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General4BagEnd\n```\n[slot.General4BagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/general4bagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General5") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General5\n```\n[slot.General5 on questapi](https://questapi.firebaseapp.com/en/lua/slot/general5)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General5BagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General5BagBegin\n```\n[slot.General5BagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/general5bagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General5BagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General5BagEnd\n```\n[slot.General5BagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/general5bagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General6") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General6\n```\n[slot.General6 on questapi](https://questapi.firebaseapp.com/en/lua/slot/general6)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General6BagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General6BagBegin\n```\n[slot.General6BagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/general6bagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General6BagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General6BagEnd\n```\n[slot.General6BagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/general6bagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General7") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General7\n```\n[slot.General7 on questapi](https://questapi.firebaseapp.com/en/lua/slot/general7)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General7BagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General7BagBegin\n```\n[slot.General7BagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/general7bagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General7BagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General7BagEnd\n```\n[slot.General7BagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/general7bagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General8") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General8\n```\n[slot.General8 on questapi](https://questapi.firebaseapp.com/en/lua/slot/general8)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General8BagBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General8BagBegin\n```\n[slot.General8BagBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/general8bagbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General8BagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General8BagEnd\n```\n[slot.General8BagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/general8bagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General9") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General9\n```\n[slot.General9 on questapi](https://questapi.firebaseapp.com/en/lua/slot/general9)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.General9BagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.General9BagEnd\n```\n[slot.General9BagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/general9bagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.GeneralBagsBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.GeneralBagsBegin\n```\n[slot.GeneralBagsBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/generalbagsbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.GeneralBagsEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.GeneralBagsEnd\n```\n[slot.GeneralBagsEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/generalbagsend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.GeneralBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.GeneralBegin\n```\n[slot.GeneralBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/generalbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.GeneralEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.GeneralEnd\n```\n[slot.GeneralEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/generalend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Hands") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Hands\n```\n[slot.Hands on questapi](https://questapi.firebaseapp.com/en/lua/slot/hands)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Head") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Head\n```\n[slot.Head on questapi](https://questapi.firebaseapp.com/en/lua/slot/head)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Invalid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Invalid\n```\n[slot.Invalid on questapi](https://questapi.firebaseapp.com/en/lua/slot/invalid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Legs") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Legs\n```\n[slot.Legs on questapi](https://questapi.firebaseapp.com/en/lua/slot/legs)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Neck") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Neck\n```\n[slot.Neck on questapi](https://questapi.firebaseapp.com/en/lua/slot/neck)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.PersonalBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.PersonalBegin\n```\n[slot.PersonalBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/personalbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.PersonalEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.PersonalEnd\n```\n[slot.PersonalEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/personalend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.PossessionsBagEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.PossessionsBagEnd\n```\n[slot.PossessionsBagEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/possessionsbagend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.PossessionsBagsBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.PossessionsBagsBegin\n```\n[slot.PossessionsBagsBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/possessionsbagsbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.PossessionsBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.PossessionsBegin\n```\n[slot.PossessionsBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/possessionsbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.PossessionsEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.PossessionsEnd\n```\n[slot.PossessionsEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/possessionsend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Powersource") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Powersource\n```\n[slot.Powersource on questapi](https://questapi.firebaseapp.com/en/lua/slot/powersource)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Primary") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Primary\n```\n[slot.Primary on questapi](https://questapi.firebaseapp.com/en/lua/slot/primary)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Range") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Range\n```\n[slot.Range on questapi](https://questapi.firebaseapp.com/en/lua/slot/range)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Ring1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Ring1\n```\n[slot.Ring1 on questapi](https://questapi.firebaseapp.com/en/lua/slot/ring1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Ring2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Ring2\n```\n[slot.Ring2 on questapi](https://questapi.firebaseapp.com/en/lua/slot/ring2)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Secondary") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Secondary\n```\n[slot.Secondary on questapi](https://questapi.firebaseapp.com/en/lua/slot/secondary)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.SharedBankBagsBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.SharedBankBagsBegin\n```\n[slot.SharedBankBagsBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/sharedbankbagsbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.SharedBankBagsEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.SharedBankBagsEnd\n```\n[slot.SharedBankBagsEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/sharedbankbagsend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.SharedBankBegin") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.SharedBankBegin\n```\n[slot.SharedBankBegin on questapi](https://questapi.firebaseapp.com/en/lua/slot/sharedbankbegin)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.SharedBankEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.SharedBankEnd\n```\n[slot.SharedBankEnd on questapi](https://questapi.firebaseapp.com/en/lua/slot/sharedbankend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Shoulder") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Shoulder\n```\n[slot.Shoulder on questapi](https://questapi.firebaseapp.com/en/lua/slot/shoulder)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Shoulders") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Shoulders\n```\n[slot.Shoulders on questapi](https://questapi.firebaseapp.com/en/lua/slot/shoulders)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Tradeskill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Tradeskill\n```\n[slot.Tradeskill on questapi](https://questapi.firebaseapp.com/en/lua/slot/tradeskill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Waist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Waist\n```\n[slot.Waist on questapi](https://questapi.firebaseapp.com/en/lua/slot/waist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Wrist1") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Wrist1\n```\n[slot.Wrist1 on questapi](https://questapi.firebaseapp.com/en/lua/slot/wrist1)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "slot.Wrist2") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nslot.Wrist2\n```\n[slot.Wrist2 on questapi](https://questapi.firebaseapp.com/en/lua/slot/wrist2)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "spawn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn\n```\n[spawn on questapi](https://questapi.firebaseapp.com/en/lua/spawn/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.CurrentNPCID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.CurrentNPCID()\n```\n[spawn.CurrentNPCID on questapi](https://questapi.firebaseapp.com/en/lua/spawn/currentnpcid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.Depop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.Depop()\n```\n[spawn.Depop on questapi](https://questapi.firebaseapp.com/en/lua/spawn/depop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.Disable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.Disable()\n```\n[spawn.Disable on questapi](https://questapi.firebaseapp.com/en/lua/spawn/disable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.Enable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.Enable()\n```\n[spawn.Enable on questapi](https://questapi.firebaseapp.com/en/lua/spawn/enable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.Enabled") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.Enabled()\n```\n[spawn.Enabled on questapi](https://questapi.firebaseapp.com/en/lua/spawn/enabled)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.ForceDespawn") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.ForceDespawn()\n```\n[spawn.ForceDespawn on questapi](https://questapi.firebaseapp.com/en/lua/spawn/forcedespawn)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.GetHeading") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.GetHeading()\n```\n[spawn.GetHeading on questapi](https://questapi.firebaseapp.com/en/lua/spawn/getheading)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.GetID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.GetID()\n```\n[spawn.GetID on questapi](https://questapi.firebaseapp.com/en/lua/spawn/getid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.GetKillCount") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.GetKillCount()\n```\n[spawn.GetKillCount on questapi](https://questapi.firebaseapp.com/en/lua/spawn/getkillcount)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.GetSpawnCondition") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.GetSpawnCondition()\n```\n[spawn.GetSpawnCondition on questapi](https://questapi.firebaseapp.com/en/lua/spawn/getspawncondition)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.GetVariance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.GetVariance()\n```\n[spawn.GetVariance on questapi](https://questapi.firebaseapp.com/en/lua/spawn/getvariance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.GetX") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.GetX()\n```\n[spawn.GetX on questapi](https://questapi.firebaseapp.com/en/lua/spawn/getx)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.GetY") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.GetY()\n```\n[spawn.GetY on questapi](https://questapi.firebaseapp.com/en/lua/spawn/gety)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.GetZ") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.GetZ()\n```\n[spawn.GetZ on questapi](https://questapi.firebaseapp.com/en/lua/spawn/getz)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.LoadGrid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.LoadGrid()\n```\n[spawn.LoadGrid on questapi](https://questapi.firebaseapp.com/en/lua/spawn/loadgrid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.NPCPointerValid") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.NPCPointerValid()\n```\n[spawn.NPCPointerValid on questapi](https://questapi.firebaseapp.com/en/lua/spawn/npcpointervalid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.Repop") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.Repop()\n```\n[spawn.Repop on questapi](https://questapi.firebaseapp.com/en/lua/spawn/repop)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.Reset") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.Reset()\n```\n[spawn.Reset on questapi](https://questapi.firebaseapp.com/en/lua/spawn/reset)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.RespawnTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.RespawnTimer()\n```\n[spawn.RespawnTimer on questapi](https://questapi.firebaseapp.com/en/lua/spawn/respawntimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.SetCurrentNPCID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.SetCurrentNPCID()\n```\n[spawn.SetCurrentNPCID on questapi](https://questapi.firebaseapp.com/en/lua/spawn/setcurrentnpcid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.SetNPCPointer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.SetNPCPointer()\n```\n[spawn.SetNPCPointer on questapi](https://questapi.firebaseapp.com/en/lua/spawn/setnpcpointer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.SetRespawnTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.SetRespawnTimer()\n```\n[spawn.SetRespawnTimer on questapi](https://questapi.firebaseapp.com/en/lua/spawn/setrespawntimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.SetTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.SetTimer()\n```\n[spawn.SetTimer on questapi](https://questapi.firebaseapp.com/en/lua/spawn/settimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.SetVariance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.SetVariance()\n```\n[spawn.SetVariance on questapi](https://questapi.firebaseapp.com/en/lua/spawn/setvariance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn.SpawnGroupID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn.SpawnGroupID()\n```\n[spawn.SpawnGroupID on questapi](https://questapi.firebaseapp.com/en/lua/spawn/spawngroupid)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "spawn_list") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn_list\n```\n[spawn_list on questapi](https://questapi.firebaseapp.com/en/lua/spawn_list/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spawn_list.Entries") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspawn_list.Entries()\n```\n[spawn_list.Entries on questapi](https://questapi.firebaseapp.com/en/lua/spawn_list/entries)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "speak_mode") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspeak_mode\n```\n[speak_mode on questapi](https://questapi.firebaseapp.com/en/lua/speak_mode/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "speak_mode.Emote") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspeak_mode.Emote\n```\n[speak_mode.Emote on questapi](https://questapi.firebaseapp.com/en/lua/speak_mode/emote)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "speak_mode.EmoteAlt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspeak_mode.EmoteAlt\n```\n[speak_mode.EmoteAlt on questapi](https://questapi.firebaseapp.com/en/lua/speak_mode/emotealt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "speak_mode.Group") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspeak_mode.Group\n```\n[speak_mode.Group on questapi](https://questapi.firebaseapp.com/en/lua/speak_mode/group)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "speak_mode.Raw") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspeak_mode.Raw\n```\n[speak_mode.Raw on questapi](https://questapi.firebaseapp.com/en/lua/speak_mode/raw)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "speak_mode.Say") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspeak_mode.Say\n```\n[speak_mode.Say on questapi](https://questapi.firebaseapp.com/en/lua/speak_mode/say)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "speak_mode.Shout") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspeak_mode.Shout\n```\n[speak_mode.Shout on questapi](https://questapi.firebaseapp.com/en/lua/speak_mode/shout)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "special_ability") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability\n```\n[special_ability on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Allow_beneficial") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Allow_beneficial\n```\n[special_ability.Allow_beneficial on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/allow_beneficial)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Allow_to_tank") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Allow_to_tank\n```\n[special_ability.Allow_to_tank on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/allow_to_tank)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Always_flee") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Always_flee\n```\n[special_ability.Always_flee on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/always_flee)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Area_rampage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Area_rampage\n```\n[special_ability.Area_rampage on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/area_rampage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Bane_attack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Bane_attack\n```\n[special_ability.Bane_attack on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/bane_attack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Casting_resist_diff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Casting_resist_diff\n```\n[special_ability.Casting_resist_diff on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/casting_resist_diff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Counter_avoid_damage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Counter_avoid_damage\n```\n[special_ability.Counter_avoid_damage on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/counter_avoid_damage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Destructible_object") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Destructible_object\n```\n[special_ability.Destructible_object on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/destructible_object)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Disable_melee") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Disable_melee\n```\n[special_ability.Disable_melee on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/disable_melee)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Dont_buff_friends") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Dont_buff_friends\n```\n[special_ability.Dont_buff_friends on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/dont_buff_friends)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Enrage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Enrage\n```\n[special_ability.Enrage on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/enrage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Flee_percent") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Flee_percent\n```\n[special_ability.Flee_percent on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/flee_percent)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Flurry") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Flurry\n```\n[special_ability.Flurry on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/flurry)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Ignore_root_aggro_rules") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Ignore_root_aggro_rules\n```\n[special_ability.Ignore_root_aggro_rules on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/ignore_root_aggro_rules)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_aggro") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_aggro\n```\n[special_ability.Immune_aggro on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_aggro)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_aggro_on") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_aggro_on\n```\n[special_ability.Immune_aggro_on on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_aggro_on)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_casting_from_range") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_casting_from_range\n```\n[special_ability.Immune_casting_from_range on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_casting_from_range)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_feign_death") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_feign_death\n```\n[special_ability.Immune_feign_death on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_feign_death)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_fleeing") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_fleeing\n```\n[special_ability.Immune_fleeing on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_fleeing)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_magic") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_magic\n```\n[special_ability.Immune_magic on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_magic)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_melee") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_melee\n```\n[special_ability.Immune_melee on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_melee)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_melee_except_bane") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_melee_except_bane\n```\n[special_ability.Immune_melee_except_bane on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_melee_except_bane)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_melee_except_magical") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_melee_except_magical\n```\n[special_ability.Immune_melee_except_magical on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_melee_except_magical)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_pacify") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_pacify\n```\n[special_ability.Immune_pacify on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_pacify)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_ranged_attacks") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_ranged_attacks\n```\n[special_ability.Immune_ranged_attacks on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_ranged_attacks)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Immune_taunt") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Immune_taunt\n```\n[special_ability.Immune_taunt on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/immune_taunt)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Innate_dual_wield") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Innate_dual_wield\n```\n[special_ability.Innate_dual_wield on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/innate_dual_wield)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Leash") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Leash\n```\n[special_ability.Leash on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/leash)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Magical_attack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Magical_attack\n```\n[special_ability.Magical_attack on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/magical_attack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.No_harm_from_client") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.No_harm_from_client\n```\n[special_ability.No_harm_from_client on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/no_harm_from_client)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Npc_chase_distance") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Npc_chase_distance\n```\n[special_ability.Npc_chase_distance on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/npc_chase_distance)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Quad_attack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Quad_attack\n```\n[special_ability.Quad_attack on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/quad_attack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Rampage") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Rampage\n```\n[special_ability.Rampage on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/rampage)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Ranged_attack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Ranged_attack\n```\n[special_ability.Ranged_attack on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/ranged_attack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Summon") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Summon\n```\n[special_ability.Summon on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/summon)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Tether") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Tether\n```\n[special_ability.Tether on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/tether)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Triple_attack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Triple_attack\n```\n[special_ability.Triple_attack on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/triple_attack)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Tunnelvision") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Tunnelvision\n```\n[special_ability.Tunnelvision on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/tunnelvision)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Uncharmable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Uncharmable\n```\n[special_ability.Uncharmable on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/uncharmable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Undispellable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Undispellable\n```\n[special_ability.Undispellable on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/undispellable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Unfearable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Unfearable\n```\n[special_ability.Unfearable on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/unfearable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Unmezable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Unmezable\n```\n[special_ability.Unmezable on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/unmezable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Unslowable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Unslowable\n```\n[special_ability.Unslowable on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/unslowable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Unsnareable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Unsnareable\n```\n[special_ability.Unsnareable on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/unsnareable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "special_ability.Unstunable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspecial_ability.Unstunable\n```\n[special_ability.Unstunable on questapi](https://questapi.firebaseapp.com/en/lua/special_ability/unstunable)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

	context.subscriptions.push(vscode.languages.registerHoverProvider('lua', {
		provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.Hover> {return new Promise<vscode.Hover>((resolve, reject) => {
			const wordRange = document.getWordRangeAtPosition(position);
            if (!wordRange) {
                return reject();
            }
			const linePrefix = document.lineAt(position).text.substr(0, position.character);
			const lineText = document.lineAt(position.line).text;
            let lineTillCurrentWord = lineText.substr(0, wordRange.end.character);
            if (lineTillCurrentWord.search(" ") > 0) {
                lineTillCurrentWord = lineTillCurrentWord.split(" ").pop()!;                
            }
			
			if (lineTillCurrentWord === "spell") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell\n```\n[spell on questapi](https://questapi.firebaseapp.com/en/lua/spell/debug)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Activated") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Activated()\n```\n[spell.Activated on questapi](https://questapi.firebaseapp.com/en/lua/spell/activated)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.AEDuration") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.AEDuration()\n```\n[spell.AEDuration on questapi](https://questapi.firebaseapp.com/en/lua/spell/aeduration)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.AEMaxTargets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.AEMaxTargets()\n```\n[spell.AEMaxTargets on questapi](https://questapi.firebaseapp.com/en/lua/spell/aemaxtargets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.AllowRest") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.AllowRest()\n```\n[spell.AllowRest on questapi](https://questapi.firebaseapp.com/en/lua/spell/allowrest)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.AoeRange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.AoeRange()\n```\n[spell.AoeRange on questapi](https://questapi.firebaseapp.com/en/lua/spell/aoerange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Base") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Base()\n```\n[spell.Base on questapi](https://questapi.firebaseapp.com/en/lua/spell/base)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.BaseDiff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.BaseDiff()\n```\n[spell.BaseDiff on questapi](https://questapi.firebaseapp.com/en/lua/spell/basediff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.BonusHate") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.BonusHate()\n```\n[spell.BonusHate on questapi](https://questapi.firebaseapp.com/en/lua/spell/bonushate)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.BuffDuration") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.BuffDuration()\n```\n[spell.BuffDuration on questapi](https://questapi.firebaseapp.com/en/lua/spell/buffduration)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.BuffdurationFormula") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.BuffdurationFormula()\n```\n[spell.BuffdurationFormula on questapi](https://questapi.firebaseapp.com/en/lua/spell/buffdurationformula)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.CanMGB") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.CanMGB()\n```\n[spell.CanMGB on questapi](https://questapi.firebaseapp.com/en/lua/spell/canmgb)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.CastingAnim") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.CastingAnim()\n```\n[spell.CastingAnim on questapi](https://questapi.firebaseapp.com/en/lua/spell/castinganim)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.CastOnOther") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.CastOnOther()\n```\n[spell.CastOnOther on questapi](https://questapi.firebaseapp.com/en/lua/spell/castonother)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.CastOnYou") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.CastOnYou()\n```\n[spell.CastOnYou on questapi](https://questapi.firebaseapp.com/en/lua/spell/castonyou)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.CastRestriction") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.CastRestriction()\n```\n[spell.CastRestriction on questapi](https://questapi.firebaseapp.com/en/lua/spell/castrestriction)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.CastTime") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.CastTime()\n```\n[spell.CastTime on questapi](https://questapi.firebaseapp.com/en/lua/spell/casttime)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Classes") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Classes()\n```\n[spell.Classes on questapi](https://questapi.firebaseapp.com/en/lua/spell/classes)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.ComponentCounts") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.ComponentCounts()\n```\n[spell.ComponentCounts on questapi](https://questapi.firebaseapp.com/en/lua/spell/componentcounts)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Components") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Components()\n```\n[spell.Components on questapi](https://questapi.firebaseapp.com/en/lua/spell/components)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.DamageShieldType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.DamageShieldType()\n```\n[spell.DamageShieldType on questapi](https://questapi.firebaseapp.com/en/lua/spell/damageshieldtype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Deities") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Deities()\n```\n[spell.Deities on questapi](https://questapi.firebaseapp.com/en/lua/spell/deities)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.DescNum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.DescNum()\n```\n[spell.DescNum on questapi](https://questapi.firebaseapp.com/en/lua/spell/descnum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.DirectionalEnd") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.DirectionalEnd()\n```\n[spell.DirectionalEnd on questapi](https://questapi.firebaseapp.com/en/lua/spell/directionalend)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.DirectionalStart") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.DirectionalStart()\n```\n[spell.DirectionalStart on questapi](https://questapi.firebaseapp.com/en/lua/spell/directionalstart)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.DisallowSit") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.DisallowSit()\n```\n[spell.DisallowSit on questapi](https://questapi.firebaseapp.com/en/lua/spell/disallowsit)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.DispelFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.DispelFlag()\n```\n[spell.DispelFlag on questapi](https://questapi.firebaseapp.com/en/lua/spell/dispelflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.EffectDescNum") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.EffectDescNum()\n```\n[spell.EffectDescNum on questapi](https://questapi.firebaseapp.com/en/lua/spell/effectdescnum)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.EffectID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.EffectID()\n```\n[spell.EffectID on questapi](https://questapi.firebaseapp.com/en/lua/spell/effectid)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.EndurCost") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.EndurCost()\n```\n[spell.EndurCost on questapi](https://questapi.firebaseapp.com/en/lua/spell/endurcost)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.EndurTimerIndex") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.EndurTimerIndex()\n```\n[spell.EndurTimerIndex on questapi](https://questapi.firebaseapp.com/en/lua/spell/endurtimerindex)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.EndurUpkeep") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.EndurUpkeep()\n```\n[spell.EndurUpkeep on questapi](https://questapi.firebaseapp.com/en/lua/spell/endurupkeep)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.EnvironmentType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.EnvironmentType()\n```\n[spell.EnvironmentType on questapi](https://questapi.firebaseapp.com/en/lua/spell/environmenttype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Formula") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Formula()\n```\n[spell.Formula on questapi](https://questapi.firebaseapp.com/en/lua/spell/formula)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.GoodEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.GoodEffect()\n```\n[spell.GoodEffect on questapi](https://questapi.firebaseapp.com/en/lua/spell/goodeffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.HateAdded") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.HateAdded()\n```\n[spell.HateAdded on questapi](https://questapi.firebaseapp.com/en/lua/spell/hateadded)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.ID") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.ID()\n```\n[spell.ID on questapi](https://questapi.firebaseapp.com/en/lua/spell/id)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.InCombat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.InCombat()\n```\n[spell.InCombat on questapi](https://questapi.firebaseapp.com/en/lua/spell/incombat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Mana") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Mana()\n```\n[spell.Mana on questapi](https://questapi.firebaseapp.com/en/lua/spell/mana)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Max") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Max()\n```\n[spell.Max on questapi](https://questapi.firebaseapp.com/en/lua/spell/max)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.MaxDist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.MaxDist()\n```\n[spell.MaxDist on questapi](https://questapi.firebaseapp.com/en/lua/spell/maxdist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.MaxDistMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.MaxDistMod()\n```\n[spell.MaxDistMod on questapi](https://questapi.firebaseapp.com/en/lua/spell/maxdistmod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.MaxResist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.MaxResist()\n```\n[spell.MaxResist on questapi](https://questapi.firebaseapp.com/en/lua/spell/maxresist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.MaxTargets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.MaxTargets()\n```\n[spell.MaxTargets on questapi](https://questapi.firebaseapp.com/en/lua/spell/maxtargets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.MinDist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.MinDist()\n```\n[spell.MinDist on questapi](https://questapi.firebaseapp.com/en/lua/spell/mindist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.MinDistMod") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.MinDistMod()\n```\n[spell.MinDistMod on questapi](https://questapi.firebaseapp.com/en/lua/spell/mindistmod)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.MinRange") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.MinRange()\n```\n[spell.MinRange on questapi](https://questapi.firebaseapp.com/en/lua/spell/minrange)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.MinResist") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.MinResist()\n```\n[spell.MinResist on questapi](https://questapi.firebaseapp.com/en/lua/spell/minresist)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Name") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Name()\n```\n[spell.Name on questapi](https://questapi.firebaseapp.com/en/lua/spell/name)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.NimbusEffect") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.NimbusEffect()\n```\n[spell.NimbusEffect on questapi](https://questapi.firebaseapp.com/en/lua/spell/nimbuseffect)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.NoexpendReagent") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.NoexpendReagent()\n```\n[spell.NoexpendReagent on questapi](https://questapi.firebaseapp.com/en/lua/spell/noexpendreagent)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.NumHits") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.NumHits()\n```\n[spell.NumHits on questapi](https://questapi.firebaseapp.com/en/lua/spell/numhits)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.OtherCasts") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.OtherCasts()\n```\n[spell.OtherCasts on questapi](https://questapi.firebaseapp.com/en/lua/spell/othercasts)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.OutOfCombat") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.OutOfCombat()\n```\n[spell.OutOfCombat on questapi](https://questapi.firebaseapp.com/en/lua/spell/outofcombat)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.PersistDeath") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.PersistDeath()\n```\n[spell.PersistDeath on questapi](https://questapi.firebaseapp.com/en/lua/spell/persistdeath)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.PowerfulFlag") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.PowerfulFlag()\n```\n[spell.PowerfulFlag on questapi](https://questapi.firebaseapp.com/en/lua/spell/powerfulflag)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.PushBack") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.PushBack()\n```\n[spell.PushBack on questapi](https://questapi.firebaseapp.com/en/lua/spell/pushback)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.PushUp") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.PushUp()\n```\n[spell.PushUp on questapi](https://questapi.firebaseapp.com/en/lua/spell/pushup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.PVPResistBase") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.PVPResistBase()\n```\n[spell.PVPResistBase on questapi](https://questapi.firebaseapp.com/en/lua/spell/pvpresistbase)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.PVPResistCalc") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.PVPResistCalc()\n```\n[spell.PVPResistCalc on questapi](https://questapi.firebaseapp.com/en/lua/spell/pvpresistcalc)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.PVPResistCap") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.PVPResistCap()\n```\n[spell.PVPResistCap on questapi](https://questapi.firebaseapp.com/en/lua/spell/pvpresistcap)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Range") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Range()\n```\n[spell.Range on questapi](https://questapi.firebaseapp.com/en/lua/spell/range)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.RecastTime") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.RecastTime()\n```\n[spell.RecastTime on questapi](https://questapi.firebaseapp.com/en/lua/spell/recasttime)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.RecourseLink") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.RecourseLink()\n```\n[spell.RecourseLink on questapi](https://questapi.firebaseapp.com/en/lua/spell/recourselink)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.RecoveryTime") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.RecoveryTime()\n```\n[spell.RecoveryTime on questapi](https://questapi.firebaseapp.com/en/lua/spell/recoverytime)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.ResistDiff") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.ResistDiff()\n```\n[spell.ResistDiff on questapi](https://questapi.firebaseapp.com/en/lua/spell/resistdiff)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.ResistType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.ResistType()\n```\n[spell.ResistType on questapi](https://questapi.firebaseapp.com/en/lua/spell/resisttype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.ShortBuffBox") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.ShortBuffBox()\n```\n[spell.ShortBuffBox on questapi](https://questapi.firebaseapp.com/en/lua/spell/shortbuffbox)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Skill") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Skill()\n```\n[spell.Skill on questapi](https://questapi.firebaseapp.com/en/lua/spell/skill)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.SpellAffectIndex") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.SpellAffectIndex()\n```\n[spell.SpellAffectIndex on questapi](https://questapi.firebaseapp.com/en/lua/spell/spellaffectindex)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.SpellCategory") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.SpellCategory()\n```\n[spell.SpellCategory on questapi](https://questapi.firebaseapp.com/en/lua/spell/spellcategory)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.SpellFades") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.SpellFades()\n```\n[spell.SpellFades on questapi](https://questapi.firebaseapp.com/en/lua/spell/spellfades)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.SpellGroup") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.SpellGroup()\n```\n[spell.SpellGroup on questapi](https://questapi.firebaseapp.com/en/lua/spell/spellgroup)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.TargetType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.TargetType()\n```\n[spell.TargetType on questapi](https://questapi.firebaseapp.com/en/lua/spell/targettype)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.TeleportZone") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.TeleportZone()\n```\n[spell.TeleportZone on questapi](https://questapi.firebaseapp.com/en/lua/spell/teleportzone)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.TimeOfDay") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.TimeOfDay()\n```\n[spell.TimeOfDay on questapi](https://questapi.firebaseapp.com/en/lua/spell/timeofday)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.Uninterruptable") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.Uninterruptable()\n```\n[spell.Uninterruptable on questapi](https://questapi.firebaseapp.com/en/lua/spell/uninterruptable)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.ViralTargets") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.ViralTargets()\n```\n[spell.ViralTargets on questapi](https://questapi.firebaseapp.com/en/lua/spell/viraltargets)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.ViralTimer") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.ViralTimer()\n```\n[spell.ViralTimer on questapi](https://questapi.firebaseapp.com/en/lua/spell/viraltimer)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.YouCast") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.YouCast()\n```\n[spell.YouCast on questapi](https://questapi.firebaseapp.com/en/lua/spell/youcast)\n\n"), wordRange));
            }
			
			if (lineTillCurrentWord === "spell.ZoneType") {
				return resolve(new vscode.Hover(new vscode.MarkdownString("```lua\nspell.ZoneType()\n```\n[spell.ZoneType on questapi](https://questapi.firebaseapp.com/en/lua/spell/zonetype)\n\n"), wordRange));
            }
			

			//return resolve(new vscode.Hover(new vscode.MarkdownString("unknown: "+lineTillCurrentWord), wordRange));
            return reject();
		});}
	}));
	

}
